

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Mar 06 14:22:35 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1526
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	idataBANK5,global,class=CODE,delta=2
     9                           	psect	stringtext1,global,class=STRCODE,delta=2
    10                           	psect	stringtext2,global,class=STRCODE,delta=2
    11                           	psect	stringtext3,global,class=STRCODE,delta=2
    12                           	psect	stringtext4,global,class=STRCODE,delta=2
    13                           	psect	stringtext5,global,class=STRCODE,delta=2
    14                           	psect	stringtext6,global,class=STRCODE,delta=2
    15                           	psect	stringtext7,global,class=STRCODE,delta=2
    16                           	psect	stringtext8,global,class=STRCODE,delta=2
    17                           	psect	stringtext9,global,class=STRCODE,delta=2
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    23                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    26                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    27                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    28                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    29                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    30                           	psect	inittext,global,class=CODE,delta=2
    31                           	psect	clrtext,global,class=CODE,delta=2
    32                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    33                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    34                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    35                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    36                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    37                           	psect	swtext1,local,class=CONST,delta=2
    38                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text6,local,class=CODE,merge=1,delta=2
    44                           	psect	text7,local,class=CODE,merge=1,delta=2
    45                           	psect	text8,local,class=CODE,merge=1,delta=2
    46                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text14,local,class=CODE,merge=1,delta=2
    52                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text16,local,class=CODE,merge=1,delta=2
    54                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text18,local,class=CODE,merge=1,delta=2
    56                           	psect	text19,local,class=CODE,merge=1,delta=2
    57                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text29,local,class=CODE,merge=1,delta=2
    67                           	psect	text30,local,class=CODE,merge=1,delta=2
    68                           	psect	text31,local,class=CODE,merge=1,delta=2
    69                           	psect	text32,local,class=CODE,merge=1,delta=2
    70                           	psect	text33,local,class=CODE,merge=1,delta=2
    71                           	psect	text34,local,class=CODE,merge=1,delta=2
    72                           	psect	text35,local,class=CODE,merge=1,delta=2
    73                           	psect	text36,local,class=CODE,merge=1,delta=2
    74                           	psect	text37,local,class=CODE,merge=1,delta=2
    75                           	psect	text38,local,class=CODE,merge=1,delta=2
    76                           	psect	text39,local,class=CODE,merge=1,delta=2
    77                           	psect	text40,local,class=CODE,merge=1,delta=2
    78                           	psect	text41,local,class=CODE,merge=1,delta=2
    79                           	psect	text42,local,class=CODE,merge=1,delta=2
    80                           	psect	text43,local,class=CODE,merge=1,delta=2
    81                           	psect	text44,local,class=CODE,merge=1,delta=2
    82                           	psect	text45,local,class=CODE,merge=1,delta=2
    83                           	psect	text46,local,class=CODE,merge=1,delta=2
    84                           	psect	text47,local,class=CODE,merge=1,delta=2
    85                           	psect	text48,local,class=CODE,merge=1,delta=2
    86                           	psect	text49,local,class=CODE,merge=1,delta=2
    87                           	psect	intentry,global,class=CODE,delta=2
    88                           	psect	text51,local,class=CODE,merge=1,delta=2
    89                           	dabs	1,0x7E,2
    90  0000                     
    91                           ; Version 1.45
    92                           ; Generated 16/11/2017 GMT
    93                           ; 
    94                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    95                           ; All rights reserved.
    96                           ; 
    97                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    98                           ; 
    99                           ; Redistribution and use in source and binary forms, with or without modification, are
   100                           ; permitted provided that the following conditions are met:
   101                           ; 
   102                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   103                           ;        conditions and the following disclaimer.
   104                           ; 
   105                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   106                           ;        of conditions and the following disclaimer in the documentation and/or other
   107                           ;        materials provided with the distribution.
   108                           ; 
   109                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   110                           ;        software without specific prior written permission.
   111                           ; 
   112                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   113                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   114                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   115                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   116                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   117                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   118                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   119                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   120                           ; 
   121                           ; 
   122                           ; Code-generator required, PIC16F1526 Definitions
   123                           ; 
   124                           ; SFR Addresses
   125  0000                     	;# 
   126  0001                     	;# 
   127  0002                     	;# 
   128  0003                     	;# 
   129  0004                     	;# 
   130  0005                     	;# 
   131  0006                     	;# 
   132  0007                     	;# 
   133  0008                     	;# 
   134  0009                     	;# 
   135  000A                     	;# 
   136  000B                     	;# 
   137  000C                     	;# 
   138  000D                     	;# 
   139  000E                     	;# 
   140  000F                     	;# 
   141  0010                     	;# 
   142  0011                     	;# 
   143  0012                     	;# 
   144  0013                     	;# 
   145  0014                     	;# 
   146  0015                     	;# 
   147  0016                     	;# 
   148  0016                     	;# 
   149  0017                     	;# 
   150  0018                     	;# 
   151  0019                     	;# 
   152  001A                     	;# 
   153  001B                     	;# 
   154  001C                     	;# 
   155  008C                     	;# 
   156  008D                     	;# 
   157  008E                     	;# 
   158  008F                     	;# 
   159  0090                     	;# 
   160  0091                     	;# 
   161  0092                     	;# 
   162  0093                     	;# 
   163  0094                     	;# 
   164  0095                     	;# 
   165  0096                     	;# 
   166  0097                     	;# 
   167  0099                     	;# 
   168  009A                     	;# 
   169  009B                     	;# 
   170  009B                     	;# 
   171  009C                     	;# 
   172  009D                     	;# 
   173  009E                     	;# 
   174  010C                     	;# 
   175  010D                     	;# 
   176  010E                     	;# 
   177  010F                     	;# 
   178  0110                     	;# 
   179  0116                     	;# 
   180  0117                     	;# 
   181  011D                     	;# 
   182  018C                     	;# 
   183  018D                     	;# 
   184  018F                     	;# 
   185  0190                     	;# 
   186  0191                     	;# 
   187  0191                     	;# 
   188  0192                     	;# 
   189  0193                     	;# 
   190  0193                     	;# 
   191  0194                     	;# 
   192  0195                     	;# 
   193  0196                     	;# 
   194  0197                     	;# 
   195  0199                     	;# 
   196  0199                     	;# 
   197  0199                     	;# 
   198  019A                     	;# 
   199  019A                     	;# 
   200  019A                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019B                     	;# 
   205  019B                     	;# 
   206  019C                     	;# 
   207  019C                     	;# 
   208  019C                     	;# 
   209  019D                     	;# 
   210  019D                     	;# 
   211  019D                     	;# 
   212  019E                     	;# 
   213  019E                     	;# 
   214  019E                     	;# 
   215  019F                     	;# 
   216  019F                     	;# 
   217  019F                     	;# 
   218  020D                     	;# 
   219  020F                     	;# 
   220  0210                     	;# 
   221  0211                     	;# 
   222  0211                     	;# 
   223  0212                     	;# 
   224  0212                     	;# 
   225  0213                     	;# 
   226  0213                     	;# 
   227  0214                     	;# 
   228  0214                     	;# 
   229  0215                     	;# 
   230  0215                     	;# 
   231  0215                     	;# 
   232  0216                     	;# 
   233  0216                     	;# 
   234  0217                     	;# 
   235  0217                     	;# 
   236  0219                     	;# 
   237  021A                     	;# 
   238  021B                     	;# 
   239  021C                     	;# 
   240  021D                     	;# 
   241  021E                     	;# 
   242  021F                     	;# 
   243  028C                     	;# 
   244  028D                     	;# 
   245  0291                     	;# 
   246  0291                     	;# 
   247  0292                     	;# 
   248  0293                     	;# 
   249  0298                     	;# 
   250  0298                     	;# 
   251  0299                     	;# 
   252  029A                     	;# 
   253  029D                     	;# 
   254  029E                     	;# 
   255  029F                     	;# 
   256  030C                     	;# 
   257  030D                     	;# 
   258  0311                     	;# 
   259  0311                     	;# 
   260  0312                     	;# 
   261  0313                     	;# 
   262  0318                     	;# 
   263  0318                     	;# 
   264  0319                     	;# 
   265  031A                     	;# 
   266  031C                     	;# 
   267  031C                     	;# 
   268  031D                     	;# 
   269  031E                     	;# 
   270  038C                     	;# 
   271  038D                     	;# 
   272  0394                     	;# 
   273  0395                     	;# 
   274  0396                     	;# 
   275  040C                     	;# 
   276  040D                     	;# 
   277  0411                     	;# 
   278  0411                     	;# 
   279  0412                     	;# 
   280  0413                     	;# 
   281  0414                     	;# 
   282  0415                     	;# 
   283  0416                     	;# 
   284  0417                     	;# 
   285  0418                     	;# 
   286  0418                     	;# 
   287  0419                     	;# 
   288  041A                     	;# 
   289  041B                     	;# 
   290  041C                     	;# 
   291  041D                     	;# 
   292  041E                     	;# 
   293  048D                     	;# 
   294  0491                     	;# 
   295  0491                     	;# 
   296  0492                     	;# 
   297  0492                     	;# 
   298  0493                     	;# 
   299  0493                     	;# 
   300  0493                     	;# 
   301  0494                     	;# 
   302  0494                     	;# 
   303  0495                     	;# 
   304  0495                     	;# 
   305  0496                     	;# 
   306  0496                     	;# 
   307  0497                     	;# 
   308  0497                     	;# 
   309  0595                     	;# 
   310  0596                     	;# 
   311  0597                     	;# 
   312  059C                     	;# 
   313  059D                     	;# 
   314  059E                     	;# 
   315  0611                     	;# 
   316  0611                     	;# 
   317  0612                     	;# 
   318  0613                     	;# 
   319  0614                     	;# 
   320  0614                     	;# 
   321  0615                     	;# 
   322  0616                     	;# 
   323  0617                     	;# 
   324  0617                     	;# 
   325  0618                     	;# 
   326  0619                     	;# 
   327  061A                     	;# 
   328  061A                     	;# 
   329  061B                     	;# 
   330  061C                     	;# 
   331  061D                     	;# 
   332  061D                     	;# 
   333  061E                     	;# 
   334  061F                     	;# 
   335  0FE4                     	;# 
   336  0FE5                     	;# 
   337  0FE6                     	;# 
   338  0FE7                     	;# 
   339  0FE8                     	;# 
   340  0FE9                     	;# 
   341  0FEA                     	;# 
   342  0FEB                     	;# 
   343  0FED                     	;# 
   344  0FEE                     	;# 
   345  0FEF                     	;# 
   346                           
   347                           	psect	idataBANK1
   348  07FF                     __pidataBANK1:	
   349                           
   350                           ;initializer for _charchildLock
   351  07FF  3430               	retlw	48
   352                           
   353                           	psect	idataBANK2
   354  07F2                     __pidataBANK2:	
   355                           
   356                           ;initializer for applianceControl@F3974
   357  07F2  3423               	retlw	35
   358  07F3  3400               	retlw	0
   359                           
   360                           ;initializer for applianceControl@F3972
   361  07F4  3423               	retlw	35
   362  07F5  3400               	retlw	0
   363                           
   364                           ;initializer for _charSwitchState
   365  07F6  3430               	retlw	48
   366                           
   367                           ;initializer for _levelofGreenLed_LSB
   368  07F7  3430               	retlw	48
   369                           
   370                           ;initializer for _levelofGreenLed_MSB
   371  07F8  3430               	retlw	48
   372                           
   373                           ;initializer for _levelofRedLed_LSB
   374  07F9  3430               	retlw	48
   375                           
   376                           ;initializer for _levelofRedLed_MSB
   377  07FA  3430               	retlw	48
   378                           
   379                           ;initializer for _levelofBlueLed_LSB
   380  07FB  3430               	retlw	48
   381                           
   382                           ;initializer for _levelofBlueLed_MSB
   383  07FC  3430               	retlw	48
   384                           
   385                           ;initializer for _levelofDimmer_LSB
   386  07FD  3430               	retlw	48
   387                           
   388                           ;initializer for _levelofDimmer_MSB
   389  07FE  3430               	retlw	48
   390                           
   391                           	psect	idataBANK3
   392  1172                     __pidataBANK3:	
   393                           
   394                           ;initializer for _copy_parentalLockBuffer
   395  1172  3430               	retlw	48
   396  1173  3430               	retlw	48
   397  1174  3430               	retlw	48
   398  1175  3430               	retlw	48
   399  1176  3430               	retlw	48
   400  1177  3430               	retlw	48
   401  1178  3430               	retlw	48
   402  1179  3430               	retlw	48
   403  117A  3430               	retlw	48
   404  117B  3430               	retlw	48
   405  117C  3430               	retlw	48
   406  117D  3430               	retlw	48
   407  117E  3400               	retlw	0
   408  117F  3400               	retlw	0
   409                           
   410                           ;initializer for _tempReceivedDataBuffer
   411  1180  3423               	retlw	35
   412  1181  3400               	retlw	0
   413  1182  3400               	retlw	0
   414  1183  3400               	retlw	0
   415  1184  3400               	retlw	0
   416  1185  3400               	retlw	0
   417  1186  3400               	retlw	0
   418  1187  3400               	retlw	0
   419  1188  3400               	retlw	0
   420  1189  3400               	retlw	0
   421                           
   422                           ;initializer for _ErrorNames
   423  118A  3423               	retlw	35
   424  118B  3423               	retlw	35
   425  118C  3423               	retlw	35
   426  118D  3423               	retlw	35
   427  118E  3400               	retlw	0
   428                           
   429                           	psect	idataBANK4
   430  11CE                     __pidataBANK4:	
   431                           
   432                           ;initializer for _parentalLockBuffer
   433  11CE  3430               	retlw	48
   434  11CF  3430               	retlw	48
   435  11D0  3430               	retlw	48
   436  11D1  3430               	retlw	48
   437  11D2  3430               	retlw	48
   438  11D3  3430               	retlw	48
   439  11D4  3430               	retlw	48
   440  11D5  3430               	retlw	48
   441  11D6  3430               	retlw	48
   442  11D7  3430               	retlw	48
   443  11D8  3430               	retlw	48
   444  11D9  3430               	retlw	48
   445  11DA  3400               	retlw	0
   446  11DB  3400               	retlw	0
   447                           
   448                           ;initializer for _mainReceivedDataBuffer
   449  11DC  3423               	retlw	35
   450  11DD  3400               	retlw	0
   451  11DE  3400               	retlw	0
   452  11DF  3400               	retlw	0
   453  11E0  3400               	retlw	0
   454  11E1  3400               	retlw	0
   455  11E2  3400               	retlw	0
   456  11E3  3400               	retlw	0
   457  11E4  3400               	retlw	0
   458  11E5  3400               	retlw	0
   459  11E6  3400               	retlw	0
   460  11E7  3400               	retlw	0
   461  11E8  3400               	retlw	0
   462  11E9  3400               	retlw	0
   463  11EA  3400               	retlw	0
   464  11EB  3400               	retlw	0
   465  11EC  3400               	retlw	0
   466  11ED  3400               	retlw	0
   467                           
   468                           	psect	idataBANK5
   469  0804                     __pidataBANK5:	
   470                           
   471                           ;initializer for _currentStateBuffer
   472  0804  3423               	retlw	35
   473  0805  3400               	retlw	0
   474  0806  3400               	retlw	0
   475  0807  3400               	retlw	0
   476  0808  3400               	retlw	0
   477  0809  3400               	retlw	0
   478  080A  3400               	retlw	0
   479  080B  3400               	retlw	0
   480  080C  3400               	retlw	0
   481  080D  3400               	retlw	0
   482  080E  3400               	retlw	0
   483  080F  3400               	retlw	0
   484  0810  3400               	retlw	0
   485  0811  3400               	retlw	0
   486  0812  3400               	retlw	0
   487  0813  3400               	retlw	0
   488  0814  3400               	retlw	0
   489  0815  3400               	retlw	0
   490  0816  3400               	retlw	0
   491  0817  3400               	retlw	0
   492  0818  3400               	retlw	0
   493  0819  3400               	retlw	0
   494  081A  3400               	retlw	0
   495  081B  3400               	retlw	0
   496  081C  3400               	retlw	0
   497  081D  3400               	retlw	0
   498  081E  3400               	retlw	0
   499  081F  3400               	retlw	0
   500  0820  3400               	retlw	0
   501  0821  3400               	retlw	0
   502  0822  3400               	retlw	0
   503  0823  3400               	retlw	0
   504  0824  3400               	retlw	0
   505  0825  3400               	retlw	0
   506  0826  3400               	retlw	0
   507  0827  3400               	retlw	0
   508  0828  3400               	retlw	0
   509  0829  3400               	retlw	0
   510  082A  3400               	retlw	0
   511  082B  3400               	retlw	0
   512  082C  3400               	retlw	0
   513  082D  3400               	retlw	0
   514  082E  3400               	retlw	0
   515  082F  3400               	retlw	0
   516  0830  3400               	retlw	0
   517  0831  3400               	retlw	0
   518  0832  3400               	retlw	0
   519  0833  3400               	retlw	0
   520  0834  3400               	retlw	0
   521  0835  3400               	retlw	0
   522  0836  3400               	retlw	0
   523  0837  3400               	retlw	0
   524  0838  3400               	retlw	0
   525  0839  3400               	retlw	0
   526  083A  3400               	retlw	0
   527  083B  3400               	retlw	0
   528  083C  3400               	retlw	0
   529  083D  3400               	retlw	0
   530                           
   531                           	psect	stringtext1
   532  1800                     __pstringtext1:	
   533  1800                     _hexpowers:	
   534  1800  3401               	retlw	1
   535  1801  3400               	retlw	0
   536  1802  3410               	retlw	16
   537  1803  3400               	retlw	0
   538  1804  3400               	retlw	0
   539  1805  3401               	retlw	1
   540  1806  3400               	retlw	0
   541  1807  3410               	retlw	16
   542  1808                     __end_of_hexpowers:	
   543  001A                     _TMR2	set	26
   544  001C                     _T2CON	set	28
   545  0019                     _T1GCON	set	25
   546  0018                     _T1CON	set	24
   547  000D                     _PORTBbits	set	13
   548  0016                     _TMR1L	set	22
   549  0017                     _TMR1H	set	23
   550  0014                     _PIR4bits	set	20
   551  0013                     _PIR3bits	set	19
   552  0018                     _T1CONbits	set	24
   553  001B                     _PR2	set	27
   554  001C                     _T2CONbits	set	28
   555  0011                     _PIR1bits	set	17
   556  0012                     _PIR2bits	set	18
   557  000F                     _PORTDbits	set	15
   558  0010                     _PORTEbits	set	16
   559  005E                     _PEIE	set	94
   560  005F                     _GIE	set	95
   561  00A2                     _CCP7IF	set	162
   562  00A3                     _CCP8IF	set	163
   563  00A6                     _CCP9IF	set	166
   564  00A7                     _CCP10IF	set	167
   565  008D                     _RC1IF	set	141
   566  0094                     _PIE4bits	set	148
   567  008E                     _TRISCbits	set	142
   568  0090                     _TRISEbits	set	144
   569  008D                     _TRISBbits	set	141
   570  008F                     _TRISDbits	set	143
   571  0093                     _PIE3bits	set	147
   572  0091                     _PIE1bits	set	145
   573  0092                     _PIE2bits	set	146
   574  018C                     _ANSELA	set	396
   575  018D                     _ANSELB	set	397
   576  018F                     _ANSELD	set	399
   577  0190                     _ANSELE	set	400
   578  019E                     _TX1STAbits	set	414
   579  019C                     _SP1BRGH	set	412
   580  019B                     _SP1BRGL	set	411
   581  019E                     _TX1STA	set	414
   582  019D                     _RC1STA	set	413
   583  019F                     _BAUD1CON	set	415
   584  019A                     _TX1REG	set	410
   585  0199                     _RC1REG	set	409
   586  019D                     _RC1STAbits	set	413
   587  020D                     _WPUB	set	525
   588  020F                     _WPUD	set	527
   589  0210                     _WPUE	set	528
   590  028C                     _PORTFbits	set	652
   591  028D                     _PORTGbits	set	653
   592  030C                     _TRISFbits	set	780
   593  030D                     _TRISGbits	set	781
   594  040C                     _ANSELF	set	1036
   595  040D                     _ANSELG	set	1037
   596  041C                     _TMR6	set	1052
   597  041E                     _T6CON	set	1054
   598  0415                     _TMR4	set	1045
   599  0417                     _T4CON	set	1047
   600  041B                     _T5GCON	set	1051
   601  041A                     _T5CON	set	1050
   602  0414                     _T3GCON	set	1044
   603  0413                     _T3CON	set	1043
   604  0418                     _TMR5L	set	1048
   605  0419                     _TMR5H	set	1049
   606  0411                     _TMR3L	set	1041
   607  0412                     _TMR3H	set	1042
   608  041A                     _T5CONbits	set	1050
   609  041D                     _PR6	set	1053
   610  041E                     _T6CONbits	set	1054
   611  0413                     _T3CONbits	set	1043
   612  0416                     _PR4	set	1046
   613  0417                     _T4CONbits	set	1047
   614  048D                     _WPUG	set	1165
   615  059C                     _TMR10	set	1436
   616  059E                     _T10CON	set	1438
   617  0595                     _TMR8	set	1429
   618  0597                     _T8CON	set	1431
   619  0596                     _PR8	set	1430
   620  059D                     _PR10	set	1437
   621  0597                     _T8CONbits	set	1431
   622  059E                     _T10CONbits	set	1438
   623  0617                     _CCPR8L	set	1559
   624  0618                     _CCPR8H	set	1560
   625  0614                     _CCPR7L	set	1556
   626  0615                     _CCPR7H	set	1557
   627  0616                     _CCP7CON	set	1558
   628  061D                     _CCPR10L	set	1565
   629  061E                     _CCPR10H	set	1566
   630  061F                     _CCP10CON	set	1567
   631  061A                     _CCPR9L	set	1562
   632  061B                     _CCPR9H	set	1563
   633  061C                     _CCP9CON	set	1564
   634  1808                     STR_20:	
   635  1808  3430               	retlw	48	;'0'
   636  1809  3431               	retlw	49	;'1'
   637  180A  3432               	retlw	50	;'2'
   638  180B  3433               	retlw	51	;'3'
   639  180C  3434               	retlw	52	;'4'
   640  180D  3435               	retlw	53	;'5'
   641  180E  3436               	retlw	54	;'6'
   642  180F  3437               	retlw	55	;'7'
   643  1810  3438               	retlw	56	;'8'
   644  1811  3439               	retlw	57	;'9'
   645  1812  3441               	retlw	65	;'A'
   646  1813  3442               	retlw	66	;'B'
   647  1814  3443               	retlw	67	;'C'
   648  1815  3444               	retlw	68	;'D'
   649  1816  3445               	retlw	69	;'E'
   650  1817  3446               	retlw	70	;'F'
   651  1818  3400               	retlw	0
   652                           
   653                           	psect	stringtext2
   654  1819                     __pstringtext2:	
   655  1819                     STR_4:	
   656  1819  3441               	retlw	65	;'A'
   657  181A  3443               	retlw	67	;'C'
   658  181B  3454               	retlw	84	;'T'
   659  181C  3441               	retlw	65	;'A'
   660  181D  3443               	retlw	67	;'C'
   661  181E  344B               	retlw	75	;'K'
   662  181F  3400               	retlw	0
   663                           
   664                           	psect	stringtext3
   665  1820                     __pstringtext3:	
   666  1820                     STR_19:	
   667  1820  3445               	retlw	69	;'E'
   668  1821  3452               	retlw	82	;'R'
   669  1822  344C               	retlw	76	;'L'
   670  1823  3453               	retlw	83	;'S'
   671  1824  3400               	retlw	0
   672                           
   673                           	psect	stringtext4
   674  1825                     __pstringtext4:	
   675  1825                     STR_14:	
   676  1825  3445               	retlw	69	;'E'
   677  1826  3452               	retlw	82	;'R'
   678  1827  344F               	retlw	79	;'O'
   679  1828  3456               	retlw	86	;'V'
   680  1829  3400               	retlw	0
   681                           
   682                           	psect	stringtext5
   683  182A                     __pstringtext5:	
   684  182A                     STR_15:	
   685  182A  3445               	retlw	69	;'E'
   686  182B  3452               	retlw	82	;'R'
   687  182C  3452               	retlw	82	;'R'
   688  182D  3458               	retlw	88	;'X'
   689  182E  3400               	retlw	0
   690                           
   691                           	psect	stringtext6
   692  182F                     __pstringtext6:	
   693  182F                     STR_17:	
   694  182F  3452               	retlw	82	;'R'
   695  1830  3447               	retlw	71	;'G'
   696  1831  3442               	retlw	66	;'B'
   697  1832  3400               	retlw	0
   698                           
   699                           	psect	stringtext7
   700  1833                     __pstringtext7:	
   701  1833                     STR_1:	
   702  1833  3425               	retlw	37	;'%'
   703  1834  3458               	retlw	88	;'X'
   704  1835  3400               	retlw	0
   705                           
   706                           	psect	stringtext8
   707  1836                     __pstringtext8:	
   708  1836                     STR_2:	
   709  1836  342E               	retlw	46	;'.'
   710  1837  3400               	retlw	0
   711                           
   712                           	psect	stringtext9
   713  0000                     __pstringtext9:	
   714  1836                     
   715                           ; #config settings
   716  0000                     
   717                           	psect	cinit
   718  0129                     start_initialization:	
   719  0129                     __initialization:	
   720                           
   721                           ; Initialize objects allocated to BANK1
   722  0129  0021               	movlb	1	; select bank1
   723  012A  3187  27FF  3181   	fcall	__pidataBANK1	;fetch initializer
   724  012D  00EF               	movwf	__pdataBANK1& (0+127)
   725                           
   726                           ; Initialize objects allocated to BANK2
   727  012E  30F2               	movlw	low __pidataBANK2
   728  012F  0084               	movwf	4
   729  0130  3087               	movlw	(high __pidataBANK2)| (0+128)
   730  0131  0085               	movwf	5
   731  0132  3062               	movlw	low __pdataBANK2
   732  0133  0086               	movwf	6
   733  0134  3001               	movlw	high __pdataBANK2
   734  0135  0087               	movwf	7
   735  0136  300D               	movlw	13
   736  0137  319F  27B7  3181   	fcall	init_ram
   737                           
   738                           ; Initialize objects allocated to BANK3
   739  013A  3072               	movlw	low __pidataBANK3
   740  013B  0084               	movwf	4
   741  013C  3091               	movlw	(high __pidataBANK3)| (0+128)
   742  013D  0085               	movwf	5
   743  013E  30CC               	movlw	low __pdataBANK3
   744  013F  0086               	movwf	6
   745  0140  3001               	movlw	high __pdataBANK3
   746  0141  0087               	movwf	7
   747  0142  301D               	movlw	29
   748  0143  319F  27B7  3181   	fcall	init_ram
   749                           
   750                           ; Initialize objects allocated to BANK4
   751  0146  30CE               	movlw	low __pidataBANK4
   752  0147  0084               	movwf	4
   753  0148  3091               	movlw	(high __pidataBANK4)| (0+128)
   754  0149  0085               	movwf	5
   755  014A  304E               	movlw	low __pdataBANK4
   756  014B  0086               	movwf	6
   757  014C  3002               	movlw	high __pdataBANK4
   758  014D  0087               	movwf	7
   759  014E  3020               	movlw	32
   760  014F  319F  27B7  3181   	fcall	init_ram
   761                           
   762                           ; Initialize objects allocated to BANK5
   763  0152  3004               	movlw	low __pidataBANK5
   764  0153  0084               	movwf	4
   765  0154  3088               	movlw	(high __pidataBANK5)| (0+128)
   766  0155  0085               	movwf	5
   767  0156  30A0               	movlw	low __pdataBANK5
   768  0157  0086               	movwf	6
   769  0158  3002               	movlw	high __pdataBANK5
   770  0159  0087               	movwf	7
   771  015A  303A               	movlw	58
   772  015B  319F  27B7  3181   	fcall	init_ram
   773                           
   774                           ; Clear objects allocated to COMMON
   775  015E  01F0               	clrf	__pbssCOMMON& (0+127)
   776  015F  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   777  0160  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   778  0161  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   779  0162  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   780                           
   781                           ; Clear objects allocated to BANK0
   782  0163  3061               	movlw	low __pbssBANK0
   783  0164  0084               	movwf	4
   784  0165  3000               	movlw	high __pbssBANK0
   785  0166  0085               	movwf	5
   786  0167  3009               	movlw	9
   787  0168  319F  27B1  3181   	fcall	clear_ram0
   788                           
   789                           ; Clear objects allocated to BANK1
   790  016B  01EB               	clrf	__pbssBANK1& (0+127)
   791  016C  01EC               	clrf	(__pbssBANK1+1)& (0+127)
   792  016D  01ED               	clrf	(__pbssBANK1+2)& (0+127)
   793  016E  01EE               	clrf	(__pbssBANK1+3)& (0+127)
   794                           
   795                           ; Clear objects allocated to BANK2
   796  016F  3020               	movlw	low __pbssBANK2
   797  0170  0084               	movwf	4
   798  0171  3001               	movlw	high __pbssBANK2
   799  0172  0085               	movwf	5
   800  0173  3042               	movlw	66
   801  0174  319F  27B1  3181   	fcall	clear_ram0
   802                           
   803                           ; Clear objects allocated to BANK3
   804  0177  30A0               	movlw	low __pbssBANK3
   805  0178  0084               	movwf	4
   806  0179  3001               	movlw	high __pbssBANK3
   807  017A  0085               	movwf	5
   808  017B  302C               	movlw	44
   809  017C  319F  27B1  3181   	fcall	clear_ram0
   810                           
   811                           ; Clear objects allocated to BANK4
   812  017F  3020               	movlw	low __pbssBANK4
   813  0180  0084               	movwf	4
   814  0181  3002               	movlw	high __pbssBANK4
   815  0182  0085               	movwf	5
   816  0183  302E               	movlw	46
   817  0184  319F  27B1         	fcall	clear_ram0
   818  0186                     end_of_initialization:	
   819                           ;End of C runtime variable initialization code
   820                           
   821  0186                     __end_of__initialization:	
   822  0186  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   823  0187  0020               	movlb	0
   824  0188  318A  2AEE         	ljmp	_main	;jump to C main() function
   825                           
   826                           	psect	bssCOMMON
   827  0070                     __pbssCOMMON:	
   828  0070                     _mainReceivedDataPosition:	
   829  0070                     	ds	2
   830  0072                     _SwitchStatusString:	
   831  0072                     	ds	1
   832  0073                     _SwitchNumberString:	
   833  0073                     	ds	1
   834  0074                     _SwitchStatusBuffer:	
   835  0074                     	ds	1
   836                           
   837                           	psect	bssBANK0
   838  0061                     __pbssBANK0:	
   839  0061                     strtok@sp:	
   840  0061                     	ds	1
   841  0062                     _ChildLockString:	
   842  0062                     	ds	1
   843  0063                     _AllColorIntensityString:	
   844  0063                     	ds	1
   845  0064                     _BlueColorIntensityString:	
   846  0064                     	ds	1
   847  0065                     _GreenColorIntensityString:	
   848  0065                     	ds	1
   849  0066                     _RedColorIntensityString:	
   850  0066                     	ds	1
   851  0067                     _ModuleNameString:	
   852  0067                     	ds	1
   853  0068                     _token:	
   854  0068                     	ds	1
   855  0069                     _ConvertmaindataReceiveIntoString:	
   856  0069                     	ds	1
   857                           
   858                           	psect	bssBANK1
   859  00EB                     __pbssBANK1:	
   860  00EB                     _IntegerGreenColorIntensity:	
   861  00EB                     	ds	2
   862  00ED                     _IntergerRedColorIntensity:	
   863  00ED                     	ds	2
   864                           
   865                           	psect	dataBANK1
   866  00EF                     __pdataBANK1:	
   867  00EF                     _charchildLock:	
   868  00EF                     	ds	1
   869                           
   870                           	psect	bssBANK2
   871  0120                     __pbssBANK2:	
   872  0120                     _M9:	
   873  0120                     	ds	2
   874  0122                     _M8:	
   875  0122                     	ds	2
   876  0124                     _M7:	
   877  0124                     	ds	2
   878  0126                     _M6:	
   879  0126                     	ds	2
   880  0128                     _M5:	
   881  0128                     	ds	2
   882  012A                     _M4:	
   883  012A                     	ds	2
   884  012C                     _M3:	
   885  012C                     	ds	2
   886  012E                     _M2:	
   887  012E                     	ds	2
   888  0130                     _M1:	
   889  0130                     	ds	2
   890  0132                     _IntegerChildLock:	
   891  0132                     	ds	2
   892  0134                     _IntegerBlueColorIntensity:	
   893  0134                     	ds	2
   894  0136                     _IntergerSwitchStatus:	
   895  0136                     	ds	2
   896  0138                     _IntegerSwitchNumber:	
   897  0138                     	ds	2
   898  013A                     _partCounter:	
   899  013A                     	ds	2
   900  013C                     _Timer5L:	
   901  013C                     	ds	2
   902  013E                     _Timer5H:	
   903  013E                     	ds	2
   904  0140                     _Timer3L:	
   905  0140                     	ds	2
   906  0142                     _Timer3H:	
   907  0142                     	ds	2
   908  0144                     _Timer1L:	
   909  0144                     	ds	2
   910  0146                     _Timer1H:	
   911  0146                     	ds	2
   912  0148                     _start_PWM_Generation_For_BlueLed:	
   913  0148                     	ds	2
   914  014A                     _start_PWM_Generation_For_GreenLed:	
   915  014A                     	ds	2
   916  014C                     _start_PWM_Generation_For_RedLed:	
   917  014C                     	ds	2
   918  014E                     _start_PWM_Generation_For_DIMMER:	
   919  014E                     	ds	2
   920  0150                     _mainDataReceived:	
   921  0150                     	ds	2
   922  0152                     _GreenColorIntensityBuffer:	
   923  0152                     	ds	2
   924  0154                     _RedColorIntensityBuffer:	
   925  0154                     	ds	2
   926  0156                     _SwitchNumberBuffer:	
   927  0156                     	ds	2
   928  0158                     _StopBitStringbufer:	
   929  0158                     	ds	1
   930  0159                     _StopBitString:	
   931  0159                     	ds	1
   932  015A                     _FinalframebitString:	
   933  015A                     	ds	1
   934  015B                     _AcknowledgementString:	
   935  015B                     	ds	1
   936  015C                     _FinalFramebitBuffer:	
   937  015C                     	ds	1
   938  015D                     _ChildLockBuffer:	
   939  015D                     	ds	1
   940  015E                     _ChildLockbuffer:	
   941  015E                     	ds	2
   942  0160                     _switchstatusbuffer:	
   943  0160                     	ds	2
   944                           
   945                           	psect	dataBANK2
   946  0162                     __pdataBANK2:	
   947  0162                     applianceControl@F3974:	
   948  0162                     	ds	2
   949  0164                     applianceControl@F3972:	
   950  0164                     	ds	2
   951  0166                     _charSwitchState:	
   952  0166                     	ds	1
   953  0167                     _levelofGreenLed_LSB:	
   954  0167                     	ds	1
   955  0168                     _levelofGreenLed_MSB:	
   956  0168                     	ds	1
   957  0169                     _levelofRedLed_LSB:	
   958  0169                     	ds	1
   959  016A                     _levelofRedLed_MSB:	
   960  016A                     	ds	1
   961  016B                     _levelofBlueLed_LSB:	
   962  016B                     	ds	1
   963  016C                     _levelofBlueLed_MSB:	
   964  016C                     	ds	1
   965  016D                     _levelofDimmer_LSB:	
   966  016D                     	ds	1
   967  016E                     _levelofDimmer_MSB:	
   968  016E                     	ds	1
   969                           
   970                           	psect	bssBANK3
   971  01A0                     __pbssBANK3:	
   972  01A0                     _Timer8HL:	
   973  01A0                     	ds	4
   974  01A4                     _ModuleNameBuffer:	
   975  01A4                     	ds	3
   976  01A7                     _IntegerAllColorIntensity:	
   977  01A7                     	ds	2
   978  01A9                     _BlueLedSwitchCounter:	
   979  01A9                     	ds	2
   980  01AB                     _GreenLedSwitchCounter:	
   981  01AB                     	ds	2
   982  01AD                     _RedLedSwitchCounter:	
   983  01AD                     	ds	2
   984  01AF                     _Finalframebitbuffer:	
   985  01AF                     	ds	2
   986  01B1                     _BlueColorIntensityStringLength:	
   987  01B1                     	ds	2
   988  01B3                     _AllColorIntensityStringLength:	
   989  01B3                     	ds	2
   990  01B5                     _GreenColorIntensityStringLength:	
   991  01B5                     	ds	2
   992  01B7                     _RedColorIntensityStringLength:	
   993  01B7                     	ds	2
   994  01B9                     _mainDataReceiveStringLength:	
   995  01B9                     	ds	2
   996  01BB                     _ConvertIntegertoStringBlueColorBuffer:	
   997  01BB                     	ds	2
   998  01BD                     _ConvertIntegertoStringGreenColorBuffer:	
   999  01BD                     	ds	2
  1000  01BF                     _ConvertIntegertoStringRedColorBuffer:	
  1001  01BF                     	ds	2
  1002  01C1                     _mainDatacopyPosition:	
  1003  01C1                     	ds	2
  1004  01C3                     _mainReceivedDataFlag:	
  1005  01C3                     	ds	2
  1006  01C5                     _FrameLegthCounter:	
  1007  01C5                     	ds	2
  1008  01C7                     _BlueColorIntensityBuffer:	
  1009  01C7                     	ds	2
  1010  01C9                     _switchNumberBuffer:	
  1011  01C9                     	ds	3
  1012                           
  1013                           	psect	dataBANK3
  1014  01CC                     __pdataBANK3:	
  1015  01CC                     _copy_parentalLockBuffer:	
  1016  01CC                     	ds	14
  1017  01DA                     _tempReceivedDataBuffer:	
  1018  01DA                     	ds	10
  1019  01E4                     _ErrorNames:	
  1020  01E4                     	ds	5
  1021                           
  1022                           	psect	bssBANK4
  1023  0220                     __pbssBANK4:	
  1024  0220                     _sendFinalBufferToGAteway:	
  1025  0220                     	ds	46
  1026                           
  1027                           	psect	dataBANK4
  1028  024E                     __pdataBANK4:	
  1029  024E                     _parentalLockBuffer:	
  1030  024E                     	ds	14
  1031  025C                     _mainReceivedDataBuffer:	
  1032  025C                     	ds	18
  1033                           
  1034                           	psect	dataBANK5
  1035  02A0                     __pdataBANK5:	
  1036  02A0                     _currentStateBuffer:	
  1037  02A0                     	ds	58
  1038                           
  1039                           	psect	inittext
  1040  1FB7                     init_ram:	
  1041  1FB7  00FE               	movwf	126
  1042  1FB8                     initloop:	
  1043  1FB8  0012               	moviw fsr0++
  1044  1FB9  001E               	movwi fsr1++
  1045  1FBA  0BFE               	decfsz	126,f
  1046  1FBB  2FB8               	goto	initloop
  1047  1FBC  3400               	retlw	0
  1048                           
  1049                           	psect	clrtext
  1050  1FB1                     clear_ram0:	
  1051                           ;	Called with FSR0 containing the base address, and
  1052                           ;	WREG with the size to clear
  1053                           
  1054  1FB1  0064               	clrwdt	;clear the watchdog before getting into this loop
  1055  1FB2                     clrloop0:	
  1056  1FB2  0180               	clrf	0	;clear RAM location pointed to by FSR
  1057  1FB3  3101               	addfsr 0,1
  1058  1FB4  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1059  1FB5  2FB2               	goto	clrloop0	;have we reached the end yet?
  1060  1FB6  3400               	retlw	0	;all done for this memory range, return
  1061                           
  1062                           	psect	cstackBANK5
  1063  02DA                     __pcstackBANK5:	
  1064  02DA                     main@dataBufferCounter:	
  1065                           
  1066                           ; 2 bytes @ 0x0
  1067  02DA                     	ds	2
  1068  02DC                     main@j:	
  1069                           
  1070                           ; 2 bytes @ 0x2
  1071  02DC                     	ds	2
  1072  02DE                     main@k:	
  1073                           
  1074                           ; 2 bytes @ 0x4
  1075  02DE                     	ds	2
  1076  02E0                     main@k_1266:	
  1077                           
  1078                           ; 2 bytes @ 0x6
  1079  02E0                     	ds	2
  1080  02E2                     main@man:	
  1081                           
  1082                           ; 2 bytes @ 0x8
  1083  02E2                     	ds	2
  1084                           
  1085                           	psect	cstackBANK1
  1086  00A0                     __pcstackBANK1:	
  1087  00A0                     applianceControl@ConvertStringIntoInt:	
  1088  00A0                     applicationControlRGB@remainder:	
  1089                           ; 2 bytes @ 0x0
  1090                           
  1091                           
  1092                           ; 2 bytes @ 0x0
  1093  00A0                     	ds	2
  1094  00A2                     applianceControl@remainder:	
  1095  00A2                     applicationControlRGB@start:	
  1096                           ; 2 bytes @ 0x2
  1097                           
  1098                           
  1099                           ; 2 bytes @ 0x2
  1100  00A2                     	ds	2
  1101  00A4                     applianceControl@start:	
  1102  00A4                     applicationControlRGB@end:	
  1103                           ; 2 bytes @ 0x4
  1104                           
  1105                           
  1106                           ; 2 bytes @ 0x4
  1107  00A4                     	ds	2
  1108  00A6                     applianceControl@end:	
  1109  00A6                     applicationControlRGB@RedPulse:	
  1110                           ; 2 bytes @ 0x6
  1111                           
  1112                           
  1113                           ; 4 bytes @ 0x6
  1114  00A6                     	ds	2
  1115  00A8                     applianceControl@strD:	
  1116                           
  1117                           ; 6 bytes @ 0x8
  1118  00A8                     	ds	2
  1119  00AA                     applicationControlRGB@GreenPulse:	
  1120                           
  1121                           ; 4 bytes @ 0xA
  1122  00AA                     	ds	4
  1123  00AE                     applicationControlRGB@BluePulse:	
  1124  00AE                     applianceControl@HexlevelBuffer:	
  1125                           ; 4 bytes @ 0xE
  1126                           
  1127                           
  1128                           ; 5 bytes @ 0xE
  1129  00AE                     	ds	4
  1130  00B2                     applicationControlRGB@NeedRedPulse:	
  1131                           
  1132                           ; 4 bytes @ 0x12
  1133  00B2                     	ds	1
  1134  00B3                     applianceControl@CompleteClock:	
  1135                           
  1136                           ; 4 bytes @ 0x13
  1137  00B3                     	ds	3
  1138  00B6                     applicationControlRGB@NeedGreenPulse:	
  1139                           
  1140                           ; 4 bytes @ 0x16
  1141  00B6                     	ds	1
  1142  00B7                     applianceControl@deno:	
  1143                           
  1144                           ; 3 bytes @ 0x17
  1145  00B7                     	ds	3
  1146  00BA                     applianceControl@clockPerCycle:	
  1147  00BA                     applicationControlRGB@NeedBluePulse:	
  1148                           ; 3 bytes @ 0x1A
  1149                           
  1150                           
  1151                           ; 4 bytes @ 0x1A
  1152  00BA                     	ds	3
  1153  00BD                     applianceControl@Pulse:	
  1154                           
  1155                           ; 4 bytes @ 0x1D
  1156  00BD                     	ds	1
  1157  00BE                     applicationControlRGB@ModuleNamestr:	
  1158                           
  1159                           ; 1 bytes @ 0x1E
  1160  00BE                     	ds	1
  1161  00BF                     applicationControlRGB@strRedH:	
  1162                           
  1163                           ; 3 bytes @ 0x1F
  1164  00BF                     	ds	2
  1165  00C1                     applianceControl@NeedPulse:	
  1166                           
  1167                           ; 4 bytes @ 0x21
  1168  00C1                     	ds	1
  1169  00C2                     applicationControlRGB@strRedL:	
  1170                           
  1171                           ; 3 bytes @ 0x22
  1172  00C2                     	ds	3
  1173  00C5                     applianceControl@integerSpeed:	
  1174  00C5                     applicationControlRGB@strGreenH:	
  1175                           ; 2 bytes @ 0x25
  1176                           
  1177                           
  1178                           ; 3 bytes @ 0x25
  1179  00C5                     	ds	2
  1180  00C7                     applianceControl@charSwitchMSB:	
  1181                           
  1182                           ; 1 bytes @ 0x27
  1183  00C7                     	ds	1
  1184  00C8                     applianceControl@switchNumberStringBuffer:	
  1185  00C8                     applicationControlRGB@strGreenL:	
  1186                           ; 2 bytes @ 0x28
  1187                           
  1188                           
  1189                           ; 3 bytes @ 0x28
  1190  00C8                     	ds	2
  1191  00CA                     applianceControl@ConvertIntToTimeInMilisec:	
  1192                           
  1193                           ; 3 bytes @ 0x2A
  1194  00CA                     	ds	1
  1195  00CB                     applicationControlRGB@strBlueH:	
  1196                           
  1197                           ; 3 bytes @ 0x2B
  1198  00CB                     	ds	2
  1199  00CD                     applianceControl@dimmerSpeedStringBuffer:	
  1200                           
  1201                           ; 2 bytes @ 0x2D
  1202  00CD                     	ds	1
  1203  00CE                     applicationControlRGB@strBlueL:	
  1204                           
  1205                           ; 3 bytes @ 0x2E
  1206  00CE                     	ds	1
  1207  00CF                     applianceControl@integerSwitchNumber:	
  1208                           
  1209                           ; 2 bytes @ 0x2F
  1210  00CF                     	ds	2
  1211  00D1                     applianceControl@currentStateBufferPositions:	
  1212  00D1                     applicationControlRGB@HexlevelBuffer:	
  1213                           ; 2 bytes @ 0x31
  1214                           
  1215                           
  1216                           ; 5 bytes @ 0x31
  1217  00D1                     	ds	2
  1218  00D3                     applianceControl@integerSwitchState:	
  1219                           
  1220                           ; 2 bytes @ 0x33
  1221  00D3                     	ds	3
  1222  00D6                     applicationControlRGB@CompleteClock:	
  1223                           
  1224                           ; 4 bytes @ 0x36
  1225  00D6                     	ds	4
  1226  00DA                     applicationControlRGB@Convert255RangeintoHundred:	
  1227                           
  1228                           ; 3 bytes @ 0x3A
  1229  00DA                     	ds	3
  1230  00DD                     applicationControlRGB@clockPerCycle:	
  1231                           
  1232                           ; 3 bytes @ 0x3D
  1233  00DD                     	ds	3
  1234  00E0                     applicationControlRGB@ConvertIntoTenMsRangeFactor:	
  1235                           
  1236                           ; 2 bytes @ 0x40
  1237  00E0                     	ds	2
  1238  00E2                     applicationControlRGB@ConvertIntToTimeInMicrosecRed:	
  1239                           
  1240                           ; 3 bytes @ 0x42
  1241  00E2                     	ds	3
  1242  00E5                     applicationControlRGB@ConvertIntToTimeInMicrosecGreen:	
  1243                           
  1244                           ; 3 bytes @ 0x45
  1245  00E5                     	ds	3
  1246  00E8                     applicationControlRGB@ConvertIntToTimeInMicrosecBlue:	
  1247                           
  1248                           ; 3 bytes @ 0x48
  1249  00E8                     	ds	3
  1250                           
  1251                           	psect	cstackCOMMON
  1252  0075                     __pcstackCOMMON:	
  1253  0075                     ?_isdigit:	
  1254  0075                     ?_sendAcknowledgment:	
  1255                           ; 1 bit 
  1256                           
  1257  0075                     ?_errorsISR:	
  1258                           ; 1 bytes @ 0x0
  1259                           
  1260  0075                     ?_GPIO_pin_Initialize:	
  1261                           ; 1 bytes @ 0x0
  1262                           
  1263  0075                     ?_allPeripheralInit:	
  1264                           ; 1 bytes @ 0x0
  1265                           
  1266  0075                     ?_ReceivingIndicationLedBlinking:	
  1267                           ; 1 bytes @ 0x0
  1268                           
  1269  0075                     ?_copyReceivedDataBuffer:	
  1270                           ; 1 bytes @ 0x0
  1271                           
  1272  0075                     ?_TransmissionIndicationLedBlinking:	
  1273                           ; 1 bytes @ 0x0
  1274                           
  1275  0075                     ?_clearAllPorts:	
  1276                           ; 1 bytes @ 0x0
  1277                           
  1278  0075                     ?_pinINIT_extra:	
  1279                           ; 1 bytes @ 0x0
  1280                           
  1281  0075                     ?_EUSART_Initialize:	
  1282                           ; 1 bytes @ 0x0
  1283                           
  1284  0075                     ?_TMR1_Initialize:	
  1285                           ; 1 bytes @ 0x0
  1286                           
  1287  0075                     ?_TMR2_Initialize:	
  1288                           ; 1 bytes @ 0x0
  1289                           
  1290  0075                     ?_TMR3_Initialize:	
  1291                           ; 1 bytes @ 0x0
  1292                           
  1293  0075                     ?_TMR4_Initialize:	
  1294                           ; 1 bytes @ 0x0
  1295                           
  1296  0075                     ?_TMR5_Initialize:	
  1297                           ; 1 bytes @ 0x0
  1298                           
  1299  0075                     ?_TMR6_Initialize:	
  1300                           ; 1 bytes @ 0x0
  1301                           
  1302  0075                     ?_TMR8_Initialize:	
  1303                           ; 1 bytes @ 0x0
  1304                           
  1305  0075                     ?_TMR10_Initialize:	
  1306                           ; 1 bytes @ 0x0
  1307                           
  1308  0075                     ?_CCP9_Initialize:	
  1309                           ; 1 bytes @ 0x0
  1310                           
  1311  0075                     ?_CCP8_Initialize:	
  1312                           ; 1 bytes @ 0x0
  1313                           
  1314  0075                     ?_CCP7_Initialize:	
  1315                           ; 1 bytes @ 0x0
  1316                           
  1317  0075                     ?_CCP10_Initialize:	
  1318                           ; 1 bytes @ 0x0
  1319                           
  1320  0075                     ?_isr:	
  1321                           ; 1 bytes @ 0x0
  1322                           
  1323  0075                     ?_main:	
  1324                           ; 1 bytes @ 0x0
  1325                           
  1326  0075                     errorsISR@errNum:	
  1327                           ; 2 bytes @ 0x0
  1328                           
  1329                           
  1330                           ; 2 bytes @ 0x0
  1331  0075                     	ds	2
  1332  0077                     ??_errorsISR:	
  1333                           
  1334                           ; 1 bytes @ 0x2
  1335  0077                     	ds	1
  1336  0078                     ??_isr:	
  1337                           
  1338                           ; 1 bytes @ 0x3
  1339  0078                     	ds	2
  1340                           
  1341                           	psect	cstackBANK0
  1342  0020                     __pcstackBANK0:	
  1343  0020                     ??_sendAcknowledgment:	
  1344  0020                     ?_strcat:	
  1345                           ; 1 bytes @ 0x0
  1346                           
  1347  0020                     ?_strncpy:	
  1348                           ; 1 bytes @ 0x0
  1349                           
  1350  0020                     ??_GPIO_pin_Initialize:	
  1351                           ; 1 bytes @ 0x0
  1352                           
  1353  0020                     ??_allPeripheralInit:	
  1354                           ; 1 bytes @ 0x0
  1355                           
  1356  0020                     ??_ReceivingIndicationLedBlinking:	
  1357                           ; 1 bytes @ 0x0
  1358                           
  1359  0020                     ??_copyReceivedDataBuffer:	
  1360                           ; 1 bytes @ 0x0
  1361                           
  1362  0020                     ?_errorsMain:	
  1363                           ; 1 bytes @ 0x0
  1364                           
  1365  0020                     ?_SwitchOnStatustToGatway:	
  1366                           ; 1 bytes @ 0x0
  1367                           
  1368  0020                     ??_TransmissionIndicationLedBlinking:	
  1369                           ; 1 bytes @ 0x0
  1370                           
  1371  0020                     ?_SwitchOffStatustToGatway:	
  1372                           ; 1 bytes @ 0x0
  1373                           
  1374  0020                     ??_clearAllPorts:	
  1375                           ; 1 bytes @ 0x0
  1376                           
  1377  0020                     ??_pinINIT_extra:	
  1378                           ; 1 bytes @ 0x0
  1379                           
  1380  0020                     ??_EUSART_Initialize:	
  1381                           ; 1 bytes @ 0x0
  1382                           
  1383  0020                     ??_TMR1_Initialize:	
  1384                           ; 1 bytes @ 0x0
  1385                           
  1386  0020                     ??_TMR2_Initialize:	
  1387                           ; 1 bytes @ 0x0
  1388                           
  1389  0020                     ??_TMR3_Initialize:	
  1390                           ; 1 bytes @ 0x0
  1391                           
  1392  0020                     ??_TMR4_Initialize:	
  1393                           ; 1 bytes @ 0x0
  1394                           
  1395  0020                     ??_TMR5_Initialize:	
  1396                           ; 1 bytes @ 0x0
  1397                           
  1398  0020                     ??_TMR6_Initialize:	
  1399                           ; 1 bytes @ 0x0
  1400                           
  1401  0020                     ??_TMR8_Initialize:	
  1402                           ; 1 bytes @ 0x0
  1403                           
  1404  0020                     ??_TMR10_Initialize:	
  1405                           ; 1 bytes @ 0x0
  1406                           
  1407  0020                     ??_CCP9_Initialize:	
  1408                           ; 1 bytes @ 0x0
  1409                           
  1410  0020                     ??_CCP8_Initialize:	
  1411                           ; 1 bytes @ 0x0
  1412                           
  1413  0020                     ??_CCP7_Initialize:	
  1414                           ; 1 bytes @ 0x0
  1415                           
  1416  0020                     ??_CCP10_Initialize:	
  1417                           ; 1 bytes @ 0x0
  1418                           
  1419  0020                     ??_isdigit:	
  1420                           ; 1 bytes @ 0x0
  1421                           
  1422  0020                     ?_strlen:	
  1423                           ; 1 bytes @ 0x0
  1424                           
  1425  0020                     ?_strcpy:	
  1426                           ; 2 bytes @ 0x0
  1427                           
  1428  0020                     ?_abs:	
  1429                           ; 2 bytes @ 0x0
  1430                           
  1431  0020                     ?_memset:	
  1432                           ; 2 bytes @ 0x0
  1433                           
  1434  0020                     ?_strcmp:	
  1435                           ; 2 bytes @ 0x0
  1436                           
  1437  0020                     ?_strchr:	
  1438                           ; 2 bytes @ 0x0
  1439                           
  1440  0020                     ?___wmul:	
  1441                           ; 2 bytes @ 0x0
  1442                           
  1443  0020                     ?___lwdiv:	
  1444                           ; 2 bytes @ 0x0
  1445                           
  1446  0020                     ?___ftpack:	
  1447                           ; 2 bytes @ 0x0
  1448                           
  1449  0020                     _isdigit$1545:	
  1450                           ; 3 bytes @ 0x0
  1451                           
  1452  0020                     strncpy@from:	
  1453                           ; 1 bytes @ 0x0
  1454                           
  1455  0020                     errorsMain@errNum:	
  1456                           ; 1 bytes @ 0x0
  1457                           
  1458  0020                     SwitchOffStatustToGatway@SwitchOffNumber:	
  1459                           ; 2 bytes @ 0x0
  1460                           
  1461  0020                     SwitchOnStatustToGatway@SwitchOnNumber:	
  1462                           ; 2 bytes @ 0x0
  1463                           
  1464  0020                     ___wmul@multiplier:	
  1465                           ; 2 bytes @ 0x0
  1466                           
  1467  0020                     abs@a:	
  1468                           ; 2 bytes @ 0x0
  1469                           
  1470  0020                     ___lwdiv@divisor:	
  1471                           ; 2 bytes @ 0x0
  1472                           
  1473  0020                     memset@p1:	
  1474                           ; 2 bytes @ 0x0
  1475                           
  1476  0020                     strcat@from:	
  1477                           ; 2 bytes @ 0x0
  1478                           
  1479  0020                     strcmp@s2:	
  1480                           ; 2 bytes @ 0x0
  1481                           
  1482  0020                     strcpy@to:	
  1483                           ; 2 bytes @ 0x0
  1484                           
  1485  0020                     strlen@s:	
  1486                           ; 2 bytes @ 0x0
  1487                           
  1488  0020                     strchr@ptr:	
  1489                           ; 2 bytes @ 0x0
  1490                           
  1491  0020                     ___ftpack@arg:	
  1492                           ; 2 bytes @ 0x0
  1493                           
  1494                           
  1495                           ; 3 bytes @ 0x0
  1496  0020                     	ds	1
  1497  0021                     isdigit@c:	
  1498  0021                     sendAcknowledgment@Tx_count:	
  1499                           ; 1 bytes @ 0x1
  1500                           
  1501  0021                     copyReceivedDataBuffer@dataBufferCounter:	
  1502                           ; 2 bytes @ 0x1
  1503                           
  1504  0021                     strncpy@size:	
  1505                           ; 2 bytes @ 0x1
  1506                           
  1507                           
  1508                           ; 2 bytes @ 0x1
  1509  0021                     	ds	1
  1510  0022                     ??_strlen:	
  1511  0022                     ??_strcat:	
  1512                           ; 1 bytes @ 0x2
  1513                           
  1514  0022                     ??_abs:	
  1515                           ; 1 bytes @ 0x2
  1516                           
  1517  0022                     ??_strcmp:	
  1518                           ; 1 bytes @ 0x2
  1519                           
  1520  0022                     ??_errorsMain:	
  1521                           ; 1 bytes @ 0x2
  1522                           
  1523  0022                     ??_SwitchOnStatustToGatway:	
  1524                           ; 1 bytes @ 0x2
  1525                           
  1526  0022                     ??_SwitchOffStatustToGatway:	
  1527                           ; 1 bytes @ 0x2
  1528                           
  1529  0022                     ___wmul@multiplicand:	
  1530                           ; 1 bytes @ 0x2
  1531                           
  1532  0022                     ___lwdiv@dividend:	
  1533                           ; 2 bytes @ 0x2
  1534                           
  1535  0022                     memset@c:	
  1536                           ; 2 bytes @ 0x2
  1537                           
  1538  0022                     strcpy@from:	
  1539                           ; 2 bytes @ 0x2
  1540                           
  1541  0022                     strchr@chr:	
  1542                           ; 2 bytes @ 0x2
  1543                           
  1544                           
  1545                           ; 2 bytes @ 0x2
  1546  0022                     	ds	1
  1547  0023                     ??_strncpy:	
  1548  0023                     sendAcknowledgment@currentStateBuffer:	
  1549                           ; 1 bytes @ 0x3
  1550                           
  1551  0023                     ___ftpack@exp:	
  1552                           ; 1 bytes @ 0x3
  1553                           
  1554  0023                     strcat@cp:	
  1555                           ; 1 bytes @ 0x3
  1556                           
  1557  0023                     strcmp@r:	
  1558                           ; 1 bytes @ 0x3
  1559                           
  1560                           
  1561                           ; 1 bytes @ 0x3
  1562  0023                     	ds	1
  1563  0024                     ??_strcpy:	
  1564  0024                     ??_strchr:	
  1565                           ; 1 bytes @ 0x4
  1566                           
  1567  0024                     ??___wmul:	
  1568                           ; 1 bytes @ 0x4
  1569                           
  1570  0024                     ??___lwdiv:	
  1571                           ; 1 bytes @ 0x4
  1572                           
  1573  0024                     ___ftpack@sign:	
  1574                           ; 1 bytes @ 0x4
  1575                           
  1576  0024                     strcat@to:	
  1577                           ; 1 bytes @ 0x4
  1578                           
  1579  0024                     strcmp@s1:	
  1580                           ; 1 bytes @ 0x4
  1581                           
  1582  0024                     strncpy@cp:	
  1583                           ; 1 bytes @ 0x4
  1584                           
  1585  0024                     ___wmul@product:	
  1586                           ; 1 bytes @ 0x4
  1587                           
  1588  0024                     memset@n:	
  1589                           ; 2 bytes @ 0x4
  1590                           
  1591  0024                     strcpy@cp:	
  1592                           ; 2 bytes @ 0x4
  1593                           
  1594  0024                     strlen@cp:	
  1595                           ; 2 bytes @ 0x4
  1596                           
  1597                           
  1598                           ; 2 bytes @ 0x4
  1599  0024                     	ds	1
  1600  0025                     ??___ftpack:	
  1601  0025                     ___lwdiv@counter:	
  1602                           ; 1 bytes @ 0x5
  1603                           
  1604  0025                     strncpy@to:	
  1605                           ; 1 bytes @ 0x5
  1606                           
  1607                           
  1608                           ; 1 bytes @ 0x5
  1609  0025                     	ds	1
  1610  0026                     ??_memset:	
  1611  0026                     ?_atoi:	
  1612                           ; 1 bytes @ 0x6
  1613                           
  1614  0026                     ?_hexadecimalToDecimal:	
  1615                           ; 2 bytes @ 0x6
  1616                           
  1617  0026                     atoi@s:	
  1618                           ; 2 bytes @ 0x6
  1619                           
  1620  0026                     ___lwdiv@quotient:	
  1621                           ; 2 bytes @ 0x6
  1622                           
  1623  0026                     memset@p:	
  1624                           ; 2 bytes @ 0x6
  1625                           
  1626                           
  1627                           ; 2 bytes @ 0x6
  1628  0026                     	ds	1
  1629  0027                     ?_strspn:	
  1630  0027                     ?_strcspn:	
  1631                           ; 2 bytes @ 0x7
  1632                           
  1633  0027                     strcspn@s2:	
  1634                           ; 2 bytes @ 0x7
  1635                           
  1636  0027                     strspn@s2:	
  1637                           ; 2 bytes @ 0x7
  1638                           
  1639                           
  1640                           ; 2 bytes @ 0x7
  1641  0027                     	ds	1
  1642  0028                     ??_atoi:	
  1643  0028                     ??_hexadecimalToDecimal:	
  1644                           ; 1 bytes @ 0x8
  1645                           
  1646  0028                     ?_sprintf:	
  1647                           ; 1 bytes @ 0x8
  1648                           
  1649  0028                     ?___awtoft:	
  1650                           ; 2 bytes @ 0x8
  1651                           
  1652  0028                     ?___ftmul:	
  1653                           ; 3 bytes @ 0x8
  1654                           
  1655  0028                     ?___lwtoft:	
  1656                           ; 3 bytes @ 0x8
  1657                           
  1658  0028                     sprintf@f:	
  1659                           ; 3 bytes @ 0x8
  1660                           
  1661  0028                     ___awtoft@c:	
  1662                           ; 2 bytes @ 0x8
  1663                           
  1664  0028                     ___lwtoft@c:	
  1665                           ; 2 bytes @ 0x8
  1666                           
  1667  0028                     ___ftmul@f1:	
  1668                           ; 2 bytes @ 0x8
  1669                           
  1670                           
  1671                           ; 3 bytes @ 0x8
  1672  0028                     	ds	1
  1673  0029                     ??_strspn:	
  1674  0029                     ??_strcspn:	
  1675                           ; 1 bytes @ 0x9
  1676                           
  1677                           
  1678                           ; 1 bytes @ 0x9
  1679  0029                     	ds	1
  1680  002A                     atoi@sign:	
  1681  002A                     hexadecimalToDecimal@len:	
  1682                           ; 1 bytes @ 0xA
  1683                           
  1684                           
  1685                           ; 2 bytes @ 0xA
  1686  002A                     	ds	1
  1687  002B                     ??___awtoft:	
  1688  002B                     ??___lwtoft:	
  1689                           ; 1 bytes @ 0xB
  1690                           
  1691  002B                     atoi@a:	
  1692                           ; 1 bytes @ 0xB
  1693                           
  1694  002B                     strcspn@i:	
  1695                           ; 2 bytes @ 0xB
  1696                           
  1697  002B                     strspn@i:	
  1698                           ; 2 bytes @ 0xB
  1699                           
  1700  002B                     ___ftmul@f2:	
  1701                           ; 2 bytes @ 0xB
  1702                           
  1703                           
  1704                           ; 3 bytes @ 0xB
  1705  002B                     	ds	1
  1706  002C                     hexadecimalToDecimal@dec_val:	
  1707                           
  1708                           ; 2 bytes @ 0xC
  1709  002C                     	ds	1
  1710  002D                     ___awtoft@sign:	
  1711  002D                     strcspn@s1:	
  1712                           ; 1 bytes @ 0xD
  1713                           
  1714  002D                     strspn@s1:	
  1715                           ; 1 bytes @ 0xD
  1716                           
  1717                           
  1718                           ; 1 bytes @ 0xD
  1719  002D                     	ds	1
  1720  002E                     ??_sprintf:	
  1721  002E                     ?_strtok:	
  1722                           ; 1 bytes @ 0xE
  1723                           
  1724  002E                     ??___ftmul:	
  1725                           ; 1 bytes @ 0xE
  1726                           
  1727  002E                     ?___ftdiv:	
  1728                           ; 1 bytes @ 0xE
  1729                           
  1730  002E                     hexadecimalToDecimal@base:	
  1731                           ; 3 bytes @ 0xE
  1732                           
  1733  002E                     strtok@s2:	
  1734                           ; 2 bytes @ 0xE
  1735                           
  1736  002E                     ___ftdiv@f2:	
  1737                           ; 2 bytes @ 0xE
  1738                           
  1739                           
  1740                           ; 3 bytes @ 0xE
  1741  002E                     	ds	2
  1742  0030                     ??_strtok:	
  1743  0030                     hexadecimalToDecimal@i:	
  1744                           ; 1 bytes @ 0x10
  1745                           
  1746                           
  1747                           ; 2 bytes @ 0x10
  1748  0030                     	ds	1
  1749  0031                     ___ftdiv@f1:	
  1750                           
  1751                           ; 3 bytes @ 0x11
  1752  0031                     	ds	1
  1753  0032                     hexadecimalToDecimal@hexVal:	
  1754  0032                     sprintf@flag:	
  1755                           ; 1 bytes @ 0x12
  1756                           
  1757  0032                     ___ftmul@exp:	
  1758                           ; 1 bytes @ 0x12
  1759                           
  1760                           
  1761                           ; 1 bytes @ 0x12
  1762  0032                     	ds	1
  1763  0033                     sprintf@idx:	
  1764  0033                     strtok@s1:	
  1765                           ; 1 bytes @ 0x13
  1766                           
  1767  0033                     ___ftmul@f3_as_product:	
  1768                           ; 1 bytes @ 0x13
  1769                           
  1770                           
  1771                           ; 3 bytes @ 0x13
  1772  0033                     	ds	1
  1773  0034                     ??___ftdiv:	
  1774  0034                     sprintf@ap:	
  1775                           ; 1 bytes @ 0x14
  1776                           
  1777                           
  1778                           ; 1 bytes @ 0x14
  1779  0034                     	ds	1
  1780  0035                     sprintf@val:	
  1781                           
  1782                           ; 2 bytes @ 0x15
  1783  0035                     	ds	1
  1784  0036                     ___ftmul@cntr:	
  1785                           
  1786                           ; 1 bytes @ 0x16
  1787  0036                     	ds	1
  1788  0037                     sprintf@prec:	
  1789  0037                     ___ftmul@sign:	
  1790                           ; 1 bytes @ 0x17
  1791                           
  1792                           
  1793                           ; 1 bytes @ 0x17
  1794  0037                     	ds	1
  1795  0038                     sprintf@sp:	
  1796  0038                     ___ftdiv@cntr:	
  1797                           ; 1 bytes @ 0x18
  1798                           
  1799                           
  1800                           ; 1 bytes @ 0x18
  1801  0038                     	ds	1
  1802  0039                     sprintf@c:	
  1803  0039                     ___ftdiv@f3:	
  1804                           ; 1 bytes @ 0x19
  1805                           
  1806                           
  1807                           ; 3 bytes @ 0x19
  1808  0039                     	ds	3
  1809  003C                     ___ftdiv@exp:	
  1810                           
  1811                           ; 1 bytes @ 0x1C
  1812  003C                     	ds	1
  1813  003D                     ___ftdiv@sign:	
  1814                           
  1815                           ; 1 bytes @ 0x1D
  1816  003D                     	ds	1
  1817  003E                     ?___fttol:	
  1818  003E                     ___fttol@f1:	
  1819                           ; 4 bytes @ 0x1E
  1820                           
  1821                           
  1822                           ; 3 bytes @ 0x1E
  1823  003E                     	ds	4
  1824  0042                     ??___fttol:	
  1825                           
  1826                           ; 1 bytes @ 0x22
  1827  0042                     	ds	4
  1828  0046                     ___fttol@sign1:	
  1829                           
  1830                           ; 1 bytes @ 0x26
  1831  0046                     	ds	1
  1832  0047                     ___fttol@lval:	
  1833                           
  1834                           ; 4 bytes @ 0x27
  1835  0047                     	ds	4
  1836  004B                     ___fttol@exp1:	
  1837                           
  1838                           ; 1 bytes @ 0x2B
  1839  004B                     	ds	1
  1840  004C                     ?_applianceControl:	
  1841  004C                     ?_applicationControlRGB:	
  1842                           ; 1 bytes @ 0x2C
  1843                           
  1844  004C                     applianceControl@charSwitchLSB:	
  1845                           ; 1 bytes @ 0x2C
  1846                           
  1847  004C                     applicationControlRGB@SwitchNumberstr:	
  1848                           ; 1 bytes @ 0x2C
  1849                           
  1850                           
  1851                           ; 1 bytes @ 0x2C
  1852  004C                     	ds	1
  1853  004D                     applianceControl@charSwitchSTATE:	
  1854  004D                     applicationControlRGB@SwitchStatusstr:	
  1855                           ; 1 bytes @ 0x2D
  1856                           
  1857                           
  1858                           ; 1 bytes @ 0x2D
  1859  004D                     	ds	1
  1860  004E                     applianceControl@chDimmerSpeedMSB:	
  1861  004E                     applicationControlRGB@RedColorIntensitystr:	
  1862                           ; 1 bytes @ 0x2E
  1863                           
  1864                           
  1865                           ; 1 bytes @ 0x2E
  1866  004E                     	ds	1
  1867  004F                     applianceControl@chDimmerSpeedLSB:	
  1868  004F                     applicationControlRGB@GreenColorIntensitystr:	
  1869                           ; 1 bytes @ 0x2F
  1870                           
  1871                           
  1872                           ; 1 bytes @ 0x2F
  1873  004F                     	ds	1
  1874  0050                     applianceControl@charParentalControl:	
  1875  0050                     applicationControlRGB@BlueColorIntensitystr:	
  1876                           ; 1 bytes @ 0x30
  1877                           
  1878                           
  1879                           ; 1 bytes @ 0x30
  1880  0050                     	ds	1
  1881  0051                     applianceControl@charFinalFrameState:	
  1882  0051                     applicationControlRGB@ChildLockstr:	
  1883                           ; 1 bytes @ 0x31
  1884                           
  1885                           
  1886                           ; 1 bytes @ 0x31
  1887  0051                     	ds	1
  1888  0052                     ??_applianceControl:	
  1889  0052                     applicationControlRGB@Allcolorstr:	
  1890                           ; 1 bytes @ 0x32
  1891                           
  1892                           
  1893                           ; 1 bytes @ 0x32
  1894  0052                     	ds	1
  1895  0053                     ??_applicationControlRGB:	
  1896                           
  1897                           ; 1 bytes @ 0x33
  1898  0053                     	ds	7
  1899  005A                     ??_main:	
  1900                           
  1901                           ; 1 bytes @ 0x3A
  1902  005A                     	ds	7
  1903                           
  1904                           	psect	maintext
  1905  0AEE                     __pmaintext:	
  1906 ;;
  1907 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
  1908 ;;
  1909 ;; *************** function _main *****************
  1910 ;; Defined at:
  1911 ;;		line 500 in file "main.c"
  1912 ;; Parameters:    Size  Location     Type
  1913 ;;		None
  1914 ;; Auto vars:     Size  Location     Type
  1915 ;;  k               2    6[BANK5 ] int 
  1916 ;;  k               2    4[BANK5 ] int 
  1917 ;;  j               2    2[BANK5 ] int 
  1918 ;;  dataBufferCo    2    0[BANK5 ] int 
  1919 ;;  man             2    8[BANK5 ] int 
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  2  519[None  ] int 
  1922 ;; Registers used:
  1923 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1924 ;; Tracked objects:
  1925 ;;		On entry : B1F/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  1929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  1930 ;;      Locals:         0       0       0       0       0       0      10       0       0       0       0
  1931 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0
  1932 ;;      Totals:         0       7       0       0       0       0      10       0       0       0       0
  1933 ;;Total ram usage:       17 bytes
  1934 ;; Hardware stack levels required when called:    5
  1935 ;; This function calls:
  1936 ;;		_GPIO_pin_Initialize
  1937 ;;		_ReceivingIndicationLedBlinking
  1938 ;;		_SwitchOffStatustToGatway
  1939 ;;		_SwitchOnStatustToGatway
  1940 ;;		_TransmissionIndicationLedBlinking
  1941 ;;		_allPeripheralInit
  1942 ;;		_applianceControl
  1943 ;;		_applicationControlRGB
  1944 ;;		_copyReceivedDataBuffer
  1945 ;;		_errorsMain
  1946 ;;		_memset
  1947 ;;		_strcmp
  1948 ;;		_strlen
  1949 ;;		_strtok
  1950 ;; This function is called by:
  1951 ;;		Startup code after reset
  1952 ;; This function uses a non-reentrant model
  1953 ;;
  1954                           
  1955                           
  1956                           ;psect for function _main
  1957  0AEE                     _main:	
  1958                           
  1959                           ;main.c: 501: _delay((unsigned long)((2000)*(16000000/4000.0)));
  1960                           
  1961                           ;incstack = 0
  1962                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1963  0AEE  3029               	movlw	41
  1964  0AEF  0020               	movlb	0	; select bank0
  1965  0AF0  00DB               	movwf	??_main+1
  1966  0AF1  3096               	movlw	150
  1967  0AF2  00DA               	movwf	??_main
  1968  0AF3  307F               	movlw	127
  1969  0AF4                     u6747:	
  1970  0AF4  0B89               	decfsz	9,f
  1971  0AF5  2AF4               	goto	u6747
  1972  0AF6  0BDA               	decfsz	??_main,f
  1973  0AF7  2AF4               	goto	u6747
  1974  0AF8  0BDB               	decfsz	??_main+1,f
  1975  0AF9  2AF4               	goto	u6747
  1976                           
  1977                           ;main.c: 502: M1=1; M2=1; M3=1; M4=1; M5=1; M6=1; M7=1;M8=1;
  1978  0AFA  3001               	movlw	1
  1979  0AFB  0022               	movlb	2	; select bank2
  1980  0AFC  00B0               	movwf	_M1^(0+256)
  1981  0AFD  3000               	movlw	0
  1982  0AFE  00B1               	movwf	(_M1^(0+256)+1)
  1983  0AFF  3001               	movlw	1
  1984  0B00  00AE               	movwf	_M2^(0+256)
  1985  0B01  3000               	movlw	0
  1986  0B02  00AF               	movwf	(_M2^(0+256)+1)
  1987  0B03  3001               	movlw	1
  1988  0B04  00AC               	movwf	_M3^(0+256)
  1989  0B05  3000               	movlw	0
  1990  0B06  00AD               	movwf	(_M3^(0+256)+1)
  1991  0B07  3001               	movlw	1
  1992  0B08  00AA               	movwf	_M4^(0+256)
  1993  0B09  3000               	movlw	0
  1994  0B0A  00AB               	movwf	(_M4^(0+256)+1)
  1995  0B0B  3001               	movlw	1
  1996  0B0C  00A8               	movwf	_M5^(0+256)
  1997  0B0D  3000               	movlw	0
  1998  0B0E  00A9               	movwf	(_M5^(0+256)+1)
  1999  0B0F  3001               	movlw	1
  2000  0B10  00A6               	movwf	_M6^(0+256)
  2001  0B11  3000               	movlw	0
  2002  0B12  00A7               	movwf	(_M6^(0+256)+1)
  2003  0B13  3001               	movlw	1
  2004  0B14  00A4               	movwf	_M7^(0+256)
  2005  0B15  3000               	movlw	0
  2006  0B16  00A5               	movwf	(_M7^(0+256)+1)
  2007  0B17  3001               	movlw	1
  2008  0B18  00A2               	movwf	_M8^(0+256)
  2009  0B19  3000               	movlw	0
  2010  0B1A  00A3               	movwf	(_M8^(0+256)+1)
  2011                           
  2012                           ;main.c: 503: M9=1;
  2013  0B1B  3001               	movlw	1
  2014  0B1C  00A0               	movwf	_M9^(0+256)
  2015  0B1D  3000               	movlw	0
  2016  0B1E  00A1               	movwf	(_M9^(0+256)+1)
  2017                           
  2018                           ;main.c: 504: GPIO_pin_Initialize();
  2019  0B1F  3192  2289  318A   	fcall	_GPIO_pin_Initialize
  2020                           
  2021                           ;main.c: 505: allPeripheralInit();
  2022  0B22  3192  2210  318A   	fcall	_allPeripheralInit
  2023  0B25                     l5937:	
  2024                           ;main.c: 507: while(1){
  2025                           
  2026                           
  2027                           ;main.c: 508: if(mainDataReceived==1){
  2028  0B25  0022               	movlb	2	; select bank2
  2029  0B26  0350               	decf	_mainDataReceived^(0+256),w
  2030  0B27  0451               	iorwf	(_mainDataReceived+1)^(0+256),w
  2031  0B28  1D03               	btfss	3,2
  2032  0B29  2D56               	goto	l6071
  2033                           
  2034                           ;main.c: 509: mainDataReceived=0;
  2035  0B2A  01D0               	clrf	_mainDataReceived^(0+256)
  2036  0B2B  01D1               	clrf	(_mainDataReceived+1)^(0+256)
  2037                           
  2038                           ;main.c: 510: if(mainReceivedDataBuffer[0]=='%' && mainReceivedDataBuffer[1]=='%' && mai
      +                          nReceivedDataBuffer[14]=='@' && mainReceivedDataBuffer[15]=='@'){
  2039  0B2C  3025               	movlw	37
  2040  0B2D  0024               	movlb	4	; select bank4
  2041  0B2E  065C               	xorwf	_mainReceivedDataBuffer^(0+512),w
  2042  0B2F  1D03               	btfss	3,2
  2043  0B30  2B6D               	goto	l5955
  2044  0B31  3025               	movlw	37
  2045  0B32  065D               	xorwf	(_mainReceivedDataBuffer^(0+512)+1),w
  2046  0B33  1D03               	btfss	3,2
  2047  0B34  2B6D               	goto	l5955
  2048  0B35  3040               	movlw	64
  2049  0B36  066A               	xorwf	(_mainReceivedDataBuffer^(0+512)+14),w
  2050  0B37  1D03               	btfss	3,2
  2051  0B38  2B6D               	goto	l5955
  2052  0B39  3040               	movlw	64
  2053  0B3A  066B               	xorwf	(_mainReceivedDataBuffer^(0+512)+15),w
  2054  0B3B  1D03               	btfss	3,2
  2055  0B3C  2B6D               	goto	l5955
  2056                           
  2057                           ;main.c: 511: ReceivingIndicationLedBlinking();
  2058  0B3D  3190  2064  318A   	fcall	_ReceivingIndicationLedBlinking
  2059                           
  2060                           ;main.c: 512: copyReceivedDataBuffer();
  2061  0B40  3193  2344  318A   	fcall	_copyReceivedDataBuffer
  2062                           
  2063                           ;main.c: 514: applianceControl(tempReceivedDataBuffer[0],
  2064                           ;main.c: 515: tempReceivedDataBuffer[1],
  2065                           ;main.c: 516: tempReceivedDataBuffer[2],
  2066                           ;main.c: 517: tempReceivedDataBuffer[3],
  2067                           ;main.c: 518: tempReceivedDataBuffer[4],
  2068                           ;main.c: 519: tempReceivedDataBuffer[5],
  2069                           ;main.c: 520: tempReceivedDataBuffer[6]);
  2070  0B43  0023               	movlb	3	; select bank3
  2071  0B44  085B               	movf	(_tempReceivedDataBuffer^(0+384)+1),w
  2072  0B45  0020               	movlb	0	; select bank0
  2073  0B46  00DA               	movwf	??_main
  2074  0B47  085A               	movf	??_main,w
  2075  0B48  00CC               	movwf	applianceControl@charSwitchLSB
  2076  0B49  0023               	movlb	3	; select bank3
  2077  0B4A  085C               	movf	(_tempReceivedDataBuffer^(0+384)+2),w
  2078  0B4B  0020               	movlb	0	; select bank0
  2079  0B4C  00DB               	movwf	??_main+1
  2080  0B4D  085B               	movf	??_main+1,w
  2081  0B4E  00CD               	movwf	applianceControl@charSwitchSTATE
  2082  0B4F  0023               	movlb	3	; select bank3
  2083  0B50  085D               	movf	(_tempReceivedDataBuffer^(0+384)+3),w
  2084  0B51  0020               	movlb	0	; select bank0
  2085  0B52  00DC               	movwf	??_main+2
  2086  0B53  085C               	movf	??_main+2,w
  2087  0B54  00CE               	movwf	applianceControl@chDimmerSpeedMSB
  2088  0B55  0023               	movlb	3	; select bank3
  2089  0B56  085E               	movf	(_tempReceivedDataBuffer^(0+384)+4),w
  2090  0B57  0020               	movlb	0	; select bank0
  2091  0B58  00DD               	movwf	??_main+3
  2092  0B59  085D               	movf	??_main+3,w
  2093  0B5A  00CF               	movwf	applianceControl@chDimmerSpeedLSB
  2094  0B5B  0023               	movlb	3	; select bank3
  2095  0B5C  085F               	movf	(_tempReceivedDataBuffer^(0+384)+5),w
  2096  0B5D  0020               	movlb	0	; select bank0
  2097  0B5E  00DE               	movwf	??_main+4
  2098  0B5F  085E               	movf	??_main+4,w
  2099  0B60  00D0               	movwf	applianceControl@charParentalControl
  2100  0B61  0023               	movlb	3	; select bank3
  2101  0B62  0860               	movf	(_tempReceivedDataBuffer^(0+384)+6),w
  2102  0B63  0020               	movlb	0	; select bank0
  2103  0B64  00DF               	movwf	??_main+5
  2104  0B65  085F               	movf	??_main+5,w
  2105  0B66  00D1               	movwf	applianceControl@charFinalFrameState
  2106  0B67  0023               	movlb	3	; select bank3
  2107  0B68  085A               	movf	_tempReceivedDataBuffer^(0+384),w
  2108  0B69  3188  203E  318A   	fcall	_applianceControl
  2109                           
  2110                           ;main.c: 522: }
  2111  0B6C  2D56               	goto	l6071
  2112  0B6D                     l5955:	
  2113                           
  2114                           ;main.c: 523: else if(mainReceivedDataBuffer[0]=='R' && mainReceivedDataBuffer[1]=='G'){
  2115  0B6D  3052               	movlw	82
  2116  0B6E  0024               	movlb	4	; select bank4
  2117  0B6F  065C               	xorwf	_mainReceivedDataBuffer^(0+512),w
  2118  0B70  1D03               	btfss	3,2
  2119  0B71  2D1A               	goto	l6053
  2120  0B72  3047               	movlw	71
  2121  0B73  065D               	xorwf	(_mainReceivedDataBuffer^(0+512)+1),w
  2122  0B74  1D03               	btfss	3,2
  2123  0B75  2D1A               	goto	l6053
  2124                           
  2125                           ;main.c: 524: ReceivingIndicationLedBlinking();
  2126  0B76  3190  2064  318A   	fcall	_ReceivingIndicationLedBlinking
  2127                           
  2128                           ;main.c: 525: ConvertmaindataReceiveIntoString = mainReceivedDataBuffer;
  2129  0B79  305C               	movlw	(low (_mainReceivedDataBuffer| (0+512)))& (0+255)
  2130  0B7A  0020               	movlb	0	; select bank0
  2131  0B7B  00DA               	movwf	??_main
  2132  0B7C  085A               	movf	??_main,w
  2133  0B7D  00E9               	movwf	_ConvertmaindataReceiveIntoString
  2134                           
  2135                           ;main.c: 529: token = strtok(ConvertmaindataReceiveIntoString,".");
  2136  0B7E  3036               	movlw	low (STR_2| (0+32768))
  2137  0B7F  00AE               	movwf	strtok@s2
  2138  0B80  3098               	movlw	high (STR_2| (0+32768))
  2139  0B81  00AF               	movwf	strtok@s2+1
  2140  0B82  0869               	movf	_ConvertmaindataReceiveIntoString,w
  2141  0B83  3187  27A7  318A   	fcall	_strtok
  2142  0B86  0020               	movlb	0	; select bank0
  2143  0B87  00DA               	movwf	??_main
  2144  0B88  085A               	movf	??_main,w
  2145  0B89  00E8               	movwf	_token
  2146                           
  2147                           ;main.c: 530: ModuleNameString = token;
  2148  0B8A  0868               	movf	_token,w
  2149  0B8B  00DA               	movwf	??_main
  2150  0B8C  085A               	movf	??_main,w
  2151  0B8D  00E7               	movwf	_ModuleNameString
  2152                           
  2153                           ;main.c: 531: partCounter=0;
  2154  0B8E  0022               	movlb	2	; select bank2
  2155  0B8F  01BA               	clrf	_partCounter^(0+256)
  2156  0B90  01BB               	clrf	(_partCounter+1)^(0+256)
  2157                           
  2158                           ;main.c: 532: if((strcmp(ModuleNameString,"RGB") == 0)){
  2159  0B91  302F               	movlw	low (STR_17| (0+32768))
  2160  0B92  0020               	movlb	0	; select bank0
  2161  0B93  00A0               	movwf	strcmp@s2
  2162  0B94  3098               	movlw	high (STR_17| (0+32768))
  2163  0B95  00A1               	movwf	strcmp@s2+1
  2164  0B96  0867               	movf	_ModuleNameString,w
  2165  0B97  3192  225F  318A   	fcall	_strcmp
  2166  0B9A  0020               	movlb	0	; select bank0
  2167  0B9B  0820               	movf	?_strcmp,w
  2168  0B9C  0421               	iorwf	?_strcmp+1,w
  2169  0B9D  1903               	btfsc	3,2
  2170  0B9E  2CE5               	goto	l6047
  2171  0B9F  2CE9               	goto	l6049
  2172  0BA0                     l5973:	
  2173                           ;main.c: 533: while(token != (0))
  2174                           
  2175                           
  2176                           ;main.c: 534: {
  2177                           ;main.c: 535: partCounter++;
  2178  0BA0  3001               	movlw	1
  2179  0BA1  0022               	movlb	2	; select bank2
  2180  0BA2  07BA               	addwf	_partCounter^(0+256),f
  2181  0BA3  3000               	movlw	0
  2182  0BA4  3DBB               	addwfc	(_partCounter+1)^(0+256),f
  2183                           
  2184                           ;main.c: 536: token = strtok((0),".");
  2185  0BA5  3036               	movlw	low (STR_2| (0+32768))
  2186  0BA6  0020               	movlb	0	; select bank0
  2187  0BA7  00AE               	movwf	strtok@s2
  2188  0BA8  3098               	movlw	high (STR_2| (0+32768))
  2189  0BA9  00AF               	movwf	strtok@s2+1
  2190  0BAA  3000               	movlw	0
  2191  0BAB  3187  27A7  318A   	fcall	_strtok
  2192  0BAE  0020               	movlb	0	; select bank0
  2193  0BAF  00DA               	movwf	??_main
  2194  0BB0  085A               	movf	??_main,w
  2195  0BB1  00E8               	movwf	_token
  2196                           
  2197                           ;main.c: 537: switch(partCounter){
  2198  0BB2  2CD2               	goto	l6045
  2199  0BB3                     l5977:	
  2200                           ;main.c: 538: case 1:
  2201                           
  2202                           
  2203                           ;main.c: 539: {
  2204                           ;main.c: 540: int j=0;
  2205  0BB3  0025               	movlb	5	; select bank5
  2206  0BB4  01DC               	clrf	main@j^(0+640)
  2207  0BB5  01DD               	clrf	(main@j+1)^(0+640)
  2208                           
  2209                           ;main.c: 541: for(j=0;j<1;j++)
  2210  0BB6  01DC               	clrf	main@j^(0+640)
  2211  0BB7  01DD               	clrf	(main@j+1)^(0+640)
  2212  0BB8  085D               	movf	(main@j+1)^(0+640),w
  2213  0BB9  3A80               	xorlw	128
  2214  0BBA  0020               	movlb	0	; select bank0
  2215  0BBB  00DA               	movwf	??_main
  2216  0BBC  3080               	movlw	128
  2217  0BBD  025A               	subwf	??_main,w
  2218  0BBE  1D03               	skipz
  2219  0BBF  2BC3               	goto	u5935
  2220  0BC0  3001               	movlw	1
  2221  0BC1  0025               	movlb	5	; select bank5
  2222  0BC2  025C               	subwf	main@j^(0+640),w
  2223  0BC3                     u5935:	
  2224  0BC3  1803               	btfsc	3,0
  2225  0BC4  2BEB               	goto	l5991
  2226  0BC5                     l5983:	
  2227                           
  2228                           ;main.c: 542: {
  2229                           ;main.c: 543: switchNumberBuffer[j]= *token;
  2230  0BC5  0020               	movlb	0	; select bank0
  2231  0BC6  0868               	movf	_token,w
  2232  0BC7  0086               	movwf	6
  2233  0BC8  3002               	movlw	2	; select bank4/5
  2234  0BC9  0087               	movwf	7
  2235  0BCA  0801               	movf	1,w
  2236  0BCB  00DA               	movwf	??_main
  2237  0BCC  0025               	movlb	5	; select bank5
  2238  0BCD  085C               	movf	main@j^(0+640),w
  2239  0BCE  3EC9               	addlw	(low (_switchNumberBuffer| (0+256)))& (0+255)
  2240  0BCF  0086               	movwf	6
  2241  0BD0  3001               	movlw	1	; select bank3/4
  2242  0BD1  0087               	movwf	7
  2243  0BD2  0020               	movlb	0	; select bank0
  2244  0BD3  085A               	movf	??_main,w
  2245  0BD4  0081               	movwf	1
  2246                           
  2247                           ;main.c: 544: *token++;
  2248  0BD5  3001               	movlw	1
  2249  0BD6  00DA               	movwf	??_main
  2250  0BD7  085A               	movf	??_main,w
  2251  0BD8  07E8               	addwf	_token,f
  2252  0BD9  3001               	movlw	1
  2253  0BDA  0025               	movlb	5	; select bank5
  2254  0BDB  07DC               	addwf	main@j^(0+640),f
  2255  0BDC  3000               	movlw	0
  2256  0BDD  3DDD               	addwfc	(main@j+1)^(0+640),f
  2257  0BDE  085D               	movf	(main@j+1)^(0+640),w
  2258  0BDF  3A80               	xorlw	128
  2259  0BE0  0020               	movlb	0	; select bank0
  2260  0BE1  00DA               	movwf	??_main
  2261  0BE2  3080               	movlw	128
  2262  0BE3  025A               	subwf	??_main,w
  2263  0BE4  1D03               	skipz
  2264  0BE5  2BE9               	goto	u5945
  2265  0BE6  3001               	movlw	1
  2266  0BE7  0025               	movlb	5	; select bank5
  2267  0BE8  025C               	subwf	main@j^(0+640),w
  2268  0BE9                     u5945:	
  2269  0BE9  1C03               	skipc
  2270  0BEA  2BC5               	goto	l5983
  2271  0BEB                     l5991:	
  2272                           
  2273                           ;main.c: 545: }
  2274                           ;main.c: 546: SwitchNumberString = switchNumberBuffer;
  2275  0BEB  30C9               	movlw	(low (_switchNumberBuffer| (0+256)))& (0+255)
  2276  0BEC  0020               	movlb	0	; select bank0
  2277  0BED  00DA               	movwf	??_main
  2278  0BEE  085A               	movf	??_main,w
  2279  0BEF  00F3               	movwf	_SwitchNumberString
  2280                           
  2281                           ;main.c: 549: }break;
  2282  0BF0  2CE5               	goto	l6047
  2283  0BF1                     l5993:	
  2284                           ;main.c: 551: case 2:
  2285                           
  2286                           
  2287                           ;main.c: 552: {
  2288                           ;main.c: 553: AcknowledgementString = token;
  2289  0BF1  0020               	movlb	0	; select bank0
  2290  0BF2  0868               	movf	_token,w
  2291  0BF3  00DA               	movwf	??_main
  2292  0BF4  085A               	movf	??_main,w
  2293  0BF5  0022               	movlb	2	; select bank2
  2294  0BF6  00DB               	movwf	_AcknowledgementString^(0+256)
  2295                           
  2296                           ;main.c: 556: }break;
  2297  0BF7  2CE5               	goto	l6047
  2298  0BF8                     l5995:	
  2299                           ;main.c: 557: case 3:
  2300                           
  2301                           
  2302                           ;main.c: 558: {
  2303                           ;main.c: 559: int k=0;
  2304  0BF8  0025               	movlb	5	; select bank5
  2305  0BF9  01DE               	clrf	main@k^(0+640)
  2306  0BFA  01DF               	clrf	(main@k+1)^(0+640)
  2307                           
  2308                           ;main.c: 560: for(k=0;k<1;k++)
  2309  0BFB  01DE               	clrf	main@k^(0+640)
  2310  0BFC  01DF               	clrf	(main@k+1)^(0+640)
  2311  0BFD  085F               	movf	(main@k+1)^(0+640),w
  2312  0BFE  3A80               	xorlw	128
  2313  0BFF  0020               	movlb	0	; select bank0
  2314  0C00  00DA               	movwf	??_main
  2315  0C01  3080               	movlw	128
  2316  0C02  025A               	subwf	??_main,w
  2317  0C03  1D03               	skipz
  2318  0C04  2C08               	goto	u5955
  2319  0C05  3001               	movlw	1
  2320  0C06  0025               	movlb	5	; select bank5
  2321  0C07  025E               	subwf	main@k^(0+640),w
  2322  0C08                     u5955:	
  2323  0C08  1803               	btfsc	3,0
  2324  0C09  2C30               	goto	l6009
  2325  0C0A                     l6001:	
  2326                           
  2327                           ;main.c: 561: {
  2328                           ;main.c: 562: switchstatusbuffer[k]= *token;
  2329  0C0A  0020               	movlb	0	; select bank0
  2330  0C0B  0868               	movf	_token,w
  2331  0C0C  0086               	movwf	6
  2332  0C0D  3002               	movlw	2	; select bank4/5
  2333  0C0E  0087               	movwf	7
  2334  0C0F  0801               	movf	1,w
  2335  0C10  00DA               	movwf	??_main
  2336  0C11  0025               	movlb	5	; select bank5
  2337  0C12  085E               	movf	main@k^(0+640),w
  2338  0C13  3E60               	addlw	(low (_switchstatusbuffer| (0+256)))& (0+255)
  2339  0C14  0086               	movwf	6
  2340  0C15  3001               	movlw	1	; select bank2/3
  2341  0C16  0087               	movwf	7
  2342  0C17  0020               	movlb	0	; select bank0
  2343  0C18  085A               	movf	??_main,w
  2344  0C19  0081               	movwf	1
  2345                           
  2346                           ;main.c: 563: *token++;
  2347  0C1A  3001               	movlw	1
  2348  0C1B  00DA               	movwf	??_main
  2349  0C1C  085A               	movf	??_main,w
  2350  0C1D  07E8               	addwf	_token,f
  2351  0C1E  3001               	movlw	1
  2352  0C1F  0025               	movlb	5	; select bank5
  2353  0C20  07DE               	addwf	main@k^(0+640),f
  2354  0C21  3000               	movlw	0
  2355  0C22  3DDF               	addwfc	(main@k+1)^(0+640),f
  2356  0C23  085F               	movf	(main@k+1)^(0+640),w
  2357  0C24  3A80               	xorlw	128
  2358  0C25  0020               	movlb	0	; select bank0
  2359  0C26  00DA               	movwf	??_main
  2360  0C27  3080               	movlw	128
  2361  0C28  025A               	subwf	??_main,w
  2362  0C29  1D03               	skipz
  2363  0C2A  2C2E               	goto	u5965
  2364  0C2B  3001               	movlw	1
  2365  0C2C  0025               	movlb	5	; select bank5
  2366  0C2D  025E               	subwf	main@k^(0+640),w
  2367  0C2E                     u5965:	
  2368  0C2E  1C03               	skipc
  2369  0C2F  2C0A               	goto	l6001
  2370  0C30                     l6009:	
  2371                           
  2372                           ;main.c: 564: }
  2373                           ;main.c: 565: SwitchStatusString = switchstatusbuffer;
  2374  0C30  3060               	movlw	(low (_switchstatusbuffer| (0+256)))& (0+255)
  2375  0C31  0020               	movlb	0	; select bank0
  2376  0C32  00DA               	movwf	??_main
  2377  0C33  085A               	movf	??_main,w
  2378  0C34  00F2               	movwf	_SwitchStatusString
  2379                           
  2380                           ;main.c: 569: } break;
  2381  0C35  2CE5               	goto	l6047
  2382  0C36                     l6011:	
  2383                           ;main.c: 570: case 4:
  2384                           
  2385                           
  2386                           ;main.c: 571: {
  2387                           ;main.c: 572: RedColorIntensityString = token;
  2388  0C36  0020               	movlb	0	; select bank0
  2389  0C37  0868               	movf	_token,w
  2390  0C38  00DA               	movwf	??_main
  2391  0C39  085A               	movf	??_main,w
  2392  0C3A  00E6               	movwf	_RedColorIntensityString
  2393                           
  2394                           ;main.c: 573: RedColorIntensityStringLength = strlen(RedColorIntensityString);
  2395  0C3B  0866               	movf	_RedColorIntensityString,w
  2396  0C3C  00A0               	movwf	strlen@s
  2397  0C3D  39FF               	andlw	255
  2398  0C3E  1D03               	skipz
  2399  0C3F  3002               	movlw	2
  2400  0C40  00A1               	movwf	strlen@s+1
  2401  0C41  3191  218F  318A   	fcall	_strlen
  2402  0C44  0020               	movlb	0	; select bank0
  2403  0C45  0821               	movf	?_strlen+1,w
  2404  0C46  0023               	movlb	3	; select bank3
  2405  0C47  00B8               	movwf	(_RedColorIntensityStringLength+1)^(0+384)
  2406  0C48  0020               	movlb	0	; select bank0
  2407  0C49  0820               	movf	?_strlen,w
  2408  0C4A  0023               	movlb	3	; select bank3
  2409  0C4B  00B7               	movwf	_RedColorIntensityStringLength^(0+384)
  2410                           
  2411                           ;main.c: 576: } break;
  2412  0C4C  2CE5               	goto	l6047
  2413  0C4D                     l6015:	
  2414                           ;main.c: 577: case 5:
  2415                           
  2416                           
  2417                           ;main.c: 578: {
  2418                           ;main.c: 579: GreenColorIntensityString = token;
  2419  0C4D  0020               	movlb	0	; select bank0
  2420  0C4E  0868               	movf	_token,w
  2421  0C4F  00DA               	movwf	??_main
  2422  0C50  085A               	movf	??_main,w
  2423  0C51  00E5               	movwf	_GreenColorIntensityString
  2424                           
  2425                           ;main.c: 580: GreenColorIntensityStringLength = strlen(GreenColorIntensityString);
  2426  0C52  0865               	movf	_GreenColorIntensityString,w
  2427  0C53  00A0               	movwf	strlen@s
  2428  0C54  39FF               	andlw	255
  2429  0C55  1D03               	skipz
  2430  0C56  3002               	movlw	2
  2431  0C57  00A1               	movwf	strlen@s+1
  2432  0C58  3191  218F  318A   	fcall	_strlen
  2433  0C5B  0020               	movlb	0	; select bank0
  2434  0C5C  0821               	movf	?_strlen+1,w
  2435  0C5D  0023               	movlb	3	; select bank3
  2436  0C5E  00B6               	movwf	(_GreenColorIntensityStringLength+1)^(0+384)
  2437  0C5F  0020               	movlb	0	; select bank0
  2438  0C60  0820               	movf	?_strlen,w
  2439  0C61  0023               	movlb	3	; select bank3
  2440  0C62  00B5               	movwf	_GreenColorIntensityStringLength^(0+384)
  2441                           
  2442                           ;main.c: 583: } break;
  2443  0C63  2CE5               	goto	l6047
  2444  0C64                     l6019:	
  2445                           ;main.c: 584: case 6:
  2446                           
  2447                           
  2448                           ;main.c: 585: {
  2449                           ;main.c: 586: BlueColorIntensityString = token;
  2450  0C64  0020               	movlb	0	; select bank0
  2451  0C65  0868               	movf	_token,w
  2452  0C66  00DA               	movwf	??_main
  2453  0C67  085A               	movf	??_main,w
  2454  0C68  00E4               	movwf	_BlueColorIntensityString
  2455                           
  2456                           ;main.c: 587: BlueColorIntensityStringLength = strlen(BlueColorIntensityString);
  2457  0C69  0864               	movf	_BlueColorIntensityString,w
  2458  0C6A  00A0               	movwf	strlen@s
  2459  0C6B  39FF               	andlw	255
  2460  0C6C  1D03               	skipz
  2461  0C6D  3002               	movlw	2
  2462  0C6E  00A1               	movwf	strlen@s+1
  2463  0C6F  3191  218F  318A   	fcall	_strlen
  2464  0C72  0020               	movlb	0	; select bank0
  2465  0C73  0821               	movf	?_strlen+1,w
  2466  0C74  0023               	movlb	3	; select bank3
  2467  0C75  00B2               	movwf	(_BlueColorIntensityStringLength+1)^(0+384)
  2468  0C76  0020               	movlb	0	; select bank0
  2469  0C77  0820               	movf	?_strlen,w
  2470  0C78  0023               	movlb	3	; select bank3
  2471  0C79  00B1               	movwf	_BlueColorIntensityStringLength^(0+384)
  2472                           
  2473                           ;main.c: 590: } break;
  2474  0C7A  2CE5               	goto	l6047
  2475  0C7B                     l6023:	
  2476                           ;main.c: 591: case 7:
  2477                           
  2478                           
  2479                           ;main.c: 592: {
  2480                           ;main.c: 594: int k=0;
  2481  0C7B  0025               	movlb	5	; select bank5
  2482  0C7C  01E0               	clrf	main@k_1266^(0+640)
  2483  0C7D  01E1               	clrf	(main@k_1266+1)^(0+640)
  2484                           
  2485                           ;main.c: 595: for(k=0;k<1;k++)
  2486  0C7E  01E0               	clrf	main@k_1266^(0+640)
  2487  0C7F  01E1               	clrf	(main@k_1266+1)^(0+640)
  2488  0C80  0861               	movf	(main@k_1266+1)^(0+640),w
  2489  0C81  3A80               	xorlw	128
  2490  0C82  0020               	movlb	0	; select bank0
  2491  0C83  00DA               	movwf	??_main
  2492  0C84  3080               	movlw	128
  2493  0C85  025A               	subwf	??_main,w
  2494  0C86  1D03               	skipz
  2495  0C87  2C8B               	goto	u5975
  2496  0C88  3001               	movlw	1
  2497  0C89  0025               	movlb	5	; select bank5
  2498  0C8A  0260               	subwf	main@k_1266^(0+640),w
  2499  0C8B                     u5975:	
  2500  0C8B  1803               	btfsc	3,0
  2501  0C8C  2CB5               	goto	l6037
  2502  0C8D                     l6029:	
  2503                           
  2504                           ;main.c: 596: {
  2505                           ;main.c: 597: ChildLockString[k]= *token;
  2506  0C8D  0020               	movlb	0	; select bank0
  2507  0C8E  0868               	movf	_token,w
  2508  0C8F  0086               	movwf	6
  2509  0C90  3002               	movlw	2	; select bank4/5
  2510  0C91  0087               	movwf	7
  2511  0C92  0801               	movf	1,w
  2512  0C93  00DA               	movwf	??_main
  2513  0C94  0025               	movlb	5	; select bank5
  2514  0C95  0860               	movf	main@k_1266^(0+640),w
  2515  0C96  0020               	movlb	0	; select bank0
  2516  0C97  0762               	addwf	_ChildLockString,w
  2517  0C98  00DB               	movwf	??_main+1
  2518  0C99  085B               	movf	??_main+1,w
  2519  0C9A  0086               	movwf	6
  2520  0C9B  3001               	movlw	1	; select bank2/3
  2521  0C9C  0087               	movwf	7
  2522  0C9D  085A               	movf	??_main,w
  2523  0C9E  0081               	movwf	1
  2524                           
  2525                           ;main.c: 598: *token++;
  2526  0C9F  3001               	movlw	1
  2527  0CA0  00DA               	movwf	??_main
  2528  0CA1  085A               	movf	??_main,w
  2529  0CA2  07E8               	addwf	_token,f
  2530  0CA3  3001               	movlw	1
  2531  0CA4  0025               	movlb	5	; select bank5
  2532  0CA5  07E0               	addwf	main@k_1266^(0+640),f
  2533  0CA6  3000               	movlw	0
  2534  0CA7  3DE1               	addwfc	(main@k_1266+1)^(0+640),f
  2535  0CA8  0861               	movf	(main@k_1266+1)^(0+640),w
  2536  0CA9  3A80               	xorlw	128
  2537  0CAA  0020               	movlb	0	; select bank0
  2538  0CAB  00DA               	movwf	??_main
  2539  0CAC  3080               	movlw	128
  2540  0CAD  025A               	subwf	??_main,w
  2541  0CAE  1D03               	skipz
  2542  0CAF  2CB3               	goto	u5985
  2543  0CB0  3001               	movlw	1
  2544  0CB1  0025               	movlb	5	; select bank5
  2545  0CB2  0260               	subwf	main@k_1266^(0+640),w
  2546  0CB3                     u5985:	
  2547  0CB3  1C03               	skipc
  2548  0CB4  2C8D               	goto	l6029
  2549  0CB5                     l6037:	
  2550                           
  2551                           ;main.c: 599: }
  2552                           ;main.c: 600: ChildLockString = ChildLockbuffer;
  2553  0CB5  305E               	movlw	(low (_ChildLockbuffer| (0+256)))& (0+255)
  2554  0CB6  0020               	movlb	0	; select bank0
  2555  0CB7  00DA               	movwf	??_main
  2556  0CB8  085A               	movf	??_main,w
  2557  0CB9  00E2               	movwf	_ChildLockString
  2558                           
  2559                           ;main.c: 603: } break;
  2560  0CBA  2CE5               	goto	l6047
  2561  0CBB                     l6039:	
  2562                           ;main.c: 604: case 8:
  2563                           
  2564                           
  2565                           ;main.c: 605: {
  2566                           ;main.c: 606: AllColorIntensityString = token;
  2567  0CBB  0020               	movlb	0	; select bank0
  2568  0CBC  0868               	movf	_token,w
  2569  0CBD  00DA               	movwf	??_main
  2570  0CBE  085A               	movf	??_main,w
  2571  0CBF  00E3               	movwf	_AllColorIntensityString
  2572                           
  2573                           ;main.c: 607: AllColorIntensityStringLength = strlen(AllColorIntensityString);
  2574  0CC0  0863               	movf	_AllColorIntensityString,w
  2575  0CC1  00A0               	movwf	strlen@s
  2576  0CC2  39FF               	andlw	255
  2577  0CC3  1D03               	skipz
  2578  0CC4  3002               	movlw	2
  2579  0CC5  00A1               	movwf	strlen@s+1
  2580  0CC6  3191  218F  318A   	fcall	_strlen
  2581  0CC9  0020               	movlb	0	; select bank0
  2582  0CCA  0821               	movf	?_strlen+1,w
  2583  0CCB  0023               	movlb	3	; select bank3
  2584  0CCC  00B4               	movwf	(_AllColorIntensityStringLength+1)^(0+384)
  2585  0CCD  0020               	movlb	0	; select bank0
  2586  0CCE  0820               	movf	?_strlen,w
  2587  0CCF  0023               	movlb	3	; select bank3
  2588  0CD0  00B3               	movwf	_AllColorIntensityStringLength^(0+384)
  2589                           
  2590                           ;main.c: 614: }
  2591                           
  2592                           ;main.c: 611: break;
  2593                           
  2594                           ;main.c: 610: default:
  2595                           
  2596                           ;main.c: 608: }break;
  2597  0CD1  2CE5               	goto	l6047
  2598  0CD2                     l6045:	
  2599                           
  2600                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2601                           ; Switch size 1, requested type "space"
  2602                           ; Number of cases is 1, Range of values is 0 to 0
  2603                           ; switch strategies available:
  2604                           ; Name         Instructions Cycles
  2605                           ; simple_byte            4     3 (average)
  2606                           ; direct_byte            8     6 (fixed)
  2607                           ; jumptable            260     6 (fixed)
  2608                           ;	Chosen strategy is simple_byte
  2609  0CD2  0022               	movlb	2	; select bank2
  2610  0CD3  083B               	movf	(_partCounter+1)^(0+256),w
  2611  0CD4  3A00               	xorlw	0	; case 0
  2612  0CD5  1903               	skipnz
  2613  0CD6  2CD8               	goto	l6491
  2614  0CD7  2CE5               	goto	l6047
  2615  0CD8                     l6491:	
  2616                           
  2617                           ; Switch size 1, requested type "space"
  2618                           ; Number of cases is 8, Range of values is 1 to 8
  2619                           ; switch strategies available:
  2620                           ; Name         Instructions Cycles
  2621                           ; direct_byte           25     9 (fixed)
  2622                           ; simple_byte           25    13 (average)
  2623                           ; jumptable            263     9 (fixed)
  2624                           ;	Chosen strategy is direct_byte
  2625  0CD8  083A               	movf	_partCounter^(0+256),w
  2626  0CD9  3EFF               	addlw	-1
  2627  0CDA  1C03               	skipc
  2628  0CDB  2CE5               	goto	l6047
  2629  0CDC  0084               	movwf	4
  2630  0CDD  3008               	movlw	8
  2631  0CDE  0204               	subwf	4,w
  2632  0CDF  1803               	skipnc
  2633  0CE0  2CE5               	goto	l6047
  2634  0CE1  3190               	movlp	high S6493
  2635  0CE2  3504               	lslf	4,w
  2636  0CE3  3E00               	addlw	low S6493
  2637  0CE4  0082               	movwf	2
  2638  0CE5                     l6047:	
  2639  0CE5  0020               	movlb	0	; select bank0
  2640  0CE6  0868               	movf	_token,w
  2641  0CE7  1D03               	btfss	3,2
  2642  0CE8  2BA0               	goto	l5973
  2643  0CE9                     l6049:	
  2644                           
  2645                           ;main.c: 615: }
  2646                           ;main.c: 617: }
  2647                           ;main.c: 619: applicationControlRGB(ModuleNameString,SwitchNumberString,SwitchStatusStri
      +                          ng,
  2648                           ;main.c: 620: RedColorIntensityString,GreenColorIntensityString,BlueColorIntensityString
      +                          ,ChildLockString,AllColorIntensityString );
  2649  0CE9  0873               	movf	_SwitchNumberString,w
  2650  0CEA  00DA               	movwf	??_main
  2651  0CEB  085A               	movf	??_main,w
  2652  0CEC  00CC               	movwf	applicationControlRGB@SwitchNumberstr
  2653  0CED  0872               	movf	_SwitchStatusString,w
  2654  0CEE  00DB               	movwf	??_main+1
  2655  0CEF  085B               	movf	??_main+1,w
  2656  0CF0  00CD               	movwf	applicationControlRGB@SwitchStatusstr
  2657  0CF1  0866               	movf	_RedColorIntensityString,w
  2658  0CF2  00DC               	movwf	??_main+2
  2659  0CF3  085C               	movf	??_main+2,w
  2660  0CF4  00CE               	movwf	applicationControlRGB@RedColorIntensitystr
  2661  0CF5  0865               	movf	_GreenColorIntensityString,w
  2662  0CF6  00DD               	movwf	??_main+3
  2663  0CF7  085D               	movf	??_main+3,w
  2664  0CF8  00CF               	movwf	applicationControlRGB@GreenColorIntensitystr
  2665  0CF9  0864               	movf	_BlueColorIntensityString,w
  2666  0CFA  00DE               	movwf	??_main+4
  2667  0CFB  085E               	movf	??_main+4,w
  2668  0CFC  00D0               	movwf	applicationControlRGB@BlueColorIntensitystr
  2669  0CFD  0862               	movf	_ChildLockString,w
  2670  0CFE  00DF               	movwf	??_main+5
  2671  0CFF  085F               	movf	??_main+5,w
  2672  0D00  00D1               	movwf	applicationControlRGB@ChildLockstr
  2673  0D01  0863               	movf	_AllColorIntensityString,w
  2674  0D02  00E0               	movwf	??_main+6
  2675  0D03  0860               	movf	??_main+6,w
  2676  0D04  00D2               	movwf	applicationControlRGB@Allcolorstr
  2677  0D05  0867               	movf	_ModuleNameString,w
  2678  0D06  3181  218A  318A   	fcall	_applicationControlRGB
  2679                           
  2680                           ;main.c: 621: memset(mainReceivedDataBuffer,'0',sizeof(mainReceivedDataBuffer));
  2681  0D09  305C               	movlw	low _mainReceivedDataBuffer
  2682  0D0A  0020               	movlb	0	; select bank0
  2683  0D0B  00A0               	movwf	memset@p1
  2684  0D0C  3002               	movlw	high _mainReceivedDataBuffer
  2685  0D0D  00A1               	movwf	memset@p1+1
  2686  0D0E  3030               	movlw	48
  2687  0D0F  00A2               	movwf	memset@c
  2688  0D10  3000               	movlw	0
  2689  0D11  00A3               	movwf	memset@c+1
  2690  0D12  3012               	movlw	18
  2691  0D13  00A4               	movwf	memset@n
  2692  0D14  3000               	movlw	0
  2693  0D15  00A5               	movwf	memset@n+1
  2694  0D16  3190  20EF  318A   	fcall	_memset
  2695                           
  2696                           ;main.c: 622: }
  2697  0D19  2D56               	goto	l6071
  2698  0D1A                     l6053:	
  2699                           
  2700                           ;main.c: 624: else
  2701                           ;main.c: 625: {
  2702                           ;main.c: 627: errorsMain("ERLS");
  2703  0D1A  3020               	movlw	low (STR_19| (0+32768))
  2704  0D1B  0020               	movlb	0	; select bank0
  2705  0D1C  00A0               	movwf	errorsMain@errNum
  2706  0D1D  3098               	movlw	high (STR_19| (0+32768))
  2707  0D1E  00A1               	movwf	errorsMain@errNum+1
  2708  0D1F  3191  2108  318A   	fcall	_errorsMain
  2709                           
  2710                           ;main.c: 628: RC1STAbits.SPEN=0;
  2711  0D22  0023               	movlb	3	; select bank3
  2712  0D23  139D               	bcf	29,7	;volatile
  2713                           
  2714                           ;main.c: 629: RC1STAbits.CREN = 0;
  2715  0D24  121D               	bcf	29,4	;volatile
  2716                           
  2717                           ;main.c: 630: for(int dataBufferCounter = 0; dataBufferCounter< 15; dataBufferCounter++)
  2718  0D25  0025               	movlb	5	; select bank5
  2719  0D26  01DA               	clrf	main@dataBufferCounter^(0+640)
  2720  0D27  01DB               	clrf	(main@dataBufferCounter+1)^(0+640)
  2721  0D28  085B               	movf	(main@dataBufferCounter+1)^(0+640),w
  2722  0D29  3A80               	xorlw	128
  2723  0D2A  0020               	movlb	0	; select bank0
  2724  0D2B  00DA               	movwf	??_main
  2725  0D2C  3080               	movlw	128
  2726  0D2D  025A               	subwf	??_main,w
  2727  0D2E  1D03               	skipz
  2728  0D2F  2D33               	goto	u6005
  2729  0D30  300F               	movlw	15
  2730  0D31  0025               	movlb	5	; select bank5
  2731  0D32  025A               	subwf	main@dataBufferCounter^(0+640),w
  2732  0D33                     u6005:	
  2733  0D33  1803               	btfsc	3,0
  2734  0D34  2D53               	goto	l548
  2735  0D35                     l6065:	
  2736                           
  2737                           ;main.c: 631: {
  2738                           ;main.c: 632: mainReceivedDataBuffer[dataBufferCounter] = '#';
  2739  0D35  3023               	movlw	35
  2740  0D36  0020               	movlb	0	; select bank0
  2741  0D37  00DA               	movwf	??_main
  2742  0D38  0025               	movlb	5	; select bank5
  2743  0D39  085A               	movf	main@dataBufferCounter^(0+640),w
  2744  0D3A  3E5C               	addlw	(low (_mainReceivedDataBuffer| (0+512)))& (0+255)
  2745  0D3B  0086               	movwf	6
  2746  0D3C  3002               	movlw	2	; select bank4/5
  2747  0D3D  0087               	movwf	7
  2748  0D3E  0020               	movlb	0	; select bank0
  2749  0D3F  085A               	movf	??_main,w
  2750  0D40  0081               	movwf	1
  2751  0D41  3001               	movlw	1
  2752  0D42  0025               	movlb	5	; select bank5
  2753  0D43  07DA               	addwf	main@dataBufferCounter^(0+640),f
  2754  0D44  3000               	movlw	0
  2755  0D45  3DDB               	addwfc	(main@dataBufferCounter+1)^(0+640),f
  2756  0D46  085B               	movf	(main@dataBufferCounter+1)^(0+640),w
  2757  0D47  3A80               	xorlw	128
  2758  0D48  0020               	movlb	0	; select bank0
  2759  0D49  00DA               	movwf	??_main
  2760  0D4A  3080               	movlw	128
  2761  0D4B  025A               	subwf	??_main,w
  2762  0D4C  1D03               	skipz
  2763  0D4D  2D51               	goto	u6015
  2764  0D4E  300F               	movlw	15
  2765  0D4F  0025               	movlb	5	; select bank5
  2766  0D50  025A               	subwf	main@dataBufferCounter^(0+640),w
  2767  0D51                     u6015:	
  2768  0D51  1C03               	skipc
  2769  0D52  2D35               	goto	l6065
  2770  0D53                     l548:	
  2771                           
  2772                           ;main.c: 633: }
  2773                           ;main.c: 634: RC1STAbits.CREN = 1;
  2774  0D53  0023               	movlb	3	; select bank3
  2775  0D54  161D               	bsf	29,4	;volatile
  2776                           
  2777                           ;main.c: 635: RC1STAbits.SPEN=1;
  2778  0D55  179D               	bsf	29,7	;volatile
  2779  0D56                     l6071:	
  2780                           
  2781                           ;main.c: 636: }
  2782                           ;main.c: 637: }
  2783                           ;main.c: 642: int man = 1;
  2784  0D56  3001               	movlw	1
  2785  0D57  0025               	movlb	5	; select bank5
  2786  0D58  00E2               	movwf	main@man^(0+640)
  2787  0D59  3000               	movlw	0
  2788  0D5A  00E3               	movwf	(main@man^(0+640)+1)
  2789                           
  2790                           ;main.c: 643: if(copy_parentalLockBuffer[1] == '0' && PORTDbits.RD6 == 0 && M1 == 0)
  2791  0D5B  3030               	movlw	48
  2792  0D5C  0023               	movlb	3	; select bank3
  2793  0D5D  064D               	xorwf	(_copy_parentalLockBuffer^(0+384)+1),w
  2794  0D5E  1D03               	btfss	3,2
  2795  0D5F  2D82               	goto	l6089
  2796  0D60  0020               	movlb	0	; select bank0
  2797  0D61  1B0F               	btfsc	15,6	;volatile
  2798  0D62  2D82               	goto	l6089
  2799  0D63  0022               	movlb	2	; select bank2
  2800  0D64  0830               	movf	_M1^(0+256),w
  2801  0D65  0431               	iorwf	(_M1+1)^(0+256),w
  2802  0D66  1D03               	btfss	3,2
  2803  0D67  2D82               	goto	l6089
  2804                           
  2805                           ;main.c: 644: {
  2806                           ;main.c: 645: if(man == 1)
  2807  0D68  0025               	movlb	5	; select bank5
  2808  0D69  0362               	decf	main@man^(0+640),w
  2809  0D6A  0463               	iorwf	(main@man+1)^(0+640),w
  2810  0D6B  1D03               	btfss	3,2
  2811  0D6C  2D7A               	goto	l6085
  2812                           
  2813                           ;main.c: 646: {
  2814                           ;main.c: 647: SwitchOnStatustToGatway(1);
  2815  0D6D  3001               	movlw	1
  2816  0D6E  0020               	movlb	0	; select bank0
  2817  0D6F  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  2818  0D70  3000               	movlw	0
  2819  0D71  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  2820  0D72  3193  23A9  318A   	fcall	_SwitchOnStatustToGatway
  2821                           
  2822                           ;main.c: 649: TransmissionIndicationLedBlinking();
  2823  0D75  3190  2075  318A   	fcall	_TransmissionIndicationLedBlinking
  2824                           
  2825                           ;main.c: 650: PORTEbits.RE0=1;
  2826  0D78  0020               	movlb	0	; select bank0
  2827  0D79  1410               	bsf	16,0	;volatile
  2828  0D7A                     l6085:	
  2829                           
  2830                           ;main.c: 652: }
  2831                           ;main.c: 653: man=0;
  2832  0D7A  0025               	movlb	5	; select bank5
  2833  0D7B  01E2               	clrf	main@man^(0+640)
  2834  0D7C  01E3               	clrf	(main@man+1)^(0+640)
  2835                           
  2836                           ;main.c: 654: M1=1;
  2837  0D7D  3001               	movlw	1
  2838  0D7E  0022               	movlb	2	; select bank2
  2839  0D7F  00B0               	movwf	_M1^(0+256)
  2840  0D80  3000               	movlw	0
  2841  0D81  00B1               	movwf	(_M1^(0+256)+1)
  2842  0D82                     l6089:	
  2843                           
  2844                           ;main.c: 656: }
  2845                           ;main.c: 658: if(copy_parentalLockBuffer[1] == '0' && PORTDbits.RD6 == 1 && M1 == 1)
  2846  0D82  3030               	movlw	48
  2847  0D83  0023               	movlb	3	; select bank3
  2848  0D84  064D               	xorwf	(_copy_parentalLockBuffer^(0+384)+1),w
  2849  0D85  1D03               	btfss	3,2
  2850  0D86  2DA7               	goto	l6105
  2851  0D87  0020               	movlb	0	; select bank0
  2852  0D88  1F0F               	btfss	15,6	;volatile
  2853  0D89  2DA7               	goto	l6105
  2854  0D8A  0022               	movlb	2	; select bank2
  2855  0D8B  0330               	decf	_M1^(0+256),w
  2856  0D8C  0431               	iorwf	(_M1+1)^(0+256),w
  2857  0D8D  1D03               	btfss	3,2
  2858  0D8E  2DA7               	goto	l6105
  2859                           
  2860                           ;main.c: 659: {
  2861                           ;main.c: 661: if(man==1)
  2862  0D8F  0025               	movlb	5	; select bank5
  2863  0D90  0362               	decf	main@man^(0+640),w
  2864  0D91  0463               	iorwf	(main@man+1)^(0+640),w
  2865  0D92  1D03               	btfss	3,2
  2866  0D93  2DA1               	goto	l6101
  2867                           
  2868                           ;main.c: 662: {
  2869                           ;main.c: 663: SwitchOffStatustToGatway(1);
  2870  0D94  3001               	movlw	1
  2871  0D95  0020               	movlb	0	; select bank0
  2872  0D96  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  2873  0D97  3000               	movlw	0
  2874  0D98  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  2875  0D99  3193  2376  318A   	fcall	_SwitchOffStatustToGatway
  2876                           
  2877                           ;main.c: 664: TransmissionIndicationLedBlinking();
  2878  0D9C  3190  2075  318A   	fcall	_TransmissionIndicationLedBlinking
  2879                           
  2880                           ;main.c: 665: PORTEbits.RE0=0;
  2881  0D9F  0020               	movlb	0	; select bank0
  2882  0DA0  1010               	bcf	16,0	;volatile
  2883  0DA1                     l6101:	
  2884                           
  2885                           ;main.c: 666: }
  2886                           ;main.c: 667: man=0;
  2887  0DA1  0025               	movlb	5	; select bank5
  2888  0DA2  01E2               	clrf	main@man^(0+640)
  2889  0DA3  01E3               	clrf	(main@man+1)^(0+640)
  2890                           
  2891                           ;main.c: 668: M1=0;
  2892  0DA4  0022               	movlb	2	; select bank2
  2893  0DA5  01B0               	clrf	_M1^(0+256)
  2894  0DA6  01B1               	clrf	(_M1+1)^(0+256)
  2895  0DA7                     l6105:	
  2896                           
  2897                           ;main.c: 669: }
  2898                           ;main.c: 673: if(copy_parentalLockBuffer[2] == '0' && PORTDbits.RD7 == 0 && M2 == 0)
  2899  0DA7  3030               	movlw	48
  2900  0DA8  0023               	movlb	3	; select bank3
  2901  0DA9  064E               	xorwf	(_copy_parentalLockBuffer^(0+384)+2),w
  2902  0DAA  1D03               	btfss	3,2
  2903  0DAB  2DCE               	goto	l6121
  2904  0DAC  0020               	movlb	0	; select bank0
  2905  0DAD  1B8F               	btfsc	15,7	;volatile
  2906  0DAE  2DCE               	goto	l6121
  2907  0DAF  0022               	movlb	2	; select bank2
  2908  0DB0  082E               	movf	_M2^(0+256),w
  2909  0DB1  042F               	iorwf	(_M2+1)^(0+256),w
  2910  0DB2  1D03               	btfss	3,2
  2911  0DB3  2DCE               	goto	l6121
  2912                           
  2913                           ;main.c: 674: {
  2914                           ;main.c: 675: if(man==1)
  2915  0DB4  0025               	movlb	5	; select bank5
  2916  0DB5  0362               	decf	main@man^(0+640),w
  2917  0DB6  0463               	iorwf	(main@man+1)^(0+640),w
  2918  0DB7  1D03               	btfss	3,2
  2919  0DB8  2DC6               	goto	l6117
  2920                           
  2921                           ;main.c: 676: {
  2922                           ;main.c: 677: SwitchOnStatustToGatway(2);
  2923  0DB9  3002               	movlw	2
  2924  0DBA  0020               	movlb	0	; select bank0
  2925  0DBB  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  2926  0DBC  3000               	movlw	0
  2927  0DBD  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  2928  0DBE  3193  23A9  318A   	fcall	_SwitchOnStatustToGatway
  2929                           
  2930                           ;main.c: 678: TransmissionIndicationLedBlinking();
  2931  0DC1  3190  2075  318A   	fcall	_TransmissionIndicationLedBlinking
  2932                           
  2933                           ;main.c: 679: PORTEbits.RE1=1;
  2934  0DC4  0020               	movlb	0	; select bank0
  2935  0DC5  1490               	bsf	16,1	;volatile
  2936  0DC6                     l6117:	
  2937                           
  2938                           ;main.c: 680: }
  2939                           ;main.c: 681: man=0;
  2940  0DC6  0025               	movlb	5	; select bank5
  2941  0DC7  01E2               	clrf	main@man^(0+640)
  2942  0DC8  01E3               	clrf	(main@man+1)^(0+640)
  2943                           
  2944                           ;main.c: 682: M2=1;
  2945  0DC9  3001               	movlw	1
  2946  0DCA  0022               	movlb	2	; select bank2
  2947  0DCB  00AE               	movwf	_M2^(0+256)
  2948  0DCC  3000               	movlw	0
  2949  0DCD  00AF               	movwf	(_M2^(0+256)+1)
  2950  0DCE                     l6121:	
  2951                           
  2952                           ;main.c: 683: }
  2953                           ;main.c: 685: if(copy_parentalLockBuffer[2] == '0' && PORTDbits.RD7 == 1 && M2 == 1)
  2954  0DCE  3030               	movlw	48
  2955  0DCF  0023               	movlb	3	; select bank3
  2956  0DD0  064E               	xorwf	(_copy_parentalLockBuffer^(0+384)+2),w
  2957  0DD1  1D03               	btfss	3,2
  2958  0DD2  2DF3               	goto	l6137
  2959  0DD3  0020               	movlb	0	; select bank0
  2960  0DD4  1F8F               	btfss	15,7	;volatile
  2961  0DD5  2DF3               	goto	l6137
  2962  0DD6  0022               	movlb	2	; select bank2
  2963  0DD7  032E               	decf	_M2^(0+256),w
  2964  0DD8  042F               	iorwf	(_M2+1)^(0+256),w
  2965  0DD9  1D03               	btfss	3,2
  2966  0DDA  2DF3               	goto	l6137
  2967                           
  2968                           ;main.c: 686: {
  2969                           ;main.c: 687: if(man==1)
  2970  0DDB  0025               	movlb	5	; select bank5
  2971  0DDC  0362               	decf	main@man^(0+640),w
  2972  0DDD  0463               	iorwf	(main@man+1)^(0+640),w
  2973  0DDE  1D03               	btfss	3,2
  2974  0DDF  2DED               	goto	l6133
  2975                           
  2976                           ;main.c: 688: {
  2977                           ;main.c: 689: SwitchOffStatustToGatway(2);
  2978  0DE0  3002               	movlw	2
  2979  0DE1  0020               	movlb	0	; select bank0
  2980  0DE2  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  2981  0DE3  3000               	movlw	0
  2982  0DE4  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  2983  0DE5  3193  2376  318A   	fcall	_SwitchOffStatustToGatway
  2984                           
  2985                           ;main.c: 690: TransmissionIndicationLedBlinking();
  2986  0DE8  3190  2075  318A   	fcall	_TransmissionIndicationLedBlinking
  2987                           
  2988                           ;main.c: 691: PORTEbits.RE1=0;
  2989  0DEB  0020               	movlb	0	; select bank0
  2990  0DEC  1090               	bcf	16,1	;volatile
  2991  0DED                     l6133:	
  2992                           
  2993                           ;main.c: 692: }
  2994                           ;main.c: 693: man=0;
  2995  0DED  0025               	movlb	5	; select bank5
  2996  0DEE  01E2               	clrf	main@man^(0+640)
  2997  0DEF  01E3               	clrf	(main@man+1)^(0+640)
  2998                           
  2999                           ;main.c: 694: M2=0;
  3000  0DF0  0022               	movlb	2	; select bank2
  3001  0DF1  01AE               	clrf	_M2^(0+256)
  3002  0DF2  01AF               	clrf	(_M2+1)^(0+256)
  3003  0DF3                     l6137:	
  3004                           
  3005                           ;main.c: 695: }
  3006                           ;main.c: 700: if(copy_parentalLockBuffer[3] == '0' && PORTBbits.RB0 == 0 && M3 == 0)
  3007  0DF3  3030               	movlw	48
  3008  0DF4  0023               	movlb	3	; select bank3
  3009  0DF5  064F               	xorwf	(_copy_parentalLockBuffer^(0+384)+3),w
  3010  0DF6  1D03               	btfss	3,2
  3011  0DF7  2E19               	goto	l6153
  3012  0DF8  0020               	movlb	0	; select bank0
  3013  0DF9  180D               	btfsc	13,0	;volatile
  3014  0DFA  2E19               	goto	l6153
  3015  0DFB  0022               	movlb	2	; select bank2
  3016  0DFC  082C               	movf	_M3^(0+256),w
  3017  0DFD  042D               	iorwf	(_M3+1)^(0+256),w
  3018  0DFE  1D03               	btfss	3,2
  3019  0DFF  2E19               	goto	l6153
  3020                           
  3021                           ;main.c: 701: {
  3022                           ;main.c: 702: if(man == 1)
  3023  0E00  0025               	movlb	5	; select bank5
  3024  0E01  0362               	decf	main@man^(0+640),w
  3025  0E02  0463               	iorwf	(main@man+1)^(0+640),w
  3026  0E03  1D03               	btfss	3,2
  3027  0E04  2E12               	goto	l6149
  3028                           
  3029                           ;main.c: 703: {
  3030                           ;main.c: 704: SwitchOnStatustToGatway(3);
  3031  0E05  3003               	movlw	3
  3032  0E06  0020               	movlb	0	; select bank0
  3033  0E07  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3034  0E08  3000               	movlw	0
  3035  0E09  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3036  0E0A  3193  23A9  318A   	fcall	_SwitchOnStatustToGatway
  3037                           
  3038                           ;main.c: 705: TransmissionIndicationLedBlinking();
  3039  0E0D  3190  2075  318A   	fcall	_TransmissionIndicationLedBlinking
  3040                           
  3041                           ;main.c: 706: PORTGbits.RG0=1;
  3042  0E10  0025               	movlb	5	; select bank5
  3043  0E11  140D               	bsf	13,0	;volatile
  3044  0E12                     l6149:	
  3045                           
  3046                           ;main.c: 707: }
  3047                           ;main.c: 708: man=0;
  3048  0E12  01E2               	clrf	main@man^(0+640)
  3049  0E13  01E3               	clrf	(main@man+1)^(0+640)
  3050                           
  3051                           ;main.c: 709: M3=1;
  3052  0E14  3001               	movlw	1
  3053  0E15  0022               	movlb	2	; select bank2
  3054  0E16  00AC               	movwf	_M3^(0+256)
  3055  0E17  3000               	movlw	0
  3056  0E18  00AD               	movwf	(_M3^(0+256)+1)
  3057  0E19                     l6153:	
  3058                           
  3059                           ;main.c: 711: }
  3060                           ;main.c: 713: if(copy_parentalLockBuffer[3] == '0' && PORTBbits.RB0 == 1 && M3 == 1)
  3061  0E19  3030               	movlw	48
  3062  0E1A  0023               	movlb	3	; select bank3
  3063  0E1B  064F               	xorwf	(_copy_parentalLockBuffer^(0+384)+3),w
  3064  0E1C  1D03               	btfss	3,2
  3065  0E1D  2E3D               	goto	l6169
  3066  0E1E  0020               	movlb	0	; select bank0
  3067  0E1F  1C0D               	btfss	13,0	;volatile
  3068  0E20  2E3D               	goto	l6169
  3069  0E21  0022               	movlb	2	; select bank2
  3070  0E22  032C               	decf	_M3^(0+256),w
  3071  0E23  042D               	iorwf	(_M3+1)^(0+256),w
  3072  0E24  1D03               	btfss	3,2
  3073  0E25  2E3D               	goto	l6169
  3074                           
  3075                           ;main.c: 714: {
  3076                           ;main.c: 715: if(man==1)
  3077  0E26  0025               	movlb	5	; select bank5
  3078  0E27  0362               	decf	main@man^(0+640),w
  3079  0E28  0463               	iorwf	(main@man+1)^(0+640),w
  3080  0E29  1D03               	btfss	3,2
  3081  0E2A  2E38               	goto	l6165
  3082                           
  3083                           ;main.c: 716: {
  3084                           ;main.c: 717: SwitchOffStatustToGatway(3);
  3085  0E2B  3003               	movlw	3
  3086  0E2C  0020               	movlb	0	; select bank0
  3087  0E2D  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3088  0E2E  3000               	movlw	0
  3089  0E2F  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3090  0E30  3193  2376  318A   	fcall	_SwitchOffStatustToGatway
  3091                           
  3092                           ;main.c: 718: TransmissionIndicationLedBlinking();
  3093  0E33  3190  2075  318A   	fcall	_TransmissionIndicationLedBlinking
  3094                           
  3095                           ;main.c: 719: PORTGbits.RG0=0;
  3096  0E36  0025               	movlb	5	; select bank5
  3097  0E37  100D               	bcf	13,0	;volatile
  3098  0E38                     l6165:	
  3099                           
  3100                           ;main.c: 720: }
  3101                           ;main.c: 721: man=0;
  3102  0E38  01E2               	clrf	main@man^(0+640)
  3103  0E39  01E3               	clrf	(main@man+1)^(0+640)
  3104                           
  3105                           ;main.c: 722: M3=0;
  3106  0E3A  0022               	movlb	2	; select bank2
  3107  0E3B  01AC               	clrf	_M3^(0+256)
  3108  0E3C  01AD               	clrf	(_M3+1)^(0+256)
  3109  0E3D                     l6169:	
  3110                           
  3111                           ;main.c: 724: }
  3112                           ;main.c: 729: if(copy_parentalLockBuffer[4] == '0' && PORTBbits.RB1 == 0 && M4 == 0)
  3113  0E3D  3030               	movlw	48
  3114  0E3E  0023               	movlb	3	; select bank3
  3115  0E3F  0650               	xorwf	(_copy_parentalLockBuffer^(0+384)+4),w
  3116  0E40  1D03               	btfss	3,2
  3117  0E41  2E63               	goto	l6185
  3118  0E42  0020               	movlb	0	; select bank0
  3119  0E43  188D               	btfsc	13,1	;volatile
  3120  0E44  2E63               	goto	l6185
  3121  0E45  0022               	movlb	2	; select bank2
  3122  0E46  082A               	movf	_M4^(0+256),w
  3123  0E47  042B               	iorwf	(_M4+1)^(0+256),w
  3124  0E48  1D03               	btfss	3,2
  3125  0E49  2E63               	goto	l6185
  3126                           
  3127                           ;main.c: 730: {
  3128                           ;main.c: 731: if(man==1)
  3129  0E4A  0025               	movlb	5	; select bank5
  3130  0E4B  0362               	decf	main@man^(0+640),w
  3131  0E4C  0463               	iorwf	(main@man+1)^(0+640),w
  3132  0E4D  1D03               	btfss	3,2
  3133  0E4E  2E5C               	goto	l6181
  3134                           
  3135                           ;main.c: 732: {
  3136                           ;main.c: 733: SwitchOnStatustToGatway(4);
  3137  0E4F  3004               	movlw	4
  3138  0E50  0020               	movlb	0	; select bank0
  3139  0E51  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3140  0E52  3000               	movlw	0
  3141  0E53  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3142  0E54  3193  23A9  318A   	fcall	_SwitchOnStatustToGatway
  3143                           
  3144                           ;main.c: 734: TransmissionIndicationLedBlinking();
  3145  0E57  3190  2075  318A   	fcall	_TransmissionIndicationLedBlinking
  3146                           
  3147                           ;main.c: 735: PORTGbits.RG3=1;
  3148  0E5A  0025               	movlb	5	; select bank5
  3149  0E5B  158D               	bsf	13,3	;volatile
  3150  0E5C                     l6181:	
  3151                           
  3152                           ;main.c: 736: }
  3153                           ;main.c: 737: man=0;
  3154  0E5C  01E2               	clrf	main@man^(0+640)
  3155  0E5D  01E3               	clrf	(main@man+1)^(0+640)
  3156                           
  3157                           ;main.c: 738: M4=1;
  3158  0E5E  3001               	movlw	1
  3159  0E5F  0022               	movlb	2	; select bank2
  3160  0E60  00AA               	movwf	_M4^(0+256)
  3161  0E61  3000               	movlw	0
  3162  0E62  00AB               	movwf	(_M4^(0+256)+1)
  3163  0E63                     l6185:	
  3164                           
  3165                           ;main.c: 740: }
  3166                           ;main.c: 742: if(copy_parentalLockBuffer[4] == '0' && PORTBbits.RB1 == 1 && M4 == 1)
  3167  0E63  3030               	movlw	48
  3168  0E64  0023               	movlb	3	; select bank3
  3169  0E65  0650               	xorwf	(_copy_parentalLockBuffer^(0+384)+4),w
  3170  0E66  1D03               	btfss	3,2
  3171  0E67  2E87               	goto	l6201
  3172  0E68  0020               	movlb	0	; select bank0
  3173  0E69  1C8D               	btfss	13,1	;volatile
  3174  0E6A  2E87               	goto	l6201
  3175  0E6B  0022               	movlb	2	; select bank2
  3176  0E6C  032A               	decf	_M4^(0+256),w
  3177  0E6D  042B               	iorwf	(_M4+1)^(0+256),w
  3178  0E6E  1D03               	btfss	3,2
  3179  0E6F  2E87               	goto	l6201
  3180                           
  3181                           ;main.c: 743: {
  3182                           ;main.c: 744: if(man==1)
  3183  0E70  0025               	movlb	5	; select bank5
  3184  0E71  0362               	decf	main@man^(0+640),w
  3185  0E72  0463               	iorwf	(main@man+1)^(0+640),w
  3186  0E73  1D03               	btfss	3,2
  3187  0E74  2E82               	goto	l6197
  3188                           
  3189                           ;main.c: 745: {
  3190                           ;main.c: 747: SwitchOffStatustToGatway(4);
  3191  0E75  3004               	movlw	4
  3192  0E76  0020               	movlb	0	; select bank0
  3193  0E77  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3194  0E78  3000               	movlw	0
  3195  0E79  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3196  0E7A  3193  2376  318A   	fcall	_SwitchOffStatustToGatway
  3197                           
  3198                           ;main.c: 748: TransmissionIndicationLedBlinking();
  3199  0E7D  3190  2075  318A   	fcall	_TransmissionIndicationLedBlinking
  3200                           
  3201                           ;main.c: 749: PORTGbits.RG3=0;
  3202  0E80  0025               	movlb	5	; select bank5
  3203  0E81  118D               	bcf	13,3	;volatile
  3204  0E82                     l6197:	
  3205                           
  3206                           ;main.c: 750: }
  3207                           ;main.c: 751: man=0;
  3208  0E82  01E2               	clrf	main@man^(0+640)
  3209  0E83  01E3               	clrf	(main@man+1)^(0+640)
  3210                           
  3211                           ;main.c: 752: M4=0;
  3212  0E84  0022               	movlb	2	; select bank2
  3213  0E85  01AA               	clrf	_M4^(0+256)
  3214  0E86  01AB               	clrf	(_M4+1)^(0+256)
  3215  0E87                     l6201:	
  3216                           
  3217                           ;main.c: 754: }
  3218                           ;main.c: 756: if(copy_parentalLockBuffer[5] == '0' && PORTBbits.RB2 == 0 && M5 == 0)
  3219  0E87  3030               	movlw	48
  3220  0E88  0023               	movlb	3	; select bank3
  3221  0E89  0651               	xorwf	(_copy_parentalLockBuffer^(0+384)+5),w
  3222  0E8A  1D03               	btfss	3,2
  3223  0E8B  2EAD               	goto	l6217
  3224  0E8C  0020               	movlb	0	; select bank0
  3225  0E8D  190D               	btfsc	13,2	;volatile
  3226  0E8E  2EAD               	goto	l6217
  3227  0E8F  0022               	movlb	2	; select bank2
  3228  0E90  0828               	movf	_M5^(0+256),w
  3229  0E91  0429               	iorwf	(_M5+1)^(0+256),w
  3230  0E92  1D03               	btfss	3,2
  3231  0E93  2EAD               	goto	l6217
  3232                           
  3233                           ;main.c: 757: {
  3234                           ;main.c: 758: if(man==1)
  3235  0E94  0025               	movlb	5	; select bank5
  3236  0E95  0362               	decf	main@man^(0+640),w
  3237  0E96  0463               	iorwf	(main@man+1)^(0+640),w
  3238  0E97  1D03               	btfss	3,2
  3239  0E98  2EA6               	goto	l6213
  3240                           
  3241                           ;main.c: 759: {
  3242                           ;main.c: 760: SwitchOnStatustToGatway(5);
  3243  0E99  3005               	movlw	5
  3244  0E9A  0020               	movlb	0	; select bank0
  3245  0E9B  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3246  0E9C  3000               	movlw	0
  3247  0E9D  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3248  0E9E  3193  23A9  318A   	fcall	_SwitchOnStatustToGatway
  3249                           
  3250                           ;main.c: 761: TransmissionIndicationLedBlinking();
  3251  0EA1  3190  2075  318A   	fcall	_TransmissionIndicationLedBlinking
  3252                           
  3253                           ;main.c: 762: PORTGbits.RG4=1;
  3254  0EA4  0025               	movlb	5	; select bank5
  3255  0EA5  160D               	bsf	13,4	;volatile
  3256  0EA6                     l6213:	
  3257                           
  3258                           ;main.c: 763: }
  3259                           ;main.c: 764: man=0;
  3260  0EA6  01E2               	clrf	main@man^(0+640)
  3261  0EA7  01E3               	clrf	(main@man+1)^(0+640)
  3262                           
  3263                           ;main.c: 765: M5=1;
  3264  0EA8  3001               	movlw	1
  3265  0EA9  0022               	movlb	2	; select bank2
  3266  0EAA  00A8               	movwf	_M5^(0+256)
  3267  0EAB  3000               	movlw	0
  3268  0EAC  00A9               	movwf	(_M5^(0+256)+1)
  3269  0EAD                     l6217:	
  3270                           
  3271                           ;main.c: 767: }
  3272                           ;main.c: 769: if(copy_parentalLockBuffer[5] == '0' && PORTBbits.RB2 == 1 && M5 == 1)
  3273  0EAD  3030               	movlw	48
  3274  0EAE  0023               	movlb	3	; select bank3
  3275  0EAF  0651               	xorwf	(_copy_parentalLockBuffer^(0+384)+5),w
  3276  0EB0  1D03               	btfss	3,2
  3277  0EB1  2ED1               	goto	l6233
  3278  0EB2  0020               	movlb	0	; select bank0
  3279  0EB3  1D0D               	btfss	13,2	;volatile
  3280  0EB4  2ED1               	goto	l6233
  3281  0EB5  0022               	movlb	2	; select bank2
  3282  0EB6  0328               	decf	_M5^(0+256),w
  3283  0EB7  0429               	iorwf	(_M5+1)^(0+256),w
  3284  0EB8  1D03               	btfss	3,2
  3285  0EB9  2ED1               	goto	l6233
  3286                           
  3287                           ;main.c: 770: {
  3288                           ;main.c: 771: if(man==1)
  3289  0EBA  0025               	movlb	5	; select bank5
  3290  0EBB  0362               	decf	main@man^(0+640),w
  3291  0EBC  0463               	iorwf	(main@man+1)^(0+640),w
  3292  0EBD  1D03               	btfss	3,2
  3293  0EBE  2ECC               	goto	l6229
  3294                           
  3295                           ;main.c: 772: {
  3296                           ;main.c: 774: SwitchOffStatustToGatway(5);
  3297  0EBF  3005               	movlw	5
  3298  0EC0  0020               	movlb	0	; select bank0
  3299  0EC1  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3300  0EC2  3000               	movlw	0
  3301  0EC3  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3302  0EC4  3193  2376  318A   	fcall	_SwitchOffStatustToGatway
  3303                           
  3304                           ;main.c: 775: TransmissionIndicationLedBlinking();
  3305  0EC7  3190  2075  318A   	fcall	_TransmissionIndicationLedBlinking
  3306                           
  3307                           ;main.c: 776: PORTGbits.RG4=0;
  3308  0ECA  0025               	movlb	5	; select bank5
  3309  0ECB  120D               	bcf	13,4	;volatile
  3310  0ECC                     l6229:	
  3311                           
  3312                           ;main.c: 777: }
  3313                           ;main.c: 778: man=0;
  3314  0ECC  01E2               	clrf	main@man^(0+640)
  3315  0ECD  01E3               	clrf	(main@man+1)^(0+640)
  3316                           
  3317                           ;main.c: 779: M5=0;
  3318  0ECE  0022               	movlb	2	; select bank2
  3319  0ECF  01A8               	clrf	_M5^(0+256)
  3320  0ED0  01A9               	clrf	(_M5+1)^(0+256)
  3321  0ED1                     l6233:	
  3322                           
  3323                           ;main.c: 781: }
  3324                           ;main.c: 784: if(copy_parentalLockBuffer[6] == '0' && PORTBbits.RB3 == 0 && M6 == 0)
  3325  0ED1  3030               	movlw	48
  3326  0ED2  0023               	movlb	3	; select bank3
  3327  0ED3  0652               	xorwf	(_copy_parentalLockBuffer^(0+384)+6),w
  3328  0ED4  1D03               	btfss	3,2
  3329  0ED5  2EF7               	goto	l6249
  3330  0ED6  0020               	movlb	0	; select bank0
  3331  0ED7  198D               	btfsc	13,3	;volatile
  3332  0ED8  2EF7               	goto	l6249
  3333  0ED9  0022               	movlb	2	; select bank2
  3334  0EDA  0826               	movf	_M6^(0+256),w
  3335  0EDB  0427               	iorwf	(_M6+1)^(0+256),w
  3336  0EDC  1D03               	btfss	3,2
  3337  0EDD  2EF7               	goto	l6249
  3338                           
  3339                           ;main.c: 785: {
  3340                           ;main.c: 786: if(man==1)
  3341  0EDE  0025               	movlb	5	; select bank5
  3342  0EDF  0362               	decf	main@man^(0+640),w
  3343  0EE0  0463               	iorwf	(main@man+1)^(0+640),w
  3344  0EE1  1D03               	btfss	3,2
  3345  0EE2  2EF0               	goto	l6245
  3346                           
  3347                           ;main.c: 787: {
  3348                           ;main.c: 788: SwitchOnStatustToGatway(6);
  3349  0EE3  3006               	movlw	6
  3350  0EE4  0020               	movlb	0	; select bank0
  3351  0EE5  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3352  0EE6  3000               	movlw	0
  3353  0EE7  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3354  0EE8  3193  23A9  318A   	fcall	_SwitchOnStatustToGatway
  3355                           
  3356                           ;main.c: 789: TransmissionIndicationLedBlinking();
  3357  0EEB  3190  2075  318A   	fcall	_TransmissionIndicationLedBlinking
  3358                           
  3359                           ;main.c: 790: PORTFbits.RF6=1;
  3360  0EEE  0025               	movlb	5	; select bank5
  3361  0EEF  170C               	bsf	12,6	;volatile
  3362  0EF0                     l6245:	
  3363                           
  3364                           ;main.c: 791: }
  3365                           ;main.c: 792: man=0;
  3366  0EF0  01E2               	clrf	main@man^(0+640)
  3367  0EF1  01E3               	clrf	(main@man+1)^(0+640)
  3368                           
  3369                           ;main.c: 793: M6=1;
  3370  0EF2  3001               	movlw	1
  3371  0EF3  0022               	movlb	2	; select bank2
  3372  0EF4  00A6               	movwf	_M6^(0+256)
  3373  0EF5  3000               	movlw	0
  3374  0EF6  00A7               	movwf	(_M6^(0+256)+1)
  3375  0EF7                     l6249:	
  3376                           
  3377                           ;main.c: 795: }
  3378                           ;main.c: 797: if(copy_parentalLockBuffer[6] == '0' && PORTBbits.RB3 == 1 && M6 == 1)
  3379  0EF7  3030               	movlw	48
  3380  0EF8  0023               	movlb	3	; select bank3
  3381  0EF9  0652               	xorwf	(_copy_parentalLockBuffer^(0+384)+6),w
  3382  0EFA  1D03               	btfss	3,2
  3383  0EFB  2F1B               	goto	l6265
  3384  0EFC  0020               	movlb	0	; select bank0
  3385  0EFD  1D8D               	btfss	13,3	;volatile
  3386  0EFE  2F1B               	goto	l6265
  3387  0EFF  0022               	movlb	2	; select bank2
  3388  0F00  0326               	decf	_M6^(0+256),w
  3389  0F01  0427               	iorwf	(_M6+1)^(0+256),w
  3390  0F02  1D03               	btfss	3,2
  3391  0F03  2F1B               	goto	l6265
  3392                           
  3393                           ;main.c: 798: {
  3394                           ;main.c: 799: if(man==1)
  3395  0F04  0025               	movlb	5	; select bank5
  3396  0F05  0362               	decf	main@man^(0+640),w
  3397  0F06  0463               	iorwf	(main@man+1)^(0+640),w
  3398  0F07  1D03               	btfss	3,2
  3399  0F08  2F16               	goto	l6261
  3400                           
  3401                           ;main.c: 800: {
  3402                           ;main.c: 802: SwitchOffStatustToGatway(6);
  3403  0F09  3006               	movlw	6
  3404  0F0A  0020               	movlb	0	; select bank0
  3405  0F0B  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3406  0F0C  3000               	movlw	0
  3407  0F0D  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3408  0F0E  3193  2376  318A   	fcall	_SwitchOffStatustToGatway
  3409                           
  3410                           ;main.c: 803: TransmissionIndicationLedBlinking();
  3411  0F11  3190  2075  318A   	fcall	_TransmissionIndicationLedBlinking
  3412                           
  3413                           ;main.c: 804: PORTFbits.RF6=0;
  3414  0F14  0025               	movlb	5	; select bank5
  3415  0F15  130C               	bcf	12,6	;volatile
  3416  0F16                     l6261:	
  3417                           
  3418                           ;main.c: 805: }
  3419                           ;main.c: 806: man=0;
  3420  0F16  01E2               	clrf	main@man^(0+640)
  3421  0F17  01E3               	clrf	(main@man+1)^(0+640)
  3422                           
  3423                           ;main.c: 807: M6=0;
  3424  0F18  0022               	movlb	2	; select bank2
  3425  0F19  01A6               	clrf	_M6^(0+256)
  3426  0F1A  01A7               	clrf	(_M6+1)^(0+256)
  3427  0F1B                     l6265:	
  3428                           
  3429                           ;main.c: 809: }
  3430                           ;main.c: 813: if(copy_parentalLockBuffer[7] == '0' && PORTBbits.RB4 == 0 && M7 == 0)
  3431  0F1B  3030               	movlw	48
  3432  0F1C  0023               	movlb	3	; select bank3
  3433  0F1D  0653               	xorwf	(_copy_parentalLockBuffer^(0+384)+7),w
  3434  0F1E  1D03               	btfss	3,2
  3435  0F1F  2F41               	goto	l6281
  3436  0F20  0020               	movlb	0	; select bank0
  3437  0F21  1A0D               	btfsc	13,4	;volatile
  3438  0F22  2F41               	goto	l6281
  3439  0F23  0022               	movlb	2	; select bank2
  3440  0F24  0824               	movf	_M7^(0+256),w
  3441  0F25  0425               	iorwf	(_M7+1)^(0+256),w
  3442  0F26  1D03               	btfss	3,2
  3443  0F27  2F41               	goto	l6281
  3444                           
  3445                           ;main.c: 814: {
  3446                           ;main.c: 815: if(man==1)
  3447  0F28  0025               	movlb	5	; select bank5
  3448  0F29  0362               	decf	main@man^(0+640),w
  3449  0F2A  0463               	iorwf	(main@man+1)^(0+640),w
  3450  0F2B  1D03               	btfss	3,2
  3451  0F2C  2F3A               	goto	l6277
  3452                           
  3453                           ;main.c: 816: {
  3454                           ;main.c: 817: SwitchOnStatustToGatway(7);
  3455  0F2D  3007               	movlw	7
  3456  0F2E  0020               	movlb	0	; select bank0
  3457  0F2F  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3458  0F30  3000               	movlw	0
  3459  0F31  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3460  0F32  3193  23A9  318A   	fcall	_SwitchOnStatustToGatway
  3461                           
  3462                           ;main.c: 818: TransmissionIndicationLedBlinking();
  3463  0F35  3190  2075  318A   	fcall	_TransmissionIndicationLedBlinking
  3464                           
  3465                           ;main.c: 819: PORTFbits.RF5=1;
  3466  0F38  0025               	movlb	5	; select bank5
  3467  0F39  168C               	bsf	12,5	;volatile
  3468  0F3A                     l6277:	
  3469                           
  3470                           ;main.c: 820: }
  3471                           ;main.c: 821: man=0;
  3472  0F3A  01E2               	clrf	main@man^(0+640)
  3473  0F3B  01E3               	clrf	(main@man+1)^(0+640)
  3474                           
  3475                           ;main.c: 822: M7=1;
  3476  0F3C  3001               	movlw	1
  3477  0F3D  0022               	movlb	2	; select bank2
  3478  0F3E  00A4               	movwf	_M7^(0+256)
  3479  0F3F  3000               	movlw	0
  3480  0F40  00A5               	movwf	(_M7^(0+256)+1)
  3481  0F41                     l6281:	
  3482                           
  3483                           ;main.c: 824: }
  3484                           ;main.c: 826: if(copy_parentalLockBuffer[7] == '0' && PORTBbits.RB4 == 1 && M7 == 1)
  3485  0F41  3030               	movlw	48
  3486  0F42  0023               	movlb	3	; select bank3
  3487  0F43  0653               	xorwf	(_copy_parentalLockBuffer^(0+384)+7),w
  3488  0F44  1D03               	btfss	3,2
  3489  0F45  2F65               	goto	l6297
  3490  0F46  0020               	movlb	0	; select bank0
  3491  0F47  1E0D               	btfss	13,4	;volatile
  3492  0F48  2F65               	goto	l6297
  3493  0F49  0022               	movlb	2	; select bank2
  3494  0F4A  0324               	decf	_M7^(0+256),w
  3495  0F4B  0425               	iorwf	(_M7+1)^(0+256),w
  3496  0F4C  1D03               	btfss	3,2
  3497  0F4D  2F65               	goto	l6297
  3498                           
  3499                           ;main.c: 827: {
  3500                           ;main.c: 828: if(man==1)
  3501  0F4E  0025               	movlb	5	; select bank5
  3502  0F4F  0362               	decf	main@man^(0+640),w
  3503  0F50  0463               	iorwf	(main@man+1)^(0+640),w
  3504  0F51  1D03               	btfss	3,2
  3505  0F52  2F60               	goto	l6293
  3506                           
  3507                           ;main.c: 829: {
  3508                           ;main.c: 831: SwitchOffStatustToGatway(7);
  3509  0F53  3007               	movlw	7
  3510  0F54  0020               	movlb	0	; select bank0
  3511  0F55  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3512  0F56  3000               	movlw	0
  3513  0F57  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3514  0F58  3193  2376  318A   	fcall	_SwitchOffStatustToGatway
  3515                           
  3516                           ;main.c: 832: TransmissionIndicationLedBlinking();
  3517  0F5B  3190  2075  318A   	fcall	_TransmissionIndicationLedBlinking
  3518                           
  3519                           ;main.c: 833: PORTFbits.RF5=0;
  3520  0F5E  0025               	movlb	5	; select bank5
  3521  0F5F  128C               	bcf	12,5	;volatile
  3522  0F60                     l6293:	
  3523                           
  3524                           ;main.c: 834: }
  3525                           ;main.c: 835: man=0;
  3526  0F60  01E2               	clrf	main@man^(0+640)
  3527  0F61  01E3               	clrf	(main@man+1)^(0+640)
  3528                           
  3529                           ;main.c: 836: M7=0;
  3530  0F62  0022               	movlb	2	; select bank2
  3531  0F63  01A4               	clrf	_M7^(0+256)
  3532  0F64  01A5               	clrf	(_M7+1)^(0+256)
  3533  0F65                     l6297:	
  3534                           
  3535                           ;main.c: 838: }
  3536                           ;main.c: 843: if(copy_parentalLockBuffer[8] == '0' && PORTBbits.RB5 == 0 && M8 == 0)
  3537  0F65  3030               	movlw	48
  3538  0F66  0023               	movlb	3	; select bank3
  3539  0F67  0654               	xorwf	(_copy_parentalLockBuffer^(0+384)+8),w
  3540  0F68  1D03               	btfss	3,2
  3541  0F69  2F8B               	goto	l6313
  3542  0F6A  0020               	movlb	0	; select bank0
  3543  0F6B  1A8D               	btfsc	13,5	;volatile
  3544  0F6C  2F8B               	goto	l6313
  3545  0F6D  0022               	movlb	2	; select bank2
  3546  0F6E  0822               	movf	_M8^(0+256),w
  3547  0F6F  0423               	iorwf	(_M8+1)^(0+256),w
  3548  0F70  1D03               	btfss	3,2
  3549  0F71  2F8B               	goto	l6313
  3550                           
  3551                           ;main.c: 844: {
  3552                           ;main.c: 845: if(man==1)
  3553  0F72  0025               	movlb	5	; select bank5
  3554  0F73  0362               	decf	main@man^(0+640),w
  3555  0F74  0463               	iorwf	(main@man+1)^(0+640),w
  3556  0F75  1D03               	btfss	3,2
  3557  0F76  2F84               	goto	l6309
  3558                           
  3559                           ;main.c: 846: {
  3560                           ;main.c: 847: SwitchOnStatustToGatway(8);
  3561  0F77  3008               	movlw	8
  3562  0F78  0020               	movlb	0	; select bank0
  3563  0F79  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3564  0F7A  3000               	movlw	0
  3565  0F7B  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3566  0F7C  3193  23A9  318A   	fcall	_SwitchOnStatustToGatway
  3567                           
  3568                           ;main.c: 848: TransmissionIndicationLedBlinking();
  3569  0F7F  3190  2075  318A   	fcall	_TransmissionIndicationLedBlinking
  3570                           
  3571                           ;main.c: 849: PORTFbits.RF4=1;
  3572  0F82  0025               	movlb	5	; select bank5
  3573  0F83  160C               	bsf	12,4	;volatile
  3574  0F84                     l6309:	
  3575                           
  3576                           ;main.c: 850: }
  3577                           ;main.c: 851: man=0;
  3578  0F84  01E2               	clrf	main@man^(0+640)
  3579  0F85  01E3               	clrf	(main@man+1)^(0+640)
  3580                           
  3581                           ;main.c: 852: M8=1;
  3582  0F86  3001               	movlw	1
  3583  0F87  0022               	movlb	2	; select bank2
  3584  0F88  00A2               	movwf	_M8^(0+256)
  3585  0F89  3000               	movlw	0
  3586  0F8A  00A3               	movwf	(_M8^(0+256)+1)
  3587  0F8B                     l6313:	
  3588                           
  3589                           ;main.c: 854: }
  3590                           ;main.c: 856: if(copy_parentalLockBuffer[8] == '0' && PORTBbits.RB5 == 1 && M8 == 1)
  3591  0F8B  3030               	movlw	48
  3592  0F8C  0023               	movlb	3	; select bank3
  3593  0F8D  0654               	xorwf	(_copy_parentalLockBuffer^(0+384)+8),w
  3594  0F8E  1D03               	btfss	3,2
  3595  0F8F  2FAF               	goto	l6329
  3596  0F90  0020               	movlb	0	; select bank0
  3597  0F91  1E8D               	btfss	13,5	;volatile
  3598  0F92  2FAF               	goto	l6329
  3599  0F93  0022               	movlb	2	; select bank2
  3600  0F94  0322               	decf	_M8^(0+256),w
  3601  0F95  0423               	iorwf	(_M8+1)^(0+256),w
  3602  0F96  1D03               	btfss	3,2
  3603  0F97  2FAF               	goto	l6329
  3604                           
  3605                           ;main.c: 857: {
  3606                           ;main.c: 858: if(man==1)
  3607  0F98  0025               	movlb	5	; select bank5
  3608  0F99  0362               	decf	main@man^(0+640),w
  3609  0F9A  0463               	iorwf	(main@man+1)^(0+640),w
  3610  0F9B  1D03               	btfss	3,2
  3611  0F9C  2FAA               	goto	l6325
  3612                           
  3613                           ;main.c: 859: {
  3614                           ;main.c: 861: SwitchOffStatustToGatway(8);
  3615  0F9D  3008               	movlw	8
  3616  0F9E  0020               	movlb	0	; select bank0
  3617  0F9F  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3618  0FA0  3000               	movlw	0
  3619  0FA1  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3620  0FA2  3193  2376  318A   	fcall	_SwitchOffStatustToGatway
  3621                           
  3622                           ;main.c: 862: TransmissionIndicationLedBlinking();
  3623  0FA5  3190  2075  318A   	fcall	_TransmissionIndicationLedBlinking
  3624                           
  3625                           ;main.c: 863: PORTFbits.RF4=0;
  3626  0FA8  0025               	movlb	5	; select bank5
  3627  0FA9  120C               	bcf	12,4	;volatile
  3628  0FAA                     l6325:	
  3629                           
  3630                           ;main.c: 864: }
  3631                           ;main.c: 865: man=0;
  3632  0FAA  01E2               	clrf	main@man^(0+640)
  3633  0FAB  01E3               	clrf	(main@man+1)^(0+640)
  3634                           
  3635                           ;main.c: 866: M8=0;
  3636  0FAC  0022               	movlb	2	; select bank2
  3637  0FAD  01A2               	clrf	_M8^(0+256)
  3638  0FAE  01A3               	clrf	(_M8+1)^(0+256)
  3639  0FAF                     l6329:	
  3640                           
  3641                           ;main.c: 868: }
  3642                           ;main.c: 870: if(copy_parentalLockBuffer[9] == '0' && PORTDbits.RD5 == 0 && M9 == 0)
  3643  0FAF  3030               	movlw	48
  3644  0FB0  0023               	movlb	3	; select bank3
  3645  0FB1  0655               	xorwf	(_copy_parentalLockBuffer^(0+384)+9),w
  3646  0FB2  1D03               	btfss	3,2
  3647  0FB3  2FD8               	goto	l6347
  3648  0FB4  0020               	movlb	0	; select bank0
  3649  0FB5  1A8F               	btfsc	15,5	;volatile
  3650  0FB6  2FD8               	goto	l6347
  3651  0FB7  0022               	movlb	2	; select bank2
  3652  0FB8  0820               	movf	_M9^(0+256),w
  3653  0FB9  0421               	iorwf	(_M9+1)^(0+256),w
  3654  0FBA  1D03               	btfss	3,2
  3655  0FBB  2FD8               	goto	l6347
  3656                           
  3657                           ;main.c: 871: {
  3658                           ;main.c: 872: if(man==1)
  3659  0FBC  0025               	movlb	5	; select bank5
  3660  0FBD  0362               	decf	main@man^(0+640),w
  3661  0FBE  0463               	iorwf	(main@man+1)^(0+640),w
  3662  0FBF  1D03               	btfss	3,2
  3663  0FC0  2FD1               	goto	l582
  3664                           
  3665                           ;main.c: 873: {
  3666                           ;main.c: 875: start_PWM_Generation_For_DIMMER = 0;
  3667  0FC1  0022               	movlb	2	; select bank2
  3668  0FC2  01CE               	clrf	_start_PWM_Generation_For_DIMMER^(0+256)
  3669  0FC3  01CF               	clrf	(_start_PWM_Generation_For_DIMMER+1)^(0+256)
  3670                           
  3671                           ;main.c: 876: SwitchOnStatustToGatway(10);
  3672  0FC4  300A               	movlw	10
  3673  0FC5  0020               	movlb	0	; select bank0
  3674  0FC6  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3675  0FC7  3000               	movlw	0
  3676  0FC8  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3677  0FC9  3193  23A9  318A   	fcall	_SwitchOnStatustToGatway
  3678                           
  3679                           ;main.c: 877: TransmissionIndicationLedBlinking();
  3680  0FCC  3190  2075  318A   	fcall	_TransmissionIndicationLedBlinking
  3681                           
  3682                           ;main.c: 878: PORTFbits.RF3=0;
  3683  0FCF  0025               	movlb	5	; select bank5
  3684  0FD0  118C               	bcf	12,3	;volatile
  3685  0FD1                     l582:	
  3686                           
  3687                           ;main.c: 879: }
  3688                           ;main.c: 880: man=0;
  3689  0FD1  01E2               	clrf	main@man^(0+640)
  3690  0FD2  01E3               	clrf	(main@man+1)^(0+640)
  3691                           
  3692                           ;main.c: 881: M9=1;
  3693  0FD3  3001               	movlw	1
  3694  0FD4  0022               	movlb	2	; select bank2
  3695  0FD5  00A0               	movwf	_M9^(0+256)
  3696  0FD6  3000               	movlw	0
  3697  0FD7  00A1               	movwf	(_M9^(0+256)+1)
  3698  0FD8                     l6347:	
  3699                           
  3700                           ;main.c: 883: }
  3701                           ;main.c: 885: if(copy_parentalLockBuffer[9] == '0' && PORTDbits.RD5 == 1 && M9 == 1)
  3702  0FD8  3030               	movlw	48
  3703  0FD9  0023               	movlb	3	; select bank3
  3704  0FDA  0655               	xorwf	(_copy_parentalLockBuffer^(0+384)+9),w
  3705  0FDB  1D03               	btfss	3,2
  3706  0FDC  2B25               	goto	l5937
  3707  0FDD  0020               	movlb	0	; select bank0
  3708  0FDE  1E8F               	btfss	15,5	;volatile
  3709  0FDF  2B25               	goto	l5937
  3710  0FE0  0022               	movlb	2	; select bank2
  3711  0FE1  0320               	decf	_M9^(0+256),w
  3712  0FE2  0421               	iorwf	(_M9+1)^(0+256),w
  3713  0FE3  1D03               	btfss	3,2
  3714  0FE4  2B25               	goto	l5937
  3715                           
  3716                           ;main.c: 886: {
  3717                           ;main.c: 887: if(man==1)
  3718  0FE5  0025               	movlb	5	; select bank5
  3719  0FE6  0362               	decf	main@man^(0+640),w
  3720  0FE7  0463               	iorwf	(main@man+1)^(0+640),w
  3721  0FE8  1D03               	btfss	3,2
  3722  0FE9  2FFA               	goto	l584
  3723                           
  3724                           ;main.c: 888: {
  3725                           ;main.c: 889: start_PWM_Generation_For_DIMMER = 0;
  3726  0FEA  0022               	movlb	2	; select bank2
  3727  0FEB  01CE               	clrf	_start_PWM_Generation_For_DIMMER^(0+256)
  3728  0FEC  01CF               	clrf	(_start_PWM_Generation_For_DIMMER+1)^(0+256)
  3729                           
  3730                           ;main.c: 890: SwitchOffStatustToGatway(10);
  3731  0FED  300A               	movlw	10
  3732  0FEE  0020               	movlb	0	; select bank0
  3733  0FEF  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3734  0FF0  3000               	movlw	0
  3735  0FF1  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3736  0FF2  3193  2376  318A   	fcall	_SwitchOffStatustToGatway
  3737                           
  3738                           ;main.c: 891: TransmissionIndicationLedBlinking();
  3739  0FF5  3190  2075  318A   	fcall	_TransmissionIndicationLedBlinking
  3740                           
  3741                           ;main.c: 892: PORTFbits.RF3=1;
  3742  0FF8  0025               	movlb	5	; select bank5
  3743  0FF9  158C               	bsf	12,3	;volatile
  3744  0FFA                     l584:	
  3745                           
  3746                           ;main.c: 893: }
  3747                           ;main.c: 894: man=0;
  3748  0FFA  01E2               	clrf	main@man^(0+640)
  3749  0FFB  01E3               	clrf	(main@man+1)^(0+640)
  3750                           
  3751                           ;main.c: 895: M9=0;
  3752  0FFC  0022               	movlb	2	; select bank2
  3753  0FFD  01A0               	clrf	_M9^(0+256)
  3754  0FFE  01A1               	clrf	(_M9+1)^(0+256)
  3755  0FFF  2B25               	goto	l5937
  3756  1000                     __end_of_main:	
  3757                           
  3758                           	psect	swtext1
  3759  1000                     __pswtext1:	
  3760  1000                     S6493:	
  3761  1000  318B  2BB3         	ljmp	l5977
  3762  1002  318B  2BF1         	ljmp	l5993
  3763  1004  318B  2BF8         	ljmp	l5995
  3764  1006  318C  2C36         	ljmp	l6011
  3765  1008  318C  2C4D         	ljmp	l6015
  3766  100A  318C  2C64         	ljmp	l6019
  3767  100C  318C  2C7B         	ljmp	l6023
  3768  100E  318C  2CBB         	ljmp	l6039
  3769                           
  3770                           	psect	text1
  3771  07A7                     __ptext1:	
  3772 ;; *************** function _strtok *****************
  3773 ;; Defined at:
  3774 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtok.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;  s1              1    wreg     PTR unsigned char 
  3777 ;;		 -> mainReceivedDataBuffer(18), NULL(0), 
  3778 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
  3779 ;;		 -> STR_18(2), STR_16(2), 
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;  s1              1   19[BANK0 ] PTR unsigned char 
  3782 ;;		 -> mainReceivedDataBuffer(18), NULL(0), 
  3783 ;; Return value:  Size  Location     Type
  3784 ;;                  1    wreg      PTR unsigned char 
  3785 ;; Registers used:
  3786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3787 ;; Tracked objects:
  3788 ;;		On entry : 0/0
  3789 ;;		On exit  : 0/0
  3790 ;;		Unchanged: 0/0
  3791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3792 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  3793 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0
  3794 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0
  3795 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  3796 ;;Total ram usage:        6 bytes
  3797 ;; Hardware stack levels used:    1
  3798 ;; Hardware stack levels required when called:    4
  3799 ;; This function calls:
  3800 ;;		_strcspn
  3801 ;;		_strspn
  3802 ;; This function is called by:
  3803 ;;		_main
  3804 ;; This function uses a non-reentrant model
  3805 ;;
  3806                           
  3807                           
  3808                           ;psect for function _strtok
  3809  07A7                     _strtok:	
  3810                           
  3811                           ;incstack = 0
  3812                           ; Regs used in _strtok: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3813                           ;strtok@s1 stored from wreg
  3814  07A7  0020               	movlb	0	; select bank0
  3815  07A8  00B3               	movwf	strtok@s1
  3816  07A9  0833               	movf	strtok@s1,w
  3817  07AA  1D03               	btfss	3,2
  3818  07AB  2FB0               	goto	l5867
  3819  07AC  0861               	movf	strtok@sp,w
  3820  07AD  00B0               	movwf	??_strtok
  3821  07AE  0830               	movf	??_strtok,w
  3822  07AF  00B3               	movwf	strtok@s1
  3823  07B0                     l5867:	
  3824  07B0  0833               	movf	strtok@s1,w
  3825  07B1  1D03               	btfss	3,2
  3826  07B2  2FB5               	goto	l5873
  3827  07B3  3000               	movlw	0
  3828  07B4  0008               	return
  3829  07B5                     l5873:	
  3830  07B5  082F               	movf	strtok@s2+1,w
  3831  07B6  00A8               	movwf	strspn@s2+1
  3832  07B7  082E               	movf	strtok@s2,w
  3833  07B8  00A7               	movwf	strspn@s2
  3834  07B9  0833               	movf	strtok@s1,w
  3835  07BA  3193  2314  3187   	fcall	_strspn
  3836  07BD  0020               	movlb	0	; select bank0
  3837  07BE  0827               	movf	?_strspn,w
  3838  07BF  00B0               	movwf	??_strtok
  3839  07C0  0830               	movf	??_strtok,w
  3840  07C1  07B3               	addwf	strtok@s1,f
  3841  07C2  0833               	movf	strtok@s1,w
  3842  07C3  0086               	movwf	6
  3843  07C4  3002               	movlw	2	; select bank4/5
  3844  07C5  0087               	movwf	7
  3845  07C6  0801               	movf	1,w
  3846  07C7  1D03               	btfss	3,2
  3847  07C8  2FCC               	goto	l5881
  3848  07C9  01E1               	clrf	strtok@sp
  3849  07CA  3000               	movlw	0
  3850  07CB  0008               	return
  3851  07CC                     l5881:	
  3852  07CC  082F               	movf	strtok@s2+1,w
  3853  07CD  00A8               	movwf	strcspn@s2+1
  3854  07CE  082E               	movf	strtok@s2,w
  3855  07CF  00A7               	movwf	strcspn@s2
  3856  07D0  0833               	movf	strtok@s1,w
  3857  07D1  3192  22E4  3187   	fcall	_strcspn
  3858  07D4  0020               	movlb	0	; select bank0
  3859  07D5  0827               	movf	?_strcspn,w
  3860  07D6  00B0               	movwf	??_strtok
  3861  07D7  0828               	movf	?_strcspn+1,w
  3862  07D8  00B1               	movwf	??_strtok+1
  3863  07D9  0833               	movf	strtok@s1,w
  3864  07DA  0730               	addwf	??_strtok,w
  3865  07DB  00B2               	movwf	??_strtok+2
  3866  07DC  0832               	movf	??_strtok+2,w
  3867  07DD  00E1               	movwf	strtok@sp
  3868  07DE  0861               	movf	strtok@sp,w
  3869  07DF  0086               	movwf	6
  3870  07E0  3002               	movlw	2	; select bank4/5
  3871  07E1  0087               	movwf	7
  3872  07E2  0801               	movf	1,w
  3873  07E3  1903               	btfsc	3,2
  3874  07E4  2FEF               	goto	l5889
  3875  07E5  0861               	movf	strtok@sp,w
  3876  07E6  0086               	movwf	6
  3877  07E7  3002               	movlw	2	; select bank4/5
  3878  07E8  0087               	movwf	7
  3879  07E9  0181               	clrf	1
  3880  07EA  3001               	movlw	1
  3881  07EB  00B0               	movwf	??_strtok
  3882  07EC  0830               	movf	??_strtok,w
  3883  07ED  07E1               	addwf	strtok@sp,f
  3884  07EE  2FF0               	goto	l5891
  3885  07EF                     l5889:	
  3886  07EF  01E1               	clrf	strtok@sp
  3887  07F0                     l5891:	
  3888  07F0  0833               	movf	strtok@s1,w
  3889  07F1  0008               	return
  3890  07F2                     __end_of_strtok:	
  3891                           
  3892                           	psect	text2
  3893  1314                     __ptext2:	
  3894 ;; *************** function _strspn *****************
  3895 ;; Defined at:
  3896 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strspn.c"
  3897 ;; Parameters:    Size  Location     Type
  3898 ;;  s1              1    wreg     PTR const unsigned char 
  3899 ;;		 -> mainReceivedDataBuffer(18), NULL(0), 
  3900 ;;  s2              2    7[BANK0 ] PTR const unsigned char 
  3901 ;;		 -> STR_18(2), STR_16(2), 
  3902 ;; Auto vars:     Size  Location     Type
  3903 ;;  s1              1   13[BANK0 ] PTR const unsigned char 
  3904 ;;		 -> mainReceivedDataBuffer(18), NULL(0), 
  3905 ;;  i               2   11[BANK0 ] unsigned int 
  3906 ;; Return value:  Size  Location     Type
  3907 ;;                  2    7[BANK0 ] unsigned int 
  3908 ;; Registers used:
  3909 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3910 ;; Tracked objects:
  3911 ;;		On entry : 0/0
  3912 ;;		On exit  : 0/0
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3915 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  3916 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  3917 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  3918 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0
  3919 ;;Total ram usage:        7 bytes
  3920 ;; Hardware stack levels used:    1
  3921 ;; Hardware stack levels required when called:    3
  3922 ;; This function calls:
  3923 ;;		_strchr
  3924 ;; This function is called by:
  3925 ;;		_strtok
  3926 ;; This function uses a non-reentrant model
  3927 ;;
  3928                           
  3929                           
  3930                           ;psect for function _strspn
  3931  1314                     _strspn:	
  3932                           
  3933                           ;incstack = 0
  3934                           ; Regs used in _strspn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3935                           ;strspn@s1 stored from wreg
  3936  1314  0020               	movlb	0	; select bank0
  3937  1315  00AD               	movwf	strspn@s1
  3938  1316  01AB               	clrf	strspn@i
  3939  1317  01AC               	clrf	strspn@i+1
  3940  1318  2B21               	goto	l5425
  3941  1319                     l5423:	
  3942  1319  3001               	movlw	1
  3943  131A  00A9               	movwf	??_strspn
  3944  131B  0829               	movf	??_strspn,w
  3945  131C  07AD               	addwf	strspn@s1,f
  3946  131D  3001               	movlw	1
  3947  131E  07AB               	addwf	strspn@i,f
  3948  131F  3000               	movlw	0
  3949  1320  3DAC               	addwfc	strspn@i+1,f
  3950  1321                     l5425:	
  3951  1321  082D               	movf	strspn@s1,w
  3952  1322  0086               	movwf	6
  3953  1323  3002               	movlw	2	; select bank4/5
  3954  1324  0087               	movwf	7
  3955  1325  0801               	movf	1,w
  3956  1326  1903               	btfsc	3,2
  3957  1327  2B3F               	goto	l5429
  3958  1328  0828               	movf	strspn@s2+1,w
  3959  1329  00A1               	movwf	strchr@ptr+1
  3960  132A  0827               	movf	strspn@s2,w
  3961  132B  00A0               	movwf	strchr@ptr
  3962  132C  082D               	movf	strspn@s1,w
  3963  132D  0086               	movwf	6
  3964  132E  3002               	movlw	2	; select bank4/5
  3965  132F  0087               	movwf	7
  3966  1330  0801               	movf	1,w
  3967  1331  00A9               	movwf	??_strspn
  3968  1332  01AA               	clrf	??_strspn+1
  3969  1333  0829               	movf	??_strspn,w
  3970  1334  00A2               	movwf	strchr@chr
  3971  1335  082A               	movf	??_strspn+1,w
  3972  1336  00A3               	movwf	strchr@chr+1
  3973  1337  3191  2121  3193   	fcall	_strchr
  3974  133A  0020               	movlb	0	; select bank0
  3975  133B  0820               	movf	?_strchr,w
  3976  133C  0421               	iorwf	?_strchr+1,w
  3977  133D  1D03               	btfss	3,2
  3978  133E  2B19               	goto	l5423
  3979  133F                     l5429:	
  3980  133F  082C               	movf	strspn@i+1,w
  3981  1340  00A8               	movwf	?_strspn+1
  3982  1341  082B               	movf	strspn@i,w
  3983  1342  00A7               	movwf	?_strspn
  3984  1343  0008               	return
  3985  1344                     __end_of_strspn:	
  3986                           
  3987                           	psect	text3
  3988  12E4                     __ptext3:	
  3989 ;; *************** function _strcspn *****************
  3990 ;; Defined at:
  3991 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcspn.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;  s1              1    wreg     PTR const unsigned char 
  3994 ;;		 -> mainReceivedDataBuffer(18), NULL(0), 
  3995 ;;  s2              2    7[BANK0 ] PTR const unsigned char 
  3996 ;;		 -> STR_18(2), STR_16(2), 
  3997 ;; Auto vars:     Size  Location     Type
  3998 ;;  s1              1   13[BANK0 ] PTR const unsigned char 
  3999 ;;		 -> mainReceivedDataBuffer(18), NULL(0), 
  4000 ;;  i               2   11[BANK0 ] unsigned int 
  4001 ;; Return value:  Size  Location     Type
  4002 ;;                  2    7[BANK0 ] unsigned int 
  4003 ;; Registers used:
  4004 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4005 ;; Tracked objects:
  4006 ;;		On entry : 0/0
  4007 ;;		On exit  : 0/0
  4008 ;;		Unchanged: 0/0
  4009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4010 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  4011 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  4012 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  4013 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0
  4014 ;;Total ram usage:        7 bytes
  4015 ;; Hardware stack levels used:    1
  4016 ;; Hardware stack levels required when called:    3
  4017 ;; This function calls:
  4018 ;;		_strchr
  4019 ;; This function is called by:
  4020 ;;		_strtok
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024                           
  4025                           ;psect for function _strcspn
  4026  12E4                     _strcspn:	
  4027                           
  4028                           ;incstack = 0
  4029                           ; Regs used in _strcspn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4030                           ;strcspn@s1 stored from wreg
  4031  12E4  0020               	movlb	0	; select bank0
  4032  12E5  00AD               	movwf	strcspn@s1
  4033  12E6  01AB               	clrf	strcspn@i
  4034  12E7  01AC               	clrf	strcspn@i+1
  4035  12E8  2AF1               	goto	l5437
  4036  12E9                     l5435:	
  4037  12E9  3001               	movlw	1
  4038  12EA  00A9               	movwf	??_strcspn
  4039  12EB  0829               	movf	??_strcspn,w
  4040  12EC  07AD               	addwf	strcspn@s1,f
  4041  12ED  3001               	movlw	1
  4042  12EE  07AB               	addwf	strcspn@i,f
  4043  12EF  3000               	movlw	0
  4044  12F0  3DAC               	addwfc	strcspn@i+1,f
  4045  12F1                     l5437:	
  4046  12F1  082D               	movf	strcspn@s1,w
  4047  12F2  0086               	movwf	6
  4048  12F3  3002               	movlw	2	; select bank4/5
  4049  12F4  0087               	movwf	7
  4050  12F5  0801               	movf	1,w
  4051  12F6  1903               	btfsc	3,2
  4052  12F7  2B0F               	goto	l5441
  4053  12F8  0828               	movf	strcspn@s2+1,w
  4054  12F9  00A1               	movwf	strchr@ptr+1
  4055  12FA  0827               	movf	strcspn@s2,w
  4056  12FB  00A0               	movwf	strchr@ptr
  4057  12FC  082D               	movf	strcspn@s1,w
  4058  12FD  0086               	movwf	6
  4059  12FE  3002               	movlw	2	; select bank4/5
  4060  12FF  0087               	movwf	7
  4061  1300  0801               	movf	1,w
  4062  1301  00A9               	movwf	??_strcspn
  4063  1302  01AA               	clrf	??_strcspn+1
  4064  1303  0829               	movf	??_strcspn,w
  4065  1304  00A2               	movwf	strchr@chr
  4066  1305  082A               	movf	??_strcspn+1,w
  4067  1306  00A3               	movwf	strchr@chr+1
  4068  1307  3191  2121  3192   	fcall	_strchr
  4069  130A  0020               	movlb	0	; select bank0
  4070  130B  0820               	movf	?_strchr,w
  4071  130C  0421               	iorwf	?_strchr+1,w
  4072  130D  1903               	btfsc	3,2
  4073  130E  2AE9               	goto	l5435
  4074  130F                     l5441:	
  4075  130F  082C               	movf	strcspn@i+1,w
  4076  1310  00A8               	movwf	?_strcspn+1
  4077  1311  082B               	movf	strcspn@i,w
  4078  1312  00A7               	movwf	?_strcspn
  4079  1313  0008               	return
  4080  1314                     __end_of_strcspn:	
  4081                           
  4082                           	psect	text4
  4083  1121                     __ptext4:	
  4084 ;; *************** function _strchr *****************
  4085 ;; Defined at:
  4086 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
  4087 ;; Parameters:    Size  Location     Type
  4088 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
  4089 ;;		 -> STR_18(2), STR_16(2), 
  4090 ;;  chr             2    2[BANK0 ] int 
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;		None
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  2    0[BANK0 ] PTR unsigned char 
  4095 ;; Registers used:
  4096 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4102 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  4103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  4104 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0
  4105 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0
  4106 ;;Total ram usage:        7 bytes
  4107 ;; Hardware stack levels used:    1
  4108 ;; Hardware stack levels required when called:    2
  4109 ;; This function calls:
  4110 ;;		Nothing
  4111 ;; This function is called by:
  4112 ;;		_strcspn
  4113 ;;		_strspn
  4114 ;; This function uses a non-reentrant model
  4115 ;;
  4116                           
  4117                           
  4118                           ;psect for function _strchr
  4119  1121                     _strchr:	
  4120  1121                     l1180:	
  4121                           ;incstack = 0
  4122                           ; Regs used in _strchr: [wreg-fsr0h+status,2+status,0+pclath]
  4123                           
  4124  1121  0020               	movlb	0	; select bank0
  4125  1122  0820               	movf	strchr@ptr,w
  4126  1123  0084               	movwf	4
  4127  1124  0821               	movf	strchr@ptr+1,w
  4128  1125  0085               	movwf	5
  4129  1126  0800               	movf	0,w	;code access
  4130  1127  0622               	xorwf	strchr@chr,w
  4131  1128  1903               	btfsc	3,2
  4132  1129  0008               	return
  4133  112A  0821               	movf	strchr@ptr+1,w
  4134  112B  00A5               	movwf	??_strchr+1
  4135  112C  0820               	movf	strchr@ptr,w
  4136  112D  00A4               	movwf	??_strchr
  4137  112E  0AA0               	incf	strchr@ptr,f
  4138  112F  1903               	skipnz
  4139  1130  0AA1               	incf	strchr@ptr+1,f
  4140  1131  0824               	movf	??_strchr,w
  4141  1132  0084               	movwf	4
  4142  1133  0825               	movf	??_strchr+1,w
  4143  1134  0085               	movwf	5
  4144  1135  0012               	moviw fsr0++
  4145  1136  1D03               	btfss	3,2
  4146  1137  2921               	goto	l1180
  4147  1138  01A0               	clrf	?_strchr
  4148  1139  01A1               	clrf	?_strchr+1
  4149  113A  0008               	return
  4150  113B                     __end_of_strchr:	
  4151                           
  4152                           	psect	text5
  4153  125F                     __ptext5:	
  4154 ;; *************** function _strcmp *****************
  4155 ;; Defined at:
  4156 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
  4157 ;; Parameters:    Size  Location     Type
  4158 ;;  s1              1    wreg     PTR const unsigned char 
  4159 ;;		 -> mainReceivedDataBuffer(18), NULL(0), 
  4160 ;;  s2              2    0[BANK0 ] PTR const unsigned char 
  4161 ;;		 -> STR_17(4), 
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;  s1              1    4[BANK0 ] PTR const unsigned char 
  4164 ;;		 -> mainReceivedDataBuffer(18), NULL(0), 
  4165 ;;  r               1    3[BANK0 ] char 
  4166 ;; Return value:  Size  Location     Type
  4167 ;;                  2    0[BANK0 ] int 
  4168 ;; Registers used:
  4169 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4170 ;; Tracked objects:
  4171 ;;		On entry : 0/0
  4172 ;;		On exit  : 0/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4175 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  4176 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  4177 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  4178 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0
  4179 ;;Total ram usage:        5 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:    2
  4182 ;; This function calls:
  4183 ;;		Nothing
  4184 ;; This function is called by:
  4185 ;;		_main
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           
  4190                           ;psect for function _strcmp
  4191  125F                     _strcmp:	
  4192                           
  4193                           ;incstack = 0
  4194                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0+pclath]
  4195                           ;strcmp@s1 stored from wreg
  4196  125F  0020               	movlb	0	; select bank0
  4197  1260  00A4               	movwf	strcmp@s1
  4198  1261  2A6A               	goto	l5899
  4199  1262                     l5897:	
  4200  1262  3001               	movlw	1
  4201  1263  00A2               	movwf	??_strcmp
  4202  1264  0822               	movf	??_strcmp,w
  4203  1265  07A4               	addwf	strcmp@s1,f
  4204  1266  3001               	movlw	1
  4205  1267  07A0               	addwf	strcmp@s2,f
  4206  1268  3000               	movlw	0
  4207  1269  3DA1               	addwfc	strcmp@s2+1,f
  4208  126A                     l5899:	
  4209  126A  0824               	movf	strcmp@s1,w
  4210  126B  0086               	movwf	6
  4211  126C  3002               	movlw	2	; select bank4/5
  4212  126D  0087               	movwf	7
  4213  126E  0820               	movf	strcmp@s2,w
  4214  126F  0084               	movwf	4
  4215  1270  0821               	movf	strcmp@s2+1,w
  4216  1271  0085               	movwf	5
  4217  1272  0800               	movf	0,w	;code access
  4218  1273  3AFF               	xorlw	255
  4219  1274  3E01               	addlw	1
  4220  1275  0701               	addwf	1,w
  4221  1276  00A2               	movwf	??_strcmp
  4222  1277  0822               	movf	??_strcmp,w
  4223  1278  00A3               	movwf	strcmp@r
  4224  1279  0823               	movf	strcmp@r,w
  4225  127A  1D03               	btfss	3,2
  4226  127B  2A83               	goto	l5903
  4227  127C  0824               	movf	strcmp@s1,w
  4228  127D  0086               	movwf	6
  4229  127E  3002               	movlw	2	; select bank4/5
  4230  127F  0087               	movwf	7
  4231  1280  0801               	movf	1,w
  4232  1281  1D03               	btfss	3,2
  4233  1282  2A62               	goto	l5897
  4234  1283                     l5903:	
  4235  1283  0823               	movf	strcmp@r,w
  4236  1284  00A0               	movwf	?_strcmp
  4237  1285  01A1               	clrf	?_strcmp+1
  4238  1286  1BA0               	btfsc	?_strcmp,7
  4239  1287  03A1               	decf	?_strcmp+1,f
  4240  1288  0008               	return
  4241  1289                     __end_of_strcmp:	
  4242                           
  4243                           	psect	text6
  4244  1108                     __ptext6:	
  4245 ;; *************** function _errorsMain *****************
  4246 ;; Defined at:
  4247 ;;		line 1301 in file "main.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;  errNum          2    0[BANK0 ] PTR const unsigned char 
  4250 ;;		 -> STR_19(5), 
  4251 ;; Auto vars:     Size  Location     Type
  4252 ;;		None
  4253 ;; Return value:  Size  Location     Type
  4254 ;;                  1    wreg      void 
  4255 ;; Registers used:
  4256 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4257 ;; Tracked objects:
  4258 ;;		On entry : 0/0
  4259 ;;		On exit  : 0/0
  4260 ;;		Unchanged: 0/0
  4261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4262 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  4263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  4264 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  4265 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0
  4266 ;;Total ram usage:        3 bytes
  4267 ;; Hardware stack levels used:    1
  4268 ;; Hardware stack levels required when called:    2
  4269 ;; This function calls:
  4270 ;;		Nothing
  4271 ;; This function is called by:
  4272 ;;		_main
  4273 ;; This function uses a non-reentrant model
  4274 ;;
  4275                           
  4276                           
  4277                           ;psect for function _errorsMain
  4278  1108                     _errorsMain:	
  4279  1108                     l5913:	
  4280                           ;main.c: 1303: while(*errNum != (0))
  4281                           
  4282                           ;incstack = 0
  4283                           ; Regs used in _errorsMain: [wreg-fsr0h+status,2+status,0+pclath]
  4284                           
  4285  1108  0020               	movlb	0	; select bank0
  4286  1109  0820               	movf	errorsMain@errNum,w
  4287  110A  0084               	movwf	4
  4288  110B  0821               	movf	errorsMain@errNum+1,w
  4289  110C  0085               	movwf	5
  4290  110D  0012               	moviw fsr0++
  4291  110E  1903               	btfsc	3,2
  4292  110F  0008               	return
  4293  1110                     l646:	
  4294                           ;main.c: 1304: {
  4295                           ;main.c: 1305: while (!TX1STAbits.TRMT);
  4296                           
  4297  1110  0023               	movlb	3	; select bank3
  4298  1111  1C9E               	btfss	30,1	;volatile
  4299  1112  2910               	goto	l646
  4300                           
  4301                           ;main.c: 1306: TX1REG = *errNum;
  4302  1113  0020               	movlb	0	; select bank0
  4303  1114  0820               	movf	errorsMain@errNum,w
  4304  1115  0084               	movwf	4
  4305  1116  0821               	movf	errorsMain@errNum+1,w
  4306  1117  0085               	movwf	5
  4307  1118  0800               	movf	0,w	;code access
  4308  1119  0023               	movlb	3	; select bank3
  4309  111A  009A               	movwf	26	;volatile
  4310                           
  4311                           ;main.c: 1307: *errNum++;
  4312  111B  3001               	movlw	1
  4313  111C  0020               	movlb	0	; select bank0
  4314  111D  07A0               	addwf	errorsMain@errNum,f
  4315  111E  3000               	movlw	0
  4316  111F  3DA1               	addwfc	errorsMain@errNum+1,f
  4317  1120  2908               	goto	l5913
  4318  1121                     __end_of_errorsMain:	
  4319                           
  4320                           	psect	text7
  4321  1344                     __ptext7:	
  4322 ;; *************** function _copyReceivedDataBuffer *****************
  4323 ;; Defined at:
  4324 ;;		line 1385 in file "main.c"
  4325 ;; Parameters:    Size  Location     Type
  4326 ;;		None
  4327 ;; Auto vars:     Size  Location     Type
  4328 ;;  dataBufferCo    2    1[BANK0 ] int 
  4329 ;; Return value:  Size  Location     Type
  4330 ;;                  1    wreg      void 
  4331 ;; Registers used:
  4332 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4333 ;; Tracked objects:
  4334 ;;		On entry : 0/0
  4335 ;;		On exit  : 0/0
  4336 ;;		Unchanged: 0/0
  4337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  4339 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  4340 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  4341 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0
  4342 ;;Total ram usage:        3 bytes
  4343 ;; Hardware stack levels used:    1
  4344 ;; Hardware stack levels required when called:    2
  4345 ;; This function calls:
  4346 ;;		Nothing
  4347 ;; This function is called by:
  4348 ;;		_main
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           
  4353                           ;psect for function _copyReceivedDataBuffer
  4354  1344                     _copyReceivedDataBuffer:	
  4355                           
  4356                           ;main.c: 1386: int dataBufferCounter=2;
  4357                           
  4358                           ;incstack = 0
  4359                           ; Regs used in _copyReceivedDataBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  4360  1344  3002               	movlw	2
  4361  1345  0020               	movlb	0	; select bank0
  4362  1346  00A1               	movwf	copyReceivedDataBuffer@dataBufferCounter
  4363  1347  3000               	movlw	0
  4364  1348  00A2               	movwf	copyReceivedDataBuffer@dataBufferCounter+1
  4365                           
  4366                           ;main.c: 1387: for(dataBufferCounter=2;dataBufferCounter<9;dataBufferCounter++){
  4367  1349  3002               	movlw	2
  4368  134A  00A1               	movwf	copyReceivedDataBuffer@dataBufferCounter
  4369  134B  3000               	movlw	0
  4370  134C  00A2               	movwf	copyReceivedDataBuffer@dataBufferCounter+1
  4371  134D                     L1:	
  4372  134D  0822               	movf	copyReceivedDataBuffer@dataBufferCounter+1,w
  4373  134E  3A80               	xorlw	128
  4374  134F  00A0               	movwf	??_copyReceivedDataBuffer
  4375  1350  3080               	movlw	128
  4376  1351  0220               	subwf	??_copyReceivedDataBuffer,w
  4377  1352  1D03               	skipz
  4378  1353  2B56               	goto	u5755
  4379  1354  3009               	movlw	9
  4380  1355  0221               	subwf	copyReceivedDataBuffer@dataBufferCounter,w
  4381  1356                     u5755:	
  4382  1356  1803               	btfsc	3,0
  4383  1357  0008               	return
  4384                           
  4385                           ;main.c: 1388: tempReceivedDataBuffer[dataBufferCounter-2]=mainReceivedDataBuffer[dataBu
      +                          fferCounter];
  4386  1358  0020               	movlb	0	; select bank0
  4387  1359  0821               	movf	copyReceivedDataBuffer@dataBufferCounter,w
  4388  135A  3E5C               	addlw	(low (_mainReceivedDataBuffer| (0+512)))& (0+255)
  4389  135B  0086               	movwf	6
  4390  135C  3002               	movlw	2	; select bank4/5
  4391  135D  0087               	movwf	7
  4392  135E  0801               	movf	1,w
  4393  135F  00A0               	movwf	??_copyReceivedDataBuffer
  4394  1360  0821               	movf	copyReceivedDataBuffer@dataBufferCounter,w
  4395  1361  3EFE               	addlw	254
  4396  1362  3EDA               	addlw	(low (_tempReceivedDataBuffer| (0+256)))& (0+255)
  4397  1363  0086               	movwf	6
  4398  1364  3001               	movlw	1	; select bank3/4
  4399  1365  0087               	movwf	7
  4400  1366  0820               	movf	??_copyReceivedDataBuffer,w
  4401  1367  0081               	movwf	1
  4402                           
  4403                           ;main.c: 1389: mainReceivedDataBuffer[dataBufferCounter]='#';
  4404  1368  3023               	movlw	35
  4405  1369  00A0               	movwf	??_copyReceivedDataBuffer
  4406  136A  0821               	movf	copyReceivedDataBuffer@dataBufferCounter,w
  4407  136B  3E5C               	addlw	(low (_mainReceivedDataBuffer| (0+512)))& (0+255)
  4408  136C  0086               	movwf	6
  4409  136D  3002               	movlw	2	; select bank4/5
  4410  136E  0087               	movwf	7
  4411  136F  0820               	movf	??_copyReceivedDataBuffer,w
  4412  1370  0081               	movwf	1
  4413  1371  3001               	movlw	1
  4414  1372  07A1               	addwf	copyReceivedDataBuffer@dataBufferCounter,f
  4415  1373  3000               	movlw	0
  4416  1374  3DA2               	addwfc	copyReceivedDataBuffer@dataBufferCounter+1,f
  4417  1375  2B4D               	goto	L1
  4418  1376                     __end_of_copyReceivedDataBuffer:	
  4419                           
  4420                           	psect	text8
  4421  018A                     __ptext8:	
  4422 ;; *************** function _applicationControlRGB *****************
  4423 ;; Defined at:
  4424 ;;		line 1 in file "applicationcontrolRGB.h"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;  ModuleNamest    1    wreg     PTR unsigned char 
  4427 ;;		 -> mainReceivedDataBuffer(18), NULL(0), 
  4428 ;;  SwitchNumber    1   44[BANK0 ] PTR unsigned char 
  4429 ;;		 -> switchNumberBuffer(3), NULL(0), 
  4430 ;;  SwitchStatus    1   45[BANK0 ] PTR unsigned char 
  4431 ;;		 -> switchstatusbuffer(2), NULL(0), 
  4432 ;;  RedColorInte    1   46[BANK0 ] PTR unsigned char 
  4433 ;;		 -> mainReceivedDataBuffer(18), NULL(0), 
  4434 ;;  GreenColorIn    1   47[BANK0 ] PTR unsigned char 
  4435 ;;		 -> mainReceivedDataBuffer(18), NULL(0), 
  4436 ;;  BlueColorInt    1   48[BANK0 ] PTR unsigned char 
  4437 ;;		 -> mainReceivedDataBuffer(18), NULL(0), 
  4438 ;;  ChildLockstr    1   49[BANK0 ] PTR unsigned char 
  4439 ;;		 -> ChildLockbuffer(2), NULL(0), 
  4440 ;;  Allcolorstr     1   50[BANK0 ] PTR unsigned char 
  4441 ;;		 -> mainReceivedDataBuffer(18), NULL(0), 
  4442 ;; Auto vars:     Size  Location     Type
  4443 ;;  ModuleNamest    1   30[BANK1 ] PTR unsigned char 
  4444 ;;		 -> mainReceivedDataBuffer(18), NULL(0), 
  4445 ;;  HexlevelBuff    5   49[BANK1 ] unsigned char [5]
  4446 ;;  CompleteCloc    4   54[BANK1 ] unsigned long 
  4447 ;;  NeedBluePuls    4   26[BANK1 ] unsigned long 
  4448 ;;  NeedGreenPul    4   22[BANK1 ] unsigned long 
  4449 ;;  NeedRedPulse    4   18[BANK1 ] unsigned long 
  4450 ;;  BluePulse       4   14[BANK1 ] unsigned long 
  4451 ;;  GreenPulse      4   10[BANK1 ] unsigned long 
  4452 ;;  RedPulse        4    6[BANK1 ] unsigned long 
  4453 ;;  strBlueL        3   46[BANK1 ] unsigned char [3]
  4454 ;;  strBlueH        3   43[BANK1 ] unsigned char [3]
  4455 ;;  strGreenL       3   40[BANK1 ] unsigned char [3]
  4456 ;;  strGreenH       3   37[BANK1 ] unsigned char [3]
  4457 ;;  strRedL         3   34[BANK1 ] unsigned char [3]
  4458 ;;  strRedH         3   31[BANK1 ] unsigned char [3]
  4459 ;;  ConvertIntTo    3   72[BANK1 ] unsigned char [3]
  4460 ;;  ConvertIntTo    3   69[BANK1 ] unsigned char [3]
  4461 ;;  ConvertIntTo    3   66[BANK1 ] unsigned char [3]
  4462 ;;  clockPerCycl    3   61[BANK1 ] float 
  4463 ;;  Convert255Ra    3   58[BANK1 ] float 
  4464 ;;  ConvertIntoT    2   64[BANK1 ] int 
  4465 ;;  end             2    4[BANK1 ] int 
  4466 ;;  start           2    2[BANK1 ] int 
  4467 ;;  remainder       2    0[BANK1 ] int 
  4468 ;; Return value:  Size  Location     Type
  4469 ;;                  1    wreg      void 
  4470 ;; Registers used:
  4471 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4472 ;; Tracked objects:
  4473 ;;		On entry : 0/0
  4474 ;;		On exit  : 0/0
  4475 ;;		Unchanged: 0/0
  4476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4477 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0
  4478 ;;      Locals:         0       0      75       0       0       0       0       0       0       0       0
  4479 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  4480 ;;      Totals:         0       9      75       0       0       0       0       0       0       0       0
  4481 ;;Total ram usage:       84 bytes
  4482 ;; Hardware stack levels used:    1
  4483 ;; Hardware stack levels required when called:    4
  4484 ;; This function calls:
  4485 ;;		___awtoft
  4486 ;;		___ftdiv
  4487 ;;		___ftmul
  4488 ;;		___fttol
  4489 ;;		___lwtoft
  4490 ;;		_abs
  4491 ;;		_atoi
  4492 ;;		_hexadecimalToDecimal
  4493 ;;		_memset
  4494 ;;		_sendAcknowledgment
  4495 ;;		_sprintf
  4496 ;;		_strcat
  4497 ;;		_strcpy
  4498 ;;		_strlen
  4499 ;;		_strncpy
  4500 ;; This function is called by:
  4501 ;;		_main
  4502 ;; This function uses a non-reentrant model
  4503 ;;
  4504                           
  4505                           
  4506                           ;psect for function _applicationControlRGB
  4507  018A                     _applicationControlRGB:	
  4508                           
  4509                           ;incstack = 0
  4510                           ; Regs used in _applicationControlRGB: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4511                           ;applicationControlRGB@ModuleNamestr stored from wreg
  4512  018A  0021               	movlb	1	; select bank1
  4513  018B  00BE               	movwf	applicationControlRGB@ModuleNamestr^(0+128)
  4514                           
  4515                           ;applicationcontrolRGB.h: 7: IntegerSwitchNumber = atoi(SwitchNumberstr);
  4516  018C  0020               	movlb	0	; select bank0
  4517  018D  084C               	movf	applicationControlRGB@SwitchNumberstr,w
  4518  018E  00A6               	movwf	atoi@s
  4519  018F  39FF               	andlw	255
  4520  0190  1D03               	skipz
  4521  0191  3001               	movlw	1
  4522  0192  00A7               	movwf	atoi@s+1
  4523  0193  3194  2476  3181   	fcall	_atoi
  4524  0196  0020               	movlb	0	; select bank0
  4525  0197  0827               	movf	?_atoi+1,w
  4526  0198  0022               	movlb	2	; select bank2
  4527  0199  00B9               	movwf	(_IntegerSwitchNumber+1)^(0+256)
  4528  019A  0020               	movlb	0	; select bank0
  4529  019B  0826               	movf	?_atoi,w
  4530  019C  0022               	movlb	2	; select bank2
  4531  019D  00B8               	movwf	_IntegerSwitchNumber^(0+256)
  4532                           
  4533                           ;applicationcontrolRGB.h: 8: IntergerSwitchStatus = atoi(SwitchStatusstr);
  4534  019E  0020               	movlb	0	; select bank0
  4535  019F  084D               	movf	applicationControlRGB@SwitchStatusstr,w
  4536  01A0  00A6               	movwf	atoi@s
  4537  01A1  39FF               	andlw	255
  4538  01A2  1D03               	skipz
  4539  01A3  3001               	movlw	1
  4540  01A4  00A7               	movwf	atoi@s+1
  4541  01A5  3194  2476  3181   	fcall	_atoi
  4542  01A8  0020               	movlb	0	; select bank0
  4543  01A9  0827               	movf	?_atoi+1,w
  4544  01AA  0022               	movlb	2	; select bank2
  4545  01AB  00B7               	movwf	(_IntergerSwitchStatus+1)^(0+256)
  4546  01AC  0020               	movlb	0	; select bank0
  4547  01AD  0826               	movf	?_atoi,w
  4548  01AE  0022               	movlb	2	; select bank2
  4549  01AF  00B6               	movwf	_IntergerSwitchStatus^(0+256)
  4550                           
  4551                           ;applicationcontrolRGB.h: 9: IntergerRedColorIntensity = atoi(RedColorIntensitystr);
  4552  01B0  0020               	movlb	0	; select bank0
  4553  01B1  084E               	movf	applicationControlRGB@RedColorIntensitystr,w
  4554  01B2  00A6               	movwf	atoi@s
  4555  01B3  39FF               	andlw	255
  4556  01B4  1D03               	skipz
  4557  01B5  3002               	movlw	2
  4558  01B6  00A7               	movwf	atoi@s+1
  4559  01B7  3194  2476  3181   	fcall	_atoi
  4560  01BA  0020               	movlb	0	; select bank0
  4561  01BB  0827               	movf	?_atoi+1,w
  4562  01BC  0021               	movlb	1	; select bank1
  4563  01BD  00EE               	movwf	(_IntergerRedColorIntensity+1)^(0+128)
  4564  01BE  0020               	movlb	0	; select bank0
  4565  01BF  0826               	movf	?_atoi,w
  4566  01C0  0021               	movlb	1	; select bank1
  4567  01C1  00ED               	movwf	_IntergerRedColorIntensity^(0+128)
  4568                           
  4569                           ;applicationcontrolRGB.h: 10: IntegerBlueColorIntensity = atoi(BlueColorIntensitystr);
  4570  01C2  0020               	movlb	0	; select bank0
  4571  01C3  0850               	movf	applicationControlRGB@BlueColorIntensitystr,w
  4572  01C4  00A6               	movwf	atoi@s
  4573  01C5  39FF               	andlw	255
  4574  01C6  1D03               	skipz
  4575  01C7  3002               	movlw	2
  4576  01C8  00A7               	movwf	atoi@s+1
  4577  01C9  3194  2476  3181   	fcall	_atoi
  4578  01CC  0020               	movlb	0	; select bank0
  4579  01CD  0827               	movf	?_atoi+1,w
  4580  01CE  0022               	movlb	2	; select bank2
  4581  01CF  00B5               	movwf	(_IntegerBlueColorIntensity+1)^(0+256)
  4582  01D0  0020               	movlb	0	; select bank0
  4583  01D1  0826               	movf	?_atoi,w
  4584  01D2  0022               	movlb	2	; select bank2
  4585  01D3  00B4               	movwf	_IntegerBlueColorIntensity^(0+256)
  4586                           
  4587                           ;applicationcontrolRGB.h: 11: IntegerGreenColorIntensity = atoi(GreenColorIntensitystr);
  4588  01D4  0020               	movlb	0	; select bank0
  4589  01D5  084F               	movf	applicationControlRGB@GreenColorIntensitystr,w
  4590  01D6  00A6               	movwf	atoi@s
  4591  01D7  39FF               	andlw	255
  4592  01D8  1D03               	skipz
  4593  01D9  3002               	movlw	2
  4594  01DA  00A7               	movwf	atoi@s+1
  4595  01DB  3194  2476  3181   	fcall	_atoi
  4596  01DE  0020               	movlb	0	; select bank0
  4597  01DF  0827               	movf	?_atoi+1,w
  4598  01E0  0021               	movlb	1	; select bank1
  4599  01E1  00EC               	movwf	(_IntegerGreenColorIntensity+1)^(0+128)
  4600  01E2  0020               	movlb	0	; select bank0
  4601  01E3  0826               	movf	?_atoi,w
  4602  01E4  0021               	movlb	1	; select bank1
  4603  01E5  00EB               	movwf	_IntegerGreenColorIntensity^(0+128)
  4604                           
  4605                           ;applicationcontrolRGB.h: 12: IntegerAllColorIntensity = atoi(Allcolorstr);
  4606  01E6  0020               	movlb	0	; select bank0
  4607  01E7  0852               	movf	applicationControlRGB@Allcolorstr,w
  4608  01E8  00A6               	movwf	atoi@s
  4609  01E9  39FF               	andlw	255
  4610  01EA  1D03               	skipz
  4611  01EB  3002               	movlw	2
  4612  01EC  00A7               	movwf	atoi@s+1
  4613  01ED  3194  2476  3181   	fcall	_atoi
  4614  01F0  0020               	movlb	0	; select bank0
  4615  01F1  0827               	movf	?_atoi+1,w
  4616  01F2  0023               	movlb	3	; select bank3
  4617  01F3  00A8               	movwf	(_IntegerAllColorIntensity+1)^(0+384)
  4618  01F4  0020               	movlb	0	; select bank0
  4619  01F5  0826               	movf	?_atoi,w
  4620  01F6  0023               	movlb	3	; select bank3
  4621  01F7  00A7               	movwf	_IntegerAllColorIntensity^(0+384)
  4622                           
  4623                           ;applicationcontrolRGB.h: 13: IntegerChildLock = atoi(ChildLockstr);
  4624  01F8  0020               	movlb	0	; select bank0
  4625  01F9  0851               	movf	applicationControlRGB@ChildLockstr,w
  4626  01FA  00A6               	movwf	atoi@s
  4627  01FB  39FF               	andlw	255
  4628  01FC  1D03               	skipz
  4629  01FD  3001               	movlw	1
  4630  01FE  00A7               	movwf	atoi@s+1
  4631  01FF  3194  2476  3181   	fcall	_atoi
  4632  0202  0020               	movlb	0	; select bank0
  4633  0203  0827               	movf	?_atoi+1,w
  4634  0204  0022               	movlb	2	; select bank2
  4635  0205  00B3               	movwf	(_IntegerChildLock+1)^(0+256)
  4636  0206  0020               	movlb	0	; select bank0
  4637  0207  0826               	movf	?_atoi,w
  4638  0208  0022               	movlb	2	; select bank2
  4639  0209  00B2               	movwf	_IntegerChildLock^(0+256)
  4640                           
  4641                           ;applicationcontrolRGB.h: 16: charchildLock = IntegerChildLock + '0';
  4642  020A  0832               	movf	_IntegerChildLock^(0+256),w
  4643  020B  3E30               	addlw	48
  4644  020C  0020               	movlb	0	; select bank0
  4645  020D  00D3               	movwf	??_applicationControlRGB
  4646  020E  0853               	movf	??_applicationControlRGB,w
  4647  020F  0021               	movlb	1	; select bank1
  4648  0210  00EF               	movwf	_charchildLock^(0+128)
  4649                           
  4650                           ;applicationcontrolRGB.h: 17: charSwitchState = IntergerSwitchStatus + '0';
  4651  0211  0022               	movlb	2	; select bank2
  4652  0212  0836               	movf	_IntergerSwitchStatus^(0+256),w
  4653  0213  3E30               	addlw	48
  4654  0214  0020               	movlb	0	; select bank0
  4655  0215  00D3               	movwf	??_applicationControlRGB
  4656  0216  0853               	movf	??_applicationControlRGB,w
  4657  0217  0022               	movlb	2	; select bank2
  4658  0218  00E6               	movwf	_charSwitchState^(0+256)
  4659                           
  4660                           ;applicationcontrolRGB.h: 20: strcpy(sendFinalBufferToGAteway,ModuleNamestr);
  4661  0219  3020               	movlw	low _sendFinalBufferToGAteway
  4662  021A  0020               	movlb	0	; select bank0
  4663  021B  00A0               	movwf	strcpy@to
  4664  021C  3002               	movlw	high _sendFinalBufferToGAteway
  4665  021D  00A1               	movwf	strcpy@to+1
  4666  021E  0021               	movlb	1	; select bank1
  4667  021F  083E               	movf	applicationControlRGB@ModuleNamestr^(0+128),w
  4668  0220  0020               	movlb	0	; select bank0
  4669  0221  00A2               	movwf	strcpy@from
  4670  0222  39FF               	andlw	255
  4671  0223  1D03               	skipz
  4672  0224  3002               	movlw	2
  4673  0225  00A3               	movwf	strcpy@from+1
  4674  0226  3191  213B  3181   	fcall	_strcpy
  4675                           
  4676                           ;applicationcontrolRGB.h: 21: strcat(sendFinalBufferToGAteway,".");
  4677  0229  3036               	movlw	low (STR_2| (0+32768))
  4678  022A  0020               	movlb	0	; select bank0
  4679  022B  00A0               	movwf	strcat@from
  4680  022C  3098               	movlw	high (STR_2| (0+32768))
  4681  022D  00A1               	movwf	strcat@from+1
  4682  022E  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4683  022F  3192  2237  3181   	fcall	_strcat
  4684                           
  4685                           ;applicationcontrolRGB.h: 22: strcat(sendFinalBufferToGAteway,SwitchNumberstr);
  4686  0232  0020               	movlb	0	; select bank0
  4687  0233  084C               	movf	applicationControlRGB@SwitchNumberstr,w
  4688  0234  00A0               	movwf	strcat@from
  4689  0235  39FF               	andlw	255
  4690  0236  1D03               	skipz
  4691  0237  3001               	movlw	1
  4692  0238  00A1               	movwf	strcat@from+1
  4693  0239  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4694  023A  3192  2237  3181   	fcall	_strcat
  4695                           
  4696                           ;applicationcontrolRGB.h: 23: strcat(sendFinalBufferToGAteway,".");
  4697  023D  3036               	movlw	low (STR_2| (0+32768))
  4698  023E  0020               	movlb	0	; select bank0
  4699  023F  00A0               	movwf	strcat@from
  4700  0240  3098               	movlw	high (STR_2| (0+32768))
  4701  0241  00A1               	movwf	strcat@from+1
  4702  0242  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4703  0243  3192  2237  3181   	fcall	_strcat
  4704                           
  4705                           ;applicationcontrolRGB.h: 24: strcat(sendFinalBufferToGAteway,"ACTACK");
  4706  0246  3019               	movlw	low (STR_4| (0+32768))
  4707  0247  0020               	movlb	0	; select bank0
  4708  0248  00A0               	movwf	strcat@from
  4709  0249  3098               	movlw	high (STR_4| (0+32768))
  4710  024A  00A1               	movwf	strcat@from+1
  4711  024B  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4712  024C  3192  2237  3181   	fcall	_strcat
  4713                           
  4714                           ;applicationcontrolRGB.h: 25: strcat(sendFinalBufferToGAteway,".");
  4715  024F  3036               	movlw	low (STR_2| (0+32768))
  4716  0250  0020               	movlb	0	; select bank0
  4717  0251  00A0               	movwf	strcat@from
  4718  0252  3098               	movlw	high (STR_2| (0+32768))
  4719  0253  00A1               	movwf	strcat@from+1
  4720  0254  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4721  0255  3192  2237  3181   	fcall	_strcat
  4722                           
  4723                           ;applicationcontrolRGB.h: 26: strcat(sendFinalBufferToGAteway,SwitchStatusstr);
  4724  0258  0020               	movlb	0	; select bank0
  4725  0259  084D               	movf	applicationControlRGB@SwitchStatusstr,w
  4726  025A  00A0               	movwf	strcat@from
  4727  025B  39FF               	andlw	255
  4728  025C  1D03               	skipz
  4729  025D  3001               	movlw	1
  4730  025E  00A1               	movwf	strcat@from+1
  4731  025F  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4732  0260  3192  2237  3181   	fcall	_strcat
  4733                           
  4734                           ;applicationcontrolRGB.h: 27: strcat(sendFinalBufferToGAteway,".");
  4735  0263  3036               	movlw	low (STR_2| (0+32768))
  4736  0264  0020               	movlb	0	; select bank0
  4737  0265  00A0               	movwf	strcat@from
  4738  0266  3098               	movlw	high (STR_2| (0+32768))
  4739  0267  00A1               	movwf	strcat@from+1
  4740  0268  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4741  0269  3192  2237  3181   	fcall	_strcat
  4742                           
  4743                           ;applicationcontrolRGB.h: 28: strcat(sendFinalBufferToGAteway,RedColorIntensitystr);
  4744  026C  0020               	movlb	0	; select bank0
  4745  026D  084E               	movf	applicationControlRGB@RedColorIntensitystr,w
  4746  026E  00A0               	movwf	strcat@from
  4747  026F  39FF               	andlw	255
  4748  0270  1D03               	skipz
  4749  0271  3002               	movlw	2
  4750  0272  00A1               	movwf	strcat@from+1
  4751  0273  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4752  0274  3192  2237  3181   	fcall	_strcat
  4753                           
  4754                           ;applicationcontrolRGB.h: 29: strcat(sendFinalBufferToGAteway,".");
  4755  0277  3036               	movlw	low (STR_2| (0+32768))
  4756  0278  0020               	movlb	0	; select bank0
  4757  0279  00A0               	movwf	strcat@from
  4758  027A  3098               	movlw	high (STR_2| (0+32768))
  4759  027B  00A1               	movwf	strcat@from+1
  4760  027C  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4761  027D  3192  2237  3181   	fcall	_strcat
  4762                           
  4763                           ;applicationcontrolRGB.h: 30: strcat(sendFinalBufferToGAteway,GreenColorIntensitystr);
  4764  0280  0020               	movlb	0	; select bank0
  4765  0281  084F               	movf	applicationControlRGB@GreenColorIntensitystr,w
  4766  0282  00A0               	movwf	strcat@from
  4767  0283  39FF               	andlw	255
  4768  0284  1D03               	skipz
  4769  0285  3002               	movlw	2
  4770  0286  00A1               	movwf	strcat@from+1
  4771  0287  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4772  0288  3192  2237  3181   	fcall	_strcat
  4773                           
  4774                           ;applicationcontrolRGB.h: 31: strcat(sendFinalBufferToGAteway,".");
  4775  028B  3036               	movlw	low (STR_2| (0+32768))
  4776  028C  0020               	movlb	0	; select bank0
  4777  028D  00A0               	movwf	strcat@from
  4778  028E  3098               	movlw	high (STR_2| (0+32768))
  4779  028F  00A1               	movwf	strcat@from+1
  4780  0290  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4781  0291  3192  2237  3181   	fcall	_strcat
  4782                           
  4783                           ;applicationcontrolRGB.h: 32: strcat(sendFinalBufferToGAteway,BlueColorIntensitystr);
  4784  0294  0020               	movlb	0	; select bank0
  4785  0295  0850               	movf	applicationControlRGB@BlueColorIntensitystr,w
  4786  0296  00A0               	movwf	strcat@from
  4787  0297  39FF               	andlw	255
  4788  0298  1D03               	skipz
  4789  0299  3002               	movlw	2
  4790  029A  00A1               	movwf	strcat@from+1
  4791  029B  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4792  029C  3192  2237  3181   	fcall	_strcat
  4793                           
  4794                           ;applicationcontrolRGB.h: 33: strcat(sendFinalBufferToGAteway,".");
  4795  029F  3036               	movlw	low (STR_2| (0+32768))
  4796  02A0  0020               	movlb	0	; select bank0
  4797  02A1  00A0               	movwf	strcat@from
  4798  02A2  3098               	movlw	high (STR_2| (0+32768))
  4799  02A3  00A1               	movwf	strcat@from+1
  4800  02A4  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4801  02A5  3192  2237  3181   	fcall	_strcat
  4802                           
  4803                           ;applicationcontrolRGB.h: 34: strcat(sendFinalBufferToGAteway,ChildLockstr);
  4804  02A8  0020               	movlb	0	; select bank0
  4805  02A9  0851               	movf	applicationControlRGB@ChildLockstr,w
  4806  02AA  00A0               	movwf	strcat@from
  4807  02AB  39FF               	andlw	255
  4808  02AC  1D03               	skipz
  4809  02AD  3001               	movlw	1
  4810  02AE  00A1               	movwf	strcat@from+1
  4811  02AF  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4812  02B0  3192  2237  3181   	fcall	_strcat
  4813                           
  4814                           ;applicationcontrolRGB.h: 35: strcat(sendFinalBufferToGAteway,".");
  4815  02B3  3036               	movlw	low (STR_2| (0+32768))
  4816  02B4  0020               	movlb	0	; select bank0
  4817  02B5  00A0               	movwf	strcat@from
  4818  02B6  3098               	movlw	high (STR_2| (0+32768))
  4819  02B7  00A1               	movwf	strcat@from+1
  4820  02B8  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4821  02B9  3192  2237  3181   	fcall	_strcat
  4822                           
  4823                           ;applicationcontrolRGB.h: 36: strcat(sendFinalBufferToGAteway,Allcolorstr);
  4824  02BC  0020               	movlb	0	; select bank0
  4825  02BD  0852               	movf	applicationControlRGB@Allcolorstr,w
  4826  02BE  00A0               	movwf	strcat@from
  4827  02BF  39FF               	andlw	255
  4828  02C0  1D03               	skipz
  4829  02C1  3002               	movlw	2
  4830  02C2  00A1               	movwf	strcat@from+1
  4831  02C3  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4832  02C4  3192  2237  3181   	fcall	_strcat
  4833                           
  4834                           ;applicationcontrolRGB.h: 37: sendAcknowledgment(sendFinalBufferToGAteway);
  4835  02C7  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4836  02C8  3191  21AE  3181   	fcall	_sendAcknowledgment
  4837                           
  4838                           ;applicationcontrolRGB.h: 39: parentalLockBuffer[IntegerSwitchNumber] = charchildLock;
  4839  02CB  0021               	movlb	1	; select bank1
  4840  02CC  086F               	movf	_charchildLock^(0+128),w
  4841  02CD  0020               	movlb	0	; select bank0
  4842  02CE  00D3               	movwf	??_applicationControlRGB
  4843  02CF  0022               	movlb	2	; select bank2
  4844  02D0  0838               	movf	_IntegerSwitchNumber^(0+256),w
  4845  02D1  3E4E               	addlw	(low (_parentalLockBuffer| (0+512)))& (0+255)
  4846  02D2  0086               	movwf	6
  4847  02D3  3002               	movlw	2	; select bank4/5
  4848  02D4  0087               	movwf	7
  4849  02D5  0020               	movlb	0	; select bank0
  4850  02D6  0853               	movf	??_applicationControlRGB,w
  4851  02D7  0081               	movwf	1
  4852                           
  4853                           ;applicationcontrolRGB.h: 41: double ConvertIntToTimeInMicrosecRed;
  4854                           ;applicationcontrolRGB.h: 42: double ConvertIntToTimeInMicrosecGreen;
  4855                           ;applicationcontrolRGB.h: 43: double ConvertIntToTimeInMicrosecBlue;
  4856                           ;applicationcontrolRGB.h: 44: unsigned long long int RedPulse=0,GreenPulse=0,BluePulse=0
      +                          ,NeedRedPulse=0,NeedGreenPulse=0,NeedBluePulse=0,CompleteClock = 65535;
  4857  02D8  3000               	movlw	0
  4858  02D9  0021               	movlb	1	; select bank1
  4859  02DA  00A9               	movwf	(applicationControlRGB@RedPulse+3)^(0+128)
  4860  02DB  3000               	movlw	0
  4861  02DC  00A8               	movwf	(applicationControlRGB@RedPulse+2)^(0+128)
  4862  02DD  3000               	movlw	0
  4863  02DE  00A7               	movwf	(applicationControlRGB@RedPulse+1)^(0+128)
  4864  02DF  3000               	movlw	0
  4865  02E0  00A6               	movwf	applicationControlRGB@RedPulse^(0+128)
  4866  02E1  3000               	movlw	0
  4867  02E2  00AD               	movwf	(applicationControlRGB@GreenPulse+3)^(0+128)
  4868  02E3  3000               	movlw	0
  4869  02E4  00AC               	movwf	(applicationControlRGB@GreenPulse+2)^(0+128)
  4870  02E5  3000               	movlw	0
  4871  02E6  00AB               	movwf	(applicationControlRGB@GreenPulse+1)^(0+128)
  4872  02E7  3000               	movlw	0
  4873  02E8  00AA               	movwf	applicationControlRGB@GreenPulse^(0+128)
  4874  02E9  3000               	movlw	0
  4875  02EA  00B1               	movwf	(applicationControlRGB@BluePulse+3)^(0+128)
  4876  02EB  3000               	movlw	0
  4877  02EC  00B0               	movwf	(applicationControlRGB@BluePulse+2)^(0+128)
  4878  02ED  3000               	movlw	0
  4879  02EE  00AF               	movwf	(applicationControlRGB@BluePulse+1)^(0+128)
  4880  02EF  3000               	movlw	0
  4881  02F0  00AE               	movwf	applicationControlRGB@BluePulse^(0+128)
  4882  02F1  3000               	movlw	0
  4883  02F2  00B5               	movwf	(applicationControlRGB@NeedRedPulse+3)^(0+128)
  4884  02F3  3000               	movlw	0
  4885  02F4  00B4               	movwf	(applicationControlRGB@NeedRedPulse+2)^(0+128)
  4886  02F5  3000               	movlw	0
  4887  02F6  00B3               	movwf	(applicationControlRGB@NeedRedPulse+1)^(0+128)
  4888  02F7  3000               	movlw	0
  4889  02F8  00B2               	movwf	applicationControlRGB@NeedRedPulse^(0+128)
  4890  02F9  3000               	movlw	0
  4891  02FA  00B9               	movwf	(applicationControlRGB@NeedGreenPulse+3)^(0+128)
  4892  02FB  3000               	movlw	0
  4893  02FC  00B8               	movwf	(applicationControlRGB@NeedGreenPulse+2)^(0+128)
  4894  02FD  3000               	movlw	0
  4895  02FE  00B7               	movwf	(applicationControlRGB@NeedGreenPulse+1)^(0+128)
  4896  02FF  3000               	movlw	0
  4897  0300  00B6               	movwf	applicationControlRGB@NeedGreenPulse^(0+128)
  4898  0301  3000               	movlw	0
  4899  0302  00BD               	movwf	(applicationControlRGB@NeedBluePulse+3)^(0+128)
  4900  0303  3000               	movlw	0
  4901  0304  00BC               	movwf	(applicationControlRGB@NeedBluePulse+2)^(0+128)
  4902  0305  3000               	movlw	0
  4903  0306  00BB               	movwf	(applicationControlRGB@NeedBluePulse+1)^(0+128)
  4904  0307  3000               	movlw	0
  4905  0308  00BA               	movwf	applicationControlRGB@NeedBluePulse^(0+128)
  4906  0309  3000               	movlw	0
  4907  030A  00D9               	movwf	(applicationControlRGB@CompleteClock+3)^(0+128)
  4908  030B  3000               	movlw	0
  4909  030C  00D8               	movwf	(applicationControlRGB@CompleteClock+2)^(0+128)
  4910  030D  30FF               	movlw	255
  4911  030E  00D7               	movwf	(applicationControlRGB@CompleteClock+1)^(0+128)
  4912  030F  30FF               	movlw	255
  4913  0310  00D6               	movwf	applicationControlRGB@CompleteClock^(0+128)
  4914                           
  4915                           ;applicationcontrolRGB.h: 45: float Convert255RangeintoHundred = 2.57;
  4916  0311  307B               	movlw	123
  4917  0312  00DA               	movwf	applicationControlRGB@Convert255RangeintoHundred^(0+128)
  4918  0313  3024               	movlw	36
  4919  0314  00DB               	movwf	(applicationControlRGB@Convert255RangeintoHundred+1)^(0+128)
  4920  0315  3040               	movlw	64
  4921  0316  00DC               	movwf	(applicationControlRGB@Convert255RangeintoHundred+2)^(0+128)
  4922                           
  4923                           ;applicationcontrolRGB.h: 46: int ConvertIntoTenMsRangeFactor = 10;
  4924  0317  300A               	movlw	10
  4925  0318  00E0               	movwf	applicationControlRGB@ConvertIntoTenMsRangeFactor^(0+128)
  4926  0319  3000               	movlw	0
  4927  031A  00E1               	movwf	(applicationControlRGB@ConvertIntoTenMsRangeFactor^(0+128)+1)
  4928                           
  4929                           ;applicationcontrolRGB.h: 47: float clockPerCycle=0.25;
  4930  031B  3000               	movlw	0
  4931  031C  00DD               	movwf	applicationControlRGB@clockPerCycle^(0+128)
  4932  031D  3080               	movlw	128
  4933  031E  00DE               	movwf	(applicationControlRGB@clockPerCycle+1)^(0+128)
  4934  031F  303E               	movlw	62
  4935  0320  00DF               	movwf	(applicationControlRGB@clockPerCycle+2)^(0+128)
  4936                           
  4937                           ;applicationcontrolRGB.h: 48: int remainder=0;
  4938  0321  01A0               	clrf	applicationControlRGB@remainder^(0+128)
  4939  0322  01A1               	clrf	(applicationControlRGB@remainder+1)^(0+128)
  4940                           
  4941                           ;applicationcontrolRGB.h: 49: char HexlevelBuffer[5];
  4942                           ;applicationcontrolRGB.h: 50: int start=0;
  4943  0323  01A2               	clrf	applicationControlRGB@start^(0+128)
  4944  0324  01A3               	clrf	(applicationControlRGB@start+1)^(0+128)
  4945                           
  4946                           ;applicationcontrolRGB.h: 51: int end = strlen(HexlevelBuffer)-1;
  4947  0325  30D1               	movlw	low applicationControlRGB@HexlevelBuffer
  4948  0326  0020               	movlb	0	; select bank0
  4949  0327  00A0               	movwf	strlen@s
  4950  0328  3000               	movlw	high applicationControlRGB@HexlevelBuffer
  4951  0329  00A1               	movwf	strlen@s+1
  4952  032A  3191  218F  3181   	fcall	_strlen
  4953  032D  0020               	movlb	0	; select bank0
  4954  032E  0820               	movf	?_strlen,w
  4955  032F  3EFF               	addlw	255
  4956  0330  0021               	movlb	1	; select bank1
  4957  0331  00A4               	movwf	applicationControlRGB@end^(0+128)
  4958  0332  30FF               	movlw	255
  4959  0333  0020               	movlb	0	; select bank0
  4960  0334  3D21               	addwfc	?_strlen+1,w
  4961  0335  0021               	movlb	1	; select bank1
  4962  0336  00A5               	movwf	(applicationControlRGB@end+1)^(0+128)
  4963                           
  4964                           ;applicationcontrolRGB.h: 52: char strRedH[3],strRedL[3];
  4965                           ;applicationcontrolRGB.h: 53: char strGreenH[3],strGreenL[3];
  4966                           ;applicationcontrolRGB.h: 54: char strBlueH[3],strBlueL[3];
  4967                           ;applicationcontrolRGB.h: 56: IntegerSwitchNumber = atoi(SwitchNumberstr);
  4968  0337  0020               	movlb	0	; select bank0
  4969  0338  084C               	movf	applicationControlRGB@SwitchNumberstr,w
  4970  0339  00A6               	movwf	atoi@s
  4971  033A  39FF               	andlw	255
  4972  033B  1D03               	skipz
  4973  033C  3001               	movlw	1
  4974  033D  00A7               	movwf	atoi@s+1
  4975  033E  3194  2476  3181   	fcall	_atoi
  4976  0341  0020               	movlb	0	; select bank0
  4977  0342  0827               	movf	?_atoi+1,w
  4978  0343  0022               	movlb	2	; select bank2
  4979  0344  00B9               	movwf	(_IntegerSwitchNumber+1)^(0+256)
  4980  0345  0020               	movlb	0	; select bank0
  4981  0346  0826               	movf	?_atoi,w
  4982  0347  0022               	movlb	2	; select bank2
  4983  0348  00B8               	movwf	_IntegerSwitchNumber^(0+256)
  4984                           
  4985                           ;applicationcontrolRGB.h: 57: IntergerSwitchStatus = atoi(SwitchStatusstr);
  4986  0349  0020               	movlb	0	; select bank0
  4987  034A  084D               	movf	applicationControlRGB@SwitchStatusstr,w
  4988  034B  00A6               	movwf	atoi@s
  4989  034C  39FF               	andlw	255
  4990  034D  1D03               	skipz
  4991  034E  3001               	movlw	1
  4992  034F  00A7               	movwf	atoi@s+1
  4993  0350  3194  2476  3181   	fcall	_atoi
  4994  0353  0020               	movlb	0	; select bank0
  4995  0354  0827               	movf	?_atoi+1,w
  4996  0355  0022               	movlb	2	; select bank2
  4997  0356  00B7               	movwf	(_IntergerSwitchStatus+1)^(0+256)
  4998  0357  0020               	movlb	0	; select bank0
  4999  0358  0826               	movf	?_atoi,w
  5000  0359  0022               	movlb	2	; select bank2
  5001  035A  00B6               	movwf	_IntergerSwitchStatus^(0+256)
  5002                           
  5003                           ;applicationcontrolRGB.h: 58: IntergerRedColorIntensity = atoi(RedColorIntensitystr);
  5004  035B  0020               	movlb	0	; select bank0
  5005  035C  084E               	movf	applicationControlRGB@RedColorIntensitystr,w
  5006  035D  00A6               	movwf	atoi@s
  5007  035E  39FF               	andlw	255
  5008  035F  1D03               	skipz
  5009  0360  3002               	movlw	2
  5010  0361  00A7               	movwf	atoi@s+1
  5011  0362  3194  2476  3181   	fcall	_atoi
  5012  0365  0020               	movlb	0	; select bank0
  5013  0366  0827               	movf	?_atoi+1,w
  5014  0367  0021               	movlb	1	; select bank1
  5015  0368  00EE               	movwf	(_IntergerRedColorIntensity+1)^(0+128)
  5016  0369  0020               	movlb	0	; select bank0
  5017  036A  0826               	movf	?_atoi,w
  5018  036B  0021               	movlb	1	; select bank1
  5019  036C  00ED               	movwf	_IntergerRedColorIntensity^(0+128)
  5020                           
  5021                           ;applicationcontrolRGB.h: 59: IntegerBlueColorIntensity = atoi(BlueColorIntensitystr);
  5022  036D  0020               	movlb	0	; select bank0
  5023  036E  0850               	movf	applicationControlRGB@BlueColorIntensitystr,w
  5024  036F  00A6               	movwf	atoi@s
  5025  0370  39FF               	andlw	255
  5026  0371  1D03               	skipz
  5027  0372  3002               	movlw	2
  5028  0373  00A7               	movwf	atoi@s+1
  5029  0374  3194  2476  3181   	fcall	_atoi
  5030  0377  0020               	movlb	0	; select bank0
  5031  0378  0827               	movf	?_atoi+1,w
  5032  0379  0022               	movlb	2	; select bank2
  5033  037A  00B5               	movwf	(_IntegerBlueColorIntensity+1)^(0+256)
  5034  037B  0020               	movlb	0	; select bank0
  5035  037C  0826               	movf	?_atoi,w
  5036  037D  0022               	movlb	2	; select bank2
  5037  037E  00B4               	movwf	_IntegerBlueColorIntensity^(0+256)
  5038                           
  5039                           ;applicationcontrolRGB.h: 60: IntegerGreenColorIntensity = atoi(GreenColorIntensitystr);
  5040  037F  0020               	movlb	0	; select bank0
  5041  0380  084F               	movf	applicationControlRGB@GreenColorIntensitystr,w
  5042  0381  00A6               	movwf	atoi@s
  5043  0382  39FF               	andlw	255
  5044  0383  1D03               	skipz
  5045  0384  3002               	movlw	2
  5046  0385  00A7               	movwf	atoi@s+1
  5047  0386  3194  2476  3181   	fcall	_atoi
  5048  0389  0020               	movlb	0	; select bank0
  5049  038A  0827               	movf	?_atoi+1,w
  5050  038B  0021               	movlb	1	; select bank1
  5051  038C  00EC               	movwf	(_IntegerGreenColorIntensity+1)^(0+128)
  5052  038D  0020               	movlb	0	; select bank0
  5053  038E  0826               	movf	?_atoi,w
  5054  038F  0021               	movlb	1	; select bank1
  5055  0390  00EB               	movwf	_IntegerGreenColorIntensity^(0+128)
  5056                           
  5057                           ;applicationcontrolRGB.h: 61: IntegerAllColorIntensity = atoi(Allcolorstr);
  5058  0391  0020               	movlb	0	; select bank0
  5059  0392  0852               	movf	applicationControlRGB@Allcolorstr,w
  5060  0393  00A6               	movwf	atoi@s
  5061  0394  39FF               	andlw	255
  5062  0395  1D03               	skipz
  5063  0396  3002               	movlw	2
  5064  0397  00A7               	movwf	atoi@s+1
  5065  0398  3194  2476  3181   	fcall	_atoi
  5066  039B  0020               	movlb	0	; select bank0
  5067  039C  0827               	movf	?_atoi+1,w
  5068  039D  0023               	movlb	3	; select bank3
  5069  039E  00A8               	movwf	(_IntegerAllColorIntensity+1)^(0+384)
  5070  039F  0020               	movlb	0	; select bank0
  5071  03A0  0826               	movf	?_atoi,w
  5072  03A1  0023               	movlb	3	; select bank3
  5073  03A2  00A7               	movwf	_IntegerAllColorIntensity^(0+384)
  5074                           
  5075                           ;applicationcontrolRGB.h: 62: IntegerChildLock = atoi(ChildLockstr);
  5076  03A3  0020               	movlb	0	; select bank0
  5077  03A4  0851               	movf	applicationControlRGB@ChildLockstr,w
  5078  03A5  00A6               	movwf	atoi@s
  5079  03A6  39FF               	andlw	255
  5080  03A7  1D03               	skipz
  5081  03A8  3001               	movlw	1
  5082  03A9  00A7               	movwf	atoi@s+1
  5083  03AA  3194  2476  3181   	fcall	_atoi
  5084  03AD  0020               	movlb	0	; select bank0
  5085  03AE  0827               	movf	?_atoi+1,w
  5086  03AF  0022               	movlb	2	; select bank2
  5087  03B0  00B3               	movwf	(_IntegerChildLock+1)^(0+256)
  5088  03B1  0020               	movlb	0	; select bank0
  5089  03B2  0826               	movf	?_atoi,w
  5090  03B3  0022               	movlb	2	; select bank2
  5091  03B4  00B2               	movwf	_IntegerChildLock^(0+256)
  5092                           
  5093                           ;applicationcontrolRGB.h: 66: ConvertIntToTimeInMicrosecRed = (IntergerRedColorIntensity
      +                          /Convert255RangeintoHundred);
  5094  03B5  0021               	movlb	1	; select bank1
  5095  03B6  085A               	movf	applicationControlRGB@Convert255RangeintoHundred^(0+128),w
  5096  03B7  0020               	movlb	0	; select bank0
  5097  03B8  00AE               	movwf	___ftdiv@f2
  5098  03B9  0021               	movlb	1	; select bank1
  5099  03BA  085B               	movf	(applicationControlRGB@Convert255RangeintoHundred+1)^(0+128),w
  5100  03BB  0020               	movlb	0	; select bank0
  5101  03BC  00AF               	movwf	___ftdiv@f2+1
  5102  03BD  0021               	movlb	1	; select bank1
  5103  03BE  085C               	movf	(applicationControlRGB@Convert255RangeintoHundred+2)^(0+128),w
  5104  03BF  0020               	movlb	0	; select bank0
  5105  03C0  00B0               	movwf	___ftdiv@f2+2
  5106  03C1  0021               	movlb	1	; select bank1
  5107  03C2  086E               	movf	(_IntergerRedColorIntensity+1)^(0+128),w
  5108  03C3  0020               	movlb	0	; select bank0
  5109  03C4  00A9               	movwf	___lwtoft@c+1
  5110  03C5  0021               	movlb	1	; select bank1
  5111  03C6  086D               	movf	_IntergerRedColorIntensity^(0+128),w
  5112  03C7  0020               	movlb	0	; select bank0
  5113  03C8  00A8               	movwf	___lwtoft@c
  5114  03C9  3190  20C4  3181   	fcall	___lwtoft
  5115  03CC  0020               	movlb	0	; select bank0
  5116  03CD  0828               	movf	?___lwtoft,w
  5117  03CE  00B1               	movwf	___ftdiv@f1
  5118  03CF  0829               	movf	?___lwtoft+1,w
  5119  03D0  00B2               	movwf	___ftdiv@f1+1
  5120  03D1  082A               	movf	?___lwtoft+2,w
  5121  03D2  00B3               	movwf	___ftdiv@f1+2
  5122  03D3  3195  25F0  3181   	fcall	___ftdiv
  5123  03D6  0020               	movlb	0	; select bank0
  5124  03D7  082E               	movf	?___ftdiv,w
  5125  03D8  0021               	movlb	1	; select bank1
  5126  03D9  00E2               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128)
  5127  03DA  0020               	movlb	0	; select bank0
  5128  03DB  082F               	movf	?___ftdiv+1,w
  5129  03DC  0021               	movlb	1	; select bank1
  5130  03DD  00E3               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128)
  5131  03DE  0020               	movlb	0	; select bank0
  5132  03DF  0830               	movf	?___ftdiv+2,w
  5133  03E0  0021               	movlb	1	; select bank1
  5134  03E1  00E4               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128)
  5135                           
  5136                           ;applicationcontrolRGB.h: 67: ConvertIntToTimeInMicrosecRed = (ConvertIntToTimeInMicrose
      +                          cRed/ConvertIntoTenMsRangeFactor);
  5137  03E2  0861               	movf	(applicationControlRGB@ConvertIntoTenMsRangeFactor+1)^(0+128),w
  5138  03E3  0020               	movlb	0	; select bank0
  5139  03E4  00A9               	movwf	___awtoft@c+1
  5140  03E5  0021               	movlb	1	; select bank1
  5141  03E6  0860               	movf	applicationControlRGB@ConvertIntoTenMsRangeFactor^(0+128),w
  5142  03E7  0020               	movlb	0	; select bank0
  5143  03E8  00A8               	movwf	___awtoft@c
  5144  03E9  3191  21EE  3181   	fcall	___awtoft
  5145  03EC  0020               	movlb	0	; select bank0
  5146  03ED  0828               	movf	?___awtoft,w
  5147  03EE  00AE               	movwf	___ftdiv@f2
  5148  03EF  0829               	movf	?___awtoft+1,w
  5149  03F0  00AF               	movwf	___ftdiv@f2+1
  5150  03F1  082A               	movf	?___awtoft+2,w
  5151  03F2  00B0               	movwf	___ftdiv@f2+2
  5152  03F3  0021               	movlb	1	; select bank1
  5153  03F4  0862               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128),w
  5154  03F5  0020               	movlb	0	; select bank0
  5155  03F6  00B1               	movwf	___ftdiv@f1
  5156  03F7  0021               	movlb	1	; select bank1
  5157  03F8  0863               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128),w
  5158  03F9  0020               	movlb	0	; select bank0
  5159  03FA  00B2               	movwf	___ftdiv@f1+1
  5160  03FB  0021               	movlb	1	; select bank1
  5161  03FC  0864               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128),w
  5162  03FD  0020               	movlb	0	; select bank0
  5163  03FE  00B3               	movwf	___ftdiv@f1+2
  5164  03FF  3195  25F0  3181   	fcall	___ftdiv
  5165  0402  0020               	movlb	0	; select bank0
  5166  0403  082E               	movf	?___ftdiv,w
  5167  0404  0021               	movlb	1	; select bank1
  5168  0405  00E2               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128)
  5169  0406  0020               	movlb	0	; select bank0
  5170  0407  082F               	movf	?___ftdiv+1,w
  5171  0408  0021               	movlb	1	; select bank1
  5172  0409  00E3               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128)
  5173  040A  0020               	movlb	0	; select bank0
  5174  040B  0830               	movf	?___ftdiv+2,w
  5175  040C  0021               	movlb	1	; select bank1
  5176  040D  00E4               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128)
  5177                           
  5178                           ;applicationcontrolRGB.h: 68: ConvertIntToTimeInMicrosecRed = (ConvertIntToTimeInMicrose
      +                          cRed*1000);
  5179  040E  3000               	movlw	0
  5180  040F  0020               	movlb	0	; select bank0
  5181  0410  00A8               	movwf	___ftmul@f1
  5182  0411  307A               	movlw	122
  5183  0412  00A9               	movwf	___ftmul@f1+1
  5184  0413  3044               	movlw	68
  5185  0414  00AA               	movwf	___ftmul@f1+2
  5186  0415  0021               	movlb	1	; select bank1
  5187  0416  0862               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128),w
  5188  0417  0020               	movlb	0	; select bank0
  5189  0418  00AB               	movwf	___ftmul@f2
  5190  0419  0021               	movlb	1	; select bank1
  5191  041A  0863               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128),w
  5192  041B  0020               	movlb	0	; select bank0
  5193  041C  00AC               	movwf	___ftmul@f2+1
  5194  041D  0021               	movlb	1	; select bank1
  5195  041E  0864               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128),w
  5196  041F  0020               	movlb	0	; select bank0
  5197  0420  00AD               	movwf	___ftmul@f2+2
  5198  0421  3197  274C  3181   	fcall	___ftmul
  5199  0424  0020               	movlb	0	; select bank0
  5200  0425  0828               	movf	?___ftmul,w
  5201  0426  0021               	movlb	1	; select bank1
  5202  0427  00E2               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128)
  5203  0428  0020               	movlb	0	; select bank0
  5204  0429  0829               	movf	?___ftmul+1,w
  5205  042A  0021               	movlb	1	; select bank1
  5206  042B  00E3               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128)
  5207  042C  0020               	movlb	0	; select bank0
  5208  042D  082A               	movf	?___ftmul+2,w
  5209  042E  0021               	movlb	1	; select bank1
  5210  042F  00E4               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128)
  5211                           
  5212                           ;applicationcontrolRGB.h: 69: RedPulse = (int)(ConvertIntToTimeInMicrosecRed/clockPerCyc
      +                          le);
  5213  0430  0862               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128),w
  5214  0431  0020               	movlb	0	; select bank0
  5215  0432  00B1               	movwf	___ftdiv@f1
  5216  0433  0021               	movlb	1	; select bank1
  5217  0434  0863               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128),w
  5218  0435  0020               	movlb	0	; select bank0
  5219  0436  00B2               	movwf	___ftdiv@f1+1
  5220  0437  0021               	movlb	1	; select bank1
  5221  0438  0864               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128),w
  5222  0439  0020               	movlb	0	; select bank0
  5223  043A  00B3               	movwf	___ftdiv@f1+2
  5224  043B  0021               	movlb	1	; select bank1
  5225  043C  085D               	movf	applicationControlRGB@clockPerCycle^(0+128),w
  5226  043D  0020               	movlb	0	; select bank0
  5227  043E  00AE               	movwf	___ftdiv@f2
  5228  043F  0021               	movlb	1	; select bank1
  5229  0440  085E               	movf	(applicationControlRGB@clockPerCycle+1)^(0+128),w
  5230  0441  0020               	movlb	0	; select bank0
  5231  0442  00AF               	movwf	___ftdiv@f2+1
  5232  0443  0021               	movlb	1	; select bank1
  5233  0444  085F               	movf	(applicationControlRGB@clockPerCycle+2)^(0+128),w
  5234  0445  0020               	movlb	0	; select bank0
  5235  0446  00B0               	movwf	___ftdiv@f2+2
  5236  0447  3195  25F0  3181   	fcall	___ftdiv
  5237  044A  0020               	movlb	0	; select bank0
  5238  044B  082E               	movf	?___ftdiv,w
  5239  044C  00BE               	movwf	___fttol@f1
  5240  044D  082F               	movf	?___ftdiv+1,w
  5241  044E  00BF               	movwf	___fttol@f1+1
  5242  044F  0830               	movf	?___ftdiv+2,w
  5243  0450  00C0               	movwf	___fttol@f1+2
  5244  0451  3195  2569  3181   	fcall	___fttol
  5245  0454  0020               	movlb	0	; select bank0
  5246  0455  083E               	movf	?___fttol,w
  5247  0456  0021               	movlb	1	; select bank1
  5248  0457  00A6               	movwf	applicationControlRGB@RedPulse^(0+128)
  5249  0458  0020               	movlb	0	; select bank0
  5250  0459  083F               	movf	?___fttol+1,w
  5251  045A  0021               	movlb	1	; select bank1
  5252  045B  00A7               	movwf	(applicationControlRGB@RedPulse+1)^(0+128)
  5253  045C  0D89               	rlf	9,f
  5254  045D  3B89               	subwfb	9,f
  5255  045E  0989               	comf	9,f
  5256  045F  00A8               	movwf	(applicationControlRGB@RedPulse+2)^(0+128)
  5257  0460  00A9               	movwf	(applicationControlRGB@RedPulse+3)^(0+128)
  5258                           
  5259                           ;applicationcontrolRGB.h: 70: NeedRedPulse = abs(CompleteClock - RedPulse);
  5260  0461  0926               	comf	applicationControlRGB@RedPulse^(0+128),w
  5261  0462  0020               	movlb	0	; select bank0
  5262  0463  00D3               	movwf	??_applicationControlRGB
  5263  0464  0021               	movlb	1	; select bank1
  5264  0465  0927               	comf	(applicationControlRGB@RedPulse+1)^(0+128),w
  5265  0466  0020               	movlb	0	; select bank0
  5266  0467  00D4               	movwf	??_applicationControlRGB+1
  5267  0468  0AD3               	incf	??_applicationControlRGB,f
  5268  0469  1903               	skipnz
  5269  046A  0AD4               	incf	??_applicationControlRGB+1,f
  5270  046B  0021               	movlb	1	; select bank1
  5271  046C  0856               	movf	applicationControlRGB@CompleteClock^(0+128),w
  5272  046D  0020               	movlb	0	; select bank0
  5273  046E  0753               	addwf	??_applicationControlRGB,w
  5274  046F  00A0               	movwf	abs@a
  5275  0470  0021               	movlb	1	; select bank1
  5276  0471  0857               	movf	(applicationControlRGB@CompleteClock+1)^(0+128),w
  5277  0472  0020               	movlb	0	; select bank0
  5278  0473  3D54               	addwfc	??_applicationControlRGB+1,w
  5279  0474  00A1               	movwf	abs@a+1
  5280  0475  3190  2055  3181   	fcall	_abs
  5281  0478  0020               	movlb	0	; select bank0
  5282  0479  0820               	movf	?_abs,w
  5283  047A  0021               	movlb	1	; select bank1
  5284  047B  00B2               	movwf	applicationControlRGB@NeedRedPulse^(0+128)
  5285  047C  0020               	movlb	0	; select bank0
  5286  047D  0821               	movf	?_abs+1,w
  5287  047E  0021               	movlb	1	; select bank1
  5288  047F  00B3               	movwf	(applicationControlRGB@NeedRedPulse+1)^(0+128)
  5289  0480  0D89               	rlf	9,f
  5290  0481  3B89               	subwfb	9,f
  5291  0482  0989               	comf	9,f
  5292  0483  00B4               	movwf	(applicationControlRGB@NeedRedPulse+2)^(0+128)
  5293  0484  00B5               	movwf	(applicationControlRGB@NeedRedPulse+3)^(0+128)
  5294                           
  5295                           ;applicationcontrolRGB.h: 74: ConvertIntToTimeInMicrosecGreen = (IntegerGreenColorIntens
      +                          ity/Convert255RangeintoHundred);
  5296  0485  085A               	movf	applicationControlRGB@Convert255RangeintoHundred^(0+128),w
  5297  0486  0020               	movlb	0	; select bank0
  5298  0487  00AE               	movwf	___ftdiv@f2
  5299  0488  0021               	movlb	1	; select bank1
  5300  0489  085B               	movf	(applicationControlRGB@Convert255RangeintoHundred+1)^(0+128),w
  5301  048A  0020               	movlb	0	; select bank0
  5302  048B  00AF               	movwf	___ftdiv@f2+1
  5303  048C  0021               	movlb	1	; select bank1
  5304  048D  085C               	movf	(applicationControlRGB@Convert255RangeintoHundred+2)^(0+128),w
  5305  048E  0020               	movlb	0	; select bank0
  5306  048F  00B0               	movwf	___ftdiv@f2+2
  5307  0490  0021               	movlb	1	; select bank1
  5308  0491  086C               	movf	(_IntegerGreenColorIntensity+1)^(0+128),w
  5309  0492  0020               	movlb	0	; select bank0
  5310  0493  00A9               	movwf	___lwtoft@c+1
  5311  0494  0021               	movlb	1	; select bank1
  5312  0495  086B               	movf	_IntegerGreenColorIntensity^(0+128),w
  5313  0496  0020               	movlb	0	; select bank0
  5314  0497  00A8               	movwf	___lwtoft@c
  5315  0498  3190  20C4  3181   	fcall	___lwtoft
  5316  049B  0020               	movlb	0	; select bank0
  5317  049C  0828               	movf	?___lwtoft,w
  5318  049D  00B1               	movwf	___ftdiv@f1
  5319  049E  0829               	movf	?___lwtoft+1,w
  5320  049F  00B2               	movwf	___ftdiv@f1+1
  5321  04A0  082A               	movf	?___lwtoft+2,w
  5322  04A1  00B3               	movwf	___ftdiv@f1+2
  5323  04A2  3195  25F0  3181   	fcall	___ftdiv
  5324  04A5  0020               	movlb	0	; select bank0
  5325  04A6  082E               	movf	?___ftdiv,w
  5326  04A7  0021               	movlb	1	; select bank1
  5327  04A8  00E5               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128)
  5328  04A9  0020               	movlb	0	; select bank0
  5329  04AA  082F               	movf	?___ftdiv+1,w
  5330  04AB  0021               	movlb	1	; select bank1
  5331  04AC  00E6               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128)
  5332  04AD  0020               	movlb	0	; select bank0
  5333  04AE  0830               	movf	?___ftdiv+2,w
  5334  04AF  0021               	movlb	1	; select bank1
  5335  04B0  00E7               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128)
  5336                           
  5337                           ;applicationcontrolRGB.h: 75: ConvertIntToTimeInMicrosecGreen = (ConvertIntToTimeInMicro
      +                          secGreen/ConvertIntoTenMsRangeFactor);
  5338  04B1  0861               	movf	(applicationControlRGB@ConvertIntoTenMsRangeFactor+1)^(0+128),w
  5339  04B2  0020               	movlb	0	; select bank0
  5340  04B3  00A9               	movwf	___awtoft@c+1
  5341  04B4  0021               	movlb	1	; select bank1
  5342  04B5  0860               	movf	applicationControlRGB@ConvertIntoTenMsRangeFactor^(0+128),w
  5343  04B6  0020               	movlb	0	; select bank0
  5344  04B7  00A8               	movwf	___awtoft@c
  5345  04B8  3191  21EE  3181   	fcall	___awtoft
  5346  04BB  0020               	movlb	0	; select bank0
  5347  04BC  0828               	movf	?___awtoft,w
  5348  04BD  00AE               	movwf	___ftdiv@f2
  5349  04BE  0829               	movf	?___awtoft+1,w
  5350  04BF  00AF               	movwf	___ftdiv@f2+1
  5351  04C0  082A               	movf	?___awtoft+2,w
  5352  04C1  00B0               	movwf	___ftdiv@f2+2
  5353  04C2  0021               	movlb	1	; select bank1
  5354  04C3  0865               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128),w
  5355  04C4  0020               	movlb	0	; select bank0
  5356  04C5  00B1               	movwf	___ftdiv@f1
  5357  04C6  0021               	movlb	1	; select bank1
  5358  04C7  0866               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128),w
  5359  04C8  0020               	movlb	0	; select bank0
  5360  04C9  00B2               	movwf	___ftdiv@f1+1
  5361  04CA  0021               	movlb	1	; select bank1
  5362  04CB  0867               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128),w
  5363  04CC  0020               	movlb	0	; select bank0
  5364  04CD  00B3               	movwf	___ftdiv@f1+2
  5365  04CE  3195  25F0  3181   	fcall	___ftdiv
  5366  04D1  0020               	movlb	0	; select bank0
  5367  04D2  082E               	movf	?___ftdiv,w
  5368  04D3  0021               	movlb	1	; select bank1
  5369  04D4  00E5               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128)
  5370  04D5  0020               	movlb	0	; select bank0
  5371  04D6  082F               	movf	?___ftdiv+1,w
  5372  04D7  0021               	movlb	1	; select bank1
  5373  04D8  00E6               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128)
  5374  04D9  0020               	movlb	0	; select bank0
  5375  04DA  0830               	movf	?___ftdiv+2,w
  5376  04DB  0021               	movlb	1	; select bank1
  5377  04DC  00E7               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128)
  5378                           
  5379                           ;applicationcontrolRGB.h: 76: ConvertIntToTimeInMicrosecGreen = (ConvertIntToTimeInMicro
      +                          secGreen*1000);
  5380  04DD  3000               	movlw	0
  5381  04DE  0020               	movlb	0	; select bank0
  5382  04DF  00A8               	movwf	___ftmul@f1
  5383  04E0  307A               	movlw	122
  5384  04E1  00A9               	movwf	___ftmul@f1+1
  5385  04E2  3044               	movlw	68
  5386  04E3  00AA               	movwf	___ftmul@f1+2
  5387  04E4  0021               	movlb	1	; select bank1
  5388  04E5  0865               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128),w
  5389  04E6  0020               	movlb	0	; select bank0
  5390  04E7  00AB               	movwf	___ftmul@f2
  5391  04E8  0021               	movlb	1	; select bank1
  5392  04E9  0866               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128),w
  5393  04EA  0020               	movlb	0	; select bank0
  5394  04EB  00AC               	movwf	___ftmul@f2+1
  5395  04EC  0021               	movlb	1	; select bank1
  5396  04ED  0867               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128),w
  5397  04EE  0020               	movlb	0	; select bank0
  5398  04EF  00AD               	movwf	___ftmul@f2+2
  5399  04F0  3197  274C  3181   	fcall	___ftmul
  5400  04F3  0020               	movlb	0	; select bank0
  5401  04F4  0828               	movf	?___ftmul,w
  5402  04F5  0021               	movlb	1	; select bank1
  5403  04F6  00E5               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128)
  5404  04F7  0020               	movlb	0	; select bank0
  5405  04F8  0829               	movf	?___ftmul+1,w
  5406  04F9  0021               	movlb	1	; select bank1
  5407  04FA  00E6               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128)
  5408  04FB  0020               	movlb	0	; select bank0
  5409  04FC  082A               	movf	?___ftmul+2,w
  5410  04FD  0021               	movlb	1	; select bank1
  5411  04FE  00E7               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128)
  5412                           
  5413                           ;applicationcontrolRGB.h: 77: GreenPulse = (int)(ConvertIntToTimeInMicrosecGreen/clockPe
      +                          rCycle);
  5414  04FF  0865               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128),w
  5415  0500  0020               	movlb	0	; select bank0
  5416  0501  00B1               	movwf	___ftdiv@f1
  5417  0502  0021               	movlb	1	; select bank1
  5418  0503  0866               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128),w
  5419  0504  0020               	movlb	0	; select bank0
  5420  0505  00B2               	movwf	___ftdiv@f1+1
  5421  0506  0021               	movlb	1	; select bank1
  5422  0507  0867               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128),w
  5423  0508  0020               	movlb	0	; select bank0
  5424  0509  00B3               	movwf	___ftdiv@f1+2
  5425  050A  0021               	movlb	1	; select bank1
  5426  050B  085D               	movf	applicationControlRGB@clockPerCycle^(0+128),w
  5427  050C  0020               	movlb	0	; select bank0
  5428  050D  00AE               	movwf	___ftdiv@f2
  5429  050E  0021               	movlb	1	; select bank1
  5430  050F  085E               	movf	(applicationControlRGB@clockPerCycle+1)^(0+128),w
  5431  0510  0020               	movlb	0	; select bank0
  5432  0511  00AF               	movwf	___ftdiv@f2+1
  5433  0512  0021               	movlb	1	; select bank1
  5434  0513  085F               	movf	(applicationControlRGB@clockPerCycle+2)^(0+128),w
  5435  0514  0020               	movlb	0	; select bank0
  5436  0515  00B0               	movwf	___ftdiv@f2+2
  5437  0516  3195  25F0  3181   	fcall	___ftdiv
  5438  0519  0020               	movlb	0	; select bank0
  5439  051A  082E               	movf	?___ftdiv,w
  5440  051B  00BE               	movwf	___fttol@f1
  5441  051C  082F               	movf	?___ftdiv+1,w
  5442  051D  00BF               	movwf	___fttol@f1+1
  5443  051E  0830               	movf	?___ftdiv+2,w
  5444  051F  00C0               	movwf	___fttol@f1+2
  5445  0520  3195  2569  3181   	fcall	___fttol
  5446  0523  0020               	movlb	0	; select bank0
  5447  0524  083E               	movf	?___fttol,w
  5448  0525  0021               	movlb	1	; select bank1
  5449  0526  00AA               	movwf	applicationControlRGB@GreenPulse^(0+128)
  5450  0527  0020               	movlb	0	; select bank0
  5451  0528  083F               	movf	?___fttol+1,w
  5452  0529  0021               	movlb	1	; select bank1
  5453  052A  00AB               	movwf	(applicationControlRGB@GreenPulse+1)^(0+128)
  5454  052B  0D89               	rlf	9,f
  5455  052C  3B89               	subwfb	9,f
  5456  052D  0989               	comf	9,f
  5457  052E  00AC               	movwf	(applicationControlRGB@GreenPulse+2)^(0+128)
  5458  052F  00AD               	movwf	(applicationControlRGB@GreenPulse+3)^(0+128)
  5459                           
  5460                           ;applicationcontrolRGB.h: 78: NeedGreenPulse = abs(CompleteClock - GreenPulse);
  5461  0530  092A               	comf	applicationControlRGB@GreenPulse^(0+128),w
  5462  0531  0020               	movlb	0	; select bank0
  5463  0532  00D3               	movwf	??_applicationControlRGB
  5464  0533  0021               	movlb	1	; select bank1
  5465  0534  092B               	comf	(applicationControlRGB@GreenPulse+1)^(0+128),w
  5466  0535  0020               	movlb	0	; select bank0
  5467  0536  00D4               	movwf	??_applicationControlRGB+1
  5468  0537  0AD3               	incf	??_applicationControlRGB,f
  5469  0538  1903               	skipnz
  5470  0539  0AD4               	incf	??_applicationControlRGB+1,f
  5471  053A  0021               	movlb	1	; select bank1
  5472  053B  0856               	movf	applicationControlRGB@CompleteClock^(0+128),w
  5473  053C  0020               	movlb	0	; select bank0
  5474  053D  0753               	addwf	??_applicationControlRGB,w
  5475  053E  00A0               	movwf	abs@a
  5476  053F  0021               	movlb	1	; select bank1
  5477  0540  0857               	movf	(applicationControlRGB@CompleteClock+1)^(0+128),w
  5478  0541  0020               	movlb	0	; select bank0
  5479  0542  3D54               	addwfc	??_applicationControlRGB+1,w
  5480  0543  00A1               	movwf	abs@a+1
  5481  0544  3190  2055  3181   	fcall	_abs
  5482  0547  0020               	movlb	0	; select bank0
  5483  0548  0820               	movf	?_abs,w
  5484  0549  0021               	movlb	1	; select bank1
  5485  054A  00B6               	movwf	applicationControlRGB@NeedGreenPulse^(0+128)
  5486  054B  0020               	movlb	0	; select bank0
  5487  054C  0821               	movf	?_abs+1,w
  5488  054D  0021               	movlb	1	; select bank1
  5489  054E  00B7               	movwf	(applicationControlRGB@NeedGreenPulse+1)^(0+128)
  5490  054F  0D89               	rlf	9,f
  5491  0550  3B89               	subwfb	9,f
  5492  0551  0989               	comf	9,f
  5493  0552  00B8               	movwf	(applicationControlRGB@NeedGreenPulse+2)^(0+128)
  5494  0553  00B9               	movwf	(applicationControlRGB@NeedGreenPulse+3)^(0+128)
  5495                           
  5496                           ;applicationcontrolRGB.h: 82: ConvertIntToTimeInMicrosecBlue = (IntegerBlueColorIntensit
      +                          y/Convert255RangeintoHundred);
  5497  0554  085A               	movf	applicationControlRGB@Convert255RangeintoHundred^(0+128),w
  5498  0555  0020               	movlb	0	; select bank0
  5499  0556  00AE               	movwf	___ftdiv@f2
  5500  0557  0021               	movlb	1	; select bank1
  5501  0558  085B               	movf	(applicationControlRGB@Convert255RangeintoHundred+1)^(0+128),w
  5502  0559  0020               	movlb	0	; select bank0
  5503  055A  00AF               	movwf	___ftdiv@f2+1
  5504  055B  0021               	movlb	1	; select bank1
  5505  055C  085C               	movf	(applicationControlRGB@Convert255RangeintoHundred+2)^(0+128),w
  5506  055D  0020               	movlb	0	; select bank0
  5507  055E  00B0               	movwf	___ftdiv@f2+2
  5508  055F  0022               	movlb	2	; select bank2
  5509  0560  0835               	movf	(_IntegerBlueColorIntensity+1)^(0+256),w
  5510  0561  0020               	movlb	0	; select bank0
  5511  0562  00A9               	movwf	___lwtoft@c+1
  5512  0563  0022               	movlb	2	; select bank2
  5513  0564  0834               	movf	_IntegerBlueColorIntensity^(0+256),w
  5514  0565  0020               	movlb	0	; select bank0
  5515  0566  00A8               	movwf	___lwtoft@c
  5516  0567  3190  20C4  3181   	fcall	___lwtoft
  5517  056A  0020               	movlb	0	; select bank0
  5518  056B  0828               	movf	?___lwtoft,w
  5519  056C  00B1               	movwf	___ftdiv@f1
  5520  056D  0829               	movf	?___lwtoft+1,w
  5521  056E  00B2               	movwf	___ftdiv@f1+1
  5522  056F  082A               	movf	?___lwtoft+2,w
  5523  0570  00B3               	movwf	___ftdiv@f1+2
  5524  0571  3195  25F0  3181   	fcall	___ftdiv
  5525  0574  0020               	movlb	0	; select bank0
  5526  0575  082E               	movf	?___ftdiv,w
  5527  0576  0021               	movlb	1	; select bank1
  5528  0577  00E8               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128)
  5529  0578  0020               	movlb	0	; select bank0
  5530  0579  082F               	movf	?___ftdiv+1,w
  5531  057A  0021               	movlb	1	; select bank1
  5532  057B  00E9               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128)
  5533  057C  0020               	movlb	0	; select bank0
  5534  057D  0830               	movf	?___ftdiv+2,w
  5535  057E  0021               	movlb	1	; select bank1
  5536  057F  00EA               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128)
  5537                           
  5538                           ;applicationcontrolRGB.h: 83: ConvertIntToTimeInMicrosecBlue = (ConvertIntToTimeInMicros
      +                          ecBlue/ConvertIntoTenMsRangeFactor);
  5539  0580  0861               	movf	(applicationControlRGB@ConvertIntoTenMsRangeFactor+1)^(0+128),w
  5540  0581  0020               	movlb	0	; select bank0
  5541  0582  00A9               	movwf	___awtoft@c+1
  5542  0583  0021               	movlb	1	; select bank1
  5543  0584  0860               	movf	applicationControlRGB@ConvertIntoTenMsRangeFactor^(0+128),w
  5544  0585  0020               	movlb	0	; select bank0
  5545  0586  00A8               	movwf	___awtoft@c
  5546  0587  3191  21EE  3181   	fcall	___awtoft
  5547  058A  0020               	movlb	0	; select bank0
  5548  058B  0828               	movf	?___awtoft,w
  5549  058C  00AE               	movwf	___ftdiv@f2
  5550  058D  0829               	movf	?___awtoft+1,w
  5551  058E  00AF               	movwf	___ftdiv@f2+1
  5552  058F  082A               	movf	?___awtoft+2,w
  5553  0590  00B0               	movwf	___ftdiv@f2+2
  5554  0591  0021               	movlb	1	; select bank1
  5555  0592  0868               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128),w
  5556  0593  0020               	movlb	0	; select bank0
  5557  0594  00B1               	movwf	___ftdiv@f1
  5558  0595  0021               	movlb	1	; select bank1
  5559  0596  0869               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128),w
  5560  0597  0020               	movlb	0	; select bank0
  5561  0598  00B2               	movwf	___ftdiv@f1+1
  5562  0599  0021               	movlb	1	; select bank1
  5563  059A  086A               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128),w
  5564  059B  0020               	movlb	0	; select bank0
  5565  059C  00B3               	movwf	___ftdiv@f1+2
  5566  059D  3195  25F0  3181   	fcall	___ftdiv
  5567  05A0  0020               	movlb	0	; select bank0
  5568  05A1  082E               	movf	?___ftdiv,w
  5569  05A2  0021               	movlb	1	; select bank1
  5570  05A3  00E8               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128)
  5571  05A4  0020               	movlb	0	; select bank0
  5572  05A5  082F               	movf	?___ftdiv+1,w
  5573  05A6  0021               	movlb	1	; select bank1
  5574  05A7  00E9               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128)
  5575  05A8  0020               	movlb	0	; select bank0
  5576  05A9  0830               	movf	?___ftdiv+2,w
  5577  05AA  0021               	movlb	1	; select bank1
  5578  05AB  00EA               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128)
  5579                           
  5580                           ;applicationcontrolRGB.h: 84: ConvertIntToTimeInMicrosecBlue = (ConvertIntToTimeInMicros
      +                          ecBlue*1000);
  5581  05AC  3000               	movlw	0
  5582  05AD  0020               	movlb	0	; select bank0
  5583  05AE  00A8               	movwf	___ftmul@f1
  5584  05AF  307A               	movlw	122
  5585  05B0  00A9               	movwf	___ftmul@f1+1
  5586  05B1  3044               	movlw	68
  5587  05B2  00AA               	movwf	___ftmul@f1+2
  5588  05B3  0021               	movlb	1	; select bank1
  5589  05B4  0868               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128),w
  5590  05B5  0020               	movlb	0	; select bank0
  5591  05B6  00AB               	movwf	___ftmul@f2
  5592  05B7  0021               	movlb	1	; select bank1
  5593  05B8  0869               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128),w
  5594  05B9  0020               	movlb	0	; select bank0
  5595  05BA  00AC               	movwf	___ftmul@f2+1
  5596  05BB  0021               	movlb	1	; select bank1
  5597  05BC  086A               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128),w
  5598  05BD  0020               	movlb	0	; select bank0
  5599  05BE  00AD               	movwf	___ftmul@f2+2
  5600  05BF  3197  274C  3181   	fcall	___ftmul
  5601  05C2  0020               	movlb	0	; select bank0
  5602  05C3  0828               	movf	?___ftmul,w
  5603  05C4  0021               	movlb	1	; select bank1
  5604  05C5  00E8               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128)
  5605  05C6  0020               	movlb	0	; select bank0
  5606  05C7  0829               	movf	?___ftmul+1,w
  5607  05C8  0021               	movlb	1	; select bank1
  5608  05C9  00E9               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128)
  5609  05CA  0020               	movlb	0	; select bank0
  5610  05CB  082A               	movf	?___ftmul+2,w
  5611  05CC  0021               	movlb	1	; select bank1
  5612  05CD  00EA               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128)
  5613                           
  5614                           ;applicationcontrolRGB.h: 85: BluePulse = (int)(ConvertIntToTimeInMicrosecBlue/clockPerC
      +                          ycle);
  5615  05CE  0868               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128),w
  5616  05CF  0020               	movlb	0	; select bank0
  5617  05D0  00B1               	movwf	___ftdiv@f1
  5618  05D1  0021               	movlb	1	; select bank1
  5619  05D2  0869               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128),w
  5620  05D3  0020               	movlb	0	; select bank0
  5621  05D4  00B2               	movwf	___ftdiv@f1+1
  5622  05D5  0021               	movlb	1	; select bank1
  5623  05D6  086A               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128),w
  5624  05D7  0020               	movlb	0	; select bank0
  5625  05D8  00B3               	movwf	___ftdiv@f1+2
  5626  05D9  0021               	movlb	1	; select bank1
  5627  05DA  085D               	movf	applicationControlRGB@clockPerCycle^(0+128),w
  5628  05DB  0020               	movlb	0	; select bank0
  5629  05DC  00AE               	movwf	___ftdiv@f2
  5630  05DD  0021               	movlb	1	; select bank1
  5631  05DE  085E               	movf	(applicationControlRGB@clockPerCycle+1)^(0+128),w
  5632  05DF  0020               	movlb	0	; select bank0
  5633  05E0  00AF               	movwf	___ftdiv@f2+1
  5634  05E1  0021               	movlb	1	; select bank1
  5635  05E2  085F               	movf	(applicationControlRGB@clockPerCycle+2)^(0+128),w
  5636  05E3  0020               	movlb	0	; select bank0
  5637  05E4  00B0               	movwf	___ftdiv@f2+2
  5638  05E5  3195  25F0  3181   	fcall	___ftdiv
  5639  05E8  0020               	movlb	0	; select bank0
  5640  05E9  082E               	movf	?___ftdiv,w
  5641  05EA  00BE               	movwf	___fttol@f1
  5642  05EB  082F               	movf	?___ftdiv+1,w
  5643  05EC  00BF               	movwf	___fttol@f1+1
  5644  05ED  0830               	movf	?___ftdiv+2,w
  5645  05EE  00C0               	movwf	___fttol@f1+2
  5646  05EF  3195  2569  3181   	fcall	___fttol
  5647  05F2  0020               	movlb	0	; select bank0
  5648  05F3  083E               	movf	?___fttol,w
  5649  05F4  0021               	movlb	1	; select bank1
  5650  05F5  00AE               	movwf	applicationControlRGB@BluePulse^(0+128)
  5651  05F6  0020               	movlb	0	; select bank0
  5652  05F7  083F               	movf	?___fttol+1,w
  5653  05F8  0021               	movlb	1	; select bank1
  5654  05F9  00AF               	movwf	(applicationControlRGB@BluePulse+1)^(0+128)
  5655  05FA  0D89               	rlf	9,f
  5656  05FB  3B89               	subwfb	9,f
  5657  05FC  0989               	comf	9,f
  5658  05FD  00B0               	movwf	(applicationControlRGB@BluePulse+2)^(0+128)
  5659  05FE  00B1               	movwf	(applicationControlRGB@BluePulse+3)^(0+128)
  5660                           
  5661                           ;applicationcontrolRGB.h: 86: NeedBluePulse = abs(CompleteClock - BluePulse);
  5662  05FF  092E               	comf	applicationControlRGB@BluePulse^(0+128),w
  5663  0600  0020               	movlb	0	; select bank0
  5664  0601  00D3               	movwf	??_applicationControlRGB
  5665  0602  0021               	movlb	1	; select bank1
  5666  0603  092F               	comf	(applicationControlRGB@BluePulse+1)^(0+128),w
  5667  0604  0020               	movlb	0	; select bank0
  5668  0605  00D4               	movwf	??_applicationControlRGB+1
  5669  0606  0AD3               	incf	??_applicationControlRGB,f
  5670  0607  1903               	skipnz
  5671  0608  0AD4               	incf	??_applicationControlRGB+1,f
  5672  0609  0021               	movlb	1	; select bank1
  5673  060A  0856               	movf	applicationControlRGB@CompleteClock^(0+128),w
  5674  060B  0020               	movlb	0	; select bank0
  5675  060C  0753               	addwf	??_applicationControlRGB,w
  5676  060D  00A0               	movwf	abs@a
  5677  060E  0021               	movlb	1	; select bank1
  5678  060F  0857               	movf	(applicationControlRGB@CompleteClock+1)^(0+128),w
  5679  0610  0020               	movlb	0	; select bank0
  5680  0611  3D54               	addwfc	??_applicationControlRGB+1,w
  5681  0612  00A1               	movwf	abs@a+1
  5682  0613  3190  2055  3181   	fcall	_abs
  5683  0616  0020               	movlb	0	; select bank0
  5684  0617  0820               	movf	?_abs,w
  5685  0618  0021               	movlb	1	; select bank1
  5686  0619  00BA               	movwf	applicationControlRGB@NeedBluePulse^(0+128)
  5687  061A  0020               	movlb	0	; select bank0
  5688  061B  0821               	movf	?_abs+1,w
  5689  061C  0021               	movlb	1	; select bank1
  5690  061D  00BB               	movwf	(applicationControlRGB@NeedBluePulse+1)^(0+128)
  5691  061E  0D89               	rlf	9,f
  5692  061F  3B89               	subwfb	9,f
  5693  0620  0989               	comf	9,f
  5694  0621  00BC               	movwf	(applicationControlRGB@NeedBluePulse+2)^(0+128)
  5695  0622  00BD               	movwf	(applicationControlRGB@NeedBluePulse+3)^(0+128)
  5696                           
  5697                           ;applicationcontrolRGB.h: 90: sprintf(HexlevelBuffer,"%X",NeedRedPulse);
  5698  0623  3033               	movlw	low (STR_1| (0+32768))
  5699  0624  0020               	movlb	0	; select bank0
  5700  0625  00A8               	movwf	sprintf@f
  5701  0626  3098               	movlw	high (STR_1| (0+32768))
  5702  0627  00A9               	movwf	sprintf@f+1
  5703  0628  0021               	movlb	1	; select bank1
  5704  0629  0835               	movf	(applicationControlRGB@NeedRedPulse+3)^(0+128),w
  5705  062A  0020               	movlb	0	; select bank0
  5706  062B  00AD               	movwf	?_sprintf+5
  5707  062C  0021               	movlb	1	; select bank1
  5708  062D  0834               	movf	(applicationControlRGB@NeedRedPulse+2)^(0+128),w
  5709  062E  0020               	movlb	0	; select bank0
  5710  062F  00AC               	movwf	?_sprintf+4
  5711  0630  0021               	movlb	1	; select bank1
  5712  0631  0833               	movf	(applicationControlRGB@NeedRedPulse+1)^(0+128),w
  5713  0632  0020               	movlb	0	; select bank0
  5714  0633  00AB               	movwf	?_sprintf+3
  5715  0634  0021               	movlb	1	; select bank1
  5716  0635  0832               	movf	applicationControlRGB@NeedRedPulse^(0+128),w
  5717  0636  0020               	movlb	0	; select bank0
  5718  0637  00AA               	movwf	?_sprintf+2
  5719  0638  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5720  0639  3196  2699  3181   	fcall	_sprintf
  5721                           
  5722                           ;applicationcontrolRGB.h: 91: strncpy(strRedH,HexlevelBuffer,2);
  5723  063C  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5724  063D  0020               	movlb	0	; select bank0
  5725  063E  00D3               	movwf	??_applicationControlRGB
  5726  063F  0853               	movf	??_applicationControlRGB,w
  5727  0640  00A0               	movwf	strncpy@from
  5728  0641  3002               	movlw	2
  5729  0642  00A1               	movwf	strncpy@size
  5730  0643  3000               	movlw	0
  5731  0644  00A2               	movwf	strncpy@size+1
  5732  0645  30BF               	movlw	(low (applicationControlRGB@strRedH| 0))& (0+255)
  5733  0646  3192  22B5  3181   	fcall	_strncpy
  5734                           
  5735                           ;applicationcontrolRGB.h: 92: strRedH[2]='\0';
  5736  0649  0021               	movlb	1	; select bank1
  5737  064A  01C1               	clrf	(applicationControlRGB@strRedH^(0+128)+2)
  5738                           
  5739                           ;applicationcontrolRGB.h: 93: strncpy(strRedL,HexlevelBuffer+2,2);
  5740  064B  30D3               	movlw	(low ((applicationControlRGB@HexlevelBuffer| 0+2)))& (0+255)
  5741  064C  0020               	movlb	0	; select bank0
  5742  064D  00D3               	movwf	??_applicationControlRGB
  5743  064E  0853               	movf	??_applicationControlRGB,w
  5744  064F  00A0               	movwf	strncpy@from
  5745  0650  3002               	movlw	2
  5746  0651  00A1               	movwf	strncpy@size
  5747  0652  3000               	movlw	0
  5748  0653  00A2               	movwf	strncpy@size+1
  5749  0654  30C2               	movlw	(low (applicationControlRGB@strRedL| 0))& (0+255)
  5750  0655  3192  22B5  3181   	fcall	_strncpy
  5751                           
  5752                           ;applicationcontrolRGB.h: 94: strRedL[2]='\0';
  5753  0658  0021               	movlb	1	; select bank1
  5754  0659  01C4               	clrf	(applicationControlRGB@strRedL^(0+128)+2)
  5755                           
  5756                           ;applicationcontrolRGB.h: 95: memset(HexlevelBuffer,'0',sizeof(HexlevelBuffer));
  5757  065A  30D1               	movlw	low applicationControlRGB@HexlevelBuffer
  5758  065B  0020               	movlb	0	; select bank0
  5759  065C  00A0               	movwf	memset@p1
  5760  065D  3000               	movlw	high applicationControlRGB@HexlevelBuffer
  5761  065E  00A1               	movwf	memset@p1+1
  5762  065F  3030               	movlw	48
  5763  0660  00A2               	movwf	memset@c
  5764  0661  3000               	movlw	0
  5765  0662  00A3               	movwf	memset@c+1
  5766  0663  3005               	movlw	5
  5767  0664  00A4               	movwf	memset@n
  5768  0665  3000               	movlw	0
  5769  0666  00A5               	movwf	memset@n+1
  5770  0667  3190  20EF  3181   	fcall	_memset
  5771                           
  5772                           ;applicationcontrolRGB.h: 97: sprintf(HexlevelBuffer,"%X",NeedGreenPulse);
  5773  066A  3033               	movlw	low (STR_1| (0+32768))
  5774  066B  0020               	movlb	0	; select bank0
  5775  066C  00A8               	movwf	sprintf@f
  5776  066D  3098               	movlw	high (STR_1| (0+32768))
  5777  066E  00A9               	movwf	sprintf@f+1
  5778  066F  0021               	movlb	1	; select bank1
  5779  0670  0839               	movf	(applicationControlRGB@NeedGreenPulse+3)^(0+128),w
  5780  0671  0020               	movlb	0	; select bank0
  5781  0672  00AD               	movwf	?_sprintf+5
  5782  0673  0021               	movlb	1	; select bank1
  5783  0674  0838               	movf	(applicationControlRGB@NeedGreenPulse+2)^(0+128),w
  5784  0675  0020               	movlb	0	; select bank0
  5785  0676  00AC               	movwf	?_sprintf+4
  5786  0677  0021               	movlb	1	; select bank1
  5787  0678  0837               	movf	(applicationControlRGB@NeedGreenPulse+1)^(0+128),w
  5788  0679  0020               	movlb	0	; select bank0
  5789  067A  00AB               	movwf	?_sprintf+3
  5790  067B  0021               	movlb	1	; select bank1
  5791  067C  0836               	movf	applicationControlRGB@NeedGreenPulse^(0+128),w
  5792  067D  0020               	movlb	0	; select bank0
  5793  067E  00AA               	movwf	?_sprintf+2
  5794  067F  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5795  0680  3196  2699  3181   	fcall	_sprintf
  5796                           
  5797                           ;applicationcontrolRGB.h: 98: strncpy(strGreenH,HexlevelBuffer,2);
  5798  0683  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5799  0684  0020               	movlb	0	; select bank0
  5800  0685  00D3               	movwf	??_applicationControlRGB
  5801  0686  0853               	movf	??_applicationControlRGB,w
  5802  0687  00A0               	movwf	strncpy@from
  5803  0688  3002               	movlw	2
  5804  0689  00A1               	movwf	strncpy@size
  5805  068A  3000               	movlw	0
  5806  068B  00A2               	movwf	strncpy@size+1
  5807  068C  30C5               	movlw	(low (applicationControlRGB@strGreenH| 0))& (0+255)
  5808  068D  3192  22B5  3181   	fcall	_strncpy
  5809                           
  5810                           ;applicationcontrolRGB.h: 99: strGreenH[2]='\0';
  5811  0690  0021               	movlb	1	; select bank1
  5812  0691  01C7               	clrf	(applicationControlRGB@strGreenH^(0+128)+2)
  5813                           
  5814                           ;applicationcontrolRGB.h: 100: strncpy(strGreenL,HexlevelBuffer+2,2);
  5815  0692  30D3               	movlw	(low ((applicationControlRGB@HexlevelBuffer| 0+2)))& (0+255)
  5816  0693  0020               	movlb	0	; select bank0
  5817  0694  00D3               	movwf	??_applicationControlRGB
  5818  0695  0853               	movf	??_applicationControlRGB,w
  5819  0696  00A0               	movwf	strncpy@from
  5820  0697  3002               	movlw	2
  5821  0698  00A1               	movwf	strncpy@size
  5822  0699  3000               	movlw	0
  5823  069A  00A2               	movwf	strncpy@size+1
  5824  069B  30C8               	movlw	(low (applicationControlRGB@strGreenL| 0))& (0+255)
  5825  069C  3192  22B5  3181   	fcall	_strncpy
  5826                           
  5827                           ;applicationcontrolRGB.h: 101: strGreenL[2]='\0';
  5828  069F  0021               	movlb	1	; select bank1
  5829  06A0  01CA               	clrf	(applicationControlRGB@strGreenL^(0+128)+2)
  5830                           
  5831                           ;applicationcontrolRGB.h: 102: memset(HexlevelBuffer,'0',sizeof(HexlevelBuffer));
  5832  06A1  30D1               	movlw	low applicationControlRGB@HexlevelBuffer
  5833  06A2  0020               	movlb	0	; select bank0
  5834  06A3  00A0               	movwf	memset@p1
  5835  06A4  3000               	movlw	high applicationControlRGB@HexlevelBuffer
  5836  06A5  00A1               	movwf	memset@p1+1
  5837  06A6  3030               	movlw	48
  5838  06A7  00A2               	movwf	memset@c
  5839  06A8  3000               	movlw	0
  5840  06A9  00A3               	movwf	memset@c+1
  5841  06AA  3005               	movlw	5
  5842  06AB  00A4               	movwf	memset@n
  5843  06AC  3000               	movlw	0
  5844  06AD  00A5               	movwf	memset@n+1
  5845  06AE  3190  20EF  3181   	fcall	_memset
  5846                           
  5847                           ;applicationcontrolRGB.h: 105: sprintf(HexlevelBuffer,"%X",NeedBluePulse);
  5848  06B1  3033               	movlw	low (STR_1| (0+32768))
  5849  06B2  0020               	movlb	0	; select bank0
  5850  06B3  00A8               	movwf	sprintf@f
  5851  06B4  3098               	movlw	high (STR_1| (0+32768))
  5852  06B5  00A9               	movwf	sprintf@f+1
  5853  06B6  0021               	movlb	1	; select bank1
  5854  06B7  083D               	movf	(applicationControlRGB@NeedBluePulse+3)^(0+128),w
  5855  06B8  0020               	movlb	0	; select bank0
  5856  06B9  00AD               	movwf	?_sprintf+5
  5857  06BA  0021               	movlb	1	; select bank1
  5858  06BB  083C               	movf	(applicationControlRGB@NeedBluePulse+2)^(0+128),w
  5859  06BC  0020               	movlb	0	; select bank0
  5860  06BD  00AC               	movwf	?_sprintf+4
  5861  06BE  0021               	movlb	1	; select bank1
  5862  06BF  083B               	movf	(applicationControlRGB@NeedBluePulse+1)^(0+128),w
  5863  06C0  0020               	movlb	0	; select bank0
  5864  06C1  00AB               	movwf	?_sprintf+3
  5865  06C2  0021               	movlb	1	; select bank1
  5866  06C3  083A               	movf	applicationControlRGB@NeedBluePulse^(0+128),w
  5867  06C4  0020               	movlb	0	; select bank0
  5868  06C5  00AA               	movwf	?_sprintf+2
  5869  06C6  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5870  06C7  3196  2699  3181   	fcall	_sprintf
  5871                           
  5872                           ;applicationcontrolRGB.h: 106: strncpy(strBlueH,HexlevelBuffer,2);
  5873  06CA  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5874  06CB  0020               	movlb	0	; select bank0
  5875  06CC  00D3               	movwf	??_applicationControlRGB
  5876  06CD  0853               	movf	??_applicationControlRGB,w
  5877  06CE  00A0               	movwf	strncpy@from
  5878  06CF  3002               	movlw	2
  5879  06D0  00A1               	movwf	strncpy@size
  5880  06D1  3000               	movlw	0
  5881  06D2  00A2               	movwf	strncpy@size+1
  5882  06D3  30CB               	movlw	(low (applicationControlRGB@strBlueH| 0))& (0+255)
  5883  06D4  3192  22B5  3181   	fcall	_strncpy
  5884                           
  5885                           ;applicationcontrolRGB.h: 107: strBlueH[2]='\0';
  5886  06D7  0021               	movlb	1	; select bank1
  5887  06D8  01CD               	clrf	(applicationControlRGB@strBlueH^(0+128)+2)
  5888                           
  5889                           ;applicationcontrolRGB.h: 108: strncpy(strBlueL,HexlevelBuffer+2,2);
  5890  06D9  30D3               	movlw	(low ((applicationControlRGB@HexlevelBuffer| 0+2)))& (0+255)
  5891  06DA  0020               	movlb	0	; select bank0
  5892  06DB  00D3               	movwf	??_applicationControlRGB
  5893  06DC  0853               	movf	??_applicationControlRGB,w
  5894  06DD  00A0               	movwf	strncpy@from
  5895  06DE  3002               	movlw	2
  5896  06DF  00A1               	movwf	strncpy@size
  5897  06E0  3000               	movlw	0
  5898  06E1  00A2               	movwf	strncpy@size+1
  5899  06E2  30CE               	movlw	(low (applicationControlRGB@strBlueL| 0))& (0+255)
  5900  06E3  3192  22B5  3181   	fcall	_strncpy
  5901                           
  5902                           ;applicationcontrolRGB.h: 109: strBlueL[2]='\0';
  5903  06E6  0021               	movlb	1	; select bank1
  5904  06E7  01D0               	clrf	(applicationControlRGB@strBlueL^(0+128)+2)
  5905                           
  5906                           ;applicationcontrolRGB.h: 110: memset(HexlevelBuffer,'0',sizeof(HexlevelBuffer));
  5907  06E8  30D1               	movlw	low applicationControlRGB@HexlevelBuffer
  5908  06E9  0020               	movlb	0	; select bank0
  5909  06EA  00A0               	movwf	memset@p1
  5910  06EB  3000               	movlw	high applicationControlRGB@HexlevelBuffer
  5911  06EC  00A1               	movwf	memset@p1+1
  5912  06ED  3030               	movlw	48
  5913  06EE  00A2               	movwf	memset@c
  5914  06EF  3000               	movlw	0
  5915  06F0  00A3               	movwf	memset@c+1
  5916  06F1  3005               	movlw	5
  5917  06F2  00A4               	movwf	memset@n
  5918  06F3  3000               	movlw	0
  5919  06F4  00A5               	movwf	memset@n+1
  5920  06F5  3190  20EF  3181   	fcall	_memset
  5921                           
  5922                           ;applicationcontrolRGB.h: 114: switch(IntegerSwitchNumber)
  5923  06F8  2F9B               	goto	l5765
  5924  06F9                     l5709:	
  5925                           ;applicationcontrolRGB.h: 118: case 0:
  5926                           
  5927                           ;applicationcontrolRGB.h: 117: switch(IntergerSwitchStatus){
  5928                           
  5929                           ;applicationcontrolRGB.h: 115: {
  5930                           ;applicationcontrolRGB.h: 116: case 1:{
  5931                           
  5932                           
  5933                           ;applicationcontrolRGB.h: 119: start_PWM_Generation_For_BlueLed = start_PWM_Generation_F
      +                          or_GreenLed = start_PWM_Generation_For_RedLed = 0;
  5934  06F9  0022               	movlb	2	; select bank2
  5935  06FA  01CC               	clrf	_start_PWM_Generation_For_RedLed^(0+256)
  5936  06FB  01CD               	clrf	(_start_PWM_Generation_For_RedLed+1)^(0+256)
  5937  06FC  01CA               	clrf	_start_PWM_Generation_For_GreenLed^(0+256)
  5938  06FD  01CB               	clrf	(_start_PWM_Generation_For_GreenLed+1)^(0+256)
  5939  06FE  01C8               	clrf	_start_PWM_Generation_For_BlueLed^(0+256)
  5940  06FF  01C9               	clrf	(_start_PWM_Generation_For_BlueLed+1)^(0+256)
  5941                           
  5942                           ;applicationcontrolRGB.h: 120: PORTDbits.RD4 = 0;
  5943  0700  0020               	movlb	0	; select bank0
  5944  0701  120F               	bcf	15,4	;volatile
  5945                           
  5946                           ;applicationcontrolRGB.h: 121: PORTDbits.RD3 = 0;
  5947  0702  118F               	bcf	15,3	;volatile
  5948                           
  5949                           ;applicationcontrolRGB.h: 122: PORTDbits.RD2 = 0;
  5950  0703  110F               	bcf	15,2	;volatile
  5951                           
  5952                           ;applicationcontrolRGB.h: 123: break;
  5953  0704  0008               	return
  5954  0705                     l5717:	
  5955                           ;applicationcontrolRGB.h: 124: case 1:
  5956                           
  5957                           
  5958                           ;applicationcontrolRGB.h: 125: if(IntergerRedColorIntensity == 255)
  5959  0705  0021               	movlb	1	; select bank1
  5960  0706  0A6D               	incf	_IntergerRedColorIntensity^(0+128),w
  5961  0707  046E               	iorwf	(_IntergerRedColorIntensity+1)^(0+128),w
  5962  0708  1D03               	btfss	3,2
  5963  0709  2F0D               	goto	l5721
  5964                           
  5965                           ;applicationcontrolRGB.h: 126: PORTDbits.RD4=1;
  5966  070A  0020               	movlb	0	; select bank0
  5967  070B  160F               	bsf	15,4	;volatile
  5968  070C  2F32               	goto	l5731
  5969  070D                     l5721:	
  5970                           
  5971                           ;applicationcontrolRGB.h: 127: else if(IntergerRedColorIntensity == 0)
  5972  070D  0021               	movlb	1	; select bank1
  5973  070E  086D               	movf	_IntergerRedColorIntensity^(0+128),w
  5974  070F  046E               	iorwf	(_IntergerRedColorIntensity+1)^(0+128),w
  5975  0710  1D03               	btfss	3,2
  5976  0711  2F15               	goto	l5725
  5977                           
  5978                           ;applicationcontrolRGB.h: 128: PORTDbits.RD4=0;
  5979  0712  0020               	movlb	0	; select bank0
  5980  0713  120F               	bcf	15,4	;volatile
  5981  0714  2F32               	goto	l5731
  5982  0715                     l5725:	
  5983                           
  5984                           ;applicationcontrolRGB.h: 129: else
  5985                           ;applicationcontrolRGB.h: 130: {
  5986                           ;applicationcontrolRGB.h: 131: start_PWM_Generation_For_RedLed = 1;
  5987  0715  3001               	movlw	1
  5988  0716  0022               	movlb	2	; select bank2
  5989  0717  00CC               	movwf	_start_PWM_Generation_For_RedLed^(0+256)
  5990  0718  3000               	movlw	0
  5991  0719  00CD               	movwf	(_start_PWM_Generation_For_RedLed^(0+256)+1)
  5992                           
  5993                           ;applicationcontrolRGB.h: 132: Timer1H = hexadecimalToDecimal(strRedH);
  5994  071A  30BF               	movlw	(low (applicationControlRGB@strRedH| 0))& (0+255)
  5995  071B  3194  24E7  3181   	fcall	_hexadecimalToDecimal
  5996  071E  0020               	movlb	0	; select bank0
  5997  071F  0827               	movf	?_hexadecimalToDecimal+1,w
  5998  0720  0022               	movlb	2	; select bank2
  5999  0721  00C7               	movwf	(_Timer1H+1)^(0+256)
  6000  0722  0020               	movlb	0	; select bank0
  6001  0723  0826               	movf	?_hexadecimalToDecimal,w
  6002  0724  0022               	movlb	2	; select bank2
  6003  0725  00C6               	movwf	_Timer1H^(0+256)
  6004                           
  6005                           ;applicationcontrolRGB.h: 133: Timer1L = hexadecimalToDecimal(strRedL);
  6006  0726  30C2               	movlw	(low (applicationControlRGB@strRedL| 0))& (0+255)
  6007  0727  3194  24E7  3181   	fcall	_hexadecimalToDecimal
  6008  072A  0020               	movlb	0	; select bank0
  6009  072B  0827               	movf	?_hexadecimalToDecimal+1,w
  6010  072C  0022               	movlb	2	; select bank2
  6011  072D  00C5               	movwf	(_Timer1L+1)^(0+256)
  6012  072E  0020               	movlb	0	; select bank0
  6013  072F  0826               	movf	?_hexadecimalToDecimal,w
  6014  0730  0022               	movlb	2	; select bank2
  6015  0731  00C4               	movwf	_Timer1L^(0+256)
  6016  0732                     l5731:	
  6017                           
  6018                           ;applicationcontrolRGB.h: 135: }
  6019                           ;applicationcontrolRGB.h: 136: if(IntegerGreenColorIntensity == 255)
  6020  0732  0021               	movlb	1	; select bank1
  6021  0733  0A6B               	incf	_IntegerGreenColorIntensity^(0+128),w
  6022  0734  046C               	iorwf	(_IntegerGreenColorIntensity+1)^(0+128),w
  6023  0735  1D03               	btfss	3,2
  6024  0736  2F3A               	goto	l5735
  6025                           
  6026                           ;applicationcontrolRGB.h: 137: PORTDbits.RD3=1;
  6027  0737  0020               	movlb	0	; select bank0
  6028  0738  158F               	bsf	15,3	;volatile
  6029  0739  2F5F               	goto	l5745
  6030  073A                     l5735:	
  6031                           
  6032                           ;applicationcontrolRGB.h: 138: else if(IntegerGreenColorIntensity == 0)
  6033  073A  0021               	movlb	1	; select bank1
  6034  073B  086B               	movf	_IntegerGreenColorIntensity^(0+128),w
  6035  073C  046C               	iorwf	(_IntegerGreenColorIntensity+1)^(0+128),w
  6036  073D  1D03               	btfss	3,2
  6037  073E  2F42               	goto	l5739
  6038                           
  6039                           ;applicationcontrolRGB.h: 139: PORTDbits.RD3=0;
  6040  073F  0020               	movlb	0	; select bank0
  6041  0740  118F               	bcf	15,3	;volatile
  6042  0741  2F5F               	goto	l5745
  6043  0742                     l5739:	
  6044                           
  6045                           ;applicationcontrolRGB.h: 140: else
  6046                           ;applicationcontrolRGB.h: 141: {
  6047                           ;applicationcontrolRGB.h: 142: start_PWM_Generation_For_GreenLed =1;
  6048  0742  3001               	movlw	1
  6049  0743  0022               	movlb	2	; select bank2
  6050  0744  00CA               	movwf	_start_PWM_Generation_For_GreenLed^(0+256)
  6051  0745  3000               	movlw	0
  6052  0746  00CB               	movwf	(_start_PWM_Generation_For_GreenLed^(0+256)+1)
  6053                           
  6054                           ;applicationcontrolRGB.h: 143: Timer3H = hexadecimalToDecimal(strGreenH);
  6055  0747  30C5               	movlw	(low (applicationControlRGB@strGreenH| 0))& (0+255)
  6056  0748  3194  24E7  3181   	fcall	_hexadecimalToDecimal
  6057  074B  0020               	movlb	0	; select bank0
  6058  074C  0827               	movf	?_hexadecimalToDecimal+1,w
  6059  074D  0022               	movlb	2	; select bank2
  6060  074E  00C3               	movwf	(_Timer3H+1)^(0+256)
  6061  074F  0020               	movlb	0	; select bank0
  6062  0750  0826               	movf	?_hexadecimalToDecimal,w
  6063  0751  0022               	movlb	2	; select bank2
  6064  0752  00C2               	movwf	_Timer3H^(0+256)
  6065                           
  6066                           ;applicationcontrolRGB.h: 144: Timer3L = hexadecimalToDecimal(strGreenL);
  6067  0753  30C8               	movlw	(low (applicationControlRGB@strGreenL| 0))& (0+255)
  6068  0754  3194  24E7  3181   	fcall	_hexadecimalToDecimal
  6069  0757  0020               	movlb	0	; select bank0
  6070  0758  0827               	movf	?_hexadecimalToDecimal+1,w
  6071  0759  0022               	movlb	2	; select bank2
  6072  075A  00C1               	movwf	(_Timer3L+1)^(0+256)
  6073  075B  0020               	movlb	0	; select bank0
  6074  075C  0826               	movf	?_hexadecimalToDecimal,w
  6075  075D  0022               	movlb	2	; select bank2
  6076  075E  00C0               	movwf	_Timer3L^(0+256)
  6077  075F                     l5745:	
  6078                           
  6079                           ;applicationcontrolRGB.h: 145: }
  6080                           ;applicationcontrolRGB.h: 146: if(IntegerBlueColorIntensity == 255)
  6081  075F  0022               	movlb	2	; select bank2
  6082  0760  0A34               	incf	_IntegerBlueColorIntensity^(0+256),w
  6083  0761  0435               	iorwf	(_IntegerBlueColorIntensity+1)^(0+256),w
  6084  0762  1D03               	btfss	3,2
  6085  0763  2F67               	goto	l5749
  6086                           
  6087                           ;applicationcontrolRGB.h: 147: PORTDbits.RD2=1;
  6088  0764  0020               	movlb	0	; select bank0
  6089  0765  150F               	bsf	15,2	;volatile
  6090  0766  0008               	return
  6091  0767                     l5749:	
  6092                           
  6093                           ;applicationcontrolRGB.h: 148: else if(IntegerBlueColorIntensity == 0)
  6094  0767  0022               	movlb	2	; select bank2
  6095  0768  0834               	movf	_IntegerBlueColorIntensity^(0+256),w
  6096  0769  0435               	iorwf	(_IntegerBlueColorIntensity+1)^(0+256),w
  6097  076A  1D03               	btfss	3,2
  6098  076B  2F6F               	goto	l5753
  6099                           
  6100                           ;applicationcontrolRGB.h: 149: PORTDbits.RD2=0;
  6101  076C  0020               	movlb	0	; select bank0
  6102  076D  110F               	bcf	15,2	;volatile
  6103  076E  0008               	return
  6104  076F                     l5753:	
  6105                           
  6106                           ;applicationcontrolRGB.h: 150: else{
  6107                           ;applicationcontrolRGB.h: 151: start_PWM_Generation_For_BlueLed =1;
  6108  076F  3001               	movlw	1
  6109  0770  0022               	movlb	2	; select bank2
  6110  0771  00C8               	movwf	_start_PWM_Generation_For_BlueLed^(0+256)
  6111  0772  3000               	movlw	0
  6112  0773  00C9               	movwf	(_start_PWM_Generation_For_BlueLed^(0+256)+1)
  6113                           
  6114                           ;applicationcontrolRGB.h: 152: Timer5H = hexadecimalToDecimal(strBlueH);
  6115  0774  30CB               	movlw	(low (applicationControlRGB@strBlueH| 0))& (0+255)
  6116  0775  3194  24E7  3181   	fcall	_hexadecimalToDecimal
  6117  0778  0020               	movlb	0	; select bank0
  6118  0779  0827               	movf	?_hexadecimalToDecimal+1,w
  6119  077A  0022               	movlb	2	; select bank2
  6120  077B  00BF               	movwf	(_Timer5H+1)^(0+256)
  6121  077C  0020               	movlb	0	; select bank0
  6122  077D  0826               	movf	?_hexadecimalToDecimal,w
  6123  077E  0022               	movlb	2	; select bank2
  6124  077F  00BE               	movwf	_Timer5H^(0+256)
  6125                           
  6126                           ;applicationcontrolRGB.h: 153: Timer5L = hexadecimalToDecimal(strBlueL);
  6127  0780  30CE               	movlw	(low (applicationControlRGB@strBlueL| 0))& (0+255)
  6128  0781  3194  24E7         	fcall	_hexadecimalToDecimal
  6129  0783  0020               	movlb	0	; select bank0
  6130  0784  0827               	movf	?_hexadecimalToDecimal+1,w
  6131  0785  0022               	movlb	2	; select bank2
  6132  0786  00BD               	movwf	(_Timer5L+1)^(0+256)
  6133  0787  0020               	movlb	0	; select bank0
  6134  0788  0826               	movf	?_hexadecimalToDecimal,w
  6135  0789  0022               	movlb	2	; select bank2
  6136  078A  00BC               	movwf	_Timer5L^(0+256)
  6137                           
  6138                           ;applicationcontrolRGB.h: 165: }
  6139                           
  6140                           ;applicationcontrolRGB.h: 164: break;
  6141                           
  6142                           ;applicationcontrolRGB.h: 163: default:
  6143                           
  6144                           ;applicationcontrolRGB.h: 154: }
  6145                           ;applicationcontrolRGB.h: 162: break;
  6146  078B  0008               	return
  6147  078C                     l5761:	
  6148                           
  6149                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6150                           ; Switch size 1, requested type "space"
  6151                           ; Number of cases is 1, Range of values is 0 to 0
  6152                           ; switch strategies available:
  6153                           ; Name         Instructions Cycles
  6154                           ; simple_byte            4     3 (average)
  6155                           ; direct_byte            8     6 (fixed)
  6156                           ; jumptable            260     6 (fixed)
  6157                           ;	Chosen strategy is simple_byte
  6158  078C  0022               	movlb	2	; select bank2
  6159  078D  0837               	movf	(_IntergerSwitchStatus+1)^(0+256),w
  6160  078E  3A00               	xorlw	0	; case 0
  6161  078F  1903               	skipnz
  6162  0790  2F92               	goto	l6495
  6163  0791  2FA6               	goto	l479
  6164  0792                     l6495:	
  6165                           
  6166                           ; Switch size 1, requested type "space"
  6167                           ; Number of cases is 2, Range of values is 0 to 1
  6168                           ; switch strategies available:
  6169                           ; Name         Instructions Cycles
  6170                           ; simple_byte            7     4 (average)
  6171                           ; direct_byte           10     6 (fixed)
  6172                           ; jumptable            260     6 (fixed)
  6173                           ;	Chosen strategy is simple_byte
  6174  0792  0836               	movf	_IntergerSwitchStatus^(0+256),w
  6175  0793  3A00               	xorlw	0	; case 0
  6176  0794  1903               	skipnz
  6177  0795  2EF9               	goto	l5709
  6178  0796  3A01               	xorlw	1	; case 1
  6179  0797  1903               	skipnz
  6180  0798  2F05               	goto	l5717
  6181  0799  2FA6               	goto	l479
  6182                           
  6183                           ;applicationcontrolRGB.h: 169: }
  6184                           ;applicationcontrolRGB.h: 176: }
  6185                           
  6186                           ;applicationcontrolRGB.h: 168: break;
  6187                           
  6188                           ;applicationcontrolRGB.h: 167: default:
  6189                           
  6190                           ;applicationcontrolRGB.h: 166: break;
  6191  079A  0008               	return
  6192  079B                     l5765:	
  6193                           
  6194                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6195                           ; Switch size 1, requested type "space"
  6196                           ; Number of cases is 1, Range of values is 0 to 0
  6197                           ; switch strategies available:
  6198                           ; Name         Instructions Cycles
  6199                           ; simple_byte            4     3 (average)
  6200                           ; direct_byte            8     6 (fixed)
  6201                           ; jumptable            260     6 (fixed)
  6202                           ;	Chosen strategy is simple_byte
  6203  079B  0022               	movlb	2	; select bank2
  6204  079C  0839               	movf	(_IntegerSwitchNumber+1)^(0+256),w
  6205  079D  3A00               	xorlw	0	; case 0
  6206  079E  1903               	skipnz
  6207  079F  2FA1               	goto	l6497
  6208  07A0  2FA6               	goto	l479
  6209  07A1                     l6497:	
  6210                           
  6211                           ; Switch size 1, requested type "space"
  6212                           ; Number of cases is 1, Range of values is 1 to 1
  6213                           ; switch strategies available:
  6214                           ; Name         Instructions Cycles
  6215                           ; simple_byte            4     3 (average)
  6216                           ; direct_byte           11     9 (fixed)
  6217                           ; jumptable            263     9 (fixed)
  6218                           ;	Chosen strategy is simple_byte
  6219  07A1  0838               	movf	_IntegerSwitchNumber^(0+256),w
  6220  07A2  3A01               	xorlw	1	; case 1
  6221  07A3  1903               	skipnz
  6222  07A4  2F8C               	goto	l5761
  6223  07A5  2FA6               	goto	l479
  6224  07A6                     l479:	
  6225  07A6  0008               	return
  6226  07A7                     __end_of_applicationControlRGB:	
  6227                           
  6228                           	psect	text9
  6229  12B5                     __ptext9:	
  6230 ;; *************** function _strncpy *****************
  6231 ;; Defined at:
  6232 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strncpy.c"
  6233 ;; Parameters:    Size  Location     Type
  6234 ;;  to              1    wreg     PTR unsigned char 
  6235 ;;		 -> applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationControlRGB@strGreenL(3), applic
      +ationControlRGB@strGreenH(3), 
  6236 ;;		 -> applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), 
  6237 ;;  from            1    0[BANK0 ] PTR const unsigned char 
  6238 ;;		 -> applicationControlRGB@HexlevelBuffer(5), 
  6239 ;;  size            2    1[BANK0 ] unsigned int 
  6240 ;; Auto vars:     Size  Location     Type
  6241 ;;  to              1    5[BANK0 ] PTR unsigned char 
  6242 ;;		 -> applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationControlRGB@strGreenL(3), applic
      +ationControlRGB@strGreenH(3), 
  6243 ;;		 -> applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), 
  6244 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  6245 ;;		 -> applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationControlRGB@strGreenL(3), applic
      +ationControlRGB@strGreenH(3), 
  6246 ;;		 -> applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), 
  6247 ;; Return value:  Size  Location     Type
  6248 ;;                  1    wreg      PTR unsigned char 
  6249 ;; Registers used:
  6250 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6251 ;; Tracked objects:
  6252 ;;		On entry : 0/0
  6253 ;;		On exit  : 0/0
  6254 ;;		Unchanged: 0/0
  6255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6256 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0
  6257 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  6258 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  6259 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  6260 ;;Total ram usage:        6 bytes
  6261 ;; Hardware stack levels used:    1
  6262 ;; Hardware stack levels required when called:    2
  6263 ;; This function calls:
  6264 ;;		Nothing
  6265 ;; This function is called by:
  6266 ;;		_applicationControlRGB
  6267 ;; This function uses a non-reentrant model
  6268 ;;
  6269                           
  6270                           
  6271                           ;psect for function _strncpy
  6272  12B5                     _strncpy:	
  6273                           
  6274                           ;incstack = 0
  6275                           ; Regs used in _strncpy: [wreg-fsr1h+status,2+status,0]
  6276                           ;strncpy@to stored from wreg
  6277  12B5  0020               	movlb	0	; select bank0
  6278  12B6  00A5               	movwf	strncpy@to
  6279  12B7  0825               	movf	strncpy@to,w
  6280  12B8  00A3               	movwf	??_strncpy
  6281  12B9  0823               	movf	??_strncpy,w
  6282  12BA  00A4               	movwf	strncpy@cp
  6283  12BB                     l5123:	
  6284  12BB  0821               	movf	strncpy@size,w
  6285  12BC  0422               	iorwf	strncpy@size+1,w
  6286  12BD  1903               	btfsc	3,2
  6287  12BE  2AD9               	goto	l5129
  6288  12BF  3001               	movlw	1
  6289  12C0  02A1               	subwf	strncpy@size,f
  6290  12C1  3000               	movlw	0
  6291  12C2  3BA2               	subwfb	strncpy@size+1,f
  6292  12C3  0824               	movf	strncpy@cp,w
  6293  12C4  0086               	movwf	6
  6294  12C5  0187               	clrf	7
  6295  12C6  0AA4               	incf	strncpy@cp,f
  6296  12C7  0820               	movf	strncpy@from,w
  6297  12C8  0084               	movwf	4
  6298  12C9  0185               	clrf	5
  6299  12CA  0AA0               	incf	strncpy@from,f
  6300  12CB  0800               	movf	0,w
  6301  12CC  3FC0               	movwi [0]fsr1
  6302  12CD  0889               	movf	9,f
  6303  12CE  1903               	btfsc	3,2
  6304  12CF  2AD9               	goto	l5129
  6305  12D0  2ABB               	goto	l5123
  6306  12D1                     l5125:	
  6307  12D1  0824               	movf	strncpy@cp,w
  6308  12D2  0086               	movwf	6
  6309  12D3  0187               	clrf	7
  6310  12D4  0181               	clrf	1
  6311  12D5  3001               	movlw	1
  6312  12D6  00A3               	movwf	??_strncpy
  6313  12D7  0823               	movf	??_strncpy,w
  6314  12D8  07A4               	addwf	strncpy@cp,f
  6315  12D9                     l5129:	
  6316  12D9  3001               	movlw	1
  6317  12DA  02A1               	subwf	strncpy@size,f
  6318  12DB  3000               	movlw	0
  6319  12DC  3BA2               	subwfb	strncpy@size+1,f
  6320  12DD  0A21               	incf	strncpy@size,w
  6321  12DE  1D03               	skipz
  6322  12DF  2AD1               	goto	l5125
  6323  12E0  0A22               	incf	strncpy@size+1,w
  6324  12E1  1903               	btfsc	3,2
  6325  12E2  0008               	return
  6326  12E3  2AD1               	goto	l5125
  6327  12E4                     __end_of_strncpy:	
  6328                           ;	Return value of _strncpy is never used
  6329                           
  6330                           
  6331                           	psect	text10
  6332  1237                     __ptext10:	
  6333 ;; *************** function _strcat *****************
  6334 ;; Defined at:
  6335 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcat.c"
  6336 ;; Parameters:    Size  Location     Type
  6337 ;;  to              1    wreg     PTR unsigned char 
  6338 ;;		 -> sendFinalBufferToGAteway(46), 
  6339 ;;  from            2    0[BANK0 ] PTR const unsigned char 
  6340 ;;		 -> ChildLockbuffer(2), switchstatusbuffer(2), switchNumberBuffer(3), mainReceivedDataBuffer(18), 
  6341 ;;		 -> STR_10(2), STR_9(2), STR_8(2), STR_7(2), 
  6342 ;;		 -> STR_6(2), STR_5(2), STR_4(7), STR_3(2), 
  6343 ;;		 -> STR_2(2), NULL(0), 
  6344 ;; Auto vars:     Size  Location     Type
  6345 ;;  to              1    4[BANK0 ] PTR unsigned char 
  6346 ;;		 -> sendFinalBufferToGAteway(46), 
  6347 ;;  cp              1    3[BANK0 ] PTR unsigned char 
  6348 ;;		 -> sendFinalBufferToGAteway(46), 
  6349 ;; Return value:  Size  Location     Type
  6350 ;;                  1    wreg      PTR unsigned char 
  6351 ;; Registers used:
  6352 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6353 ;; Tracked objects:
  6354 ;;		On entry : 0/0
  6355 ;;		On exit  : 0/0
  6356 ;;		Unchanged: 0/0
  6357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6358 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  6359 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  6360 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  6361 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0
  6362 ;;Total ram usage:        5 bytes
  6363 ;; Hardware stack levels used:    1
  6364 ;; Hardware stack levels required when called:    2
  6365 ;; This function calls:
  6366 ;;		Nothing
  6367 ;; This function is called by:
  6368 ;;		_applicationControlRGB
  6369 ;; This function uses a non-reentrant model
  6370 ;;
  6371                           
  6372                           
  6373                           ;psect for function _strcat
  6374  1237                     _strcat:	
  6375                           
  6376                           ;incstack = 0
  6377                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  6378                           ;strcat@to stored from wreg
  6379  1237  0020               	movlb	0	; select bank0
  6380  1238  00A4               	movwf	strcat@to
  6381  1239  0824               	movf	strcat@to,w
  6382  123A  00A2               	movwf	??_strcat
  6383  123B  0822               	movf	??_strcat,w
  6384  123C  00A3               	movwf	strcat@cp
  6385  123D                     l5101:	
  6386  123D  0823               	movf	strcat@cp,w
  6387  123E  0086               	movwf	6
  6388  123F  3002               	movlw	2	; select bank4/5
  6389  1240  0087               	movwf	7
  6390  1241  0801               	movf	1,w
  6391  1242  1903               	btfsc	3,2
  6392  1243  2A51               	goto	l5107
  6393  1244  3001               	movlw	1
  6394  1245  00A2               	movwf	??_strcat
  6395  1246  0822               	movf	??_strcat,w
  6396  1247  07A3               	addwf	strcat@cp,f
  6397  1248  2A3D               	goto	l5101
  6398  1249                     l5103:	
  6399  1249  3001               	movlw	1
  6400  124A  00A2               	movwf	??_strcat
  6401  124B  0822               	movf	??_strcat,w
  6402  124C  07A3               	addwf	strcat@cp,f
  6403  124D  3001               	movlw	1
  6404  124E  07A0               	addwf	strcat@from,f
  6405  124F  3000               	movlw	0
  6406  1250  3DA1               	addwfc	strcat@from+1,f
  6407  1251                     l5107:	
  6408  1251  0823               	movf	strcat@cp,w
  6409  1252  0086               	movwf	6
  6410  1253  3002               	movlw	2	; select bank4/5
  6411  1254  0087               	movwf	7
  6412  1255  0820               	movf	strcat@from,w
  6413  1256  0084               	movwf	4
  6414  1257  0821               	movf	strcat@from+1,w
  6415  1258  0085               	movwf	5
  6416  1259  0800               	movf	0,w	;code access
  6417  125A  3FC0               	movwi [0]fsr1
  6418  125B  0889               	movf	9,f
  6419  125C  1903               	btfsc	3,2
  6420  125D  0008               	return
  6421  125E  2A49               	goto	l5103
  6422  125F                     __end_of_strcat:	
  6423                           ;	Return value of _strcat is never used
  6424                           
  6425                           
  6426                           	psect	text11
  6427  10EF                     __ptext11:	
  6428 ;; *************** function _memset *****************
  6429 ;; Defined at:
  6430 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;  p1              2    0[BANK0 ] PTR void 
  6433 ;;		 -> mainReceivedDataBuffer(18), applicationControlRGB@HexlevelBuffer(5), 
  6434 ;;  c               2    2[BANK0 ] int 
  6435 ;;  n               2    4[BANK0 ] unsigned int 
  6436 ;; Auto vars:     Size  Location     Type
  6437 ;;  p               2    6[BANK0 ] PTR unsigned char 
  6438 ;;		 -> mainReceivedDataBuffer(18), applicationControlRGB@HexlevelBuffer(5), 
  6439 ;; Return value:  Size  Location     Type
  6440 ;;                  2    0[BANK0 ] PTR void 
  6441 ;; Registers used:
  6442 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6443 ;; Tracked objects:
  6444 ;;		On entry : 0/0
  6445 ;;		On exit  : 0/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6448 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  6449 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  6450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  6451 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0
  6452 ;;Total ram usage:        8 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; Hardware stack levels required when called:    2
  6455 ;; This function calls:
  6456 ;;		Nothing
  6457 ;; This function is called by:
  6458 ;;		_applicationControlRGB
  6459 ;;		_main
  6460 ;; This function uses a non-reentrant model
  6461 ;;
  6462                           
  6463                           
  6464                           ;psect for function _memset
  6465  10EF                     _memset:	
  6466                           
  6467                           ;incstack = 0
  6468                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6469  10EF  0020               	movlb	0	; select bank0
  6470  10F0  0821               	movf	memset@p1+1,w
  6471  10F1  00A7               	movwf	memset@p+1
  6472  10F2  0820               	movf	memset@p1,w
  6473  10F3  00A6               	movwf	memset@p
  6474  10F4                     l5137:	
  6475  10F4  3001               	movlw	1
  6476  10F5  02A4               	subwf	memset@n,f
  6477  10F6  3000               	movlw	0
  6478  10F7  3BA5               	subwfb	memset@n+1,f
  6479  10F8  0A24               	incf	memset@n,w
  6480  10F9  1903               	btfsc	3,2
  6481  10FA  0A25               	incf	memset@n+1,w
  6482  10FB  1903               	btfsc	3,2
  6483  10FC  0008               	return
  6484  10FD  0826               	movf	memset@p,w
  6485  10FE  0086               	movwf	6
  6486  10FF  0827               	movf	memset@p+1,w
  6487  1100  0087               	movwf	7
  6488  1101  0822               	movf	memset@c,w
  6489  1102  0081               	movwf	1
  6490  1103  3001               	movlw	1
  6491  1104  07A6               	addwf	memset@p,f
  6492  1105  3000               	movlw	0
  6493  1106  3DA7               	addwfc	memset@p+1,f
  6494  1107  28F4               	goto	l5137
  6495  1108                     __end_of_memset:	
  6496                           ;	Return value of _memset is never used
  6497                           
  6498                           
  6499                           	psect	text12
  6500  1055                     __ptext12:	
  6501 ;; *************** function _abs *****************
  6502 ;; Defined at:
  6503 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  6504 ;; Parameters:    Size  Location     Type
  6505 ;;  a               2    0[BANK0 ] int 
  6506 ;; Auto vars:     Size  Location     Type
  6507 ;;		None
  6508 ;; Return value:  Size  Location     Type
  6509 ;;                  2    0[BANK0 ] int 
  6510 ;; Registers used:
  6511 ;;		wreg, status,2, status,0
  6512 ;; Tracked objects:
  6513 ;;		On entry : 0/0
  6514 ;;		On exit  : 0/0
  6515 ;;		Unchanged: 0/0
  6516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6517 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  6518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  6519 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  6520 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  6521 ;;Total ram usage:        4 bytes
  6522 ;; Hardware stack levels used:    1
  6523 ;; Hardware stack levels required when called:    2
  6524 ;; This function calls:
  6525 ;;		Nothing
  6526 ;; This function is called by:
  6527 ;;		_applicationControlRGB
  6528 ;; This function uses a non-reentrant model
  6529 ;;
  6530                           
  6531                           
  6532                           ;psect for function _abs
  6533  1055                     _abs:	
  6534                           
  6535                           ;incstack = 0
  6536                           ; Regs used in _abs: [wreg+status,2+status,0]
  6537  1055  0020               	movlb	0	; select bank0
  6538  1056  1FA1               	btfss	abs@a+1,7
  6539  1057  0008               	return
  6540  1058  0920               	comf	abs@a,w
  6541  1059  00A2               	movwf	??_abs
  6542  105A  0921               	comf	abs@a+1,w
  6543  105B  00A3               	movwf	??_abs+1
  6544  105C  0AA2               	incf	??_abs,f
  6545  105D  1903               	skipnz
  6546  105E  0AA3               	incf	??_abs+1,f
  6547  105F  0822               	movf	??_abs,w
  6548  1060  00A0               	movwf	?_abs
  6549  1061  0823               	movf	??_abs+1,w
  6550  1062  00A1               	movwf	?_abs+1
  6551  1063  0008               	return
  6552  1064                     __end_of_abs:	
  6553                           
  6554                           	psect	text13
  6555  10C4                     __ptext13:	
  6556 ;; *************** function ___lwtoft *****************
  6557 ;; Defined at:
  6558 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;  c               2    8[BANK0 ] unsigned int 
  6561 ;; Auto vars:     Size  Location     Type
  6562 ;;		None
  6563 ;; Return value:  Size  Location     Type
  6564 ;;                  3    8[BANK0 ] float 
  6565 ;; Registers used:
  6566 ;;		wreg, status,2, status,0, pclath, cstack
  6567 ;; Tracked objects:
  6568 ;;		On entry : 0/0
  6569 ;;		On exit  : 0/0
  6570 ;;		Unchanged: 0/0
  6571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6572 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0
  6573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  6574 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  6575 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  6576 ;;Total ram usage:        4 bytes
  6577 ;; Hardware stack levels used:    1
  6578 ;; Hardware stack levels required when called:    3
  6579 ;; This function calls:
  6580 ;;		___ftpack
  6581 ;; This function is called by:
  6582 ;;		_applicationControlRGB
  6583 ;; This function uses a non-reentrant model
  6584 ;;
  6585                           
  6586                           
  6587                           ;psect for function ___lwtoft
  6588  10C4                     ___lwtoft:	
  6589                           
  6590                           ;incstack = 0
  6591                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  6592  10C4  0020               	movlb	0	; select bank0
  6593  10C5  0828               	movf	___lwtoft@c,w
  6594  10C6  00A0               	movwf	___ftpack@arg
  6595  10C7  0829               	movf	___lwtoft@c+1,w
  6596  10C8  00A1               	movwf	___ftpack@arg+1
  6597  10C9  01A2               	clrf	___ftpack@arg+2
  6598  10CA  308E               	movlw	142
  6599  10CB  00AB               	movwf	??___lwtoft
  6600  10CC  082B               	movf	??___lwtoft,w
  6601  10CD  00A3               	movwf	___ftpack@exp
  6602  10CE  01A4               	clrf	___ftpack@sign
  6603  10CF  3194  2411         	fcall	___ftpack
  6604  10D1  0020               	movlb	0	; select bank0
  6605  10D2  0820               	movf	?___ftpack,w
  6606  10D3  00A8               	movwf	?___lwtoft
  6607  10D4  0821               	movf	?___ftpack+1,w
  6608  10D5  00A9               	movwf	?___lwtoft+1
  6609  10D6  0822               	movf	?___ftpack+2,w
  6610  10D7  00AA               	movwf	?___lwtoft+2
  6611  10D8  0008               	return
  6612  10D9                     __end_of___lwtoft:	
  6613                           
  6614                           	psect	text14
  6615  083E                     __ptext14:	
  6616 ;; *************** function _applianceControl *****************
  6617 ;; Defined at:
  6618 ;;		line 3 in file "applicationcontrol.h"
  6619 ;; Parameters:    Size  Location     Type
  6620 ;;  charSwitchMS    1    wreg     unsigned char 
  6621 ;;  charSwitchLS    1   44[BANK0 ] unsigned char 
  6622 ;;  charSwitchST    1   45[BANK0 ] unsigned char 
  6623 ;;  chDimmerSpee    1   46[BANK0 ] unsigned char 
  6624 ;;  chDimmerSpee    1   47[BANK0 ] unsigned char 
  6625 ;;  charParental    1   48[BANK0 ] unsigned char 
  6626 ;;  charFinalFra    1   49[BANK0 ] unsigned char 
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;  charSwitchMS    1   39[BANK1 ] unsigned char 
  6629 ;;  strD            6    8[BANK1 ] unsigned char [6]
  6630 ;;  HexlevelBuff    5   14[BANK1 ] unsigned char [5]
  6631 ;;  NeedPulse       4   33[BANK1 ] unsigned long 
  6632 ;;  Pulse           4   29[BANK1 ] unsigned long 
  6633 ;;  CompleteCloc    4   19[BANK1 ] unsigned long 
  6634 ;;  ConvertIntTo    3   42[BANK1 ] float 
  6635 ;;  clockPerCycl    3   26[BANK1 ] float 
  6636 ;;  deno            3   23[BANK1 ] float 
  6637 ;;  integerSwitc    2   51[BANK1 ] int 
  6638 ;;  dimmerSpeedS    2   45[BANK1 ] unsigned char [2]
  6639 ;;  currentState    2   49[BANK1 ] int 
  6640 ;;  integerSwitc    2   47[BANK1 ] int 
  6641 ;;  switchNumber    2   40[BANK1 ] unsigned char [2]
  6642 ;;  integerSpeed    2   37[BANK1 ] int 
  6643 ;;  end             2    6[BANK1 ] int 
  6644 ;;  start           2    4[BANK1 ] int 
  6645 ;;  remainder       2    2[BANK1 ] int 
  6646 ;;  ConvertStrin    2    0[BANK1 ] int 
  6647 ;; Return value:  Size  Location     Type
  6648 ;;                  1    wreg      void 
  6649 ;; Registers used:
  6650 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6651 ;; Tracked objects:
  6652 ;;		On entry : 0/0
  6653 ;;		On exit  : 0/0
  6654 ;;		Unchanged: 0/0
  6655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6656 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  6657 ;;      Locals:         0       0      53       0       0       0       0       0       0       0       0
  6658 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0
  6659 ;;      Totals:         0      14      53       0       0       0       0       0       0       0       0
  6660 ;;Total ram usage:       67 bytes
  6661 ;; Hardware stack levels used:    1
  6662 ;; Hardware stack levels required when called:    4
  6663 ;; This function calls:
  6664 ;;		___awtoft
  6665 ;;		___ftdiv
  6666 ;;		___ftmul
  6667 ;;		___fttol
  6668 ;;		_atoi
  6669 ;;		_hexadecimalToDecimal
  6670 ;;		_sendAcknowledgment
  6671 ;;		_sprintf
  6672 ;;		_strcpy
  6673 ;;		_strlen
  6674 ;; This function is called by:
  6675 ;;		_main
  6676 ;; This function uses a non-reentrant model
  6677 ;;
  6678                           
  6679                           
  6680                           ;psect for function _applianceControl
  6681  083E                     _applianceControl:	
  6682                           
  6683                           ;incstack = 0
  6684                           ; Regs used in _applianceControl: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6685                           ;applianceControl@charSwitchMSB stored from wreg
  6686  083E  0021               	movlb	1	; select bank1
  6687  083F  00C7               	movwf	applianceControl@charSwitchMSB^(0+128)
  6688                           
  6689                           ;applicationcontrol.h: 7: int integerSwitchNumber = 0;
  6690  0840  01CF               	clrf	applianceControl@integerSwitchNumber^(0+128)
  6691  0841  01D0               	clrf	(applianceControl@integerSwitchNumber+1)^(0+128)
  6692                           
  6693                           ;applicationcontrol.h: 8: int integerSwitchState = 0;
  6694  0842  01D3               	clrf	applianceControl@integerSwitchState^(0+128)
  6695  0843  01D4               	clrf	(applianceControl@integerSwitchState+1)^(0+128)
  6696                           
  6697                           ;applicationcontrol.h: 9: int integerSpeed = 0;
  6698  0844  01C5               	clrf	applianceControl@integerSpeed^(0+128)
  6699  0845  01C6               	clrf	(applianceControl@integerSpeed+1)^(0+128)
  6700                           
  6701                           ;applicationcontrol.h: 10: int currentStateBufferPositions=0;
  6702  0846  01D1               	clrf	applianceControl@currentStateBufferPositions^(0+128)
  6703  0847  01D2               	clrf	(applianceControl@currentStateBufferPositions+1)^(0+128)
  6704                           
  6705                           ;applicationcontrol.h: 12: int ConvertStringIntoInt=0;
  6706  0848  01A0               	clrf	applianceControl@ConvertStringIntoInt^(0+128)
  6707  0849  01A1               	clrf	(applianceControl@ConvertStringIntoInt+1)^(0+128)
  6708                           
  6709                           ;applicationcontrol.h: 13: float ConvertIntToTimeInMilisec=0;
  6710  084A  3000               	movlw	0
  6711  084B  00CA               	movwf	applianceControl@ConvertIntToTimeInMilisec^(0+128)
  6712  084C  3000               	movlw	0
  6713  084D  00CB               	movwf	(applianceControl@ConvertIntToTimeInMilisec+1)^(0+128)
  6714  084E  3000               	movlw	0
  6715  084F  00CC               	movwf	(applianceControl@ConvertIntToTimeInMilisec+2)^(0+128)
  6716                           
  6717                           ;applicationcontrol.h: 14: unsigned long long int Pulse=0,NeedPulse=0,CompleteClock =655
      +                          35;
  6718  0850  3000               	movlw	0
  6719  0851  00C0               	movwf	(applianceControl@Pulse+3)^(0+128)
  6720  0852  3000               	movlw	0
  6721  0853  00BF               	movwf	(applianceControl@Pulse+2)^(0+128)
  6722  0854  3000               	movlw	0
  6723  0855  00BE               	movwf	(applianceControl@Pulse+1)^(0+128)
  6724  0856  3000               	movlw	0
  6725  0857  00BD               	movwf	applianceControl@Pulse^(0+128)
  6726  0858  3000               	movlw	0
  6727  0859  00C4               	movwf	(applianceControl@NeedPulse+3)^(0+128)
  6728  085A  3000               	movlw	0
  6729  085B  00C3               	movwf	(applianceControl@NeedPulse+2)^(0+128)
  6730  085C  3000               	movlw	0
  6731  085D  00C2               	movwf	(applianceControl@NeedPulse+1)^(0+128)
  6732  085E  3000               	movlw	0
  6733  085F  00C1               	movwf	applianceControl@NeedPulse^(0+128)
  6734  0860  3000               	movlw	0
  6735  0861  00B6               	movwf	(applianceControl@CompleteClock+3)^(0+128)
  6736  0862  3000               	movlw	0
  6737  0863  00B5               	movwf	(applianceControl@CompleteClock+2)^(0+128)
  6738  0864  30FF               	movlw	255
  6739  0865  00B4               	movwf	(applianceControl@CompleteClock+1)^(0+128)
  6740  0866  30FF               	movlw	255
  6741  0867  00B3               	movwf	applianceControl@CompleteClock^(0+128)
  6742                           
  6743                           ;applicationcontrol.h: 15: float deno = 20.0;
  6744  0868  3000               	movlw	0
  6745  0869  00B7               	movwf	applianceControl@deno^(0+128)
  6746  086A  30A0               	movlw	160
  6747  086B  00B8               	movwf	(applianceControl@deno+1)^(0+128)
  6748  086C  3041               	movlw	65
  6749  086D  00B9               	movwf	(applianceControl@deno+2)^(0+128)
  6750                           
  6751                           ;applicationcontrol.h: 16: float clockPerCycle=0.25;
  6752  086E  3000               	movlw	0
  6753  086F  00BA               	movwf	applianceControl@clockPerCycle^(0+128)
  6754  0870  3080               	movlw	128
  6755  0871  00BB               	movwf	(applianceControl@clockPerCycle+1)^(0+128)
  6756  0872  303E               	movlw	62
  6757  0873  00BC               	movwf	(applianceControl@clockPerCycle+2)^(0+128)
  6758                           
  6759                           ;applicationcontrol.h: 17: int remainder=0;
  6760  0874  01A2               	clrf	applianceControl@remainder^(0+128)
  6761  0875  01A3               	clrf	(applianceControl@remainder+1)^(0+128)
  6762                           
  6763                           ;applicationcontrol.h: 18: char HexlevelBuffer[5];
  6764                           ;applicationcontrol.h: 19: int start=0;
  6765  0876  01A4               	clrf	applianceControl@start^(0+128)
  6766  0877  01A5               	clrf	(applianceControl@start+1)^(0+128)
  6767                           
  6768                           ;applicationcontrol.h: 20: int end = strlen(HexlevelBuffer)-1;
  6769  0878  30AE               	movlw	low applianceControl@HexlevelBuffer
  6770  0879  0020               	movlb	0	; select bank0
  6771  087A  00A0               	movwf	strlen@s
  6772  087B  3000               	movlw	high applianceControl@HexlevelBuffer
  6773  087C  00A1               	movwf	strlen@s+1
  6774  087D  3191  218F  3188   	fcall	_strlen
  6775  0880  0020               	movlb	0	; select bank0
  6776  0881  0820               	movf	?_strlen,w
  6777  0882  3EFF               	addlw	255
  6778  0883  0021               	movlb	1	; select bank1
  6779  0884  00A6               	movwf	applianceControl@end^(0+128)
  6780  0885  30FF               	movlw	255
  6781  0886  0020               	movlb	0	; select bank0
  6782  0887  3D21               	addwfc	?_strlen+1,w
  6783  0888  0021               	movlb	1	; select bank1
  6784  0889  00A7               	movwf	(applianceControl@end+1)^(0+128)
  6785                           
  6786                           ;applicationcontrol.h: 21: char strD[6];
  6787                           ;applicationcontrol.h: 24: char switchNumberStringBuffer[2]="#";
  6788  088A  0022               	movlb	2	; select bank2
  6789  088B  0865               	movf	(applianceControl@F3972+1)^(0+256),w
  6790  088C  0021               	movlb	1	; select bank1
  6791  088D  00C9               	movwf	(applianceControl@switchNumberStringBuffer+1)^(0+128)
  6792  088E  0022               	movlb	2	; select bank2
  6793  088F  0864               	movf	applianceControl@F3972^(0+256),w
  6794  0890  0021               	movlb	1	; select bank1
  6795  0891  00C8               	movwf	applianceControl@switchNumberStringBuffer^(0+128)
  6796                           
  6797                           ;applicationcontrol.h: 25: char dimmerSpeedStringBuffer[2]="#";
  6798  0892  0022               	movlb	2	; select bank2
  6799  0893  0863               	movf	(applianceControl@F3974+1)^(0+256),w
  6800  0894  0021               	movlb	1	; select bank1
  6801  0895  00CE               	movwf	(applianceControl@dimmerSpeedStringBuffer+1)^(0+128)
  6802  0896  0022               	movlb	2	; select bank2
  6803  0897  0862               	movf	applianceControl@F3974^(0+256),w
  6804  0898  0021               	movlb	1	; select bank1
  6805  0899  00CD               	movwf	applianceControl@dimmerSpeedStringBuffer^(0+128)
  6806                           
  6807                           ;applicationcontrol.h: 27: switchNumberStringBuffer[0]=charSwitchMSB;
  6808  089A  0847               	movf	applianceControl@charSwitchMSB^(0+128),w
  6809  089B  0020               	movlb	0	; select bank0
  6810  089C  00D2               	movwf	??_applianceControl
  6811  089D  0852               	movf	??_applianceControl,w
  6812  089E  0021               	movlb	1	; select bank1
  6813  089F  00C8               	movwf	applianceControl@switchNumberStringBuffer^(0+128)
  6814                           
  6815                           ;applicationcontrol.h: 28: switchNumberStringBuffer[1]=charSwitchLSB;
  6816  08A0  0020               	movlb	0	; select bank0
  6817  08A1  084C               	movf	applianceControl@charSwitchLSB,w
  6818  08A2  00D2               	movwf	??_applianceControl
  6819  08A3  0852               	movf	??_applianceControl,w
  6820  08A4  0021               	movlb	1	; select bank1
  6821  08A5  00C9               	movwf	(applianceControl@switchNumberStringBuffer^(0+128)+1)
  6822                           
  6823                           ;applicationcontrol.h: 29: integerSwitchNumber = atoi(switchNumberStringBuffer);
  6824  08A6  30C8               	movlw	low applianceControl@switchNumberStringBuffer
  6825  08A7  0020               	movlb	0	; select bank0
  6826  08A8  00A6               	movwf	atoi@s
  6827  08A9  3000               	movlw	high applianceControl@switchNumberStringBuffer
  6828  08AA  00A7               	movwf	atoi@s+1
  6829  08AB  3194  2476  3188   	fcall	_atoi
  6830  08AE  0020               	movlb	0	; select bank0
  6831  08AF  0827               	movf	?_atoi+1,w
  6832  08B0  0021               	movlb	1	; select bank1
  6833  08B1  00D0               	movwf	(applianceControl@integerSwitchNumber+1)^(0+128)
  6834  08B2  0020               	movlb	0	; select bank0
  6835  08B3  0826               	movf	?_atoi,w
  6836  08B4  0021               	movlb	1	; select bank1
  6837  08B5  00CF               	movwf	applianceControl@integerSwitchNumber^(0+128)
  6838                           
  6839                           ;applicationcontrol.h: 33: integerSwitchState = charSwitchSTATE-'0';
  6840  08B6  0020               	movlb	0	; select bank0
  6841  08B7  084D               	movf	applianceControl@charSwitchSTATE,w
  6842  08B8  3ED0               	addlw	208
  6843  08B9  0021               	movlb	1	; select bank1
  6844  08BA  00D3               	movwf	applianceControl@integerSwitchState^(0+128)
  6845  08BB  30FF               	movlw	255
  6846  08BC  1803               	skipnc
  6847  08BD  3000               	movlw	0
  6848  08BE  00D4               	movwf	(applianceControl@integerSwitchState^(0+128)+1)
  6849                           
  6850                           ;applicationcontrol.h: 36: dimmerSpeedStringBuffer[0]=chDimmerSpeedMSB;
  6851  08BF  0020               	movlb	0	; select bank0
  6852  08C0  084E               	movf	applianceControl@chDimmerSpeedMSB,w
  6853  08C1  00D2               	movwf	??_applianceControl
  6854  08C2  0852               	movf	??_applianceControl,w
  6855  08C3  0021               	movlb	1	; select bank1
  6856  08C4  00CD               	movwf	applianceControl@dimmerSpeedStringBuffer^(0+128)
  6857                           
  6858                           ;applicationcontrol.h: 37: dimmerSpeedStringBuffer[1]=chDimmerSpeedLSB;
  6859  08C5  0020               	movlb	0	; select bank0
  6860  08C6  084F               	movf	applianceControl@chDimmerSpeedLSB,w
  6861  08C7  00D2               	movwf	??_applianceControl
  6862  08C8  0852               	movf	??_applianceControl,w
  6863  08C9  0021               	movlb	1	; select bank1
  6864  08CA  00CE               	movwf	(applianceControl@dimmerSpeedStringBuffer^(0+128)+1)
  6865                           
  6866                           ;applicationcontrol.h: 38: integerSpeed = atoi(dimmerSpeedStringBuffer);
  6867  08CB  30CD               	movlw	low applianceControl@dimmerSpeedStringBuffer
  6868  08CC  0020               	movlb	0	; select bank0
  6869  08CD  00A6               	movwf	atoi@s
  6870  08CE  3000               	movlw	high applianceControl@dimmerSpeedStringBuffer
  6871  08CF  00A7               	movwf	atoi@s+1
  6872  08D0  3194  2476  3188   	fcall	_atoi
  6873  08D3  0020               	movlb	0	; select bank0
  6874  08D4  0827               	movf	?_atoi+1,w
  6875  08D5  0021               	movlb	1	; select bank1
  6876  08D6  00C6               	movwf	(applianceControl@integerSpeed+1)^(0+128)
  6877  08D7  0020               	movlb	0	; select bank0
  6878  08D8  0826               	movf	?_atoi,w
  6879  08D9  0021               	movlb	1	; select bank1
  6880  08DA  00C5               	movwf	applianceControl@integerSpeed^(0+128)
  6881                           
  6882                           ;applicationcontrol.h: 41: dimmerSpeedStringBuffer[0]=chDimmerSpeedMSB;
  6883  08DB  0020               	movlb	0	; select bank0
  6884  08DC  084E               	movf	applianceControl@chDimmerSpeedMSB,w
  6885  08DD  00D2               	movwf	??_applianceControl
  6886  08DE  0852               	movf	??_applianceControl,w
  6887  08DF  0021               	movlb	1	; select bank1
  6888  08E0  00CD               	movwf	applianceControl@dimmerSpeedStringBuffer^(0+128)
  6889                           
  6890                           ;applicationcontrol.h: 42: dimmerSpeedStringBuffer[1]=chDimmerSpeedLSB;
  6891  08E1  0020               	movlb	0	; select bank0
  6892  08E2  084F               	movf	applianceControl@chDimmerSpeedLSB,w
  6893  08E3  00D2               	movwf	??_applianceControl
  6894  08E4  0852               	movf	??_applianceControl,w
  6895  08E5  0021               	movlb	1	; select bank1
  6896  08E6  00CE               	movwf	(applianceControl@dimmerSpeedStringBuffer^(0+128)+1)
  6897                           
  6898                           ;applicationcontrol.h: 43: integerSpeed = atoi(dimmerSpeedStringBuffer);
  6899  08E7  30CD               	movlw	low applianceControl@dimmerSpeedStringBuffer
  6900  08E8  0020               	movlb	0	; select bank0
  6901  08E9  00A6               	movwf	atoi@s
  6902  08EA  3000               	movlw	high applianceControl@dimmerSpeedStringBuffer
  6903  08EB  00A7               	movwf	atoi@s+1
  6904  08EC  3194  2476  3188   	fcall	_atoi
  6905  08EF  0020               	movlb	0	; select bank0
  6906  08F0  0827               	movf	?_atoi+1,w
  6907  08F1  0021               	movlb	1	; select bank1
  6908  08F2  00C6               	movwf	(applianceControl@integerSpeed+1)^(0+128)
  6909  08F3  0020               	movlb	0	; select bank0
  6910  08F4  0826               	movf	?_atoi,w
  6911  08F5  0021               	movlb	1	; select bank1
  6912  08F6  00C5               	movwf	applianceControl@integerSpeed^(0+128)
  6913                           
  6914                           ;applicationcontrol.h: 45: ConvertIntToTimeInMilisec = (integerSpeed/deno);
  6915  08F7  0837               	movf	applianceControl@deno^(0+128),w
  6916  08F8  0020               	movlb	0	; select bank0
  6917  08F9  00AE               	movwf	___ftdiv@f2
  6918  08FA  0021               	movlb	1	; select bank1
  6919  08FB  0838               	movf	(applianceControl@deno+1)^(0+128),w
  6920  08FC  0020               	movlb	0	; select bank0
  6921  08FD  00AF               	movwf	___ftdiv@f2+1
  6922  08FE  0021               	movlb	1	; select bank1
  6923  08FF  0839               	movf	(applianceControl@deno+2)^(0+128),w
  6924  0900  0020               	movlb	0	; select bank0
  6925  0901  00B0               	movwf	___ftdiv@f2+2
  6926  0902  0021               	movlb	1	; select bank1
  6927  0903  0846               	movf	(applianceControl@integerSpeed+1)^(0+128),w
  6928  0904  0020               	movlb	0	; select bank0
  6929  0905  00A9               	movwf	___awtoft@c+1
  6930  0906  0021               	movlb	1	; select bank1
  6931  0907  0845               	movf	applianceControl@integerSpeed^(0+128),w
  6932  0908  0020               	movlb	0	; select bank0
  6933  0909  00A8               	movwf	___awtoft@c
  6934  090A  3191  21EE  3188   	fcall	___awtoft
  6935  090D  0020               	movlb	0	; select bank0
  6936  090E  0828               	movf	?___awtoft,w
  6937  090F  00B1               	movwf	___ftdiv@f1
  6938  0910  0829               	movf	?___awtoft+1,w
  6939  0911  00B2               	movwf	___ftdiv@f1+1
  6940  0912  082A               	movf	?___awtoft+2,w
  6941  0913  00B3               	movwf	___ftdiv@f1+2
  6942  0914  3195  25F0  3188   	fcall	___ftdiv
  6943  0917  0020               	movlb	0	; select bank0
  6944  0918  082E               	movf	?___ftdiv,w
  6945  0919  0021               	movlb	1	; select bank1
  6946  091A  00CA               	movwf	applianceControl@ConvertIntToTimeInMilisec^(0+128)
  6947  091B  0020               	movlb	0	; select bank0
  6948  091C  082F               	movf	?___ftdiv+1,w
  6949  091D  0021               	movlb	1	; select bank1
  6950  091E  00CB               	movwf	(applianceControl@ConvertIntToTimeInMilisec+1)^(0+128)
  6951  091F  0020               	movlb	0	; select bank0
  6952  0920  0830               	movf	?___ftdiv+2,w
  6953  0921  0021               	movlb	1	; select bank1
  6954  0922  00CC               	movwf	(applianceControl@ConvertIntToTimeInMilisec+2)^(0+128)
  6955                           
  6956                           ;applicationcontrol.h: 46: ConvertIntToTimeInMilisec = (ConvertIntToTimeInMilisec*1000);
  6957  0923  3000               	movlw	0
  6958  0924  0020               	movlb	0	; select bank0
  6959  0925  00A8               	movwf	___ftmul@f1
  6960  0926  307A               	movlw	122
  6961  0927  00A9               	movwf	___ftmul@f1+1
  6962  0928  3044               	movlw	68
  6963  0929  00AA               	movwf	___ftmul@f1+2
  6964  092A  0021               	movlb	1	; select bank1
  6965  092B  084A               	movf	applianceControl@ConvertIntToTimeInMilisec^(0+128),w
  6966  092C  0020               	movlb	0	; select bank0
  6967  092D  00AB               	movwf	___ftmul@f2
  6968  092E  0021               	movlb	1	; select bank1
  6969  092F  084B               	movf	(applianceControl@ConvertIntToTimeInMilisec+1)^(0+128),w
  6970  0930  0020               	movlb	0	; select bank0
  6971  0931  00AC               	movwf	___ftmul@f2+1
  6972  0932  0021               	movlb	1	; select bank1
  6973  0933  084C               	movf	(applianceControl@ConvertIntToTimeInMilisec+2)^(0+128),w
  6974  0934  0020               	movlb	0	; select bank0
  6975  0935  00AD               	movwf	___ftmul@f2+2
  6976  0936  3197  274C  3188   	fcall	___ftmul
  6977  0939  0020               	movlb	0	; select bank0
  6978  093A  0828               	movf	?___ftmul,w
  6979  093B  0021               	movlb	1	; select bank1
  6980  093C  00CA               	movwf	applianceControl@ConvertIntToTimeInMilisec^(0+128)
  6981  093D  0020               	movlb	0	; select bank0
  6982  093E  0829               	movf	?___ftmul+1,w
  6983  093F  0021               	movlb	1	; select bank1
  6984  0940  00CB               	movwf	(applianceControl@ConvertIntToTimeInMilisec+1)^(0+128)
  6985  0941  0020               	movlb	0	; select bank0
  6986  0942  082A               	movf	?___ftmul+2,w
  6987  0943  0021               	movlb	1	; select bank1
  6988  0944  00CC               	movwf	(applianceControl@ConvertIntToTimeInMilisec+2)^(0+128)
  6989                           
  6990                           ;applicationcontrol.h: 47: Pulse = (ConvertIntToTimeInMilisec/clockPerCycle);
  6991  0945  084A               	movf	applianceControl@ConvertIntToTimeInMilisec^(0+128),w
  6992  0946  0020               	movlb	0	; select bank0
  6993  0947  00B1               	movwf	___ftdiv@f1
  6994  0948  0021               	movlb	1	; select bank1
  6995  0949  084B               	movf	(applianceControl@ConvertIntToTimeInMilisec+1)^(0+128),w
  6996  094A  0020               	movlb	0	; select bank0
  6997  094B  00B2               	movwf	___ftdiv@f1+1
  6998  094C  0021               	movlb	1	; select bank1
  6999  094D  084C               	movf	(applianceControl@ConvertIntToTimeInMilisec+2)^(0+128),w
  7000  094E  0020               	movlb	0	; select bank0
  7001  094F  00B3               	movwf	___ftdiv@f1+2
  7002  0950  0021               	movlb	1	; select bank1
  7003  0951  083A               	movf	applianceControl@clockPerCycle^(0+128),w
  7004  0952  0020               	movlb	0	; select bank0
  7005  0953  00AE               	movwf	___ftdiv@f2
  7006  0954  0021               	movlb	1	; select bank1
  7007  0955  083B               	movf	(applianceControl@clockPerCycle+1)^(0+128),w
  7008  0956  0020               	movlb	0	; select bank0
  7009  0957  00AF               	movwf	___ftdiv@f2+1
  7010  0958  0021               	movlb	1	; select bank1
  7011  0959  083C               	movf	(applianceControl@clockPerCycle+2)^(0+128),w
  7012  095A  0020               	movlb	0	; select bank0
  7013  095B  00B0               	movwf	___ftdiv@f2+2
  7014  095C  3195  25F0  3188   	fcall	___ftdiv
  7015  095F  0020               	movlb	0	; select bank0
  7016  0960  082E               	movf	?___ftdiv,w
  7017  0961  00BE               	movwf	___fttol@f1
  7018  0962  082F               	movf	?___ftdiv+1,w
  7019  0963  00BF               	movwf	___fttol@f1+1
  7020  0964  0830               	movf	?___ftdiv+2,w
  7021  0965  00C0               	movwf	___fttol@f1+2
  7022  0966  3195  2569  3188   	fcall	___fttol
  7023  0969  0020               	movlb	0	; select bank0
  7024  096A  0841               	movf	?___fttol+3,w
  7025  096B  0021               	movlb	1	; select bank1
  7026  096C  00C0               	movwf	(applianceControl@Pulse+3)^(0+128)
  7027  096D  0020               	movlb	0	; select bank0
  7028  096E  0840               	movf	?___fttol+2,w
  7029  096F  0021               	movlb	1	; select bank1
  7030  0970  00BF               	movwf	(applianceControl@Pulse+2)^(0+128)
  7031  0971  0020               	movlb	0	; select bank0
  7032  0972  083F               	movf	?___fttol+1,w
  7033  0973  0021               	movlb	1	; select bank1
  7034  0974  00BE               	movwf	(applianceControl@Pulse+1)^(0+128)
  7035  0975  0020               	movlb	0	; select bank0
  7036  0976  083E               	movf	?___fttol,w
  7037  0977  0021               	movlb	1	; select bank1
  7038  0978  00BD               	movwf	applianceControl@Pulse^(0+128)
  7039                           
  7040                           ;applicationcontrol.h: 48: NeedPulse = CompleteClock - Pulse;
  7041  0979  0833               	movf	applianceControl@CompleteClock^(0+128),w
  7042  097A  0020               	movlb	0	; select bank0
  7043  097B  00D2               	movwf	??_applianceControl
  7044  097C  0021               	movlb	1	; select bank1
  7045  097D  0834               	movf	(applianceControl@CompleteClock+1)^(0+128),w
  7046  097E  0020               	movlb	0	; select bank0
  7047  097F  00D3               	movwf	??_applianceControl+1
  7048  0980  0021               	movlb	1	; select bank1
  7049  0981  0835               	movf	(applianceControl@CompleteClock+2)^(0+128),w
  7050  0982  0020               	movlb	0	; select bank0
  7051  0983  00D4               	movwf	??_applianceControl+2
  7052  0984  0021               	movlb	1	; select bank1
  7053  0985  0836               	movf	(applianceControl@CompleteClock+3)^(0+128),w
  7054  0986  0020               	movlb	0	; select bank0
  7055  0987  00D5               	movwf	??_applianceControl+3
  7056  0988  0021               	movlb	1	; select bank1
  7057  0989  093D               	comf	applianceControl@Pulse^(0+128),w
  7058  098A  0020               	movlb	0	; select bank0
  7059  098B  00D6               	movwf	??_applianceControl+4
  7060  098C  0021               	movlb	1	; select bank1
  7061  098D  093E               	comf	(applianceControl@Pulse+1)^(0+128),w
  7062  098E  0020               	movlb	0	; select bank0
  7063  098F  00D7               	movwf	??_applianceControl+5
  7064  0990  0021               	movlb	1	; select bank1
  7065  0991  093F               	comf	(applianceControl@Pulse+2)^(0+128),w
  7066  0992  0020               	movlb	0	; select bank0
  7067  0993  00D8               	movwf	??_applianceControl+6
  7068  0994  0021               	movlb	1	; select bank1
  7069  0995  0940               	comf	(applianceControl@Pulse+3)^(0+128),w
  7070  0996  0020               	movlb	0	; select bank0
  7071  0997  00D9               	movwf	??_applianceControl+7
  7072  0998  0AD6               	incf	??_applianceControl+4,f
  7073  0999  1903               	skipnz
  7074  099A  0AD7               	incf	??_applianceControl+5,f
  7075  099B  1903               	skipnz
  7076  099C  0AD8               	incf	??_applianceControl+6,f
  7077  099D  1903               	skipnz
  7078  099E  0AD9               	incf	??_applianceControl+7,f
  7079  099F  0856               	movf	??_applianceControl+4,w
  7080  09A0  07D2               	addwf	??_applianceControl,f
  7081  09A1  0857               	movf	??_applianceControl+5,w
  7082  09A2  3DD3               	addwfc	??_applianceControl+1,f
  7083  09A3  0858               	movf	??_applianceControl+6,w
  7084  09A4  3DD4               	addwfc	??_applianceControl+2,f
  7085  09A5  0859               	movf	??_applianceControl+7,w
  7086  09A6  3DD5               	addwfc	??_applianceControl+3,f
  7087  09A7  0855               	movf	??_applianceControl+3,w
  7088  09A8  0021               	movlb	1	; select bank1
  7089  09A9  00C4               	movwf	(applianceControl@NeedPulse+3)^(0+128)
  7090  09AA  0020               	movlb	0	; select bank0
  7091  09AB  0854               	movf	??_applianceControl+2,w
  7092  09AC  0021               	movlb	1	; select bank1
  7093  09AD  00C3               	movwf	(applianceControl@NeedPulse+2)^(0+128)
  7094  09AE  0020               	movlb	0	; select bank0
  7095  09AF  0853               	movf	??_applianceControl+1,w
  7096  09B0  0021               	movlb	1	; select bank1
  7097  09B1  00C2               	movwf	(applianceControl@NeedPulse+1)^(0+128)
  7098  09B2  0020               	movlb	0	; select bank0
  7099  09B3  0852               	movf	??_applianceControl,w
  7100  09B4  0021               	movlb	1	; select bank1
  7101  09B5  00C1               	movwf	applianceControl@NeedPulse^(0+128)
  7102                           
  7103                           ;applicationcontrol.h: 49: sprintf(HexlevelBuffer,"%X",NeedPulse);
  7104  09B6  3033               	movlw	low (STR_1| (0+32768))
  7105  09B7  0020               	movlb	0	; select bank0
  7106  09B8  00A8               	movwf	sprintf@f
  7107  09B9  3098               	movlw	high (STR_1| (0+32768))
  7108  09BA  00A9               	movwf	sprintf@f+1
  7109  09BB  0021               	movlb	1	; select bank1
  7110  09BC  0844               	movf	(applianceControl@NeedPulse+3)^(0+128),w
  7111  09BD  0020               	movlb	0	; select bank0
  7112  09BE  00AD               	movwf	?_sprintf+5
  7113  09BF  0021               	movlb	1	; select bank1
  7114  09C0  0843               	movf	(applianceControl@NeedPulse+2)^(0+128),w
  7115  09C1  0020               	movlb	0	; select bank0
  7116  09C2  00AC               	movwf	?_sprintf+4
  7117  09C3  0021               	movlb	1	; select bank1
  7118  09C4  0842               	movf	(applianceControl@NeedPulse+1)^(0+128),w
  7119  09C5  0020               	movlb	0	; select bank0
  7120  09C6  00AB               	movwf	?_sprintf+3
  7121  09C7  0021               	movlb	1	; select bank1
  7122  09C8  0841               	movf	applianceControl@NeedPulse^(0+128),w
  7123  09C9  0020               	movlb	0	; select bank0
  7124  09CA  00AA               	movwf	?_sprintf+2
  7125  09CB  30AE               	movlw	(low (applianceControl@HexlevelBuffer| 0))& (0+255)
  7126  09CC  3196  2699  3188   	fcall	_sprintf
  7127                           
  7128                           ;applicationcontrol.h: 50: strcpy(strD,HexlevelBuffer);
  7129  09CF  30A8               	movlw	low applianceControl@strD
  7130  09D0  0020               	movlb	0	; select bank0
  7131  09D1  00A0               	movwf	strcpy@to
  7132  09D2  3000               	movlw	high applianceControl@strD
  7133  09D3  00A1               	movwf	strcpy@to+1
  7134  09D4  30AE               	movlw	low applianceControl@HexlevelBuffer
  7135  09D5  00A2               	movwf	strcpy@from
  7136  09D6  3000               	movlw	high applianceControl@HexlevelBuffer
  7137  09D7  00A3               	movwf	strcpy@from+1
  7138  09D8  3191  213B  3188   	fcall	_strcpy
  7139                           
  7140                           ;applicationcontrol.h: 54: parentalLockBuffer[integerSwitchNumber] = charParentalControl
      +                          ;
  7141  09DB  0020               	movlb	0	; select bank0
  7142  09DC  0850               	movf	applianceControl@charParentalControl,w
  7143  09DD  00D2               	movwf	??_applianceControl
  7144  09DE  0021               	movlb	1	; select bank1
  7145  09DF  084F               	movf	applianceControl@integerSwitchNumber^(0+128),w
  7146  09E0  3E4E               	addlw	(low (_parentalLockBuffer| (0+512)))& (0+255)
  7147  09E1  0086               	movwf	6
  7148  09E2  3002               	movlw	2	; select bank4/5
  7149  09E3  0087               	movwf	7
  7150  09E4  0020               	movlb	0	; select bank0
  7151  09E5  0852               	movf	??_applianceControl,w
  7152  09E6  0081               	movwf	1
  7153                           
  7154                           ;applicationcontrol.h: 55: copy_parentalLockBuffer[integerSwitchNumber]=parentalLockBuff
      +                          er[integerSwitchNumber];
  7155  09E7  0021               	movlb	1	; select bank1
  7156  09E8  084F               	movf	applianceControl@integerSwitchNumber^(0+128),w
  7157  09E9  3E4E               	addlw	(low (_parentalLockBuffer| (0+512)))& (0+255)
  7158  09EA  0086               	movwf	6
  7159  09EB  3002               	movlw	2	; select bank4/5
  7160  09EC  0087               	movwf	7
  7161  09ED  0801               	movf	1,w
  7162  09EE  0020               	movlb	0	; select bank0
  7163  09EF  00D2               	movwf	??_applianceControl
  7164  09F0  0021               	movlb	1	; select bank1
  7165  09F1  084F               	movf	applianceControl@integerSwitchNumber^(0+128),w
  7166  09F2  3ECC               	addlw	(low (_copy_parentalLockBuffer| (0+256)))& (0+255)
  7167  09F3  0086               	movwf	6
  7168  09F4  3001               	movlw	1	; select bank3/4
  7169  09F5  0087               	movwf	7
  7170  09F6  0020               	movlb	0	; select bank0
  7171  09F7  0852               	movf	??_applianceControl,w
  7172  09F8  0081               	movwf	1
  7173                           
  7174                           ;applicationcontrol.h: 58: currentStateBufferPositions = ((1+4*(integerSwitchNumber))-5)
      +                          ;
  7175  09F9  0021               	movlb	1	; select bank1
  7176  09FA  0850               	movf	(applianceControl@integerSwitchNumber+1)^(0+128),w
  7177  09FB  0020               	movlb	0	; select bank0
  7178  09FC  00D3               	movwf	??_applianceControl+1
  7179  09FD  0021               	movlb	1	; select bank1
  7180  09FE  084F               	movf	applianceControl@integerSwitchNumber^(0+128),w
  7181  09FF  0020               	movlb	0	; select bank0
  7182  0A00  00D2               	movwf	??_applianceControl
  7183  0A01  35D2               	lslf	??_applianceControl,f
  7184  0A02  0DD3               	rlf	??_applianceControl+1,f
  7185  0A03  35D2               	lslf	??_applianceControl,f
  7186  0A04  0DD3               	rlf	??_applianceControl+1,f
  7187  0A05  0852               	movf	??_applianceControl,w
  7188  0A06  3EFC               	addlw	252
  7189  0A07  0021               	movlb	1	; select bank1
  7190  0A08  00D1               	movwf	applianceControl@currentStateBufferPositions^(0+128)
  7191  0A09  30FF               	movlw	255
  7192  0A0A  0020               	movlb	0	; select bank0
  7193  0A0B  3D53               	addwfc	??_applianceControl+1,w
  7194  0A0C  0021               	movlb	1	; select bank1
  7195  0A0D  00D2               	movwf	(applianceControl@currentStateBufferPositions+1)^(0+128)
  7196                           
  7197                           ;applicationcontrol.h: 59: currentStateBuffer[currentStateBufferPositions++] = 'G';
  7198  0A0E  3047               	movlw	71
  7199  0A0F  0020               	movlb	0	; select bank0
  7200  0A10  00D2               	movwf	??_applianceControl
  7201  0A11  0021               	movlb	1	; select bank1
  7202  0A12  0851               	movf	applianceControl@currentStateBufferPositions^(0+128),w
  7203  0A13  3EA0               	addlw	(low (_currentStateBuffer| (0+512)))& (0+255)
  7204  0A14  0086               	movwf	6
  7205  0A15  3002               	movlw	2	; select bank5/6
  7206  0A16  0087               	movwf	7
  7207  0A17  0020               	movlb	0	; select bank0
  7208  0A18  0852               	movf	??_applianceControl,w
  7209  0A19  0081               	movwf	1
  7210  0A1A  3001               	movlw	1
  7211  0A1B  0021               	movlb	1	; select bank1
  7212  0A1C  07D1               	addwf	applianceControl@currentStateBufferPositions^(0+128),f
  7213  0A1D  3000               	movlw	0
  7214  0A1E  3DD2               	addwfc	(applianceControl@currentStateBufferPositions+1)^(0+128),f
  7215                           
  7216                           ;applicationcontrol.h: 60: currentStateBuffer[currentStateBufferPositions++] = charSwitc
      +                          hSTATE;
  7217  0A1F  0020               	movlb	0	; select bank0
  7218  0A20  084D               	movf	applianceControl@charSwitchSTATE,w
  7219  0A21  00D2               	movwf	??_applianceControl
  7220  0A22  0021               	movlb	1	; select bank1
  7221  0A23  0851               	movf	applianceControl@currentStateBufferPositions^(0+128),w
  7222  0A24  3EA0               	addlw	(low (_currentStateBuffer| (0+512)))& (0+255)
  7223  0A25  0086               	movwf	6
  7224  0A26  3002               	movlw	2	; select bank5/6
  7225  0A27  0087               	movwf	7
  7226  0A28  0020               	movlb	0	; select bank0
  7227  0A29  0852               	movf	??_applianceControl,w
  7228  0A2A  0081               	movwf	1
  7229  0A2B  3001               	movlw	1
  7230  0A2C  0021               	movlb	1	; select bank1
  7231  0A2D  07D1               	addwf	applianceControl@currentStateBufferPositions^(0+128),f
  7232  0A2E  3000               	movlw	0
  7233  0A2F  3DD2               	addwfc	(applianceControl@currentStateBufferPositions+1)^(0+128),f
  7234                           
  7235                           ;applicationcontrol.h: 61: currentStateBuffer[currentStateBufferPositions++] = charSwitc
      +                          hMSB;
  7236  0A30  0847               	movf	applianceControl@charSwitchMSB^(0+128),w
  7237  0A31  0020               	movlb	0	; select bank0
  7238  0A32  00D2               	movwf	??_applianceControl
  7239  0A33  0021               	movlb	1	; select bank1
  7240  0A34  0851               	movf	applianceControl@currentStateBufferPositions^(0+128),w
  7241  0A35  3EA0               	addlw	(low (_currentStateBuffer| (0+512)))& (0+255)
  7242  0A36  0086               	movwf	6
  7243  0A37  3002               	movlw	2	; select bank5/6
  7244  0A38  0087               	movwf	7
  7245  0A39  0020               	movlb	0	; select bank0
  7246  0A3A  0852               	movf	??_applianceControl,w
  7247  0A3B  0081               	movwf	1
  7248  0A3C  3001               	movlw	1
  7249  0A3D  0021               	movlb	1	; select bank1
  7250  0A3E  07D1               	addwf	applianceControl@currentStateBufferPositions^(0+128),f
  7251  0A3F  3000               	movlw	0
  7252  0A40  3DD2               	addwfc	(applianceControl@currentStateBufferPositions+1)^(0+128),f
  7253                           
  7254                           ;applicationcontrol.h: 62: currentStateBuffer[currentStateBufferPositions] = charSwitchL
      +                          SB;
  7255  0A41  0020               	movlb	0	; select bank0
  7256  0A42  084C               	movf	applianceControl@charSwitchLSB,w
  7257  0A43  00D2               	movwf	??_applianceControl
  7258  0A44  0021               	movlb	1	; select bank1
  7259  0A45  0851               	movf	applianceControl@currentStateBufferPositions^(0+128),w
  7260  0A46  3EA0               	addlw	(low (_currentStateBuffer| (0+512)))& (0+255)
  7261  0A47  0086               	movwf	6
  7262  0A48  3002               	movlw	2	; select bank5/6
  7263  0A49  0087               	movwf	7
  7264  0A4A  0020               	movlb	0	; select bank0
  7265  0A4B  0852               	movf	??_applianceControl,w
  7266  0A4C  0081               	movwf	1
  7267                           
  7268                           ;applicationcontrol.h: 64: currentStateBufferPositions-=3;
  7269  0A4D  30FD               	movlw	253
  7270  0A4E  0021               	movlb	1	; select bank1
  7271  0A4F  07D1               	addwf	applianceControl@currentStateBufferPositions^(0+128),f
  7272  0A50  30FF               	movlw	255
  7273  0A51  3DD2               	addwfc	(applianceControl@currentStateBufferPositions+1)^(0+128),f
  7274                           
  7275                           ;applicationcontrol.h: 65: if(charFinalFrameState == '1')
  7276  0A52  3031               	movlw	49
  7277  0A53  0020               	movlb	0	; select bank0
  7278  0A54  0651               	xorwf	applianceControl@charFinalFrameState,w
  7279  0A55  1D03               	btfss	3,2
  7280  0A56  2ACA               	goto	l5549
  7281                           
  7282                           ;applicationcontrol.h: 66: {
  7283                           ;applicationcontrol.h: 67: sendAcknowledgment(currentStateBuffer+currentStateBufferPosit
      +                          ions);
  7284  0A57  0021               	movlb	1	; select bank1
  7285  0A58  0851               	movf	applianceControl@currentStateBufferPositions^(0+128),w
  7286  0A59  3EA0               	addlw	(low (_currentStateBuffer| (0+512)))& (0+255)
  7287  0A5A  3191  21AE  3188   	fcall	_sendAcknowledgment
  7288                           
  7289                           ;applicationcontrol.h: 68: }
  7290                           ;applicationcontrol.h: 70: switch(integerSwitchNumber){
  7291  0A5D  2ACA               	goto	l5549
  7292  0A5E                     l5523:	
  7293                           ;applicationcontrol.h: 71: case 1:
  7294                           
  7295                           
  7296                           ;applicationcontrol.h: 72: {
  7297                           ;applicationcontrol.h: 73: PORTEbits.RE0 = integerSwitchState;
  7298  0A5E  0021               	movlb	1	; select bank1
  7299  0A5F  0C53               	rrf	applianceControl@integerSwitchState^(0+128),w
  7300  0A60  0020               	movlb	0	; select bank0
  7301  0A61  1C03               	skipc
  7302  0A62  1010               	bcf	16,0	;volatile
  7303  0A63  1803               	skipnc
  7304  0A64  1410               	bsf	16,0	;volatile
  7305                           
  7306                           ;applicationcontrol.h: 74: }break;
  7307  0A65  0008               	return
  7308  0A66                     l5525:	
  7309                           ;applicationcontrol.h: 76: case 2:
  7310                           
  7311                           
  7312                           ;applicationcontrol.h: 77: {
  7313                           ;applicationcontrol.h: 78: PORTEbits.RE1 = integerSwitchState;
  7314  0A66  0021               	movlb	1	; select bank1
  7315  0A67  0C53               	rrf	applianceControl@integerSwitchState^(0+128),w
  7316  0A68  0020               	movlb	0	; select bank0
  7317  0A69  1C03               	skipc
  7318  0A6A  1090               	bcf	16,1	;volatile
  7319  0A6B  1803               	skipnc
  7320  0A6C  1490               	bsf	16,1	;volatile
  7321                           
  7322                           ;applicationcontrol.h: 80: } break;
  7323  0A6D  0008               	return
  7324  0A6E                     l5527:	
  7325                           ;applicationcontrol.h: 81: case 3:
  7326                           
  7327                           
  7328                           ;applicationcontrol.h: 82: {
  7329                           ;applicationcontrol.h: 83: PORTGbits.RG0 = integerSwitchState;
  7330  0A6E  0021               	movlb	1	; select bank1
  7331  0A6F  0C53               	rrf	applianceControl@integerSwitchState^(0+128),w
  7332  0A70  0025               	movlb	5	; select bank5
  7333  0A71  1C03               	skipc
  7334  0A72  100D               	bcf	13,0	;volatile
  7335  0A73  1803               	skipnc
  7336  0A74  140D               	bsf	13,0	;volatile
  7337                           
  7338                           ;applicationcontrol.h: 85: } break;
  7339  0A75  0008               	return
  7340  0A76                     l5529:	
  7341                           ;applicationcontrol.h: 87: case 4:
  7342                           
  7343                           
  7344                           ;applicationcontrol.h: 88: {
  7345                           ;applicationcontrol.h: 89: PORTGbits.RG3 = integerSwitchState;
  7346  0A76  0021               	movlb	1	; select bank1
  7347  0A77  0C53               	rrf	applianceControl@integerSwitchState^(0+128),w
  7348  0A78  0025               	movlb	5	; select bank5
  7349  0A79  1C03               	skipc
  7350  0A7A  118D               	bcf	13,3	;volatile
  7351  0A7B  1803               	skipnc
  7352  0A7C  158D               	bsf	13,3	;volatile
  7353                           
  7354                           ;applicationcontrol.h: 90: }break;
  7355  0A7D  0008               	return
  7356  0A7E                     l5531:	
  7357                           ;applicationcontrol.h: 91: case 5:
  7358                           
  7359                           
  7360                           ;applicationcontrol.h: 92: {
  7361                           ;applicationcontrol.h: 93: PORTGbits.RG4 = integerSwitchState;
  7362  0A7E  0021               	movlb	1	; select bank1
  7363  0A7F  0C53               	rrf	applianceControl@integerSwitchState^(0+128),w
  7364  0A80  0025               	movlb	5	; select bank5
  7365  0A81  1C03               	skipc
  7366  0A82  120D               	bcf	13,4	;volatile
  7367  0A83  1803               	skipnc
  7368  0A84  160D               	bsf	13,4	;volatile
  7369                           
  7370                           ;applicationcontrol.h: 94: }break;
  7371  0A85  0008               	return
  7372  0A86                     l5533:	
  7373                           ;applicationcontrol.h: 95: case 6:
  7374                           
  7375                           
  7376                           ;applicationcontrol.h: 96: {
  7377                           ;applicationcontrol.h: 97: PORTFbits.RF6 = integerSwitchState;
  7378  0A86  0021               	movlb	1	; select bank1
  7379  0A87  0C53               	rrf	applianceControl@integerSwitchState^(0+128),w
  7380  0A88  0025               	movlb	5	; select bank5
  7381  0A89  1C03               	skipc
  7382  0A8A  130C               	bcf	12,6	;volatile
  7383  0A8B  1803               	skipnc
  7384  0A8C  170C               	bsf	12,6	;volatile
  7385                           
  7386                           ;applicationcontrol.h: 98: }break;
  7387  0A8D  0008               	return
  7388  0A8E                     l5535:	
  7389                           ;applicationcontrol.h: 100: case 7:
  7390                           
  7391                           
  7392                           ;applicationcontrol.h: 101: {
  7393                           ;applicationcontrol.h: 102: PORTFbits.RF5 = integerSwitchState;
  7394  0A8E  0021               	movlb	1	; select bank1
  7395  0A8F  0C53               	rrf	applianceControl@integerSwitchState^(0+128),w
  7396  0A90  0025               	movlb	5	; select bank5
  7397  0A91  1C03               	skipc
  7398  0A92  128C               	bcf	12,5	;volatile
  7399  0A93  1803               	skipnc
  7400  0A94  168C               	bsf	12,5	;volatile
  7401                           
  7402                           ;applicationcontrol.h: 103: }break;
  7403  0A95  0008               	return
  7404  0A96                     l5537:	
  7405                           ;applicationcontrol.h: 105: case 8:
  7406                           
  7407                           
  7408                           ;applicationcontrol.h: 106: {
  7409                           ;applicationcontrol.h: 107: PORTFbits.RF4 = integerSwitchState;
  7410  0A96  0021               	movlb	1	; select bank1
  7411  0A97  0C53               	rrf	applianceControl@integerSwitchState^(0+128),w
  7412  0A98  0025               	movlb	5	; select bank5
  7413  0A99  1C03               	skipc
  7414  0A9A  120C               	bcf	12,4	;volatile
  7415  0A9B  1803               	skipnc
  7416  0A9C  160C               	bsf	12,4	;volatile
  7417                           
  7418                           ;applicationcontrol.h: 108: }break;
  7419  0A9D  0008               	return
  7420  0A9E                     l5539:	
  7421                           ;applicationcontrol.h: 109: case 10:{
  7422                           
  7423                           
  7424                           ;applicationcontrol.h: 110: start_PWM_Generation_For_DIMMER = integerSwitchState;
  7425  0A9E  0021               	movlb	1	; select bank1
  7426  0A9F  0854               	movf	(applianceControl@integerSwitchState+1)^(0+128),w
  7427  0AA0  0022               	movlb	2	; select bank2
  7428  0AA1  00CF               	movwf	(_start_PWM_Generation_For_DIMMER+1)^(0+256)
  7429  0AA2  0021               	movlb	1	; select bank1
  7430  0AA3  0853               	movf	applianceControl@integerSwitchState^(0+128),w
  7431  0AA4  0022               	movlb	2	; select bank2
  7432  0AA5  00CE               	movwf	_start_PWM_Generation_For_DIMMER^(0+256)
  7433                           
  7434                           ;applicationcontrol.h: 111: switch(integerSwitchState){
  7435  0AA6  2ABB               	goto	l5545
  7436  0AA7                     l450:	
  7437                           ;applicationcontrol.h: 112: case 0:
  7438                           
  7439                           
  7440                           ;applicationcontrol.h: 113: PORTFbits.RF3 = 0;
  7441  0AA7  0025               	movlb	5	; select bank5
  7442  0AA8  118C               	bcf	12,3	;volatile
  7443                           
  7444                           ;applicationcontrol.h: 114: break;
  7445  0AA9  0008               	return
  7446  0AAA                     l5541:	
  7447                           ;applicationcontrol.h: 115: case 1:
  7448                           
  7449                           
  7450                           ;applicationcontrol.h: 116: Timer8HL = hexadecimalToDecimal(strD);
  7451  0AAA  30A8               	movlw	(low (applianceControl@strD| 0))& (0+255)
  7452  0AAB  3194  24E7         	fcall	_hexadecimalToDecimal
  7453  0AAD  0020               	movlb	0	; select bank0
  7454  0AAE  0826               	movf	?_hexadecimalToDecimal,w
  7455  0AAF  0023               	movlb	3	; select bank3
  7456  0AB0  00A0               	movwf	_Timer8HL^(0+384)
  7457  0AB1  0020               	movlb	0	; select bank0
  7458  0AB2  0827               	movf	?_hexadecimalToDecimal+1,w
  7459  0AB3  0023               	movlb	3	; select bank3
  7460  0AB4  00A1               	movwf	(_Timer8HL+1)^(0+384)
  7461  0AB5  0D89               	rlf	9,f
  7462  0AB6  3B89               	subwfb	9,f
  7463  0AB7  0989               	comf	9,f
  7464  0AB8  00A2               	movwf	(_Timer8HL+2)^(0+384)
  7465  0AB9  00A3               	movwf	(_Timer8HL+3)^(0+384)
  7466                           
  7467                           ;applicationcontrol.h: 120: }
  7468                           
  7469                           ;applicationcontrol.h: 119: break;
  7470                           
  7471                           ;applicationcontrol.h: 118: default:
  7472                           
  7473                           ;applicationcontrol.h: 117: break;
  7474  0ABA  0008               	return
  7475  0ABB                     l5545:	
  7476                           
  7477                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7478                           ; Switch size 1, requested type "space"
  7479                           ; Number of cases is 1, Range of values is 0 to 0
  7480                           ; switch strategies available:
  7481                           ; Name         Instructions Cycles
  7482                           ; simple_byte            4     3 (average)
  7483                           ; direct_byte            8     6 (fixed)
  7484                           ; jumptable            260     6 (fixed)
  7485                           ;	Chosen strategy is simple_byte
  7486  0ABB  0021               	movlb	1	; select bank1
  7487  0ABC  0854               	movf	(applianceControl@integerSwitchState+1)^(0+128),w
  7488  0ABD  3A00               	xorlw	0	; case 0
  7489  0ABE  1903               	skipnz
  7490  0ABF  2AC1               	goto	l6499
  7491  0AC0  2AED               	goto	l455
  7492  0AC1                     l6499:	
  7493                           
  7494                           ; Switch size 1, requested type "space"
  7495                           ; Number of cases is 2, Range of values is 0 to 1
  7496                           ; switch strategies available:
  7497                           ; Name         Instructions Cycles
  7498                           ; simple_byte            7     4 (average)
  7499                           ; direct_byte           10     6 (fixed)
  7500                           ; jumptable            260     6 (fixed)
  7501                           ;	Chosen strategy is simple_byte
  7502  0AC1  0853               	movf	applianceControl@integerSwitchState^(0+128),w
  7503  0AC2  3A00               	xorlw	0	; case 0
  7504  0AC3  1903               	skipnz
  7505  0AC4  2AA7               	goto	l450
  7506  0AC5  3A01               	xorlw	1	; case 1
  7507  0AC6  1903               	skipnz
  7508  0AC7  2AAA               	goto	l5541
  7509  0AC8  2AED               	goto	l455
  7510                           
  7511                           ;applicationcontrol.h: 124: }
  7512                           
  7513                           ;applicationcontrol.h: 123: break;
  7514                           
  7515                           ;applicationcontrol.h: 122: default:
  7516                           
  7517                           ;applicationcontrol.h: 121: }break;
  7518  0AC9  0008               	return
  7519  0ACA                     l5549:	
  7520                           
  7521                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7522                           ; Switch size 1, requested type "space"
  7523                           ; Number of cases is 1, Range of values is 0 to 0
  7524                           ; switch strategies available:
  7525                           ; Name         Instructions Cycles
  7526                           ; simple_byte            4     3 (average)
  7527                           ; direct_byte            8     6 (fixed)
  7528                           ; jumptable            260     6 (fixed)
  7529                           ;	Chosen strategy is simple_byte
  7530  0ACA  0021               	movlb	1	; select bank1
  7531  0ACB  0850               	movf	(applianceControl@integerSwitchNumber+1)^(0+128),w
  7532  0ACC  3A00               	xorlw	0	; case 0
  7533  0ACD  1903               	skipnz
  7534  0ACE  2AD0               	goto	l6501
  7535  0ACF  2AED               	goto	l455
  7536  0AD0                     l6501:	
  7537                           
  7538                           ; Switch size 1, requested type "space"
  7539                           ; Number of cases is 9, Range of values is 1 to 10
  7540                           ; switch strategies available:
  7541                           ; Name         Instructions Cycles
  7542                           ; simple_byte           28    15 (average)
  7543                           ; direct_byte           29     9 (fixed)
  7544                           ; jumptable            263     9 (fixed)
  7545                           ;	Chosen strategy is simple_byte
  7546  0AD0  084F               	movf	applianceControl@integerSwitchNumber^(0+128),w
  7547  0AD1  3A01               	xorlw	1	; case 1
  7548  0AD2  1903               	skipnz
  7549  0AD3  2A5E               	goto	l5523
  7550  0AD4  3A03               	xorlw	3	; case 2
  7551  0AD5  1903               	skipnz
  7552  0AD6  2A66               	goto	l5525
  7553  0AD7  3A01               	xorlw	1	; case 3
  7554  0AD8  1903               	skipnz
  7555  0AD9  2A6E               	goto	l5527
  7556  0ADA  3A07               	xorlw	7	; case 4
  7557  0ADB  1903               	skipnz
  7558  0ADC  2A76               	goto	l5529
  7559  0ADD  3A01               	xorlw	1	; case 5
  7560  0ADE  1903               	skipnz
  7561  0ADF  2A7E               	goto	l5531
  7562  0AE0  3A03               	xorlw	3	; case 6
  7563  0AE1  1903               	skipnz
  7564  0AE2  2A86               	goto	l5533
  7565  0AE3  3A01               	xorlw	1	; case 7
  7566  0AE4  1903               	skipnz
  7567  0AE5  2A8E               	goto	l5535
  7568  0AE6  3A0F               	xorlw	15	; case 8
  7569  0AE7  1903               	skipnz
  7570  0AE8  2A96               	goto	l5537
  7571  0AE9  3A02               	xorlw	2	; case 10
  7572  0AEA  1903               	skipnz
  7573  0AEB  2A9E               	goto	l5539
  7574  0AEC  2AED               	goto	l455
  7575  0AED                     l455:	
  7576  0AED  0008               	return
  7577  0AEE                     __end_of_applianceControl:	
  7578                           
  7579                           	psect	text15
  7580  113B                     __ptext15:	
  7581 ;; *************** function _strcpy *****************
  7582 ;; Defined at:
  7583 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  7584 ;; Parameters:    Size  Location     Type
  7585 ;;  to              2    0[BANK0 ] PTR unsigned char 
  7586 ;;		 -> sendFinalBufferToGAteway(46), applianceControl@strD(6), 
  7587 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  7588 ;;		 -> mainReceivedDataBuffer(18), applianceControl@HexlevelBuffer(5), NULL(0), 
  7589 ;; Auto vars:     Size  Location     Type
  7590 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  7591 ;;		 -> sendFinalBufferToGAteway(46), applianceControl@strD(6), 
  7592 ;; Return value:  Size  Location     Type
  7593 ;;                  2    0[BANK0 ] PTR unsigned char 
  7594 ;; Registers used:
  7595 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h
  7596 ;; Tracked objects:
  7597 ;;		On entry : 0/0
  7598 ;;		On exit  : 0/0
  7599 ;;		Unchanged: 0/0
  7600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7601 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  7602 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  7603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  7604 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  7605 ;;Total ram usage:        6 bytes
  7606 ;; Hardware stack levels used:    1
  7607 ;; Hardware stack levels required when called:    2
  7608 ;; This function calls:
  7609 ;;		Nothing
  7610 ;; This function is called by:
  7611 ;;		_applianceControl
  7612 ;;		_applicationControlRGB
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           
  7617                           ;psect for function _strcpy
  7618  113B                     _strcpy:	
  7619                           
  7620                           ;incstack = 0
  7621                           ; Regs used in _strcpy: [wreg-fsr1h]
  7622  113B  0020               	movlb	0	; select bank0
  7623  113C  0821               	movf	strcpy@to+1,w
  7624  113D  00A5               	movwf	strcpy@cp+1
  7625  113E  0820               	movf	strcpy@to,w
  7626  113F  00A4               	movwf	strcpy@cp
  7627  1140                     l5051:	
  7628  1140  0824               	movf	strcpy@cp,w
  7629  1141  0086               	movwf	6
  7630  1142  0825               	movf	strcpy@cp+1,w
  7631  1143  0087               	movwf	7
  7632  1144  0822               	movf	strcpy@from,w
  7633  1145  0084               	movwf	4
  7634  1146  0823               	movf	strcpy@from+1,w
  7635  1147  0085               	movwf	5
  7636  1148  0800               	movf	0,w
  7637  1149  3FC0               	movwi [0]fsr1
  7638  114A  0889               	movf	9,f
  7639  114B  1903               	btfsc	3,2
  7640  114C  0008               	return
  7641  114D  3001               	movlw	1
  7642  114E  07A4               	addwf	strcpy@cp,f
  7643  114F  3000               	movlw	0
  7644  1150  3DA5               	addwfc	strcpy@cp+1,f
  7645  1151  3001               	movlw	1
  7646  1152  07A2               	addwf	strcpy@from,f
  7647  1153  3000               	movlw	0
  7648  1154  3DA3               	addwfc	strcpy@from+1,f
  7649  1155  2940               	goto	l5051
  7650  1156                     __end_of_strcpy:	
  7651                           ;	Return value of _strcpy is never used
  7652                           
  7653                           
  7654                           	psect	text16
  7655  1699                     __ptext16:	
  7656 ;; *************** function _sprintf *****************
  7657 ;; Defined at:
  7658 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  7659 ;; Parameters:    Size  Location     Type
  7660 ;;  sp              1    wreg     PTR unsigned char 
  7661 ;;		 -> applicationControlRGB@HexlevelBuffer(5), applianceControl@HexlevelBuffer(5), 
  7662 ;;  f               2    8[BANK0 ] PTR const unsigned char 
  7663 ;;		 -> STR_13(3), STR_12(3), STR_11(3), STR_1(3), 
  7664 ;; Auto vars:     Size  Location     Type
  7665 ;;  sp              1   24[BANK0 ] PTR unsigned char 
  7666 ;;		 -> applicationControlRGB@HexlevelBuffer(5), applianceControl@HexlevelBuffer(5), 
  7667 ;;  idx             1   19[BANK0 ] unsigned char 
  7668 ;;  tmpval          4    0        struct .
  7669 ;;  val             2   21[BANK0 ] unsigned int 
  7670 ;;  cp              2    0        PTR const unsigned char 
  7671 ;;  len             2    0        unsigned int 
  7672 ;;  c               1   25[BANK0 ] char 
  7673 ;;  prec            1   23[BANK0 ] char 
  7674 ;;  ap              1   20[BANK0 ] PTR void [1]
  7675 ;;		 -> ?_sprintf(2), 
  7676 ;;  flag            1   18[BANK0 ] unsigned char 
  7677 ;; Return value:  Size  Location     Type
  7678 ;;                  2    8[BANK0 ] int 
  7679 ;; Registers used:
  7680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7681 ;; Tracked objects:
  7682 ;;		On entry : 0/0
  7683 ;;		On exit  : 0/0
  7684 ;;		Unchanged: 0/0
  7685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7686 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  7687 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0
  7688 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0
  7689 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0
  7690 ;;Total ram usage:       18 bytes
  7691 ;; Hardware stack levels used:    1
  7692 ;; Hardware stack levels required when called:    3
  7693 ;; This function calls:
  7694 ;;		___lwdiv
  7695 ;; This function is called by:
  7696 ;;		_applianceControl
  7697 ;;		_applicationControlRGB
  7698 ;; This function uses a non-reentrant model
  7699 ;;
  7700                           
  7701                           
  7702                           ;psect for function _sprintf
  7703  1699                     _sprintf:	
  7704                           
  7705                           ;incstack = 0
  7706                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7707                           ;sprintf@sp stored from wreg
  7708  1699  0020               	movlb	0	; select bank0
  7709  169A  00B8               	movwf	sprintf@sp
  7710                           
  7711                           ;doprnt.c: 494: va_list ap;
  7712                           ;doprnt.c: 499: signed char c;
  7713                           ;doprnt.c: 506: signed char prec;
  7714                           ;doprnt.c: 508: unsigned char flag;
  7715                           ;doprnt.c: 523: union {
  7716                           ;doprnt.c: 524: unsigned long vd;
  7717                           ;doprnt.c: 525: double integ;
  7718                           ;doprnt.c: 526: } tmpval;
  7719                           ;doprnt.c: 528: unsigned int val;
  7720                           ;doprnt.c: 529: unsigned len;
  7721                           ;doprnt.c: 530: const char * cp;
  7722                           ;doprnt.c: 533: *ap = __va_start();
  7723  169B  302A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  7724  169C  00AE               	movwf	??_sprintf
  7725  169D  082E               	movf	??_sprintf,w
  7726  169E  00B4               	movwf	sprintf@ap
  7727  169F                     l5041:	
  7728                           ;doprnt.c: 536: while(c = *f++) {
  7729                           
  7730  169F  0829               	movf	sprintf@f+1,w
  7731  16A0  00AF               	movwf	??_sprintf+1
  7732  16A1  0828               	movf	sprintf@f,w
  7733  16A2  00AE               	movwf	??_sprintf
  7734  16A3  0AA8               	incf	sprintf@f,f
  7735  16A4  1903               	skipnz
  7736  16A5  0AA9               	incf	sprintf@f+1,f
  7737  16A6  082E               	movf	??_sprintf,w
  7738  16A7  0084               	movwf	4
  7739  16A8  082F               	movf	??_sprintf+1,w
  7740  16A9  0085               	movwf	5
  7741  16AA  0800               	movf	0,w	;code access
  7742  16AB  00B0               	movwf	??_sprintf+2
  7743  16AC  0830               	movf	??_sprintf+2,w
  7744  16AD  00B9               	movwf	sprintf@c
  7745  16AE  0839               	movf	sprintf@c,w
  7746  16AF  1903               	btfsc	3,2
  7747  16B0  2F47               	goto	l5043
  7748                           
  7749                           ;doprnt.c: 538: if(c != '%')
  7750  16B1  3025               	movlw	37
  7751  16B2  0639               	xorwf	sprintf@c,w
  7752  16B3  1903               	btfsc	3,2
  7753  16B4  2EC1               	goto	l5007
  7754                           
  7755                           ;doprnt.c: 540: {
  7756                           ;doprnt.c: 541: ((*sp++ = (c)));
  7757  16B5  0839               	movf	sprintf@c,w
  7758  16B6  00AE               	movwf	??_sprintf
  7759  16B7  0838               	movf	sprintf@sp,w
  7760  16B8  0086               	movwf	6
  7761  16B9  0187               	clrf	7
  7762  16BA  082E               	movf	??_sprintf,w
  7763  16BB  0081               	movwf	1
  7764  16BC  3001               	movlw	1
  7765  16BD  00AE               	movwf	??_sprintf
  7766  16BE  082E               	movf	??_sprintf,w
  7767  16BF  07B8               	addwf	sprintf@sp,f
  7768                           
  7769                           ;doprnt.c: 542: continue;
  7770  16C0  2E9F               	goto	l5041
  7771  16C1                     l5007:	
  7772                           
  7773                           ;doprnt.c: 543: }
  7774                           ;doprnt.c: 548: flag = 0;
  7775  16C1  01B2               	clrf	sprintf@flag
  7776                           
  7777                           ;doprnt.c: 822: }
  7778                           
  7779                           ;doprnt.c: 813: continue;
  7780                           
  7781                           ;doprnt.c: 802: default:
  7782                           
  7783                           ;doprnt.c: 718: case 'x':
  7784                           ;doprnt.c: 723: break;
  7785                           
  7786                           ;doprnt.c: 712: case 'X':
  7787                           
  7788                           ;doprnt.c: 638: goto alldone;
  7789                           
  7790                           ;doprnt.c: 637: case 0:
  7791                           
  7792                           ;doprnt.c: 635: switch(c = *f++) {
  7793  16C2  0829               	movf	sprintf@f+1,w
  7794  16C3  00AF               	movwf	??_sprintf+1
  7795  16C4  0828               	movf	sprintf@f,w
  7796  16C5  00AE               	movwf	??_sprintf
  7797  16C6  0AA8               	incf	sprintf@f,f
  7798  16C7  1903               	skipnz
  7799  16C8  0AA9               	incf	sprintf@f+1,f
  7800  16C9  082E               	movf	??_sprintf,w
  7801  16CA  0084               	movwf	4
  7802  16CB  082F               	movf	??_sprintf+1,w
  7803  16CC  0085               	movwf	5
  7804  16CD  0800               	movf	0,w	;code access
  7805  16CE  00B9               	movwf	sprintf@c
  7806                           
  7807                           ; Switch size 1, requested type "space"
  7808                           ; Number of cases is 3, Range of values is 0 to 120
  7809                           ; switch strategies available:
  7810                           ; Name         Instructions Cycles
  7811                           ; simple_byte           10     6 (average)
  7812                           ; direct_byte          248     6 (fixed)
  7813                           ; jumptable            260     6 (fixed)
  7814                           ;	Chosen strategy is simple_byte
  7815  16CF  3A00               	xorlw	0	; case 0
  7816  16D0  1903               	skipnz
  7817  16D1  2F47               	goto	l5043
  7818  16D2  3A58               	xorlw	88	; case 88
  7819  16D3  1903               	skipnz
  7820  16D4  2ED9               	goto	l5013
  7821  16D5  3A20               	xorlw	32	; case 120
  7822  16D6  1903               	skipnz
  7823  16D7  2ED9               	goto	l5013
  7824  16D8  2E9F               	goto	l5041
  7825  16D9                     l5013:	
  7826                           
  7827                           ;doprnt.c: 1273: {
  7828                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7829  16D9  0834               	movf	sprintf@ap,w
  7830  16DA  0086               	movwf	6
  7831  16DB  0187               	clrf	7
  7832  16DC  3F40               	moviw [0]fsr1
  7833  16DD  00B5               	movwf	sprintf@val
  7834  16DE  3F41               	moviw [1]fsr1
  7835  16DF  00B6               	movwf	sprintf@val+1
  7836  16E0  3002               	movlw	2
  7837  16E1  00AE               	movwf	??_sprintf
  7838  16E2  082E               	movf	??_sprintf,w
  7839  16E3  07B4               	addwf	sprintf@ap,f
  7840                           
  7841                           ;doprnt.c: 1287: }
  7842                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7843  16E4  01B9               	clrf	sprintf@c
  7844  16E5  0AB9               	incf	sprintf@c,f
  7845  16E6  3004               	movlw	4
  7846  16E7  0639               	xorwf	sprintf@c,w
  7847  16E8  1903               	btfsc	3,2
  7848  16E9  2F09               	goto	l5029
  7849  16EA                     l5023:	
  7850                           
  7851                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7852  16EA  0839               	movf	sprintf@c,w
  7853  16EB  00AE               	movwf	??_sprintf
  7854  16EC  01AF               	clrf	??_sprintf+1
  7855  16ED  35AE               	lslf	??_sprintf,f
  7856  16EE  0DAF               	rlf	??_sprintf+1,f
  7857  16EF  3000               	movlw	low (_hexpowers| (0+32768))
  7858  16F0  072E               	addwf	??_sprintf,w
  7859  16F1  0084               	movwf	4
  7860  16F2  3098               	movlw	high (_hexpowers| (0+32768))
  7861  16F3  3D2F               	addwfc	??_sprintf+1,w
  7862  16F4  0085               	movwf	5
  7863  16F5  3F00               	moviw [0]fsr0
  7864  16F6  00B0               	movwf	??_sprintf+2
  7865  16F7  3F01               	moviw [1]fsr0
  7866  16F8  00B1               	movwf	??_sprintf+3
  7867  16F9  0831               	movf	??_sprintf+3,w
  7868  16FA  0236               	subwf	sprintf@val+1,w
  7869  16FB  1D03               	skipz
  7870  16FC  2EFF               	goto	u5135
  7871  16FD  0830               	movf	??_sprintf+2,w
  7872  16FE  0235               	subwf	sprintf@val,w
  7873  16FF                     u5135:	
  7874  16FF  1C03               	btfss	3,0
  7875  1700  2F09               	goto	l5029
  7876                           
  7877                           ;doprnt.c: 1318: break;
  7878  1701  3001               	movlw	1
  7879  1702  00AE               	movwf	??_sprintf
  7880  1703  082E               	movf	??_sprintf,w
  7881  1704  07B9               	addwf	sprintf@c,f
  7882  1705  3004               	movlw	4
  7883  1706  0639               	xorwf	sprintf@c,w
  7884  1707  1D03               	btfss	3,2
  7885  1708  2EEA               	goto	l5023
  7886  1709                     l5029:	
  7887                           
  7888                           ;doprnt.c: 1422: {
  7889                           ;doprnt.c: 1469: }
  7890                           ;doprnt.c: 1472: prec = c;
  7891  1709  0839               	movf	sprintf@c,w
  7892  170A  00AE               	movwf	??_sprintf
  7893  170B  082E               	movf	??_sprintf,w
  7894  170C  00B7               	movwf	sprintf@prec
  7895  170D                     l5039:	
  7896                           ;doprnt.c: 1474: while(prec--) {
  7897                           
  7898  170D  30FF               	movlw	255
  7899  170E  00AE               	movwf	??_sprintf
  7900  170F  082E               	movf	??_sprintf,w
  7901  1710  07B7               	addwf	sprintf@prec,f
  7902  1711  0A37               	incf	sprintf@prec,w
  7903  1712  1903               	btfsc	3,2
  7904  1713  2E9F               	goto	l5041
  7905                           
  7906                           ;doprnt.c: 1478: {
  7907                           ;doprnt.c: 1499: {
  7908                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7909  1714  0837               	movf	sprintf@prec,w
  7910  1715  00AE               	movwf	??_sprintf
  7911  1716  01AF               	clrf	??_sprintf+1
  7912  1717  35AE               	lslf	??_sprintf,f
  7913  1718  0DAF               	rlf	??_sprintf+1,f
  7914  1719  3000               	movlw	low (_hexpowers| (0+32768))
  7915  171A  072E               	addwf	??_sprintf,w
  7916  171B  0084               	movwf	4
  7917  171C  3098               	movlw	high (_hexpowers| (0+32768))
  7918  171D  3D2F               	addwfc	??_sprintf+1,w
  7919  171E  0085               	movwf	5
  7920  171F  3F00               	moviw [0]fsr0
  7921  1720  00A0               	movwf	___lwdiv@divisor
  7922  1721  3F01               	moviw [1]fsr0
  7923  1722  00A1               	movwf	___lwdiv@divisor+1
  7924  1723  0836               	movf	sprintf@val+1,w
  7925  1724  00A3               	movwf	___lwdiv@dividend+1
  7926  1725  0835               	movf	sprintf@val,w
  7927  1726  00A2               	movwf	___lwdiv@dividend
  7928  1727  3193  23DC  3196   	fcall	___lwdiv
  7929  172A  0020               	movlb	0	; select bank0
  7930  172B  0820               	movf	?___lwdiv,w
  7931  172C  390F               	andlw	15
  7932  172D  00B0               	movwf	??_sprintf+2
  7933  172E  0830               	movf	??_sprintf+2,w
  7934  172F  00B3               	movwf	sprintf@idx
  7935                           
  7936                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  7937  1730  0833               	movf	sprintf@idx,w
  7938  1731  3E08               	addlw	low (STR_20| (0+32768))
  7939  1732  0084               	movwf	4
  7940  1733  3098               	movlw	high (STR_20| (0+32768))
  7941  1734  1803               	skipnc
  7942  1735  3E01               	addlw	1
  7943  1736  0085               	movwf	5
  7944  1737  0800               	movf	0,w	;code access
  7945  1738  00AE               	movwf	??_sprintf
  7946  1739  082E               	movf	??_sprintf,w
  7947  173A  00B9               	movwf	sprintf@c
  7948                           
  7949                           ;doprnt.c: 1508: }
  7950                           ;doprnt.c: 1523: }
  7951                           ;doprnt.c: 1524: ((*sp++ = (c)));
  7952  173B  0839               	movf	sprintf@c,w
  7953  173C  00AE               	movwf	??_sprintf
  7954  173D  0838               	movf	sprintf@sp,w
  7955  173E  0086               	movwf	6
  7956  173F  0187               	clrf	7
  7957  1740  082E               	movf	??_sprintf,w
  7958  1741  0081               	movwf	1
  7959  1742  3001               	movlw	1
  7960  1743  00AE               	movwf	??_sprintf
  7961  1744  082E               	movf	??_sprintf,w
  7962  1745  07B8               	addwf	sprintf@sp,f
  7963  1746  2F0D               	goto	l5039
  7964  1747                     l5043:	
  7965                           ;doprnt.c: 1525: }
  7966                           ;doprnt.c: 1533: }
  7967                           ;doprnt.c: 1535: alldone:
  7968                           
  7969                           
  7970                           ;doprnt.c: 1538: *sp = 0;
  7971  1747  0838               	movf	sprintf@sp,w
  7972  1748  0086               	movwf	6
  7973  1749  0187               	clrf	7
  7974  174A  0181               	clrf	1
  7975  174B  0008               	return
  7976  174C                     __end_of_sprintf:	
  7977                           ;doprnt.c: 1540: return 0;
  7978                           ;	Return value of _sprintf is never used
  7979                           
  7980                           
  7981                           	psect	text17
  7982  13DC                     __ptext17:	
  7983 ;; *************** function ___lwdiv *****************
  7984 ;; Defined at:
  7985 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  7986 ;; Parameters:    Size  Location     Type
  7987 ;;  divisor         2    0[BANK0 ] unsigned int 
  7988 ;;  dividend        2    2[BANK0 ] unsigned int 
  7989 ;; Auto vars:     Size  Location     Type
  7990 ;;  quotient        2    6[BANK0 ] unsigned int 
  7991 ;;  counter         1    5[BANK0 ] unsigned char 
  7992 ;; Return value:  Size  Location     Type
  7993 ;;                  2    0[BANK0 ] unsigned int 
  7994 ;; Registers used:
  7995 ;;		wreg, status,2, status,0
  7996 ;; Tracked objects:
  7997 ;;		On entry : 0/0
  7998 ;;		On exit  : 0/0
  7999 ;;		Unchanged: 0/0
  8000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8001 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  8002 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  8003 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  8004 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0
  8005 ;;Total ram usage:        8 bytes
  8006 ;; Hardware stack levels used:    1
  8007 ;; Hardware stack levels required when called:    2
  8008 ;; This function calls:
  8009 ;;		Nothing
  8010 ;; This function is called by:
  8011 ;;		_sprintf
  8012 ;; This function uses a non-reentrant model
  8013 ;;
  8014                           
  8015                           
  8016                           ;psect for function ___lwdiv
  8017  13DC                     ___lwdiv:	
  8018                           
  8019                           ;incstack = 0
  8020                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8021  13DC  0020               	movlb	0	; select bank0
  8022  13DD  01A6               	clrf	___lwdiv@quotient
  8023  13DE  01A7               	clrf	___lwdiv@quotient+1
  8024  13DF  0820               	movf	___lwdiv@divisor,w
  8025  13E0  0421               	iorwf	___lwdiv@divisor+1,w
  8026  13E1  1903               	btfsc	3,2
  8027  13E2  2C0C               	goto	l4949
  8028  13E3  01A5               	clrf	___lwdiv@counter
  8029  13E4  0AA5               	incf	___lwdiv@counter,f
  8030  13E5                     l4937:	
  8031  13E5  1BA1               	btfsc	___lwdiv@divisor+1,7
  8032  13E6  2BF1               	goto	l4939
  8033  13E7  3001               	movlw	1
  8034  13E8                     u4975:	
  8035  13E8  35A0               	lslf	___lwdiv@divisor,f
  8036  13E9  0DA1               	rlf	___lwdiv@divisor+1,f
  8037  13EA  0B89               	decfsz	9,f
  8038  13EB  2BE8               	goto	u4975
  8039  13EC  3001               	movlw	1
  8040  13ED  00A4               	movwf	??___lwdiv
  8041  13EE  0824               	movf	??___lwdiv,w
  8042  13EF  07A5               	addwf	___lwdiv@counter,f
  8043  13F0  2BE5               	goto	l4937
  8044  13F1                     l4939:	
  8045  13F1  3001               	movlw	1
  8046  13F2                     u4995:	
  8047  13F2  35A6               	lslf	___lwdiv@quotient,f
  8048  13F3  0DA7               	rlf	___lwdiv@quotient+1,f
  8049  13F4  0B89               	decfsz	9,f
  8050  13F5  2BF2               	goto	u4995
  8051  13F6  0821               	movf	___lwdiv@divisor+1,w
  8052  13F7  0223               	subwf	___lwdiv@dividend+1,w
  8053  13F8  1D03               	skipz
  8054  13F9  2BFC               	goto	u5005
  8055  13FA  0820               	movf	___lwdiv@divisor,w
  8056  13FB  0222               	subwf	___lwdiv@dividend,w
  8057  13FC                     u5005:	
  8058  13FC  1C03               	skipc
  8059  13FD  2C03               	goto	l4945
  8060  13FE  0820               	movf	___lwdiv@divisor,w
  8061  13FF  02A2               	subwf	___lwdiv@dividend,f
  8062  1400  0821               	movf	___lwdiv@divisor+1,w
  8063  1401  3BA3               	subwfb	___lwdiv@dividend+1,f
  8064  1402  1426               	bsf	___lwdiv@quotient,0
  8065  1403                     l4945:	
  8066  1403  3001               	movlw	1
  8067  1404                     u5015:	
  8068  1404  36A1               	lsrf	___lwdiv@divisor+1,f
  8069  1405  0CA0               	rrf	___lwdiv@divisor,f
  8070  1406  0B89               	decfsz	9,f
  8071  1407  2C04               	goto	u5015
  8072  1408  3001               	movlw	1
  8073  1409  02A5               	subwf	___lwdiv@counter,f
  8074  140A  1D03               	btfss	3,2
  8075  140B  2BF1               	goto	l4939
  8076  140C                     l4949:	
  8077  140C  0827               	movf	___lwdiv@quotient+1,w
  8078  140D  00A1               	movwf	?___lwdiv+1
  8079  140E  0826               	movf	___lwdiv@quotient,w
  8080  140F  00A0               	movwf	?___lwdiv
  8081  1410  0008               	return
  8082  1411                     __end_of___lwdiv:	
  8083                           
  8084                           	psect	text18
  8085  11AE                     __ptext18:	
  8086 ;; *************** function _sendAcknowledgment *****************
  8087 ;; Defined at:
  8088 ;;		line 1360 in file "main.c"
  8089 ;; Parameters:    Size  Location     Type
  8090 ;;  currentState    1    wreg     PTR unsigned char 
  8091 ;;		 -> sendFinalBufferToGAteway(46), currentStateBuffer(58), 
  8092 ;; Auto vars:     Size  Location     Type
  8093 ;;  currentState    1    3[BANK0 ] PTR unsigned char 
  8094 ;;		 -> sendFinalBufferToGAteway(46), currentStateBuffer(58), 
  8095 ;;  Tx_count        2    1[BANK0 ] int 
  8096 ;; Return value:  Size  Location     Type
  8097 ;;                  1    wreg      void 
  8098 ;; Registers used:
  8099 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8100 ;; Tracked objects:
  8101 ;;		On entry : 0/0
  8102 ;;		On exit  : 0/0
  8103 ;;		Unchanged: 0/0
  8104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  8106 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  8107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  8108 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  8109 ;;Total ram usage:        4 bytes
  8110 ;; Hardware stack levels used:    1
  8111 ;; Hardware stack levels required when called:    2
  8112 ;; This function calls:
  8113 ;;		Nothing
  8114 ;; This function is called by:
  8115 ;;		_applianceControl
  8116 ;;		_applicationControlRGB
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           
  8121                           ;psect for function _sendAcknowledgment
  8122  11AE                     _sendAcknowledgment:	
  8123                           
  8124                           ;incstack = 0
  8125                           ; Regs used in _sendAcknowledgment: [wreg+fsr1l+fsr1h+status,2+status,0]
  8126                           ;sendAcknowledgment@currentStateBuffer stored from wreg
  8127  11AE  0020               	movlb	0	; select bank0
  8128  11AF  00A3               	movwf	sendAcknowledgment@currentStateBuffer
  8129                           
  8130                           ;main.c: 1361: int Tx_count=0;
  8131  11B0  01A1               	clrf	sendAcknowledgment@Tx_count
  8132  11B1  01A2               	clrf	sendAcknowledgment@Tx_count+1
  8133  11B2                     l667:	
  8134                           ;main.c: 1362: while(*currentStateBuffer != (0))
  8135                           
  8136  11B2  0823               	movf	sendAcknowledgment@currentStateBuffer,w
  8137  11B3  0086               	movwf	6
  8138  11B4  3002               	movlw	2	; select bank4/5
  8139  11B5  0087               	movwf	7
  8140  11B6  0801               	movf	1,w
  8141  11B7  1903               	btfsc	3,2
  8142  11B8  0008               	return
  8143  11B9                     l669:	
  8144                           ;main.c: 1363: {
  8145                           ;main.c: 1364: while (!TX1STAbits.TRMT);
  8146                           
  8147  11B9  0023               	movlb	3	; select bank3
  8148  11BA  1C9E               	btfss	30,1	;volatile
  8149  11BB  29B9               	goto	l669
  8150                           
  8151                           ;main.c: 1365: TX1REG = *currentStateBuffer;
  8152  11BC  0020               	movlb	0	; select bank0
  8153  11BD  0823               	movf	sendAcknowledgment@currentStateBuffer,w
  8154  11BE  0086               	movwf	6
  8155  11BF  3002               	movlw	2	; select bank4/5
  8156  11C0  0087               	movwf	7
  8157  11C1  0801               	movf	1,w
  8158  11C2  0023               	movlb	3	; select bank3
  8159  11C3  009A               	movwf	26	;volatile
  8160                           
  8161                           ;main.c: 1366: *currentStateBuffer++;
  8162  11C4  3001               	movlw	1
  8163  11C5  0020               	movlb	0	; select bank0
  8164  11C6  00A0               	movwf	??_sendAcknowledgment
  8165  11C7  0820               	movf	??_sendAcknowledgment,w
  8166  11C8  07A3               	addwf	sendAcknowledgment@currentStateBuffer,f
  8167                           
  8168                           ;main.c: 1367: Tx_count++;
  8169  11C9  3001               	movlw	1
  8170  11CA  07A1               	addwf	sendAcknowledgment@Tx_count,f
  8171  11CB  3000               	movlw	0
  8172  11CC  3DA2               	addwfc	sendAcknowledgment@Tx_count+1,f
  8173  11CD  29B2               	goto	l667
  8174  11CE                     __end_of_sendAcknowledgment:	
  8175                           
  8176                           	psect	text19
  8177  14E7                     __ptext19:	
  8178 ;; *************** function _hexadecimalToDecimal *****************
  8179 ;; Defined at:
  8180 ;;		line 1312 in file "main.c"
  8181 ;; Parameters:    Size  Location     Type
  8182 ;;  hexVal          1    wreg     PTR unsigned char 
  8183 ;;		 -> applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationControlRGB@strGreenL(3), applic
      +ationControlRGB@strGreenH(3), 
  8184 ;;		 -> applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), applianceControl@strD(6), 
  8185 ;; Auto vars:     Size  Location     Type
  8186 ;;  hexVal          1   18[BANK0 ] PTR unsigned char 
  8187 ;;		 -> applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationControlRGB@strGreenL(3), applic
      +ationControlRGB@strGreenH(3), 
  8188 ;;		 -> applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), applianceControl@strD(6), 
  8189 ;;  i               2   16[BANK0 ] int 
  8190 ;;  base            2   14[BANK0 ] int 
  8191 ;;  dec_val         2   12[BANK0 ] int 
  8192 ;;  len             2   10[BANK0 ] int 
  8193 ;; Return value:  Size  Location     Type
  8194 ;;                  2    6[BANK0 ] int 
  8195 ;; Registers used:
  8196 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8197 ;; Tracked objects:
  8198 ;;		On entry : 0/0
  8199 ;;		On exit  : 0/0
  8200 ;;		Unchanged: 0/0
  8201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8202 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  8203 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0
  8204 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  8205 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0
  8206 ;;Total ram usage:       13 bytes
  8207 ;; Hardware stack levels used:    1
  8208 ;; Hardware stack levels required when called:    3
  8209 ;; This function calls:
  8210 ;;		___wmul
  8211 ;;		_strlen
  8212 ;; This function is called by:
  8213 ;;		_applianceControl
  8214 ;;		_applicationControlRGB
  8215 ;; This function uses a non-reentrant model
  8216 ;;
  8217                           
  8218                           
  8219                           ;psect for function _hexadecimalToDecimal
  8220  14E7                     _hexadecimalToDecimal:	
  8221                           
  8222                           ;incstack = 0
  8223                           ; Regs used in _hexadecimalToDecimal: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8224                           ;hexadecimalToDecimal@hexVal stored from wreg
  8225  14E7  0020               	movlb	0	; select bank0
  8226  14E8  00B2               	movwf	hexadecimalToDecimal@hexVal
  8227                           
  8228                           ;main.c: 1314: int len = strlen(hexVal);
  8229  14E9  0832               	movf	hexadecimalToDecimal@hexVal,w
  8230  14EA  00A0               	movwf	strlen@s
  8231  14EB  3000               	movlw	0
  8232  14EC  00A1               	movwf	strlen@s+1
  8233  14ED  3191  218F  3194   	fcall	_strlen
  8234  14F0  0020               	movlb	0	; select bank0
  8235  14F1  0821               	movf	?_strlen+1,w
  8236  14F2  00AB               	movwf	hexadecimalToDecimal@len+1
  8237  14F3  0820               	movf	?_strlen,w
  8238  14F4  00AA               	movwf	hexadecimalToDecimal@len
  8239                           
  8240                           ;main.c: 1317: int base = 1;
  8241  14F5  3001               	movlw	1
  8242  14F6  00AE               	movwf	hexadecimalToDecimal@base
  8243  14F7  3000               	movlw	0
  8244  14F8  00AF               	movwf	hexadecimalToDecimal@base+1
  8245                           
  8246                           ;main.c: 1319: int dec_val = 0;
  8247  14F9  01AC               	clrf	hexadecimalToDecimal@dec_val
  8248  14FA  01AD               	clrf	hexadecimalToDecimal@dec_val+1
  8249                           
  8250                           ;main.c: 1322: for (int i=len-1; i>=0; i--)
  8251  14FB  082A               	movf	hexadecimalToDecimal@len,w
  8252  14FC  3EFF               	addlw	255
  8253  14FD  00B0               	movwf	hexadecimalToDecimal@i
  8254  14FE  30FF               	movlw	255
  8255  14FF  3D2B               	addwfc	hexadecimalToDecimal@len+1,w
  8256  1500  00B1               	movwf	hexadecimalToDecimal@i+1
  8257  1501  1BB1               	btfsc	hexadecimalToDecimal@i+1,7
  8258  1502  2D64               	goto	l5093
  8259  1503                     l5073:	
  8260                           
  8261                           ;main.c: 1323: {
  8262                           ;main.c: 1327: if (hexVal[i]>='0' && hexVal[i]<='9')
  8263  1503  0830               	movf	hexadecimalToDecimal@i,w
  8264  1504  0732               	addwf	hexadecimalToDecimal@hexVal,w
  8265  1505  00A8               	movwf	??_hexadecimalToDecimal
  8266  1506  0828               	movf	??_hexadecimalToDecimal,w
  8267  1507  0086               	movwf	6
  8268  1508  0187               	clrf	7
  8269  1509  3030               	movlw	48
  8270  150A  0201               	subwf	1,w
  8271  150B  1C03               	skipc
  8272  150C  2D20               	goto	l5081
  8273  150D  0830               	movf	hexadecimalToDecimal@i,w
  8274  150E  0732               	addwf	hexadecimalToDecimal@hexVal,w
  8275  150F  00A8               	movwf	??_hexadecimalToDecimal
  8276  1510  0828               	movf	??_hexadecimalToDecimal,w
  8277  1511  0086               	movwf	6
  8278  1512  0187               	clrf	7
  8279  1513  303A               	movlw	58
  8280  1514  0201               	subwf	1,w
  8281  1515  1803               	skipnc
  8282  1516  2D20               	goto	l5081
  8283                           
  8284                           ;main.c: 1328: {
  8285                           ;main.c: 1329: dec_val += (hexVal[i] - 48)*base;
  8286  1517  0830               	movf	hexadecimalToDecimal@i,w
  8287  1518  0732               	addwf	hexadecimalToDecimal@hexVal,w
  8288  1519  00A8               	movwf	??_hexadecimalToDecimal
  8289  151A  0828               	movf	??_hexadecimalToDecimal,w
  8290  151B  0086               	movwf	6
  8291  151C  0187               	clrf	7
  8292  151D  0801               	movf	1,w
  8293  151E  3ED0               	addlw	208
  8294  151F  2D3C               	goto	L2
  8295  1520                     l5081:	
  8296                           ;main.c: 1333: }
  8297                           
  8298                           ;main.c: 1332: base = base * 16;
  8299                           
  8300                           
  8301                           ;main.c: 1338: else if (hexVal[i]>='A' && hexVal[i]<='F')
  8302  1520  0830               	movf	hexadecimalToDecimal@i,w
  8303  1521  0732               	addwf	hexadecimalToDecimal@hexVal,w
  8304  1522  00A8               	movwf	??_hexadecimalToDecimal
  8305  1523  0828               	movf	??_hexadecimalToDecimal,w
  8306  1524  0086               	movwf	6
  8307  1525  0187               	clrf	7
  8308  1526  3041               	movlw	65
  8309  1527  0201               	subwf	1,w
  8310  1528  1C03               	skipc
  8311  1529  2D5E               	goto	l5089
  8312  152A  0830               	movf	hexadecimalToDecimal@i,w
  8313  152B  0732               	addwf	hexadecimalToDecimal@hexVal,w
  8314  152C  00A8               	movwf	??_hexadecimalToDecimal
  8315  152D  0828               	movf	??_hexadecimalToDecimal,w
  8316  152E  0086               	movwf	6
  8317  152F  0187               	clrf	7
  8318  1530  3047               	movlw	71
  8319  1531  0201               	subwf	1,w
  8320  1532  1803               	skipnc
  8321  1533  2D5E               	goto	l5089
  8322                           
  8323                           ;main.c: 1339: {
  8324                           ;main.c: 1340: dec_val += (hexVal[i] - 55)*base;
  8325  1534  0830               	movf	hexadecimalToDecimal@i,w
  8326  1535  0732               	addwf	hexadecimalToDecimal@hexVal,w
  8327  1536  00A8               	movwf	??_hexadecimalToDecimal
  8328  1537  0828               	movf	??_hexadecimalToDecimal,w
  8329  1538  0086               	movwf	6
  8330  1539  0187               	clrf	7
  8331  153A  0801               	movf	1,w
  8332  153B  3EC9               	addlw	201
  8333  153C                     L2:	
  8334  153C  00A0               	movwf	___wmul@multiplier
  8335  153D  30FF               	movlw	255
  8336  153E  1803               	skipnc
  8337  153F  3000               	movlw	0
  8338  1540  00A1               	movwf	___wmul@multiplier+1
  8339  1541  082F               	movf	hexadecimalToDecimal@base+1,w
  8340  1542  00A3               	movwf	___wmul@multiplicand+1
  8341  1543  082E               	movf	hexadecimalToDecimal@base,w
  8342  1544  00A2               	movwf	___wmul@multiplicand
  8343  1545  3191  2156  3194   	fcall	___wmul
  8344  1548  0020               	movlb	0	; select bank0
  8345  1549  0820               	movf	?___wmul,w
  8346  154A  07AC               	addwf	hexadecimalToDecimal@dec_val,f
  8347  154B  0821               	movf	?___wmul+1,w
  8348  154C  3DAD               	addwfc	hexadecimalToDecimal@dec_val+1,f
  8349                           
  8350                           ;main.c: 1343: base = base*16;
  8351  154D  082F               	movf	hexadecimalToDecimal@base+1,w
  8352  154E  00A9               	movwf	??_hexadecimalToDecimal+1
  8353  154F  082E               	movf	hexadecimalToDecimal@base,w
  8354  1550  00A8               	movwf	??_hexadecimalToDecimal
  8355  1551  0EA8               	swapf	??_hexadecimalToDecimal,f
  8356  1552  0EA9               	swapf	??_hexadecimalToDecimal+1,f
  8357  1553  30F0               	movlw	240
  8358  1554  05A9               	andwf	??_hexadecimalToDecimal+1,f
  8359  1555  0828               	movf	??_hexadecimalToDecimal,w
  8360  1556  390F               	andlw	15
  8361  1557  04A9               	iorwf	??_hexadecimalToDecimal+1,f
  8362  1558  30F0               	movlw	240
  8363  1559  05A8               	andwf	??_hexadecimalToDecimal,f
  8364  155A  0828               	movf	??_hexadecimalToDecimal,w
  8365  155B  00AE               	movwf	hexadecimalToDecimal@base
  8366  155C  0829               	movf	??_hexadecimalToDecimal+1,w
  8367  155D  00AF               	movwf	hexadecimalToDecimal@base+1
  8368  155E                     l5089:	
  8369  155E  30FF               	movlw	255
  8370  155F  07B0               	addwf	hexadecimalToDecimal@i,f
  8371  1560  30FF               	movlw	255
  8372  1561  3DB1               	addwfc	hexadecimalToDecimal@i+1,f
  8373  1562  1FB1               	btfss	hexadecimalToDecimal@i+1,7
  8374  1563  2D03               	goto	l5073
  8375  1564                     l5093:	
  8376                           
  8377                           ;main.c: 1344: }
  8378                           ;main.c: 1345: }
  8379                           ;main.c: 1347: return dec_val;
  8380  1564  082D               	movf	hexadecimalToDecimal@dec_val+1,w
  8381  1565  00A7               	movwf	?_hexadecimalToDecimal+1
  8382  1566  082C               	movf	hexadecimalToDecimal@dec_val,w
  8383  1567  00A6               	movwf	?_hexadecimalToDecimal
  8384  1568  0008               	return
  8385  1569                     __end_of_hexadecimalToDecimal:	
  8386                           
  8387                           	psect	text20
  8388  118F                     __ptext20:	
  8389 ;; *************** function _strlen *****************
  8390 ;; Defined at:
  8391 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  8392 ;; Parameters:    Size  Location     Type
  8393 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  8394 ;;		 -> mainReceivedDataBuffer(18), applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationCon
      +trolRGB@strGreenL(3), 
  8395 ;;		 -> applicationControlRGB@strGreenH(3), applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), applicat
      +ionControlRGB@HexlevelBuffer(5), 
  8396 ;;		 -> applianceControl@strD(6), applianceControl@HexlevelBuffer(5), NULL(0), 
  8397 ;; Auto vars:     Size  Location     Type
  8398 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  8399 ;;		 -> mainReceivedDataBuffer(18), applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationCon
      +trolRGB@strGreenL(3), 
  8400 ;;		 -> applicationControlRGB@strGreenH(3), applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), applicat
      +ionControlRGB@HexlevelBuffer(5), 
  8401 ;;		 -> applianceControl@strD(6), applianceControl@HexlevelBuffer(5), NULL(0), 
  8402 ;; Return value:  Size  Location     Type
  8403 ;;                  2    0[BANK0 ] unsigned int 
  8404 ;; Registers used:
  8405 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8406 ;; Tracked objects:
  8407 ;;		On entry : 0/0
  8408 ;;		On exit  : 0/0
  8409 ;;		Unchanged: 0/0
  8410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8411 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  8412 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  8413 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  8414 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  8415 ;;Total ram usage:        6 bytes
  8416 ;; Hardware stack levels used:    1
  8417 ;; Hardware stack levels required when called:    2
  8418 ;; This function calls:
  8419 ;;		Nothing
  8420 ;; This function is called by:
  8421 ;;		_applianceControl
  8422 ;;		_applicationControlRGB
  8423 ;;		_main
  8424 ;;		_hexadecimalToDecimal
  8425 ;; This function uses a non-reentrant model
  8426 ;;
  8427                           
  8428                           
  8429                           ;psect for function _strlen
  8430  118F                     _strlen:	
  8431                           
  8432                           ;incstack = 0
  8433                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  8434  118F  0020               	movlb	0	; select bank0
  8435  1190  0821               	movf	strlen@s+1,w
  8436  1191  00A5               	movwf	strlen@cp+1
  8437  1192  0820               	movf	strlen@s,w
  8438  1193  00A4               	movwf	strlen@cp
  8439  1194                     l4863:	
  8440  1194  0824               	movf	strlen@cp,w
  8441  1195  0086               	movwf	6
  8442  1196  0825               	movf	strlen@cp+1,w
  8443  1197  0087               	movwf	7
  8444  1198  0801               	movf	1,w
  8445  1199  1903               	btfsc	3,2
  8446  119A  29A0               	goto	l4865
  8447  119B  3001               	movlw	1
  8448  119C  07A4               	addwf	strlen@cp,f
  8449  119D  3000               	movlw	0
  8450  119E  3DA5               	addwfc	strlen@cp+1,f
  8451  119F  2994               	goto	l4863
  8452  11A0                     l4865:	
  8453  11A0  0920               	comf	strlen@s,w
  8454  11A1  00A2               	movwf	??_strlen
  8455  11A2  0921               	comf	strlen@s+1,w
  8456  11A3  00A3               	movwf	??_strlen+1
  8457  11A4  0AA2               	incf	??_strlen,f
  8458  11A5  1903               	skipnz
  8459  11A6  0AA3               	incf	??_strlen+1,f
  8460  11A7  0824               	movf	strlen@cp,w
  8461  11A8  0722               	addwf	??_strlen,w
  8462  11A9  00A0               	movwf	?_strlen
  8463  11AA  0825               	movf	strlen@cp+1,w
  8464  11AB  3D23               	addwfc	??_strlen+1,w
  8465  11AC  00A1               	movwf	?_strlen+1
  8466  11AD  0008               	return
  8467  11AE                     __end_of_strlen:	
  8468                           
  8469                           	psect	text21
  8470  1476                     __ptext21:	
  8471 ;; *************** function _atoi *****************
  8472 ;; Defined at:
  8473 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  8474 ;; Parameters:    Size  Location     Type
  8475 ;;  s               2    6[BANK0 ] PTR const unsigned char 
  8476 ;;		 -> ChildLockbuffer(2), switchstatusbuffer(2), switchNumberBuffer(3), mainReceivedDataBuffer(18), 
  8477 ;;		 -> applianceControl@dimmerSpeedStringBuffer(2), applianceControl@switchNumberStringBuffer(2), NULL(0), 
  8478 ;; Auto vars:     Size  Location     Type
  8479 ;;  a               2   11[BANK0 ] int 
  8480 ;;  sign            1   10[BANK0 ] unsigned char 
  8481 ;; Return value:  Size  Location     Type
  8482 ;;                  2    6[BANK0 ] int 
  8483 ;; Registers used:
  8484 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8485 ;; Tracked objects:
  8486 ;;		On entry : 0/0
  8487 ;;		On exit  : 0/0
  8488 ;;		Unchanged: 0/0
  8489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8490 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  8491 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  8492 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  8493 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0
  8494 ;;Total ram usage:        7 bytes
  8495 ;; Hardware stack levels used:    1
  8496 ;; Hardware stack levels required when called:    3
  8497 ;; This function calls:
  8498 ;;		___wmul
  8499 ;;		_isdigit
  8500 ;; This function is called by:
  8501 ;;		_applianceControl
  8502 ;;		_applicationControlRGB
  8503 ;; This function uses a non-reentrant model
  8504 ;;
  8505                           
  8506                           
  8507                           ;psect for function _atoi
  8508  1476                     _atoi:	
  8509  1476                     l4967:	
  8510                           ;incstack = 0
  8511                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8512                           
  8513  1476  0020               	movlb	0	; select bank0
  8514  1477  0826               	movf	atoi@s,w
  8515  1478  0086               	movwf	6
  8516  1479  0827               	movf	atoi@s+1,w
  8517  147A  0087               	movwf	7
  8518  147B  3020               	movlw	32
  8519  147C  0601               	xorwf	1,w
  8520  147D  1D03               	btfss	3,2
  8521  147E  2C85               	goto	l4969
  8522  147F                     l4965:	
  8523  147F  3001               	movlw	1
  8524  1480  0020               	movlb	0	; select bank0
  8525  1481  07A6               	addwf	atoi@s,f
  8526  1482  3000               	movlw	0
  8527  1483  3DA7               	addwfc	atoi@s+1,f
  8528  1484  2C76               	goto	l4967
  8529  1485                     l4969:	
  8530  1485  0826               	movf	atoi@s,w
  8531  1486  0086               	movwf	6
  8532  1487  0827               	movf	atoi@s+1,w
  8533  1488  0087               	movwf	7
  8534  1489  3009               	movlw	9
  8535  148A  0601               	xorwf	1,w
  8536  148B  1903               	btfsc	3,2
  8537  148C  2C7F               	goto	l4965
  8538  148D  01AB               	clrf	atoi@a
  8539  148E  01AC               	clrf	atoi@a+1
  8540  148F  01AA               	clrf	atoi@sign
  8541  1490  0826               	movf	atoi@s,w
  8542  1491  0086               	movwf	6
  8543  1492  0827               	movf	atoi@s+1,w
  8544  1493  0087               	movwf	7
  8545  1494  302D               	movlw	45
  8546  1495  0601               	xorwf	1,w
  8547  1496  1D03               	btfss	3,2
  8548  1497  2C9D               	goto	l4979
  8549  1498  3001               	movlw	1
  8550  1499  00A8               	movwf	??_atoi
  8551  149A  0828               	movf	??_atoi,w
  8552  149B  07AA               	addwf	atoi@sign,f
  8553  149C  2CA5               	goto	l4985
  8554  149D                     l4979:	
  8555  149D  0826               	movf	atoi@s,w
  8556  149E  0086               	movwf	6
  8557  149F  0827               	movf	atoi@s+1,w
  8558  14A0  0087               	movwf	7
  8559  14A1  302B               	movlw	43
  8560  14A2  0601               	xorwf	1,w
  8561  14A3  1D03               	btfss	3,2
  8562  14A4  2CA9               	goto	l4987
  8563  14A5                     l4985:	
  8564  14A5  3001               	movlw	1
  8565  14A6  07A6               	addwf	atoi@s,f
  8566  14A7  3000               	movlw	0
  8567  14A8  3DA7               	addwfc	atoi@s+1,f
  8568  14A9                     l4987:	
  8569  14A9  0826               	movf	atoi@s,w
  8570  14AA  0086               	movwf	6
  8571  14AB  0827               	movf	atoi@s+1,w
  8572  14AC  0087               	movwf	7
  8573  14AD  0801               	movf	1,w
  8574  14AE  3190  2046  3194   	fcall	_isdigit
  8575  14B1  1C03               	btfss	3,0
  8576  14B2  2CD2               	goto	l4989
  8577  14B3  0020               	movlb	0	; select bank0
  8578  14B4  082C               	movf	atoi@a+1,w
  8579  14B5  00A1               	movwf	___wmul@multiplier+1
  8580  14B6  082B               	movf	atoi@a,w
  8581  14B7  00A0               	movwf	___wmul@multiplier
  8582  14B8  300A               	movlw	10
  8583  14B9  00A2               	movwf	___wmul@multiplicand
  8584  14BA  3000               	movlw	0
  8585  14BB  00A3               	movwf	___wmul@multiplicand+1
  8586  14BC  3191  2156  3194   	fcall	___wmul
  8587  14BF  0020               	movlb	0	; select bank0
  8588  14C0  0826               	movf	atoi@s,w
  8589  14C1  0086               	movwf	6
  8590  14C2  0827               	movf	atoi@s+1,w
  8591  14C3  0087               	movwf	7
  8592  14C4  0801               	movf	1,w
  8593  14C5  0720               	addwf	?___wmul,w
  8594  14C6  00A8               	movwf	??_atoi
  8595  14C7  0821               	movf	?___wmul+1,w
  8596  14C8  1803               	skipnc
  8597  14C9  0A21               	incf	?___wmul+1,w
  8598  14CA  00A9               	movwf	??_atoi+1
  8599  14CB  0828               	movf	??_atoi,w
  8600  14CC  3ED0               	addlw	208
  8601  14CD  00AB               	movwf	atoi@a
  8602  14CE  30FF               	movlw	255
  8603  14CF  3D29               	addwfc	??_atoi+1,w
  8604  14D0  00AC               	movwf	atoi@a+1
  8605  14D1  2CA5               	goto	l4985
  8606  14D2                     l4989:	
  8607  14D2  0020               	movlb	0	; select bank0
  8608  14D3  082A               	movf	atoi@sign,w
  8609  14D4  1903               	btfsc	3,2
  8610  14D5  2CE2               	goto	l4995
  8611  14D6  092B               	comf	atoi@a,w
  8612  14D7  00A8               	movwf	??_atoi
  8613  14D8  092C               	comf	atoi@a+1,w
  8614  14D9  00A9               	movwf	??_atoi+1
  8615  14DA  0AA8               	incf	??_atoi,f
  8616  14DB  1903               	skipnz
  8617  14DC  0AA9               	incf	??_atoi+1,f
  8618  14DD  0828               	movf	??_atoi,w
  8619  14DE  00A6               	movwf	?_atoi
  8620  14DF  0829               	movf	??_atoi+1,w
  8621  14E0  00A7               	movwf	?_atoi+1
  8622  14E1  0008               	return
  8623  14E2                     l4995:	
  8624  14E2  082C               	movf	atoi@a+1,w
  8625  14E3  00A7               	movwf	?_atoi+1
  8626  14E4  082B               	movf	atoi@a,w
  8627  14E5  00A6               	movwf	?_atoi
  8628  14E6  0008               	return
  8629  14E7                     __end_of_atoi:	
  8630                           
  8631                           	psect	text22
  8632  1046                     __ptext22:	
  8633 ;; *************** function _isdigit *****************
  8634 ;; Defined at:
  8635 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  8636 ;; Parameters:    Size  Location     Type
  8637 ;;  c               1    wreg     unsigned char 
  8638 ;; Auto vars:     Size  Location     Type
  8639 ;;  c               1    1[BANK0 ] unsigned char 
  8640 ;; Return value:  Size  Location     Type
  8641 ;;		None               void
  8642 ;; Registers used:
  8643 ;;		wreg, status,2, status,0
  8644 ;; Tracked objects:
  8645 ;;		On entry : 0/0
  8646 ;;		On exit  : 0/0
  8647 ;;		Unchanged: 0/0
  8648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  8650 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  8651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  8652 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0
  8653 ;;Total ram usage:        2 bytes
  8654 ;; Hardware stack levels used:    1
  8655 ;; Hardware stack levels required when called:    2
  8656 ;; This function calls:
  8657 ;;		Nothing
  8658 ;; This function is called by:
  8659 ;;		_atoi
  8660 ;; This function uses a non-reentrant model
  8661 ;;
  8662                           
  8663                           
  8664                           ;psect for function _isdigit
  8665  1046                     _isdigit:	
  8666                           
  8667                           ;incstack = 0
  8668                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  8669                           ;isdigit@c stored from wreg
  8670  1046  0020               	movlb	0	; select bank0
  8671  1047  00A1               	movwf	isdigit@c
  8672  1048  01A0               	clrf	_isdigit$1545
  8673  1049  303A               	movlw	58
  8674  104A  0221               	subwf	isdigit@c,w
  8675  104B  1803               	skipnc
  8676  104C  2853               	goto	l4923
  8677  104D  3030               	movlw	48
  8678  104E  0221               	subwf	isdigit@c,w
  8679  104F  1C03               	skipc
  8680  1050  2853               	goto	l4923
  8681  1051  01A0               	clrf	_isdigit$1545
  8682  1052  0AA0               	incf	_isdigit$1545,f
  8683  1053                     l4923:	
  8684  1053  0C20               	rrf	_isdigit$1545,w
  8685  1054  0008               	return
  8686  1055                     __end_of_isdigit:	
  8687                           
  8688                           	psect	text23
  8689  1156                     __ptext23:	
  8690 ;; *************** function ___wmul *****************
  8691 ;; Defined at:
  8692 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  8693 ;; Parameters:    Size  Location     Type
  8694 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8695 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8696 ;; Auto vars:     Size  Location     Type
  8697 ;;  product         2    4[BANK0 ] unsigned int 
  8698 ;; Return value:  Size  Location     Type
  8699 ;;                  2    0[BANK0 ] unsigned int 
  8700 ;; Registers used:
  8701 ;;		wreg, status,2, status,0
  8702 ;; Tracked objects:
  8703 ;;		On entry : 0/0
  8704 ;;		On exit  : 0/0
  8705 ;;		Unchanged: 0/0
  8706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8707 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  8708 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  8709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  8710 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  8711 ;;Total ram usage:        6 bytes
  8712 ;; Hardware stack levels used:    1
  8713 ;; Hardware stack levels required when called:    2
  8714 ;; This function calls:
  8715 ;;		Nothing
  8716 ;; This function is called by:
  8717 ;;		_hexadecimalToDecimal
  8718 ;;		_atoi
  8719 ;; This function uses a non-reentrant model
  8720 ;;
  8721                           
  8722                           
  8723                           ;psect for function ___wmul
  8724  1156                     ___wmul:	
  8725                           
  8726                           ;incstack = 0
  8727                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8728  1156  0020               	movlb	0	; select bank0
  8729  1157  01A4               	clrf	___wmul@product
  8730  1158  01A5               	clrf	___wmul@product+1
  8731  1159                     l4871:	
  8732  1159  1C20               	btfss	___wmul@multiplier,0
  8733  115A  295F               	goto	l720
  8734  115B  0822               	movf	___wmul@multiplicand,w
  8735  115C  07A4               	addwf	___wmul@product,f
  8736  115D  0823               	movf	___wmul@multiplicand+1,w
  8737  115E  3DA5               	addwfc	___wmul@product+1,f
  8738  115F                     l720:	
  8739  115F  3001               	movlw	1
  8740  1160                     u4795:	
  8741  1160  35A2               	lslf	___wmul@multiplicand,f
  8742  1161  0DA3               	rlf	___wmul@multiplicand+1,f
  8743  1162  0B89               	decfsz	9,f
  8744  1163  2960               	goto	u4795
  8745  1164  3001               	movlw	1
  8746  1165                     u4805:	
  8747  1165  36A1               	lsrf	___wmul@multiplier+1,f
  8748  1166  0CA0               	rrf	___wmul@multiplier,f
  8749  1167  0B89               	decfsz	9,f
  8750  1168  2965               	goto	u4805
  8751  1169  0820               	movf	___wmul@multiplier,w
  8752  116A  0421               	iorwf	___wmul@multiplier+1,w
  8753  116B  1D03               	btfss	3,2
  8754  116C  2959               	goto	l4871
  8755  116D  0825               	movf	___wmul@product+1,w
  8756  116E  00A1               	movwf	?___wmul+1
  8757  116F  0824               	movf	___wmul@product,w
  8758  1170  00A0               	movwf	?___wmul
  8759  1171  0008               	return
  8760  1172                     __end_of___wmul:	
  8761                           
  8762                           	psect	text24
  8763  1569                     __ptext24:	
  8764 ;; *************** function ___fttol *****************
  8765 ;; Defined at:
  8766 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  8767 ;; Parameters:    Size  Location     Type
  8768 ;;  f1              3   30[BANK0 ] float 
  8769 ;; Auto vars:     Size  Location     Type
  8770 ;;  lval            4   39[BANK0 ] unsigned long 
  8771 ;;  exp1            1   43[BANK0 ] unsigned char 
  8772 ;;  sign1           1   38[BANK0 ] unsigned char 
  8773 ;; Return value:  Size  Location     Type
  8774 ;;                  4   30[BANK0 ] long 
  8775 ;; Registers used:
  8776 ;;		wreg, status,2, status,0
  8777 ;; Tracked objects:
  8778 ;;		On entry : 0/0
  8779 ;;		On exit  : 0/0
  8780 ;;		Unchanged: 0/0
  8781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8782 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  8783 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0
  8784 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0
  8785 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0
  8786 ;;Total ram usage:       14 bytes
  8787 ;; Hardware stack levels used:    1
  8788 ;; Hardware stack levels required when called:    2
  8789 ;; This function calls:
  8790 ;;		Nothing
  8791 ;; This function is called by:
  8792 ;;		_applianceControl
  8793 ;;		_applicationControlRGB
  8794 ;; This function uses a non-reentrant model
  8795 ;;
  8796                           
  8797                           
  8798                           ;psect for function ___fttol
  8799  1569                     ___fttol:	
  8800                           
  8801                           ;incstack = 0
  8802                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8803  1569  0020               	movlb	0	; select bank0
  8804  156A  083E               	movf	___fttol@f1,w
  8805  156B  00C2               	movwf	??___fttol
  8806  156C  083F               	movf	___fttol@f1+1,w
  8807  156D  00C3               	movwf	??___fttol+1
  8808  156E  0840               	movf	___fttol@f1+2,w
  8809  156F  00C4               	movwf	??___fttol+2
  8810  1570  1003               	clrc
  8811  1571  0D43               	rlf	??___fttol+1,w
  8812  1572  0D44               	rlf	??___fttol+2,w
  8813  1573  00C5               	movwf	??___fttol+3
  8814  1574  0845               	movf	??___fttol+3,w
  8815  1575  00CB               	movwf	___fttol@exp1
  8816  1576  084B               	movf	___fttol@exp1,w
  8817  1577  1D03               	btfss	3,2
  8818  1578  2D82               	goto	l5381
  8819  1579  3000               	movlw	0
  8820  157A  00C1               	movwf	?___fttol+3
  8821  157B  3000               	movlw	0
  8822  157C  00C0               	movwf	?___fttol+2
  8823  157D  3000               	movlw	0
  8824  157E  00BF               	movwf	?___fttol+1
  8825  157F  3000               	movlw	0
  8826  1580  00BE               	movwf	?___fttol
  8827  1581  0008               	return
  8828  1582                     l5381:	
  8829  1582  083E               	movf	___fttol@f1,w
  8830  1583  00C2               	movwf	??___fttol
  8831  1584  083F               	movf	___fttol@f1+1,w
  8832  1585  00C3               	movwf	??___fttol+1
  8833  1586  0840               	movf	___fttol@f1+2,w
  8834  1587  00C4               	movwf	??___fttol+2
  8835  1588  3017               	movlw	23
  8836  1589                     u5555:	
  8837  1589  36C4               	lsrf	??___fttol+2,f
  8838  158A  0CC3               	rrf	??___fttol+1,f
  8839  158B  0CC2               	rrf	??___fttol,f
  8840  158C  0B89               	decfsz	9,f
  8841  158D  2D89               	goto	u5555
  8842  158E  0842               	movf	??___fttol,w
  8843  158F  00C5               	movwf	??___fttol+3
  8844  1590  0845               	movf	??___fttol+3,w
  8845  1591  00C6               	movwf	___fttol@sign1
  8846  1592  17BF               	bsf	___fttol@f1+1,7
  8847  1593  30FF               	movlw	255
  8848  1594  05BE               	andwf	___fttol@f1,f
  8849  1595  30FF               	movlw	255
  8850  1596  05BF               	andwf	___fttol@f1+1,f
  8851  1597  3000               	movlw	0
  8852  1598  05C0               	andwf	___fttol@f1+2,f
  8853  1599  083E               	movf	___fttol@f1,w
  8854  159A  00C7               	movwf	___fttol@lval
  8855  159B  083F               	movf	___fttol@f1+1,w
  8856  159C  00C8               	movwf	___fttol@lval+1
  8857  159D  0840               	movf	___fttol@f1+2,w
  8858  159E  00C9               	movwf	___fttol@lval+2
  8859  159F  01CA               	clrf	___fttol@lval+3
  8860  15A0  308E               	movlw	142
  8861  15A1  02CB               	subwf	___fttol@exp1,f
  8862  15A2  1FCB               	btfss	___fttol@exp1,7
  8863  15A3  2DC0               	goto	l5401
  8864  15A4  084B               	movf	___fttol@exp1,w
  8865  15A5  3A80               	xorlw	128
  8866  15A6  3E8F               	addlw	143
  8867  15A7  1803               	skipnc
  8868  15A8  2DB2               	goto	l5399
  8869  15A9  3000               	movlw	0
  8870  15AA  00C1               	movwf	?___fttol+3
  8871  15AB  3000               	movlw	0
  8872  15AC  00C0               	movwf	?___fttol+2
  8873  15AD  3000               	movlw	0
  8874  15AE  00BF               	movwf	?___fttol+1
  8875  15AF  3000               	movlw	0
  8876  15B0  00BE               	movwf	?___fttol
  8877  15B1  0008               	return
  8878  15B2                     l5399:	
  8879  15B2  3001               	movlw	1
  8880  15B3                     u5585:	
  8881  15B3  36CA               	lsrf	___fttol@lval+3,f
  8882  15B4  0CC9               	rrf	___fttol@lval+2,f
  8883  15B5  0CC8               	rrf	___fttol@lval+1,f
  8884  15B6  0CC7               	rrf	___fttol@lval,f
  8885  15B7  0B89               	decfsz	9,f
  8886  15B8  2DB3               	goto	u5585
  8887  15B9  3001               	movlw	1
  8888  15BA  00C2               	movwf	??___fttol
  8889  15BB  0842               	movf	??___fttol,w
  8890  15BC  07CB               	addwf	___fttol@exp1,f
  8891  15BD  1903               	btfsc	3,2
  8892  15BE  2DD9               	goto	l5409
  8893  15BF  2DB2               	goto	l5399
  8894  15C0                     l5401:	
  8895  15C0  3018               	movlw	24
  8896  15C1  024B               	subwf	___fttol@exp1,w
  8897  15C2  1C03               	skipc
  8898  15C3  2DD6               	goto	l991
  8899  15C4  3000               	movlw	0
  8900  15C5  00C1               	movwf	?___fttol+3
  8901  15C6  3000               	movlw	0
  8902  15C7  00C0               	movwf	?___fttol+2
  8903  15C8  3000               	movlw	0
  8904  15C9  00BF               	movwf	?___fttol+1
  8905  15CA  3000               	movlw	0
  8906  15CB  00BE               	movwf	?___fttol
  8907  15CC  0008               	return
  8908  15CD                     l5407:	
  8909  15CD  3001               	movlw	1
  8910  15CE                     u5615:	
  8911  15CE  35C7               	lslf	___fttol@lval,f
  8912  15CF  0DC8               	rlf	___fttol@lval+1,f
  8913  15D0  0DC9               	rlf	___fttol@lval+2,f
  8914  15D1  0DCA               	rlf	___fttol@lval+3,f
  8915  15D2  0B89               	decfsz	9,f
  8916  15D3  2DCE               	goto	u5615
  8917  15D4  3001               	movlw	1
  8918  15D5  02CB               	subwf	___fttol@exp1,f
  8919  15D6                     l991:	
  8920  15D6  084B               	movf	___fttol@exp1,w
  8921  15D7  1D03               	btfss	3,2
  8922  15D8  2DCD               	goto	l5407
  8923  15D9                     l5409:	
  8924  15D9  0846               	movf	___fttol@sign1,w
  8925  15DA  1903               	btfsc	3,2
  8926  15DB  2DE7               	goto	l5413
  8927  15DC  09C7               	comf	___fttol@lval,f
  8928  15DD  09C8               	comf	___fttol@lval+1,f
  8929  15DE  09C9               	comf	___fttol@lval+2,f
  8930  15DF  09CA               	comf	___fttol@lval+3,f
  8931  15E0  0AC7               	incf	___fttol@lval,f
  8932  15E1  1903               	skipnz
  8933  15E2  0AC8               	incf	___fttol@lval+1,f
  8934  15E3  1903               	skipnz
  8935  15E4  0AC9               	incf	___fttol@lval+2,f
  8936  15E5  1903               	skipnz
  8937  15E6  0ACA               	incf	___fttol@lval+3,f
  8938  15E7                     l5413:	
  8939  15E7  084A               	movf	___fttol@lval+3,w
  8940  15E8  00C1               	movwf	?___fttol+3
  8941  15E9  0849               	movf	___fttol@lval+2,w
  8942  15EA  00C0               	movwf	?___fttol+2
  8943  15EB  0848               	movf	___fttol@lval+1,w
  8944  15EC  00BF               	movwf	?___fttol+1
  8945  15ED  0847               	movf	___fttol@lval,w
  8946  15EE  00BE               	movwf	?___fttol
  8947  15EF  0008               	return
  8948  15F0                     __end_of___fttol:	
  8949                           
  8950                           	psect	text25
  8951  174C                     __ptext25:	
  8952 ;; *************** function ___ftmul *****************
  8953 ;; Defined at:
  8954 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  8955 ;; Parameters:    Size  Location     Type
  8956 ;;  f1              3    8[BANK0 ] float 
  8957 ;;  f2              3   11[BANK0 ] float 
  8958 ;; Auto vars:     Size  Location     Type
  8959 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  8960 ;;  sign            1   23[BANK0 ] unsigned char 
  8961 ;;  cntr            1   22[BANK0 ] unsigned char 
  8962 ;;  exp             1   18[BANK0 ] unsigned char 
  8963 ;; Return value:  Size  Location     Type
  8964 ;;                  3    8[BANK0 ] float 
  8965 ;; Registers used:
  8966 ;;		wreg, status,2, status,0, pclath, cstack
  8967 ;; Tracked objects:
  8968 ;;		On entry : 0/0
  8969 ;;		On exit  : 0/0
  8970 ;;		Unchanged: 0/0
  8971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8972 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  8973 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0
  8974 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0
  8975 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0
  8976 ;;Total ram usage:       16 bytes
  8977 ;; Hardware stack levels used:    1
  8978 ;; Hardware stack levels required when called:    3
  8979 ;; This function calls:
  8980 ;;		___ftpack
  8981 ;; This function is called by:
  8982 ;;		_applianceControl
  8983 ;;		_applicationControlRGB
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           
  8988                           ;psect for function ___ftmul
  8989  174C                     ___ftmul:	
  8990                           
  8991                           ;incstack = 0
  8992                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8993  174C  0020               	movlb	0	; select bank0
  8994  174D  0828               	movf	___ftmul@f1,w
  8995  174E  00AE               	movwf	??___ftmul
  8996  174F  0829               	movf	___ftmul@f1+1,w
  8997  1750  00AF               	movwf	??___ftmul+1
  8998  1751  082A               	movf	___ftmul@f1+2,w
  8999  1752  00B0               	movwf	??___ftmul+2
  9000  1753  1003               	clrc
  9001  1754  0D2F               	rlf	??___ftmul+1,w
  9002  1755  0D30               	rlf	??___ftmul+2,w
  9003  1756  00B1               	movwf	??___ftmul+3
  9004  1757  0831               	movf	??___ftmul+3,w
  9005  1758  00B2               	movwf	___ftmul@exp
  9006  1759  0832               	movf	___ftmul@exp,w
  9007  175A  1D03               	btfss	3,2
  9008  175B  2F63               	goto	l5331
  9009  175C  3000               	movlw	0
  9010  175D  00A8               	movwf	?___ftmul
  9011  175E  3000               	movlw	0
  9012  175F  00A9               	movwf	?___ftmul+1
  9013  1760  3000               	movlw	0
  9014  1761  00AA               	movwf	?___ftmul+2
  9015  1762  0008               	return
  9016  1763                     l5331:	
  9017  1763  082B               	movf	___ftmul@f2,w
  9018  1764  00AE               	movwf	??___ftmul
  9019  1765  082C               	movf	___ftmul@f2+1,w
  9020  1766  00AF               	movwf	??___ftmul+1
  9021  1767  082D               	movf	___ftmul@f2+2,w
  9022  1768  00B0               	movwf	??___ftmul+2
  9023  1769  1003               	clrc
  9024  176A  0D2F               	rlf	??___ftmul+1,w
  9025  176B  0D30               	rlf	??___ftmul+2,w
  9026  176C  00B1               	movwf	??___ftmul+3
  9027  176D  0831               	movf	??___ftmul+3,w
  9028  176E  00B7               	movwf	___ftmul@sign
  9029  176F  0837               	movf	___ftmul@sign,w
  9030  1770  1D03               	btfss	3,2
  9031  1771  2F79               	goto	l5337
  9032  1772  3000               	movlw	0
  9033  1773  00A8               	movwf	?___ftmul
  9034  1774  3000               	movlw	0
  9035  1775  00A9               	movwf	?___ftmul+1
  9036  1776  3000               	movlw	0
  9037  1777  00AA               	movwf	?___ftmul+2
  9038  1778  0008               	return
  9039  1779                     l5337:	
  9040  1779  0837               	movf	___ftmul@sign,w
  9041  177A  3E7B               	addlw	123
  9042  177B  00AE               	movwf	??___ftmul
  9043  177C  082E               	movf	??___ftmul,w
  9044  177D  07B2               	addwf	___ftmul@exp,f
  9045  177E  0828               	movf	___ftmul@f1,w
  9046  177F  00AE               	movwf	??___ftmul
  9047  1780  0829               	movf	___ftmul@f1+1,w
  9048  1781  00AF               	movwf	??___ftmul+1
  9049  1782  082A               	movf	___ftmul@f1+2,w
  9050  1783  00B0               	movwf	??___ftmul+2
  9051  1784  3010               	movlw	16
  9052  1785                     u5445:	
  9053  1785  36B0               	lsrf	??___ftmul+2,f
  9054  1786  0CAF               	rrf	??___ftmul+1,f
  9055  1787  0CAE               	rrf	??___ftmul,f
  9056  1788  0B89               	decfsz	9,f
  9057  1789  2F85               	goto	u5445
  9058  178A  082E               	movf	??___ftmul,w
  9059  178B  00B1               	movwf	??___ftmul+3
  9060  178C  0831               	movf	??___ftmul+3,w
  9061  178D  00B7               	movwf	___ftmul@sign
  9062  178E  082B               	movf	___ftmul@f2,w
  9063  178F  00AE               	movwf	??___ftmul
  9064  1790  082C               	movf	___ftmul@f2+1,w
  9065  1791  00AF               	movwf	??___ftmul+1
  9066  1792  082D               	movf	___ftmul@f2+2,w
  9067  1793  00B0               	movwf	??___ftmul+2
  9068  1794  3010               	movlw	16
  9069  1795                     u5455:	
  9070  1795  36B0               	lsrf	??___ftmul+2,f
  9071  1796  0CAF               	rrf	??___ftmul+1,f
  9072  1797  0CAE               	rrf	??___ftmul,f
  9073  1798  0B89               	decfsz	9,f
  9074  1799  2F95               	goto	u5455
  9075  179A  082E               	movf	??___ftmul,w
  9076  179B  00B1               	movwf	??___ftmul+3
  9077  179C  0831               	movf	??___ftmul+3,w
  9078  179D  06B7               	xorwf	___ftmul@sign,f
  9079  179E  3080               	movlw	128
  9080  179F  00AE               	movwf	??___ftmul
  9081  17A0  082E               	movf	??___ftmul,w
  9082  17A1  05B7               	andwf	___ftmul@sign,f
  9083  17A2  17A9               	bsf	___ftmul@f1+1,7
  9084  17A3  17AC               	bsf	___ftmul@f2+1,7
  9085  17A4  30FF               	movlw	255
  9086  17A5  05AB               	andwf	___ftmul@f2,f
  9087  17A6  30FF               	movlw	255
  9088  17A7  05AC               	andwf	___ftmul@f2+1,f
  9089  17A8  3000               	movlw	0
  9090  17A9  05AD               	andwf	___ftmul@f2+2,f
  9091  17AA  3000               	movlw	0
  9092  17AB  00B3               	movwf	___ftmul@f3_as_product
  9093  17AC  3000               	movlw	0
  9094  17AD  00B4               	movwf	___ftmul@f3_as_product+1
  9095  17AE  3000               	movlw	0
  9096  17AF  00B5               	movwf	___ftmul@f3_as_product+2
  9097  17B0  3007               	movlw	7
  9098  17B1  00AE               	movwf	??___ftmul
  9099  17B2  082E               	movf	??___ftmul,w
  9100  17B3  00B6               	movwf	___ftmul@cntr
  9101  17B4                     l5349:	
  9102  17B4  1C28               	btfss	___ftmul@f1,0
  9103  17B5  2FBC               	goto	l5353
  9104  17B6  082B               	movf	___ftmul@f2,w
  9105  17B7  07B3               	addwf	___ftmul@f3_as_product,f
  9106  17B8  082C               	movf	___ftmul@f2+1,w
  9107  17B9  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  9108  17BA  082D               	movf	___ftmul@f2+2,w
  9109  17BB  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  9110  17BC                     l5353:	
  9111  17BC  3001               	movlw	1
  9112  17BD                     u5475:	
  9113  17BD  36AA               	lsrf	___ftmul@f1+2,f
  9114  17BE  0CA9               	rrf	___ftmul@f1+1,f
  9115  17BF  0CA8               	rrf	___ftmul@f1,f
  9116  17C0  0B89               	decfsz	9,f
  9117  17C1  2FBD               	goto	u5475
  9118  17C2  3001               	movlw	1
  9119  17C3                     u5485:	
  9120  17C3  35AB               	lslf	___ftmul@f2,f
  9121  17C4  0DAC               	rlf	___ftmul@f2+1,f
  9122  17C5  0DAD               	rlf	___ftmul@f2+2,f
  9123  17C6  0B89               	decfsz	9,f
  9124  17C7  2FC3               	goto	u5485
  9125  17C8  3001               	movlw	1
  9126  17C9  02B6               	subwf	___ftmul@cntr,f
  9127  17CA  1D03               	btfss	3,2
  9128  17CB  2FB4               	goto	l5349
  9129  17CC  3009               	movlw	9
  9130  17CD  00AE               	movwf	??___ftmul
  9131  17CE  082E               	movf	??___ftmul,w
  9132  17CF  00B6               	movwf	___ftmul@cntr
  9133  17D0                     l5361:	
  9134  17D0  1C28               	btfss	___ftmul@f1,0
  9135  17D1  2FD8               	goto	l5365
  9136  17D2  082B               	movf	___ftmul@f2,w
  9137  17D3  07B3               	addwf	___ftmul@f3_as_product,f
  9138  17D4  082C               	movf	___ftmul@f2+1,w
  9139  17D5  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  9140  17D6  082D               	movf	___ftmul@f2+2,w
  9141  17D7  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  9142  17D8                     l5365:	
  9143  17D8  3001               	movlw	1
  9144  17D9                     u5515:	
  9145  17D9  36AA               	lsrf	___ftmul@f1+2,f
  9146  17DA  0CA9               	rrf	___ftmul@f1+1,f
  9147  17DB  0CA8               	rrf	___ftmul@f1,f
  9148  17DC  0B89               	decfsz	9,f
  9149  17DD  2FD9               	goto	u5515
  9150  17DE  3001               	movlw	1
  9151  17DF                     u5525:	
  9152  17DF  36B5               	lsrf	___ftmul@f3_as_product+2,f
  9153  17E0  0CB4               	rrf	___ftmul@f3_as_product+1,f
  9154  17E1  0CB3               	rrf	___ftmul@f3_as_product,f
  9155  17E2  0B89               	decfsz	9,f
  9156  17E3  2FDF               	goto	u5525
  9157  17E4  3001               	movlw	1
  9158  17E5  02B6               	subwf	___ftmul@cntr,f
  9159  17E6  1D03               	btfss	3,2
  9160  17E7  2FD0               	goto	l5361
  9161  17E8  0833               	movf	___ftmul@f3_as_product,w
  9162  17E9  00A0               	movwf	___ftpack@arg
  9163  17EA  0834               	movf	___ftmul@f3_as_product+1,w
  9164  17EB  00A1               	movwf	___ftpack@arg+1
  9165  17EC  0835               	movf	___ftmul@f3_as_product+2,w
  9166  17ED  00A2               	movwf	___ftpack@arg+2
  9167  17EE  0832               	movf	___ftmul@exp,w
  9168  17EF  00AE               	movwf	??___ftmul
  9169  17F0  082E               	movf	??___ftmul,w
  9170  17F1  00A3               	movwf	___ftpack@exp
  9171  17F2  0837               	movf	___ftmul@sign,w
  9172  17F3  00AF               	movwf	??___ftmul+1
  9173  17F4  082F               	movf	??___ftmul+1,w
  9174  17F5  00A4               	movwf	___ftpack@sign
  9175  17F6  3194  2411         	fcall	___ftpack
  9176  17F8  0020               	movlb	0	; select bank0
  9177  17F9  0820               	movf	?___ftpack,w
  9178  17FA  00A8               	movwf	?___ftmul
  9179  17FB  0821               	movf	?___ftpack+1,w
  9180  17FC  00A9               	movwf	?___ftmul+1
  9181  17FD  0822               	movf	?___ftpack+2,w
  9182  17FE  00AA               	movwf	?___ftmul+2
  9183  17FF  0008               	return
  9184  1800                     __end_of___ftmul:	
  9185                           
  9186                           	psect	text26
  9187  15F0                     __ptext26:	
  9188 ;; *************** function ___ftdiv *****************
  9189 ;; Defined at:
  9190 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  9191 ;; Parameters:    Size  Location     Type
  9192 ;;  f2              3   14[BANK0 ] float 
  9193 ;;  f1              3   17[BANK0 ] float 
  9194 ;; Auto vars:     Size  Location     Type
  9195 ;;  f3              3   25[BANK0 ] float 
  9196 ;;  sign            1   29[BANK0 ] unsigned char 
  9197 ;;  exp             1   28[BANK0 ] unsigned char 
  9198 ;;  cntr            1   24[BANK0 ] unsigned char 
  9199 ;; Return value:  Size  Location     Type
  9200 ;;                  3   14[BANK0 ] float 
  9201 ;; Registers used:
  9202 ;;		wreg, status,2, status,0, pclath, cstack
  9203 ;; Tracked objects:
  9204 ;;		On entry : 0/0
  9205 ;;		On exit  : 0/0
  9206 ;;		Unchanged: 0/0
  9207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9208 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  9209 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0
  9210 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0
  9211 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0
  9212 ;;Total ram usage:       16 bytes
  9213 ;; Hardware stack levels used:    1
  9214 ;; Hardware stack levels required when called:    3
  9215 ;; This function calls:
  9216 ;;		___ftpack
  9217 ;; This function is called by:
  9218 ;;		_applianceControl
  9219 ;;		_applicationControlRGB
  9220 ;; This function uses a non-reentrant model
  9221 ;;
  9222                           
  9223                           
  9224                           ;psect for function ___ftdiv
  9225  15F0                     ___ftdiv:	
  9226                           
  9227                           ;incstack = 0
  9228                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  9229  15F0  0020               	movlb	0	; select bank0
  9230  15F1  0831               	movf	___ftdiv@f1,w
  9231  15F2  00B4               	movwf	??___ftdiv
  9232  15F3  0832               	movf	___ftdiv@f1+1,w
  9233  15F4  00B5               	movwf	??___ftdiv+1
  9234  15F5  0833               	movf	___ftdiv@f1+2,w
  9235  15F6  00B6               	movwf	??___ftdiv+2
  9236  15F7  1003               	clrc
  9237  15F8  0D35               	rlf	??___ftdiv+1,w
  9238  15F9  0D36               	rlf	??___ftdiv+2,w
  9239  15FA  00B7               	movwf	??___ftdiv+3
  9240  15FB  0837               	movf	??___ftdiv+3,w
  9241  15FC  00BC               	movwf	___ftdiv@exp
  9242  15FD  083C               	movf	___ftdiv@exp,w
  9243  15FE  1D03               	btfss	3,2
  9244  15FF  2E07               	goto	l5289
  9245  1600  3000               	movlw	0
  9246  1601  00AE               	movwf	?___ftdiv
  9247  1602  3000               	movlw	0
  9248  1603  00AF               	movwf	?___ftdiv+1
  9249  1604  3000               	movlw	0
  9250  1605  00B0               	movwf	?___ftdiv+2
  9251  1606  0008               	return
  9252  1607                     l5289:	
  9253  1607  082E               	movf	___ftdiv@f2,w
  9254  1608  00B4               	movwf	??___ftdiv
  9255  1609  082F               	movf	___ftdiv@f2+1,w
  9256  160A  00B5               	movwf	??___ftdiv+1
  9257  160B  0830               	movf	___ftdiv@f2+2,w
  9258  160C  00B6               	movwf	??___ftdiv+2
  9259  160D  1003               	clrc
  9260  160E  0D35               	rlf	??___ftdiv+1,w
  9261  160F  0D36               	rlf	??___ftdiv+2,w
  9262  1610  00B7               	movwf	??___ftdiv+3
  9263  1611  0837               	movf	??___ftdiv+3,w
  9264  1612  00BD               	movwf	___ftdiv@sign
  9265  1613  083D               	movf	___ftdiv@sign,w
  9266  1614  1D03               	btfss	3,2
  9267  1615  2E1D               	goto	l5295
  9268  1616  3000               	movlw	0
  9269  1617  00AE               	movwf	?___ftdiv
  9270  1618  3000               	movlw	0
  9271  1619  00AF               	movwf	?___ftdiv+1
  9272  161A  3000               	movlw	0
  9273  161B  00B0               	movwf	?___ftdiv+2
  9274  161C  0008               	return
  9275  161D                     l5295:	
  9276  161D  3000               	movlw	0
  9277  161E  00B9               	movwf	___ftdiv@f3
  9278  161F  3000               	movlw	0
  9279  1620  00BA               	movwf	___ftdiv@f3+1
  9280  1621  3000               	movlw	0
  9281  1622  00BB               	movwf	___ftdiv@f3+2
  9282  1623  3089               	movlw	137
  9283  1624  073D               	addwf	___ftdiv@sign,w
  9284  1625  00B4               	movwf	??___ftdiv
  9285  1626  0834               	movf	??___ftdiv,w
  9286  1627  02BC               	subwf	___ftdiv@exp,f
  9287  1628  0831               	movf	___ftdiv@f1,w
  9288  1629  00B4               	movwf	??___ftdiv
  9289  162A  0832               	movf	___ftdiv@f1+1,w
  9290  162B  00B5               	movwf	??___ftdiv+1
  9291  162C  0833               	movf	___ftdiv@f1+2,w
  9292  162D  00B6               	movwf	??___ftdiv+2
  9293  162E  3010               	movlw	16
  9294  162F                     u5365:	
  9295  162F  36B6               	lsrf	??___ftdiv+2,f
  9296  1630  0CB5               	rrf	??___ftdiv+1,f
  9297  1631  0CB4               	rrf	??___ftdiv,f
  9298  1632  0B89               	decfsz	9,f
  9299  1633  2E2F               	goto	u5365
  9300  1634  0834               	movf	??___ftdiv,w
  9301  1635  00B7               	movwf	??___ftdiv+3
  9302  1636  0837               	movf	??___ftdiv+3,w
  9303  1637  00BD               	movwf	___ftdiv@sign
  9304  1638  082E               	movf	___ftdiv@f2,w
  9305  1639  00B4               	movwf	??___ftdiv
  9306  163A  082F               	movf	___ftdiv@f2+1,w
  9307  163B  00B5               	movwf	??___ftdiv+1
  9308  163C  0830               	movf	___ftdiv@f2+2,w
  9309  163D  00B6               	movwf	??___ftdiv+2
  9310  163E  3010               	movlw	16
  9311  163F                     u5375:	
  9312  163F  36B6               	lsrf	??___ftdiv+2,f
  9313  1640  0CB5               	rrf	??___ftdiv+1,f
  9314  1641  0CB4               	rrf	??___ftdiv,f
  9315  1642  0B89               	decfsz	9,f
  9316  1643  2E3F               	goto	u5375
  9317  1644  0834               	movf	??___ftdiv,w
  9318  1645  00B7               	movwf	??___ftdiv+3
  9319  1646  0837               	movf	??___ftdiv+3,w
  9320  1647  06BD               	xorwf	___ftdiv@sign,f
  9321  1648  3080               	movlw	128
  9322  1649  00B4               	movwf	??___ftdiv
  9323  164A  0834               	movf	??___ftdiv,w
  9324  164B  05BD               	andwf	___ftdiv@sign,f
  9325  164C  17B2               	bsf	___ftdiv@f1+1,7
  9326  164D  30FF               	movlw	255
  9327  164E  05B1               	andwf	___ftdiv@f1,f
  9328  164F  30FF               	movlw	255
  9329  1650  05B2               	andwf	___ftdiv@f1+1,f
  9330  1651  3000               	movlw	0
  9331  1652  05B3               	andwf	___ftdiv@f1+2,f
  9332  1653  17AF               	bsf	___ftdiv@f2+1,7
  9333  1654  30FF               	movlw	255
  9334  1655  05AE               	andwf	___ftdiv@f2,f
  9335  1656  30FF               	movlw	255
  9336  1657  05AF               	andwf	___ftdiv@f2+1,f
  9337  1658  3000               	movlw	0
  9338  1659  05B0               	andwf	___ftdiv@f2+2,f
  9339  165A  3018               	movlw	24
  9340  165B  00B4               	movwf	??___ftdiv
  9341  165C  0834               	movf	??___ftdiv,w
  9342  165D  00B8               	movwf	___ftdiv@cntr
  9343  165E                     l5309:	
  9344  165E  3001               	movlw	1
  9345  165F                     u5385:	
  9346  165F  35B9               	lslf	___ftdiv@f3,f
  9347  1660  0DBA               	rlf	___ftdiv@f3+1,f
  9348  1661  0DBB               	rlf	___ftdiv@f3+2,f
  9349  1662  0B89               	decfsz	9,f
  9350  1663  2E5F               	goto	u5385
  9351  1664  0830               	movf	___ftdiv@f2+2,w
  9352  1665  0233               	subwf	___ftdiv@f1+2,w
  9353  1666  1D03               	skipz
  9354  1667  2E6E               	goto	u5395
  9355  1668  082F               	movf	___ftdiv@f2+1,w
  9356  1669  0232               	subwf	___ftdiv@f1+1,w
  9357  166A  1D03               	skipz
  9358  166B  2E6E               	goto	u5395
  9359  166C  082E               	movf	___ftdiv@f2,w
  9360  166D  0231               	subwf	___ftdiv@f1,w
  9361  166E                     u5395:	
  9362  166E  1C03               	skipc
  9363  166F  2E77               	goto	l5317
  9364  1670  082E               	movf	___ftdiv@f2,w
  9365  1671  02B1               	subwf	___ftdiv@f1,f
  9366  1672  082F               	movf	___ftdiv@f2+1,w
  9367  1673  3BB2               	subwfb	___ftdiv@f1+1,f
  9368  1674  0830               	movf	___ftdiv@f2+2,w
  9369  1675  3BB3               	subwfb	___ftdiv@f1+2,f
  9370  1676  1439               	bsf	___ftdiv@f3,0
  9371  1677                     l5317:	
  9372  1677  3001               	movlw	1
  9373  1678                     u5405:	
  9374  1678  35B1               	lslf	___ftdiv@f1,f
  9375  1679  0DB2               	rlf	___ftdiv@f1+1,f
  9376  167A  0DB3               	rlf	___ftdiv@f1+2,f
  9377  167B  0B89               	decfsz	9,f
  9378  167C  2E78               	goto	u5405
  9379  167D  3001               	movlw	1
  9380  167E  02B8               	subwf	___ftdiv@cntr,f
  9381  167F  1D03               	btfss	3,2
  9382  1680  2E5E               	goto	l5309
  9383  1681  0839               	movf	___ftdiv@f3,w
  9384  1682  00A0               	movwf	___ftpack@arg
  9385  1683  083A               	movf	___ftdiv@f3+1,w
  9386  1684  00A1               	movwf	___ftpack@arg+1
  9387  1685  083B               	movf	___ftdiv@f3+2,w
  9388  1686  00A2               	movwf	___ftpack@arg+2
  9389  1687  083C               	movf	___ftdiv@exp,w
  9390  1688  00B4               	movwf	??___ftdiv
  9391  1689  0834               	movf	??___ftdiv,w
  9392  168A  00A3               	movwf	___ftpack@exp
  9393  168B  083D               	movf	___ftdiv@sign,w
  9394  168C  00B5               	movwf	??___ftdiv+1
  9395  168D  0835               	movf	??___ftdiv+1,w
  9396  168E  00A4               	movwf	___ftpack@sign
  9397  168F  3194  2411         	fcall	___ftpack
  9398  1691  0020               	movlb	0	; select bank0
  9399  1692  0820               	movf	?___ftpack,w
  9400  1693  00AE               	movwf	?___ftdiv
  9401  1694  0821               	movf	?___ftpack+1,w
  9402  1695  00AF               	movwf	?___ftdiv+1
  9403  1696  0822               	movf	?___ftpack+2,w
  9404  1697  00B0               	movwf	?___ftdiv+2
  9405  1698  0008               	return
  9406  1699                     __end_of___ftdiv:	
  9407                           
  9408                           	psect	text27
  9409  11EE                     __ptext27:	
  9410 ;; *************** function ___awtoft *****************
  9411 ;; Defined at:
  9412 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  9413 ;; Parameters:    Size  Location     Type
  9414 ;;  c               2    8[BANK0 ] int 
  9415 ;; Auto vars:     Size  Location     Type
  9416 ;;  sign            1   13[BANK0 ] unsigned char 
  9417 ;; Return value:  Size  Location     Type
  9418 ;;                  3    8[BANK0 ] float 
  9419 ;; Registers used:
  9420 ;;		wreg, status,2, status,0, pclath, cstack
  9421 ;; Tracked objects:
  9422 ;;		On entry : 0/0
  9423 ;;		On exit  : 0/0
  9424 ;;		Unchanged: 0/0
  9425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9426 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0
  9427 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0
  9428 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  9429 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  9430 ;;Total ram usage:        6 bytes
  9431 ;; Hardware stack levels used:    1
  9432 ;; Hardware stack levels required when called:    3
  9433 ;; This function calls:
  9434 ;;		___ftpack
  9435 ;; This function is called by:
  9436 ;;		_applianceControl
  9437 ;;		_applicationControlRGB
  9438 ;; This function uses a non-reentrant model
  9439 ;;
  9440                           
  9441                           
  9442                           ;psect for function ___awtoft
  9443  11EE                     ___awtoft:	
  9444                           
  9445                           ;incstack = 0
  9446                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9447  11EE  0020               	movlb	0	; select bank0
  9448  11EF  01AD               	clrf	___awtoft@sign
  9449  11F0  1FA9               	btfss	___awtoft@c+1,7
  9450  11F1  29F9               	goto	l5279
  9451  11F2  09A8               	comf	___awtoft@c,f
  9452  11F3  09A9               	comf	___awtoft@c+1,f
  9453  11F4  0AA8               	incf	___awtoft@c,f
  9454  11F5  1903               	skipnz
  9455  11F6  0AA9               	incf	___awtoft@c+1,f
  9456  11F7  01AD               	clrf	___awtoft@sign
  9457  11F8  0AAD               	incf	___awtoft@sign,f
  9458  11F9                     l5279:	
  9459  11F9  0828               	movf	___awtoft@c,w
  9460  11FA  00A0               	movwf	___ftpack@arg
  9461  11FB  0829               	movf	___awtoft@c+1,w
  9462  11FC  00A1               	movwf	___ftpack@arg+1
  9463  11FD  01A2               	clrf	___ftpack@arg+2
  9464  11FE  308E               	movlw	142
  9465  11FF  00AB               	movwf	??___awtoft
  9466  1200  082B               	movf	??___awtoft,w
  9467  1201  00A3               	movwf	___ftpack@exp
  9468  1202  082D               	movf	___awtoft@sign,w
  9469  1203  00AC               	movwf	??___awtoft+1
  9470  1204  082C               	movf	??___awtoft+1,w
  9471  1205  00A4               	movwf	___ftpack@sign
  9472  1206  3194  2411         	fcall	___ftpack
  9473  1208  0020               	movlb	0	; select bank0
  9474  1209  0820               	movf	?___ftpack,w
  9475  120A  00A8               	movwf	?___awtoft
  9476  120B  0821               	movf	?___ftpack+1,w
  9477  120C  00A9               	movwf	?___awtoft+1
  9478  120D  0822               	movf	?___ftpack+2,w
  9479  120E  00AA               	movwf	?___awtoft+2
  9480  120F  0008               	return
  9481  1210                     __end_of___awtoft:	
  9482                           
  9483                           	psect	text28
  9484  1411                     __ptext28:	
  9485 ;; *************** function ___ftpack *****************
  9486 ;; Defined at:
  9487 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  9488 ;; Parameters:    Size  Location     Type
  9489 ;;  arg             3    0[BANK0 ] unsigned um
  9490 ;;  exp             1    3[BANK0 ] unsigned char 
  9491 ;;  sign            1    4[BANK0 ] unsigned char 
  9492 ;; Auto vars:     Size  Location     Type
  9493 ;;		None
  9494 ;; Return value:  Size  Location     Type
  9495 ;;                  3    0[BANK0 ] float 
  9496 ;; Registers used:
  9497 ;;		wreg, status,2, status,0
  9498 ;; Tracked objects:
  9499 ;;		On entry : 0/0
  9500 ;;		On exit  : 0/0
  9501 ;;		Unchanged: 0/0
  9502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9503 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0
  9504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9505 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0
  9506 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0
  9507 ;;Total ram usage:        8 bytes
  9508 ;; Hardware stack levels used:    1
  9509 ;; Hardware stack levels required when called:    2
  9510 ;; This function calls:
  9511 ;;		Nothing
  9512 ;; This function is called by:
  9513 ;;		___awtoft
  9514 ;;		___ftdiv
  9515 ;;		___ftmul
  9516 ;;		___lwtoft
  9517 ;; This function uses a non-reentrant model
  9518 ;;
  9519                           
  9520                           
  9521                           ;psect for function ___ftpack
  9522  1411                     ___ftpack:	
  9523                           
  9524                           ;incstack = 0
  9525                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9526  1411  0020               	movlb	0	; select bank0
  9527  1412  0823               	movf	___ftpack@exp,w
  9528  1413  1903               	btfsc	3,2
  9529  1414  2C1A               	goto	l4887
  9530  1415  0822               	movf	___ftpack@arg+2,w
  9531  1416  0421               	iorwf	___ftpack@arg+1,w
  9532  1417  0420               	iorwf	___ftpack@arg,w
  9533  1418  1D03               	skipz
  9534  1419  2C2B               	goto	l4893
  9535  141A                     l4887:	
  9536  141A  3000               	movlw	0
  9537  141B  00A0               	movwf	?___ftpack
  9538  141C  3000               	movlw	0
  9539  141D  00A1               	movwf	?___ftpack+1
  9540  141E  3000               	movlw	0
  9541  141F  00A2               	movwf	?___ftpack+2
  9542  1420  0008               	return
  9543  1421                     l4891:	
  9544  1421  3001               	movlw	1
  9545  1422  00A5               	movwf	??___ftpack
  9546  1423  0825               	movf	??___ftpack,w
  9547  1424  07A3               	addwf	___ftpack@exp,f
  9548  1425  3001               	movlw	1
  9549  1426                     u4845:	
  9550  1426  36A2               	lsrf	___ftpack@arg+2,f
  9551  1427  0CA1               	rrf	___ftpack@arg+1,f
  9552  1428  0CA0               	rrf	___ftpack@arg,f
  9553  1429  0B89               	decfsz	9,f
  9554  142A  2C26               	goto	u4845
  9555  142B                     l4893:	
  9556  142B  30FE               	movlw	254
  9557  142C  0522               	andwf	___ftpack@arg+2,w
  9558  142D  1903               	btfsc	3,2
  9559  142E  2C44               	goto	l900
  9560  142F  2C21               	goto	l4891
  9561  1430                     l4895:	
  9562  1430  3001               	movlw	1
  9563  1431  00A5               	movwf	??___ftpack
  9564  1432  0825               	movf	??___ftpack,w
  9565  1433  07A3               	addwf	___ftpack@exp,f
  9566  1434  3001               	movlw	1
  9567  1435  07A0               	addwf	___ftpack@arg,f
  9568  1436  3000               	movlw	0
  9569  1437  1803               	skipnc
  9570  1438  3001               	movlw	1
  9571  1439  07A1               	addwf	___ftpack@arg+1,f
  9572  143A  3000               	movlw	0
  9573  143B  1803               	skipnc
  9574  143C  3001               	movlw	1
  9575  143D  07A2               	addwf	___ftpack@arg+2,f
  9576  143E  3001               	movlw	1
  9577  143F                     u4865:	
  9578  143F  36A2               	lsrf	___ftpack@arg+2,f
  9579  1440  0CA1               	rrf	___ftpack@arg+1,f
  9580  1441  0CA0               	rrf	___ftpack@arg,f
  9581  1442  0B89               	decfsz	9,f
  9582  1443  2C3F               	goto	u4865
  9583  1444                     l900:	
  9584  1444  30FF               	movlw	255
  9585  1445  0522               	andwf	___ftpack@arg+2,w
  9586  1446  1903               	btfsc	3,2
  9587  1447  2C51               	goto	l4903
  9588  1448  2C30               	goto	l4895
  9589  1449                     l4901:	
  9590  1449  3001               	movlw	1
  9591  144A  02A3               	subwf	___ftpack@exp,f
  9592  144B  3001               	movlw	1
  9593  144C                     u4885:	
  9594  144C  35A0               	lslf	___ftpack@arg,f
  9595  144D  0DA1               	rlf	___ftpack@arg+1,f
  9596  144E  0DA2               	rlf	___ftpack@arg+2,f
  9597  144F  0B89               	decfsz	9,f
  9598  1450  2C4C               	goto	u4885
  9599  1451                     l4903:	
  9600  1451  1BA1               	btfsc	___ftpack@arg+1,7
  9601  1452  2C57               	goto	l907
  9602  1453  3002               	movlw	2
  9603  1454  0223               	subwf	___ftpack@exp,w
  9604  1455  1803               	skipnc
  9605  1456  2C49               	goto	l4901
  9606  1457                     l907:	
  9607  1457  1823               	btfsc	___ftpack@exp,0
  9608  1458  2C5F               	goto	l908
  9609  1459  30FF               	movlw	255
  9610  145A  05A0               	andwf	___ftpack@arg,f
  9611  145B  307F               	movlw	127
  9612  145C  05A1               	andwf	___ftpack@arg+1,f
  9613  145D  30FF               	movlw	255
  9614  145E  05A2               	andwf	___ftpack@arg+2,f
  9615  145F                     l908:	
  9616  145F  1003               	clrc
  9617  1460  0CA3               	rrf	___ftpack@exp,f
  9618  1461  0823               	movf	___ftpack@exp,w
  9619  1462  00A5               	movwf	??___ftpack
  9620  1463  01A6               	clrf	??___ftpack+1
  9621  1464  01A7               	clrf	??___ftpack+2
  9622  1465  3010               	movlw	16
  9623  1466                     u4925:	
  9624  1466  35A5               	lslf	??___ftpack,f
  9625  1467  0DA6               	rlf	??___ftpack+1,f
  9626  1468  0DA7               	rlf	??___ftpack+2,f
  9627  1469  0B89               	decfsz	9,f
  9628  146A  2C66               	goto	u4925
  9629  146B  0825               	movf	??___ftpack,w
  9630  146C  04A0               	iorwf	___ftpack@arg,f
  9631  146D  0826               	movf	??___ftpack+1,w
  9632  146E  04A1               	iorwf	___ftpack@arg+1,f
  9633  146F  0827               	movf	??___ftpack+2,w
  9634  1470  04A2               	iorwf	___ftpack@arg+2,f
  9635  1471  0824               	movf	___ftpack@sign,w
  9636  1472  1903               	btfsc	3,2
  9637  1473  0008               	return
  9638  1474  17A2               	bsf	___ftpack@arg+2,7
  9639  1475  0008               	return
  9640  1476                     __end_of___ftpack:	
  9641                           
  9642                           	psect	text29
  9643  1210                     __ptext29:	
  9644 ;; *************** function _allPeripheralInit *****************
  9645 ;; Defined at:
  9646 ;;		line 959 in file "main.c"
  9647 ;; Parameters:    Size  Location     Type
  9648 ;;		None
  9649 ;; Auto vars:     Size  Location     Type
  9650 ;;		None
  9651 ;; Return value:  Size  Location     Type
  9652 ;;                  1    wreg      void 
  9653 ;; Registers used:
  9654 ;;		wreg, status,2, status,0, pclath, cstack
  9655 ;; Tracked objects:
  9656 ;;		On entry : 0/0
  9657 ;;		On exit  : 0/0
  9658 ;;		Unchanged: 0/0
  9659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9664 ;;Total ram usage:        0 bytes
  9665 ;; Hardware stack levels used:    1
  9666 ;; Hardware stack levels required when called:    3
  9667 ;; This function calls:
  9668 ;;		_CCP10_Initialize
  9669 ;;		_CCP7_Initialize
  9670 ;;		_CCP8_Initialize
  9671 ;;		_CCP9_Initialize
  9672 ;;		_EUSART_Initialize
  9673 ;;		_TMR10_Initialize
  9674 ;;		_TMR1_Initialize
  9675 ;;		_TMR2_Initialize
  9676 ;;		_TMR3_Initialize
  9677 ;;		_TMR4_Initialize
  9678 ;;		_TMR5_Initialize
  9679 ;;		_TMR6_Initialize
  9680 ;;		_TMR8_Initialize
  9681 ;; This function is called by:
  9682 ;;		_main
  9683 ;; This function uses a non-reentrant model
  9684 ;;
  9685                           
  9686                           
  9687                           ;psect for function _allPeripheralInit
  9688  1210                     _allPeripheralInit:	
  9689                           
  9690                           ;main.c: 960: EUSART_Initialize();
  9691                           
  9692                           ;incstack = 0
  9693                           ; Regs used in _allPeripheralInit: [wreg+status,2+status,0+pclath+cstack]
  9694  1210  3190  20D9  3192   	fcall	_EUSART_Initialize
  9695                           
  9696                           ;main.c: 961: TMR1_Initialize();
  9697  1213  3190  2024  3192   	fcall	_TMR1_Initialize
  9698                           
  9699                           ;main.c: 962: TMR2_Initialize();
  9700  1216  3190  2010  3192   	fcall	_TMR2_Initialize
  9701                           
  9702                           ;main.c: 963: TMR3_Initialize();
  9703  1219  3190  203A  3192   	fcall	_TMR3_Initialize
  9704                           
  9705                           ;main.c: 964: TMR4_Initialize();
  9706  121C  3190  202F  3192   	fcall	_TMR4_Initialize
  9707                           
  9708                           ;main.c: 965: TMR5_Initialize();
  9709  121F  3190  201A  3192   	fcall	_TMR5_Initialize
  9710                           
  9711                           ;main.c: 966: TMR6_Initialize();
  9712  1222  319F  27C6  3192   	fcall	_TMR6_Initialize
  9713                           
  9714                           ;main.c: 968: TMR8_Initialize();
  9715  1225  319F  27CF  3192   	fcall	_TMR8_Initialize
  9716                           
  9717                           ;main.c: 969: TMR10_Initialize();
  9718  1228  319F  27BD  3192   	fcall	_TMR10_Initialize
  9719                           
  9720                           ;main.c: 970: CCP9_Initialize();
  9721  122B  319F  27F6  3192   	fcall	_CCP9_Initialize
  9722                           
  9723                           ;main.c: 971: CCP8_Initialize();
  9724  122E  319F  27EC  3192   	fcall	_CCP8_Initialize
  9725                           
  9726                           ;main.c: 972: CCP7_Initialize();
  9727  1231  319F  27E2  3192   	fcall	_CCP7_Initialize
  9728                           
  9729                           ;main.c: 973: CCP10_Initialize();
  9730  1234  319F  27D8         	fcall	_CCP10_Initialize
  9731  1236  0008               	return
  9732  1237                     __end_of_allPeripheralInit:	
  9733                           
  9734                           	psect	text30
  9735  1FCF                     __ptext30:	
  9736 ;; *************** function _TMR8_Initialize *****************
  9737 ;; Defined at:
  9738 ;;		line 1169 in file "main.c"
  9739 ;; Parameters:    Size  Location     Type
  9740 ;;		None
  9741 ;; Auto vars:     Size  Location     Type
  9742 ;;		None
  9743 ;; Return value:  Size  Location     Type
  9744 ;;                  1    wreg      void 
  9745 ;; Registers used:
  9746 ;;		wreg, status,2
  9747 ;; Tracked objects:
  9748 ;;		On entry : 0/0
  9749 ;;		On exit  : 0/0
  9750 ;;		Unchanged: 0/0
  9751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9756 ;;Total ram usage:        0 bytes
  9757 ;; Hardware stack levels used:    1
  9758 ;; Hardware stack levels required when called:    2
  9759 ;; This function calls:
  9760 ;;		Nothing
  9761 ;; This function is called by:
  9762 ;;		_allPeripheralInit
  9763 ;; This function uses a non-reentrant model
  9764 ;;
  9765                           
  9766                           
  9767                           ;psect for function _TMR8_Initialize
  9768  1FCF                     _TMR8_Initialize:	
  9769                           
  9770                           ;main.c: 1174: T8CON = 0x1F;
  9771                           
  9772                           ;incstack = 0
  9773                           ; Regs used in _TMR8_Initialize: [wreg+status,2]
  9774  1FCF  301F               	movlw	31
  9775  1FD0  002B               	movlb	11	; select bank11
  9776  1FD1  0097               	movwf	23	;volatile
  9777                           
  9778                           ;main.c: 1180: TMR8 = 0x00;
  9779  1FD2  0195               	clrf	21	;volatile
  9780                           
  9781                           ;main.c: 1183: PIR2bits.TMR8IF = 0;
  9782  1FD3  0020               	movlb	0	; select bank0
  9783  1FD4  1092               	bcf	18,1	;volatile
  9784                           
  9785                           ;main.c: 1186: PIE2bits.TMR8IE = 1;
  9786  1FD5  0021               	movlb	1	; select bank1
  9787  1FD6  1492               	bsf	18,1	;volatile
  9788  1FD7  0008               	return
  9789  1FD8                     __end_of_TMR8_Initialize:	
  9790                           
  9791                           	psect	text31
  9792  1FC6                     __ptext31:	
  9793 ;; *************** function _TMR6_Initialize *****************
  9794 ;; Defined at:
  9795 ;;		line 1150 in file "main.c"
  9796 ;; Parameters:    Size  Location     Type
  9797 ;;		None
  9798 ;; Auto vars:     Size  Location     Type
  9799 ;;		None
  9800 ;; Return value:  Size  Location     Type
  9801 ;;                  1    wreg      void 
  9802 ;; Registers used:
  9803 ;;		wreg, status,2
  9804 ;; Tracked objects:
  9805 ;;		On entry : 0/0
  9806 ;;		On exit  : 0/0
  9807 ;;		Unchanged: 0/0
  9808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9813 ;;Total ram usage:        0 bytes
  9814 ;; Hardware stack levels used:    1
  9815 ;; Hardware stack levels required when called:    2
  9816 ;; This function calls:
  9817 ;;		Nothing
  9818 ;; This function is called by:
  9819 ;;		_allPeripheralInit
  9820 ;; This function uses a non-reentrant model
  9821 ;;
  9822                           
  9823                           
  9824                           ;psect for function _TMR6_Initialize
  9825  1FC6                     _TMR6_Initialize:	
  9826                           
  9827                           ;main.c: 1155: T6CON = 0x08;
  9828                           
  9829                           ;incstack = 0
  9830                           ; Regs used in _TMR6_Initialize: [wreg+status,2]
  9831  1FC6  3008               	movlw	8
  9832  1FC7  0028               	movlb	8	; select bank8
  9833  1FC8  009E               	movwf	30	;volatile
  9834                           
  9835                           ;main.c: 1161: TMR6 = 0x00;
  9836  1FC9  019C               	clrf	28	;volatile
  9837                           
  9838                           ;main.c: 1164: PIR3bits.TMR6IF = 0;
  9839  1FCA  0020               	movlb	0	; select bank0
  9840  1FCB  1193               	bcf	19,3	;volatile
  9841                           
  9842                           ;main.c: 1167: PIE3bits.TMR6IE = 1;
  9843  1FCC  0021               	movlb	1	; select bank1
  9844  1FCD  1593               	bsf	19,3	;volatile
  9845  1FCE  0008               	return
  9846  1FCF                     __end_of_TMR6_Initialize:	
  9847                           
  9848                           	psect	text32
  9849  101A                     __ptext32:	
  9850 ;; *************** function _TMR5_Initialize *****************
  9851 ;; Defined at:
  9852 ;;		line 1078 in file "main.c"
  9853 ;; Parameters:    Size  Location     Type
  9854 ;;		None
  9855 ;; Auto vars:     Size  Location     Type
  9856 ;;		None
  9857 ;; Return value:  Size  Location     Type
  9858 ;;                  1    wreg      void 
  9859 ;; Registers used:
  9860 ;;		status,2
  9861 ;; Tracked objects:
  9862 ;;		On entry : 0/0
  9863 ;;		On exit  : 0/0
  9864 ;;		Unchanged: 0/0
  9865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9870 ;;Total ram usage:        0 bytes
  9871 ;; Hardware stack levels used:    1
  9872 ;; Hardware stack levels required when called:    2
  9873 ;; This function calls:
  9874 ;;		Nothing
  9875 ;; This function is called by:
  9876 ;;		_allPeripheralInit
  9877 ;; This function uses a non-reentrant model
  9878 ;;
  9879                           
  9880                           
  9881                           ;psect for function _TMR5_Initialize
  9882  101A                     _TMR5_Initialize:	
  9883                           
  9884                           ;main.c: 1083: T5CON = 0x00;
  9885                           
  9886                           ;incstack = 0
  9887                           ; Regs used in _TMR5_Initialize: [status,2]
  9888  101A  0028               	movlb	8	; select bank8
  9889  101B  019A               	clrf	26	;volatile
  9890                           
  9891                           ;main.c: 1086: T5GCON = 0x00;
  9892  101C  019B               	clrf	27	;volatile
  9893                           
  9894                           ;main.c: 1089: TMR5H = 0x00;
  9895  101D  0199               	clrf	25	;volatile
  9896                           
  9897                           ;main.c: 1092: TMR5L = 0x00;
  9898  101E  0198               	clrf	24	;volatile
  9899                           
  9900                           ;main.c: 1095: PIR3bits.TMR5IF = 0;
  9901  101F  0020               	movlb	0	; select bank0
  9902  1020  1113               	bcf	19,2	;volatile
  9903                           
  9904                           ;main.c: 1098: PIE3bits.TMR5IE = 1;
  9905  1021  0021               	movlb	1	; select bank1
  9906  1022  1513               	bsf	19,2	;volatile
  9907  1023  0008               	return
  9908  1024                     __end_of_TMR5_Initialize:	
  9909                           
  9910                           	psect	text33
  9911  102F                     __ptext33:	
  9912 ;; *************** function _TMR4_Initialize *****************
  9913 ;; Defined at:
  9914 ;;		line 1126 in file "main.c"
  9915 ;; Parameters:    Size  Location     Type
  9916 ;;		None
  9917 ;; Auto vars:     Size  Location     Type
  9918 ;;		None
  9919 ;; Return value:  Size  Location     Type
  9920 ;;                  1    wreg      void 
  9921 ;; Registers used:
  9922 ;;		wreg, status,2
  9923 ;; Tracked objects:
  9924 ;;		On entry : 0/0
  9925 ;;		On exit  : 0/0
  9926 ;;		Unchanged: 0/0
  9927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9932 ;;Total ram usage:        0 bytes
  9933 ;; Hardware stack levels used:    1
  9934 ;; Hardware stack levels required when called:    2
  9935 ;; This function calls:
  9936 ;;		Nothing
  9937 ;; This function is called by:
  9938 ;;		_allPeripheralInit
  9939 ;; This function uses a non-reentrant model
  9940 ;;
  9941                           
  9942                           
  9943                           ;psect for function _TMR4_Initialize
  9944  102F                     _TMR4_Initialize:	
  9945                           
  9946                           ;main.c: 1131: T4CON = 0x08;
  9947                           
  9948                           ;incstack = 0
  9949                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
  9950  102F  3008               	movlw	8
  9951  1030  0028               	movlb	8	; select bank8
  9952  1031  0097               	movwf	23	;volatile
  9953                           
  9954                           ;main.c: 1137: TMR4 = 0x00;
  9955  1032  0195               	clrf	21	;volatile
  9956                           
  9957                           ;main.c: 1140: PIR3bits.TMR4IF = 0;
  9958  1033  0020               	movlb	0	; select bank0
  9959  1034  1093               	bcf	19,1	;volatile
  9960                           
  9961                           ;main.c: 1143: PIE3bits.TMR4IE = 1;
  9962  1035  0021               	movlb	1	; select bank1
  9963  1036  1493               	bsf	19,1	;volatile
  9964                           
  9965                           ;main.c: 1144: GIE = 1;
  9966  1037  178B               	bsf	11,7	;volatile
  9967                           
  9968                           ;main.c: 1147: PEIE = 1;
  9969  1038  170B               	bsf	11,6	;volatile
  9970  1039  0008               	return
  9971  103A                     __end_of_TMR4_Initialize:	
  9972                           
  9973                           	psect	text34
  9974  103A                     __ptext34:	
  9975 ;; *************** function _TMR3_Initialize *****************
  9976 ;; Defined at:
  9977 ;;		line 1048 in file "main.c"
  9978 ;; Parameters:    Size  Location     Type
  9979 ;;		None
  9980 ;; Auto vars:     Size  Location     Type
  9981 ;;		None
  9982 ;; Return value:  Size  Location     Type
  9983 ;;                  1    wreg      void 
  9984 ;; Registers used:
  9985 ;;		status,2
  9986 ;; Tracked objects:
  9987 ;;		On entry : 0/0
  9988 ;;		On exit  : 0/0
  9989 ;;		Unchanged: 0/0
  9990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9995 ;;Total ram usage:        0 bytes
  9996 ;; Hardware stack levels used:    1
  9997 ;; Hardware stack levels required when called:    2
  9998 ;; This function calls:
  9999 ;;		Nothing
 10000 ;; This function is called by:
 10001 ;;		_allPeripheralInit
 10002 ;; This function uses a non-reentrant model
 10003 ;;
 10004                           
 10005                           
 10006                           ;psect for function _TMR3_Initialize
 10007  103A                     _TMR3_Initialize:	
 10008                           
 10009                           ;main.c: 1051: T3CON = 0x00;
 10010                           
 10011                           ;incstack = 0
 10012                           ; Regs used in _TMR3_Initialize: [status,2]
 10013  103A  0028               	movlb	8	; select bank8
 10014  103B  0193               	clrf	19	;volatile
 10015                           
 10016                           ;main.c: 1054: T3GCON = 0x00;
 10017  103C  0194               	clrf	20	;volatile
 10018                           
 10019                           ;main.c: 1057: TMR3H = 0x00;
 10020  103D  0192               	clrf	18	;volatile
 10021                           
 10022                           ;main.c: 1060: TMR3L = 0x00;
 10023  103E  0191               	clrf	17	;volatile
 10024                           
 10025                           ;main.c: 1063: PIR3bits.TMR3IF = 0;
 10026  103F  0020               	movlb	0	; select bank0
 10027  1040  1013               	bcf	19,0	;volatile
 10028                           
 10029                           ;main.c: 1066: PIE3bits.TMR3IE = 1;
 10030  1041  0021               	movlb	1	; select bank1
 10031  1042  1413               	bsf	19,0	;volatile
 10032                           
 10033                           ;main.c: 1072: GIE = 1;
 10034  1043  178B               	bsf	11,7	;volatile
 10035                           
 10036                           ;main.c: 1075: PEIE = 1;
 10037  1044  170B               	bsf	11,6	;volatile
 10038  1045  0008               	return
 10039  1046                     __end_of_TMR3_Initialize:	
 10040                           
 10041                           	psect	text35
 10042  1010                     __ptext35:	
 10043 ;; *************** function _TMR2_Initialize *****************
 10044 ;; Defined at:
 10045 ;;		line 1101 in file "main.c"
 10046 ;; Parameters:    Size  Location     Type
 10047 ;;		None
 10048 ;; Auto vars:     Size  Location     Type
 10049 ;;		None
 10050 ;; Return value:  Size  Location     Type
 10051 ;;                  1    wreg      void 
 10052 ;; Registers used:
 10053 ;;		wreg, status,2
 10054 ;; Tracked objects:
 10055 ;;		On entry : 0/0
 10056 ;;		On exit  : 0/0
 10057 ;;		Unchanged: 0/0
 10058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 10062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 10063 ;;Total ram usage:        0 bytes
 10064 ;; Hardware stack levels used:    1
 10065 ;; Hardware stack levels required when called:    2
 10066 ;; This function calls:
 10067 ;;		Nothing
 10068 ;; This function is called by:
 10069 ;;		_allPeripheralInit
 10070 ;; This function uses a non-reentrant model
 10071 ;;
 10072                           
 10073                           
 10074                           ;psect for function _TMR2_Initialize
 10075  1010                     _TMR2_Initialize:	
 10076                           
 10077                           ;main.c: 1106: T2CON = 0x08;
 10078                           
 10079                           ;incstack = 0
 10080                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 10081  1010  3008               	movlw	8
 10082  1011  0020               	movlb	0	; select bank0
 10083  1012  009C               	movwf	28	;volatile
 10084                           
 10085                           ;main.c: 1112: TMR2 = 0x00;
 10086  1013  019A               	clrf	26	;volatile
 10087                           
 10088                           ;main.c: 1115: PIR1bits.TMR2IF = 0;
 10089  1014  1091               	bcf	17,1	;volatile
 10090                           
 10091                           ;main.c: 1118: PIE1bits.TMR2IE = 1;
 10092  1015  0021               	movlb	1	; select bank1
 10093  1016  1491               	bsf	17,1	;volatile
 10094                           
 10095                           ;main.c: 1119: GIE = 1;
 10096  1017  178B               	bsf	11,7	;volatile
 10097                           
 10098                           ;main.c: 1122: PEIE = 1;
 10099  1018  170B               	bsf	11,6	;volatile
 10100  1019  0008               	return
 10101  101A                     __end_of_TMR2_Initialize:	
 10102                           
 10103                           	psect	text36
 10104  1024                     __ptext36:	
 10105 ;; *************** function _TMR1_Initialize *****************
 10106 ;; Defined at:
 10107 ;;		line 1017 in file "main.c"
 10108 ;; Parameters:    Size  Location     Type
 10109 ;;		None
 10110 ;; Auto vars:     Size  Location     Type
 10111 ;;		None
 10112 ;; Return value:  Size  Location     Type
 10113 ;;                  1    wreg      void 
 10114 ;; Registers used:
 10115 ;;		status,2
 10116 ;; Tracked objects:
 10117 ;;		On entry : 0/0
 10118 ;;		On exit  : 0/0
 10119 ;;		Unchanged: 0/0
 10120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 10124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 10125 ;;Total ram usage:        0 bytes
 10126 ;; Hardware stack levels used:    1
 10127 ;; Hardware stack levels required when called:    2
 10128 ;; This function calls:
 10129 ;;		Nothing
 10130 ;; This function is called by:
 10131 ;;		_allPeripheralInit
 10132 ;; This function uses a non-reentrant model
 10133 ;;
 10134                           
 10135                           
 10136                           ;psect for function _TMR1_Initialize
 10137  1024                     _TMR1_Initialize:	
 10138                           
 10139                           ;main.c: 1020: T1CON = 0x00;
 10140                           
 10141                           ;incstack = 0
 10142                           ; Regs used in _TMR1_Initialize: [status,2]
 10143  1024  0020               	movlb	0	; select bank0
 10144  1025  0198               	clrf	24	;volatile
 10145                           
 10146                           ;main.c: 1023: T1GCON = 0x00;
 10147  1026  0199               	clrf	25	;volatile
 10148                           
 10149                           ;main.c: 1026: TMR1H = 0x00;
 10150  1027  0197               	clrf	23	;volatile
 10151                           
 10152                           ;main.c: 1029: TMR1L = 0x00;
 10153  1028  0196               	clrf	22	;volatile
 10154                           
 10155                           ;main.c: 1032: PIR1bits.TMR1IF = 0;
 10156  1029  1011               	bcf	17,0	;volatile
 10157                           
 10158                           ;main.c: 1035: PIE1bits.TMR1IE = 1;
 10159  102A  0021               	movlb	1	; select bank1
 10160  102B  1411               	bsf	17,0	;volatile
 10161                           
 10162                           ;main.c: 1041: GIE = 1;
 10163  102C  178B               	bsf	11,7	;volatile
 10164                           
 10165                           ;main.c: 1044: PEIE = 1;
 10166  102D  170B               	bsf	11,6	;volatile
 10167  102E  0008               	return
 10168  102F                     __end_of_TMR1_Initialize:	
 10169                           
 10170                           	psect	text37
 10171  1FBD                     __ptext37:	
 10172 ;; *************** function _TMR10_Initialize *****************
 10173 ;; Defined at:
 10174 ;;		line 1188 in file "main.c"
 10175 ;; Parameters:    Size  Location     Type
 10176 ;;		None
 10177 ;; Auto vars:     Size  Location     Type
 10178 ;;		None
 10179 ;; Return value:  Size  Location     Type
 10180 ;;                  1    wreg      void 
 10181 ;; Registers used:
 10182 ;;		wreg, status,2
 10183 ;; Tracked objects:
 10184 ;;		On entry : 0/0
 10185 ;;		On exit  : 0/0
 10186 ;;		Unchanged: 0/0
 10187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 10191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 10192 ;;Total ram usage:        0 bytes
 10193 ;; Hardware stack levels used:    1
 10194 ;; Hardware stack levels required when called:    2
 10195 ;; This function calls:
 10196 ;;		Nothing
 10197 ;; This function is called by:
 10198 ;;		_allPeripheralInit
 10199 ;; This function uses a non-reentrant model
 10200 ;;
 10201                           
 10202                           
 10203                           ;psect for function _TMR10_Initialize
 10204  1FBD                     _TMR10_Initialize:	
 10205                           
 10206                           ;main.c: 1193: T10CON = 0x1F;
 10207                           
 10208                           ;incstack = 0
 10209                           ; Regs used in _TMR10_Initialize: [wreg+status,2]
 10210  1FBD  301F               	movlw	31
 10211  1FBE  002B               	movlb	11	; select bank11
 10212  1FBF  009E               	movwf	30	;volatile
 10213                           
 10214                           ;main.c: 1199: TMR10 = 0x00;
 10215  1FC0  019C               	clrf	28	;volatile
 10216                           
 10217                           ;main.c: 1202: PIR2bits.TMR10IF = 0;
 10218  1FC1  0020               	movlb	0	; select bank0
 10219  1FC2  1112               	bcf	18,2	;volatile
 10220                           
 10221                           ;main.c: 1205: PIE2bits.TMR10IE = 1;
 10222  1FC3  0021               	movlb	1	; select bank1
 10223  1FC4  1512               	bsf	18,2	;volatile
 10224  1FC5  0008               	return
 10225  1FC6                     __end_of_TMR10_Initialize:	
 10226                           
 10227                           	psect	text38
 10228  10D9                     __ptext38:	
 10229 ;; *************** function _EUSART_Initialize *****************
 10230 ;; Defined at:
 10231 ;;		line 979 in file "main.c"
 10232 ;; Parameters:    Size  Location     Type
 10233 ;;		None
 10234 ;; Auto vars:     Size  Location     Type
 10235 ;;		None
 10236 ;; Return value:  Size  Location     Type
 10237 ;;                  1    wreg      void 
 10238 ;; Registers used:
 10239 ;;		wreg
 10240 ;; Tracked objects:
 10241 ;;		On entry : 0/0
 10242 ;;		On exit  : 0/0
 10243 ;;		Unchanged: 0/0
 10244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 10248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 10249 ;;Total ram usage:        0 bytes
 10250 ;; Hardware stack levels used:    1
 10251 ;; Hardware stack levels required when called:    2
 10252 ;; This function calls:
 10253 ;;		Nothing
 10254 ;; This function is called by:
 10255 ;;		_allPeripheralInit
 10256 ;; This function uses a non-reentrant model
 10257 ;;
 10258                           
 10259                           
 10260                           ;psect for function _EUSART_Initialize
 10261  10D9                     _EUSART_Initialize:	
 10262                           
 10263                           ;main.c: 980: PIE1bits.RC1IE = 0;
 10264                           
 10265                           ;incstack = 0
 10266                           ; Regs used in _EUSART_Initialize: [wreg]
 10267  10D9  0021               	movlb	1	; select bank1
 10268  10DA  1291               	bcf	17,5	;volatile
 10269                           
 10270                           ;main.c: 981: PIE1bits.TX1IE = 0;
 10271  10DB  1211               	bcf	17,4	;volatile
 10272                           
 10273                           ;main.c: 986: BAUD1CON = 0x0A;
 10274  10DC  300A               	movlw	10
 10275  10DD  0023               	movlb	3	; select bank3
 10276  10DE  009F               	movwf	31	;volatile
 10277                           
 10278                           ;main.c: 989: RC1STA = 0x90;
 10279  10DF  3090               	movlw	144
 10280  10E0  009D               	movwf	29	;volatile
 10281                           
 10282                           ;main.c: 992: TX1STA = 0x24;
 10283  10E1  3024               	movlw	36
 10284  10E2  009E               	movwf	30	;volatile
 10285                           
 10286                           ;main.c: 997: SP1BRGL = 0xA0;
 10287  10E3  30A0               	movlw	160
 10288  10E4  009B               	movwf	27	;volatile
 10289                           
 10290                           ;main.c: 999: SP1BRGH = 0x01;
 10291  10E5  3001               	movlw	1
 10292  10E6  009C               	movwf	28	;volatile
 10293                           
 10294                           ;main.c: 1002: GIE = 1;
 10295  10E7  178B               	bsf	11,7	;volatile
 10296                           
 10297                           ;main.c: 1005: PEIE = 1;
 10298  10E8  170B               	bsf	11,6	;volatile
 10299                           
 10300                           ;main.c: 1008: PIE1bits.RC1IE = 1;
 10301  10E9  0021               	movlb	1	; select bank1
 10302  10EA  1691               	bsf	17,5	;volatile
 10303                           
 10304                           ;main.c: 1011: TX1STAbits.TXEN = 1;
 10305  10EB  0023               	movlb	3	; select bank3
 10306  10EC  169E               	bsf	30,5	;volatile
 10307                           
 10308                           ;main.c: 1014: RC1STAbits.SPEN = 1;
 10309  10ED  179D               	bsf	29,7	;volatile
 10310  10EE  0008               	return
 10311  10EF                     __end_of_EUSART_Initialize:	
 10312                           
 10313                           	psect	text39
 10314  1FF6                     __ptext39:	
 10315 ;; *************** function _CCP9_Initialize *****************
 10316 ;; Defined at:
 10317 ;;		line 1207 in file "main.c"
 10318 ;; Parameters:    Size  Location     Type
 10319 ;;		None
 10320 ;; Auto vars:     Size  Location     Type
 10321 ;;		None
 10322 ;; Return value:  Size  Location     Type
 10323 ;;                  1    wreg      void 
 10324 ;; Registers used:
 10325 ;;		wreg, status,2
 10326 ;; Tracked objects:
 10327 ;;		On entry : 0/0
 10328 ;;		On exit  : 0/0
 10329 ;;		Unchanged: 0/0
 10330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 10334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 10335 ;;Total ram usage:        0 bytes
 10336 ;; Hardware stack levels used:    1
 10337 ;; Hardware stack levels required when called:    2
 10338 ;; This function calls:
 10339 ;;		Nothing
 10340 ;; This function is called by:
 10341 ;;		_allPeripheralInit
 10342 ;; This function uses a non-reentrant model
 10343 ;;
 10344                           
 10345                           
 10346                           ;psect for function _CCP9_Initialize
 10347  1FF6                     _CCP9_Initialize:	
 10348                           
 10349                           ;main.c: 1211: CCP9CON = 0x84;
 10350                           
 10351                           ;incstack = 0
 10352                           ; Regs used in _CCP9_Initialize: [wreg+status,2]
 10353  1FF6  3084               	movlw	132
 10354  1FF7  002C               	movlb	12	; select bank12
 10355  1FF8  009C               	movwf	28	;volatile
 10356                           
 10357                           ;main.c: 1214: CCPR9H = 0x00;
 10358  1FF9  019B               	clrf	27	;volatile
 10359                           
 10360                           ;main.c: 1217: CCPR9L = 0x00;
 10361  1FFA  019A               	clrf	26	;volatile
 10362                           
 10363                           ;main.c: 1223: PIR4bits.CCP9IF = 0;
 10364  1FFB  0020               	movlb	0	; select bank0
 10365  1FFC  1314               	bcf	20,6	;volatile
 10366                           
 10367                           ;main.c: 1226: PIE4bits.CCP9IE = 1;
 10368  1FFD  0021               	movlb	1	; select bank1
 10369  1FFE  1714               	bsf	20,6	;volatile
 10370  1FFF  0008               	return
 10371  2000                     __end_of_CCP9_Initialize:	
 10372                           
 10373                           	psect	text40
 10374  1FEC                     __ptext40:	
 10375 ;; *************** function _CCP8_Initialize *****************
 10376 ;; Defined at:
 10377 ;;		line 1270 in file "main.c"
 10378 ;; Parameters:    Size  Location     Type
 10379 ;;		None
 10380 ;; Auto vars:     Size  Location     Type
 10381 ;;		None
 10382 ;; Return value:  Size  Location     Type
 10383 ;;                  1    wreg      void 
 10384 ;; Registers used:
 10385 ;;		wreg, status,2
 10386 ;; Tracked objects:
 10387 ;;		On entry : 0/0
 10388 ;;		On exit  : 0/0
 10389 ;;		Unchanged: 0/0
 10390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 10394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 10395 ;;Total ram usage:        0 bytes
 10396 ;; Hardware stack levels used:    1
 10397 ;; Hardware stack levels required when called:    2
 10398 ;; This function calls:
 10399 ;;		Nothing
 10400 ;; This function is called by:
 10401 ;;		_allPeripheralInit
 10402 ;; This function uses a non-reentrant model
 10403 ;;
 10404                           
 10405                           
 10406                           ;psect for function _CCP8_Initialize
 10407  1FEC                     _CCP8_Initialize:	
 10408                           
 10409                           ;main.c: 1274: CCP9CON = 0x84;
 10410                           
 10411                           ;incstack = 0
 10412                           ; Regs used in _CCP8_Initialize: [wreg+status,2]
 10413  1FEC  3084               	movlw	132
 10414  1FED  002C               	movlb	12	; select bank12
 10415  1FEE  009C               	movwf	28	;volatile
 10416                           
 10417                           ;main.c: 1277: CCPR8H = 0x00;
 10418  1FEF  0198               	clrf	24	;volatile
 10419                           
 10420                           ;main.c: 1280: CCPR8L = 0x00;
 10421  1FF0  0197               	clrf	23	;volatile
 10422                           
 10423                           ;main.c: 1286: PIR4bits.CCP8IF = 0;
 10424  1FF1  0020               	movlb	0	; select bank0
 10425  1FF2  1194               	bcf	20,3	;volatile
 10426                           
 10427                           ;main.c: 1289: PIE4bits.CCP8IE = 1;
 10428  1FF3  0021               	movlb	1	; select bank1
 10429  1FF4  1594               	bsf	20,3	;volatile
 10430  1FF5  0008               	return
 10431  1FF6                     __end_of_CCP8_Initialize:	
 10432                           
 10433                           	psect	text41
 10434  1FE2                     __ptext41:	
 10435 ;; *************** function _CCP7_Initialize *****************
 10436 ;; Defined at:
 10437 ;;		line 1249 in file "main.c"
 10438 ;; Parameters:    Size  Location     Type
 10439 ;;		None
 10440 ;; Auto vars:     Size  Location     Type
 10441 ;;		None
 10442 ;; Return value:  Size  Location     Type
 10443 ;;                  1    wreg      void 
 10444 ;; Registers used:
 10445 ;;		wreg, status,2
 10446 ;; Tracked objects:
 10447 ;;		On entry : 0/0
 10448 ;;		On exit  : 0/0
 10449 ;;		Unchanged: 0/0
 10450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 10454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 10455 ;;Total ram usage:        0 bytes
 10456 ;; Hardware stack levels used:    1
 10457 ;; Hardware stack levels required when called:    2
 10458 ;; This function calls:
 10459 ;;		Nothing
 10460 ;; This function is called by:
 10461 ;;		_allPeripheralInit
 10462 ;; This function uses a non-reentrant model
 10463 ;;
 10464                           
 10465                           
 10466                           ;psect for function _CCP7_Initialize
 10467  1FE2                     _CCP7_Initialize:	
 10468                           
 10469                           ;main.c: 1253: CCP7CON = 0x84;
 10470                           
 10471                           ;incstack = 0
 10472                           ; Regs used in _CCP7_Initialize: [wreg+status,2]
 10473  1FE2  3084               	movlw	132
 10474  1FE3  002C               	movlb	12	; select bank12
 10475  1FE4  0096               	movwf	22	;volatile
 10476                           
 10477                           ;main.c: 1256: CCPR7H = 0x00;
 10478  1FE5  0195               	clrf	21	;volatile
 10479                           
 10480                           ;main.c: 1259: CCPR7L = 0x00;
 10481  1FE6  0194               	clrf	20	;volatile
 10482                           
 10483                           ;main.c: 1265: PIR4bits.CCP7IF = 0;
 10484  1FE7  0020               	movlb	0	; select bank0
 10485  1FE8  1114               	bcf	20,2	;volatile
 10486                           
 10487                           ;main.c: 1268: PIE4bits.CCP7IE = 1;
 10488  1FE9  0021               	movlb	1	; select bank1
 10489  1FEA  1514               	bsf	20,2	;volatile
 10490  1FEB  0008               	return
 10491  1FEC                     __end_of_CCP7_Initialize:	
 10492                           
 10493                           	psect	text42
 10494  1FD8                     __ptext42:	
 10495 ;; *************** function _CCP10_Initialize *****************
 10496 ;; Defined at:
 10497 ;;		line 1228 in file "main.c"
 10498 ;; Parameters:    Size  Location     Type
 10499 ;;		None
 10500 ;; Auto vars:     Size  Location     Type
 10501 ;;		None
 10502 ;; Return value:  Size  Location     Type
 10503 ;;                  1    wreg      void 
 10504 ;; Registers used:
 10505 ;;		wreg, status,2
 10506 ;; Tracked objects:
 10507 ;;		On entry : 0/0
 10508 ;;		On exit  : 0/0
 10509 ;;		Unchanged: 0/0
 10510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 10514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 10515 ;;Total ram usage:        0 bytes
 10516 ;; Hardware stack levels used:    1
 10517 ;; Hardware stack levels required when called:    2
 10518 ;; This function calls:
 10519 ;;		Nothing
 10520 ;; This function is called by:
 10521 ;;		_allPeripheralInit
 10522 ;; This function uses a non-reentrant model
 10523 ;;
 10524                           
 10525                           
 10526                           ;psect for function _CCP10_Initialize
 10527  1FD8                     _CCP10_Initialize:	
 10528                           
 10529                           ;main.c: 1232: CCP10CON = 0x84;
 10530                           
 10531                           ;incstack = 0
 10532                           ; Regs used in _CCP10_Initialize: [wreg+status,2]
 10533  1FD8  3084               	movlw	132
 10534  1FD9  002C               	movlb	12	; select bank12
 10535  1FDA  009F               	movwf	31	;volatile
 10536                           
 10537                           ;main.c: 1235: CCPR10H = 0x00;
 10538  1FDB  019E               	clrf	30	;volatile
 10539                           
 10540                           ;main.c: 1238: CCPR10L = 0x00;
 10541  1FDC  019D               	clrf	29	;volatile
 10542                           
 10543                           ;main.c: 1244: PIR4bits.CCP10IF = 0;
 10544  1FDD  0020               	movlb	0	; select bank0
 10545  1FDE  1394               	bcf	20,7	;volatile
 10546                           
 10547                           ;main.c: 1247: PIE4bits.CCP10IE = 1;
 10548  1FDF  0021               	movlb	1	; select bank1
 10549  1FE0  1794               	bsf	20,7	;volatile
 10550  1FE1  0008               	return
 10551  1FE2                     __end_of_CCP10_Initialize:	
 10552                           
 10553                           	psect	text43
 10554  1075                     __ptext43:	
 10555 ;; *************** function _TransmissionIndicationLedBlinking *****************
 10556 ;; Defined at:
 10557 ;;		line 1349 in file "main.c"
 10558 ;; Parameters:    Size  Location     Type
 10559 ;;		None
 10560 ;; Auto vars:     Size  Location     Type
 10561 ;;		None
 10562 ;; Return value:  Size  Location     Type
 10563 ;;                  1    wreg      void 
 10564 ;; Registers used:
 10565 ;;		wreg
 10566 ;; Tracked objects:
 10567 ;;		On entry : 0/0
 10568 ;;		On exit  : 0/0
 10569 ;;		Unchanged: 0/0
 10570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10573 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
 10574 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0
 10575 ;;Total ram usage:        2 bytes
 10576 ;; Hardware stack levels used:    1
 10577 ;; Hardware stack levels required when called:    2
 10578 ;; This function calls:
 10579 ;;		Nothing
 10580 ;; This function is called by:
 10581 ;;		_main
 10582 ;; This function uses a non-reentrant model
 10583 ;;
 10584                           
 10585                           
 10586                           ;psect for function _TransmissionIndicationLedBlinking
 10587  1075                     _TransmissionIndicationLedBlinking:	
 10588                           
 10589                           ;main.c: 1350: PORTFbits.RF0 = 0;
 10590                           
 10591                           ;incstack = 0
 10592                           ; Regs used in _TransmissionIndicationLedBlinking: [wreg]
 10593  1075  0025               	movlb	5	; select bank5
 10594  1076  100C               	bcf	12,0	;volatile
 10595                           
 10596                           ;main.c: 1351: _delay((unsigned long)((100)*(16000000/4000.0)));
 10597  1077  3003               	movlw	3
 10598  1078  0020               	movlb	0	; select bank0
 10599  1079  00A1               	movwf	??_TransmissionIndicationLedBlinking+1
 10600  107A  3008               	movlw	8
 10601  107B  00A0               	movwf	??_TransmissionIndicationLedBlinking
 10602  107C  3077               	movlw	119
 10603  107D                     u6757:	
 10604  107D  0B89               	decfsz	9,f
 10605  107E  287D               	goto	u6757
 10606  107F  0BA0               	decfsz	??_TransmissionIndicationLedBlinking,f
 10607  1080  287D               	goto	u6757
 10608  1081  0BA1               	decfsz	??_TransmissionIndicationLedBlinking+1,f
 10609  1082  287D               	goto	u6757
 10610                           
 10611                           ;main.c: 1352: PORTFbits.RF0 = 1;
 10612  1083  0025               	movlb	5	; select bank5
 10613  1084  140C               	bsf	12,0	;volatile
 10614  1085  0008               	return
 10615  1086                     __end_of_TransmissionIndicationLedBlinking:	
 10616                           
 10617                           	psect	text44
 10618  13A9                     __ptext44:	
 10619 ;; *************** function _SwitchOnStatustToGatway *****************
 10620 ;; Defined at:
 10621 ;;		line 1377 in file "main.c"
 10622 ;; Parameters:    Size  Location     Type
 10623 ;;  SwitchOnNumb    2    0[BANK0 ] const int 
 10624 ;; Auto vars:     Size  Location     Type
 10625 ;;		None
 10626 ;; Return value:  Size  Location     Type
 10627 ;;                  1    wreg      void 
 10628 ;; Registers used:
 10629 ;;		wreg, status,2, status,0
 10630 ;; Tracked objects:
 10631 ;;		On entry : 0/0
 10632 ;;		On exit  : 0/0
 10633 ;;		Unchanged: 0/0
 10634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10635 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
 10636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10637 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
 10638 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0
 10639 ;;Total ram usage:        3 bytes
 10640 ;; Hardware stack levels used:    1
 10641 ;; Hardware stack levels required when called:    2
 10642 ;; This function calls:
 10643 ;;		Nothing
 10644 ;; This function is called by:
 10645 ;;		_main
 10646 ;; This function uses a non-reentrant model
 10647 ;;
 10648                           
 10649                           
 10650                           ;psect for function _SwitchOnStatustToGatway
 10651  13A9                     _SwitchOnStatustToGatway:	
 10652                           
 10653                           ;main.c: 1379: TX1REG = 'R';_delay((unsigned long)((1)*(16000000/4000.0)));
 10654                           
 10655                           ;incstack = 0
 10656                           ; Regs used in _SwitchOnStatustToGatway: [wreg+status,2+status,0]
 10657  13A9  3052               	movlw	82
 10658  13AA  0023               	movlb	3	; select bank3
 10659  13AB  009A               	movwf	26	;volatile
 10660  13AC  3006               	movlw	6
 10661  13AD  0020               	movlb	0	; select bank0
 10662  13AE  00A2               	movwf	??_SwitchOnStatustToGatway
 10663  13AF  3030               	movlw	48
 10664  13B0                     u6767:	
 10665  13B0  0B89               	decfsz	9,f
 10666  13B1  2BB0               	goto	u6767
 10667  13B2  0BA2               	decfsz	??_SwitchOnStatustToGatway,f
 10668  13B3  2BB0               	goto	u6767
 10669  13B4  0000               	nop
 10670                           
 10671                           ;main.c: 1380: TX1REG = '1';_delay((unsigned long)((1)*(16000000/4000.0)));
 10672  13B5  3031               	movlw	49
 10673  13B6  0023               	movlb	3	; select bank3
 10674  13B7  009A               	movwf	26	;volatile
 10675  13B8  3006               	movlw	6
 10676  13B9  0020               	movlb	0	; select bank0
 10677  13BA  00A2               	movwf	??_SwitchOnStatustToGatway
 10678  13BB  3030               	movlw	48
 10679  13BC                     u6777:	
 10680  13BC  0B89               	decfsz	9,f
 10681  13BD  2BBC               	goto	u6777
 10682  13BE  0BA2               	decfsz	??_SwitchOnStatustToGatway,f
 10683  13BF  2BBC               	goto	u6777
 10684  13C0  0000               	nop
 10685                           
 10686                           ;main.c: 1381: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
 10687  13C1  3030               	movlw	48
 10688  13C2  0023               	movlb	3	; select bank3
 10689  13C3  009A               	movwf	26	;volatile
 10690  13C4  3006               	movlw	6
 10691  13C5  0020               	movlb	0	; select bank0
 10692  13C6  00A2               	movwf	??_SwitchOnStatustToGatway
 10693  13C7  3030               	movlw	48
 10694  13C8                     u6787:	
 10695  13C8  0B89               	decfsz	9,f
 10696  13C9  2BC8               	goto	u6787
 10697  13CA  0BA2               	decfsz	??_SwitchOnStatustToGatway,f
 10698  13CB  2BC8               	goto	u6787
 10699  13CC  0000               	nop
 10700                           
 10701                           ;main.c: 1382: TX1REG = SwitchOnNumber+'0';_delay((unsigned long)((1)*(16000000/4000.0))
      +                          );
 10702  13CD  0020               	movlb	0	; select bank0
 10703  13CE  0820               	movf	SwitchOnStatustToGatway@SwitchOnNumber,w
 10704  13CF  3E30               	addlw	48
 10705  13D0  0023               	movlb	3	; select bank3
 10706  13D1  009A               	movwf	26	;volatile
 10707  13D2  3006               	movlw	6
 10708  13D3  0020               	movlb	0	; select bank0
 10709  13D4  00A2               	movwf	??_SwitchOnStatustToGatway
 10710  13D5  3030               	movlw	48
 10711  13D6                     u6797:	
 10712  13D6  0B89               	decfsz	9,f
 10713  13D7  2BD6               	goto	u6797
 10714  13D8  0BA2               	decfsz	??_SwitchOnStatustToGatway,f
 10715  13D9  2BD6               	goto	u6797
 10716  13DA  0000               	nop
 10717  13DB  0008               	return
 10718  13DC                     __end_of_SwitchOnStatustToGatway:	
 10719                           
 10720                           	psect	text45
 10721  1376                     __ptext45:	
 10722 ;; *************** function _SwitchOffStatustToGatway *****************
 10723 ;; Defined at:
 10724 ;;		line 1370 in file "main.c"
 10725 ;; Parameters:    Size  Location     Type
 10726 ;;  SwitchOffNum    2    0[BANK0 ] const int 
 10727 ;; Auto vars:     Size  Location     Type
 10728 ;;		None
 10729 ;; Return value:  Size  Location     Type
 10730 ;;                  1    wreg      void 
 10731 ;; Registers used:
 10732 ;;		wreg, status,2, status,0
 10733 ;; Tracked objects:
 10734 ;;		On entry : 0/0
 10735 ;;		On exit  : 0/0
 10736 ;;		Unchanged: 0/0
 10737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10738 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
 10739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10740 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
 10741 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0
 10742 ;;Total ram usage:        3 bytes
 10743 ;; Hardware stack levels used:    1
 10744 ;; Hardware stack levels required when called:    2
 10745 ;; This function calls:
 10746 ;;		Nothing
 10747 ;; This function is called by:
 10748 ;;		_main
 10749 ;; This function uses a non-reentrant model
 10750 ;;
 10751                           
 10752                           
 10753                           ;psect for function _SwitchOffStatustToGatway
 10754  1376                     _SwitchOffStatustToGatway:	
 10755                           
 10756                           ;main.c: 1372: TX1REG = 'R';_delay((unsigned long)((1)*(16000000/4000.0)));
 10757                           
 10758                           ;incstack = 0
 10759                           ; Regs used in _SwitchOffStatustToGatway: [wreg+status,2+status,0]
 10760  1376  3052               	movlw	82
 10761  1377  0023               	movlb	3	; select bank3
 10762  1378  009A               	movwf	26	;volatile
 10763  1379  3006               	movlw	6
 10764  137A  0020               	movlb	0	; select bank0
 10765  137B  00A2               	movwf	??_SwitchOffStatustToGatway
 10766  137C  3030               	movlw	48
 10767  137D                     u6807:	
 10768  137D  0B89               	decfsz	9,f
 10769  137E  2B7D               	goto	u6807
 10770  137F  0BA2               	decfsz	??_SwitchOffStatustToGatway,f
 10771  1380  2B7D               	goto	u6807
 10772  1381  0000               	nop
 10773                           
 10774                           ;main.c: 1373: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
 10775  1382  3030               	movlw	48
 10776  1383  0023               	movlb	3	; select bank3
 10777  1384  009A               	movwf	26	;volatile
 10778  1385  3006               	movlw	6
 10779  1386  0020               	movlb	0	; select bank0
 10780  1387  00A2               	movwf	??_SwitchOffStatustToGatway
 10781  1388  3030               	movlw	48
 10782  1389                     u6817:	
 10783  1389  0B89               	decfsz	9,f
 10784  138A  2B89               	goto	u6817
 10785  138B  0BA2               	decfsz	??_SwitchOffStatustToGatway,f
 10786  138C  2B89               	goto	u6817
 10787  138D  0000               	nop
 10788                           
 10789                           ;main.c: 1374: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
 10790  138E  3030               	movlw	48
 10791  138F  0023               	movlb	3	; select bank3
 10792  1390  009A               	movwf	26	;volatile
 10793  1391  3006               	movlw	6
 10794  1392  0020               	movlb	0	; select bank0
 10795  1393  00A2               	movwf	??_SwitchOffStatustToGatway
 10796  1394  3030               	movlw	48
 10797  1395                     u6827:	
 10798  1395  0B89               	decfsz	9,f
 10799  1396  2B95               	goto	u6827
 10800  1397  0BA2               	decfsz	??_SwitchOffStatustToGatway,f
 10801  1398  2B95               	goto	u6827
 10802  1399  0000               	nop
 10803                           
 10804                           ;main.c: 1375: TX1REG = SwitchOffNumber+'0';_delay((unsigned long)((1)*(16000000/4000.0)
      +                          ));
 10805  139A  0020               	movlb	0	; select bank0
 10806  139B  0820               	movf	SwitchOffStatustToGatway@SwitchOffNumber,w
 10807  139C  3E30               	addlw	48
 10808  139D  0023               	movlb	3	; select bank3
 10809  139E  009A               	movwf	26	;volatile
 10810  139F  3006               	movlw	6
 10811  13A0  0020               	movlb	0	; select bank0
 10812  13A1  00A2               	movwf	??_SwitchOffStatustToGatway
 10813  13A2  3030               	movlw	48
 10814  13A3                     u6837:	
 10815  13A3  0B89               	decfsz	9,f
 10816  13A4  2BA3               	goto	u6837
 10817  13A5  0BA2               	decfsz	??_SwitchOffStatustToGatway,f
 10818  13A6  2BA3               	goto	u6837
 10819  13A7  0000               	nop
 10820  13A8  0008               	return
 10821  13A9                     __end_of_SwitchOffStatustToGatway:	
 10822                           
 10823                           	psect	text46
 10824  1064                     __ptext46:	
 10825 ;; *************** function _ReceivingIndicationLedBlinking *****************
 10826 ;; Defined at:
 10827 ;;		line 1354 in file "main.c"
 10828 ;; Parameters:    Size  Location     Type
 10829 ;;		None
 10830 ;; Auto vars:     Size  Location     Type
 10831 ;;		None
 10832 ;; Return value:  Size  Location     Type
 10833 ;;                  1    wreg      void 
 10834 ;; Registers used:
 10835 ;;		wreg
 10836 ;; Tracked objects:
 10837 ;;		On entry : 0/0
 10838 ;;		On exit  : 0/0
 10839 ;;		Unchanged: 0/0
 10840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10843 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
 10844 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0
 10845 ;;Total ram usage:        2 bytes
 10846 ;; Hardware stack levels used:    1
 10847 ;; Hardware stack levels required when called:    2
 10848 ;; This function calls:
 10849 ;;		Nothing
 10850 ;; This function is called by:
 10851 ;;		_main
 10852 ;; This function uses a non-reentrant model
 10853 ;;
 10854                           
 10855                           
 10856                           ;psect for function _ReceivingIndicationLedBlinking
 10857  1064                     _ReceivingIndicationLedBlinking:	
 10858                           
 10859                           ;main.c: 1355: PORTFbits.RF1 = 0;
 10860                           
 10861                           ;incstack = 0
 10862                           ; Regs used in _ReceivingIndicationLedBlinking: [wreg]
 10863  1064  0025               	movlb	5	; select bank5
 10864  1065  108C               	bcf	12,1	;volatile
 10865                           
 10866                           ;main.c: 1356: _delay((unsigned long)((100)*(16000000/4000.0)));
 10867  1066  3003               	movlw	3
 10868  1067  0020               	movlb	0	; select bank0
 10869  1068  00A1               	movwf	??_ReceivingIndicationLedBlinking+1
 10870  1069  3008               	movlw	8
 10871  106A  00A0               	movwf	??_ReceivingIndicationLedBlinking
 10872  106B  3077               	movlw	119
 10873  106C                     u6847:	
 10874  106C  0B89               	decfsz	9,f
 10875  106D  286C               	goto	u6847
 10876  106E  0BA0               	decfsz	??_ReceivingIndicationLedBlinking,f
 10877  106F  286C               	goto	u6847
 10878  1070  0BA1               	decfsz	??_ReceivingIndicationLedBlinking+1,f
 10879  1071  286C               	goto	u6847
 10880                           
 10881                           ;main.c: 1357: PORTFbits.RF1 = 1;
 10882  1072  0025               	movlb	5	; select bank5
 10883  1073  148C               	bsf	12,1	;volatile
 10884  1074  0008               	return
 10885  1075                     __end_of_ReceivingIndicationLedBlinking:	
 10886                           
 10887                           	psect	text47
 10888  1289                     __ptext47:	
 10889 ;; *************** function _GPIO_pin_Initialize *****************
 10890 ;; Defined at:
 10891 ;;		line 909 in file "main.c"
 10892 ;; Parameters:    Size  Location     Type
 10893 ;;		None
 10894 ;; Auto vars:     Size  Location     Type
 10895 ;;		None
 10896 ;; Return value:  Size  Location     Type
 10897 ;;                  1    wreg      void 
 10898 ;; Registers used:
 10899 ;;		status,2, status,0, pclath, cstack
 10900 ;; Tracked objects:
 10901 ;;		On entry : 0/0
 10902 ;;		On exit  : 0/0
 10903 ;;		Unchanged: 0/0
 10904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 10908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 10909 ;;Total ram usage:        0 bytes
 10910 ;; Hardware stack levels used:    1
 10911 ;; Hardware stack levels required when called:    3
 10912 ;; This function calls:
 10913 ;;		_clearAllPorts
 10914 ;;		_pinINIT_extra
 10915 ;; This function is called by:
 10916 ;;		_main
 10917 ;; This function uses a non-reentrant model
 10918 ;;
 10919                           
 10920                           
 10921                           ;psect for function _GPIO_pin_Initialize
 10922  1289                     _GPIO_pin_Initialize:	
 10923                           
 10924                           ;main.c: 910: clearAllPorts();
 10925                           
 10926                           ;incstack = 0
 10927                           ; Regs used in _GPIO_pin_Initialize: [status,2+status,0+pclath+cstack]
 10928  1289  3190  2086  3192   	fcall	_clearAllPorts
 10929                           
 10930                           ;main.c: 911: pinINIT_extra();
 10931  128C  3190  20AF  3192   	fcall	_pinINIT_extra
 10932                           
 10933                           ;main.c: 912: TRISDbits.TRISD6 = 1;
 10934  128F  0021               	movlb	1	; select bank1
 10935  1290  170F               	bsf	15,6	;volatile
 10936                           
 10937                           ;main.c: 913: TRISDbits.TRISD7 = 1;
 10938  1291  178F               	bsf	15,7	;volatile
 10939                           
 10940                           ;main.c: 914: TRISBbits.TRISB0 = 1;
 10941  1292  140D               	bsf	13,0	;volatile
 10942                           
 10943                           ;main.c: 915: TRISBbits.TRISB1 = 1;
 10944  1293  148D               	bsf	13,1	;volatile
 10945                           
 10946                           ;main.c: 916: TRISBbits.TRISB2 = 1;
 10947  1294  150D               	bsf	13,2	;volatile
 10948                           
 10949                           ;main.c: 917: TRISBbits.TRISB3 = 1;
 10950  1295  158D               	bsf	13,3	;volatile
 10951                           
 10952                           ;main.c: 918: TRISBbits.TRISB4 = 1;
 10953  1296  160D               	bsf	13,4	;volatile
 10954                           
 10955                           ;main.c: 919: TRISBbits.TRISB5 = 1;
 10956  1297  168D               	bsf	13,5	;volatile
 10957                           
 10958                           ;main.c: 920: TRISDbits.TRISD5 = 1;
 10959  1298  168F               	bsf	15,5	;volatile
 10960                           
 10961                           ;main.c: 924: TRISEbits.TRISE0 = 0;
 10962  1299  1010               	bcf	16,0	;volatile
 10963                           
 10964                           ;main.c: 925: TRISEbits.TRISE1 = 0;
 10965  129A  1090               	bcf	16,1	;volatile
 10966                           
 10967                           ;main.c: 926: TRISGbits.TRISG0 = 0;
 10968  129B  0026               	movlb	6	; select bank6
 10969  129C  100D               	bcf	13,0	;volatile
 10970                           
 10971                           ;main.c: 927: TRISGbits.TRISG3 = 0;
 10972  129D  118D               	bcf	13,3	;volatile
 10973                           
 10974                           ;main.c: 928: TRISGbits.TRISG4 = 0;
 10975  129E  120D               	bcf	13,4	;volatile
 10976                           
 10977                           ;main.c: 929: TRISFbits.TRISF6 = 0;
 10978  129F  130C               	bcf	12,6	;volatile
 10979                           
 10980                           ;main.c: 930: TRISFbits.TRISF5 = 0;
 10981  12A0  128C               	bcf	12,5	;volatile
 10982                           
 10983                           ;main.c: 931: TRISFbits.TRISF4 = 0;
 10984  12A1  120C               	bcf	12,4	;volatile
 10985                           
 10986                           ;main.c: 932: TRISFbits.TRISF3 = 0;
 10987  12A2  118C               	bcf	12,3	;volatile
 10988                           
 10989                           ;main.c: 935: TRISEbits.TRISE3 = 1;
 10990  12A3  0021               	movlb	1	; select bank1
 10991  12A4  1590               	bsf	16,3	;volatile
 10992                           
 10993                           ;main.c: 936: TRISEbits.TRISE3 = 1;
 10994  12A5  1590               	bsf	16,3	;volatile
 10995                           
 10996                           ;main.c: 937: TRISEbits.TRISE5 = 1;
 10997  12A6  1690               	bsf	16,5	;volatile
 10998                           
 10999                           ;main.c: 938: TRISEbits.TRISE4 = 1;
 11000  12A7  1610               	bsf	16,4	;volatile
 11001                           
 11002                           ;main.c: 939: TRISFbits.TRISF0 = 0;
 11003  12A8  0026               	movlb	6	; select bank6
 11004  12A9  100C               	bcf	12,0	;volatile
 11005                           
 11006                           ;main.c: 940: TRISFbits.TRISF1 = 0;
 11007  12AA  108C               	bcf	12,1	;volatile
 11008                           
 11009                           ;main.c: 941: TRISFbits.TRISF2 = 0;
 11010  12AB  110C               	bcf	12,2	;volatile
 11011                           
 11012                           ;main.c: 944: TRISDbits.TRISD4 = 0;
 11013  12AC  0021               	movlb	1	; select bank1
 11014  12AD  120F               	bcf	15,4	;volatile
 11015                           
 11016                           ;main.c: 945: TRISDbits.TRISD3 = 0;
 11017  12AE  118F               	bcf	15,3	;volatile
 11018                           
 11019                           ;main.c: 946: TRISDbits.TRISD2 = 0;
 11020  12AF  110F               	bcf	15,2	;volatile
 11021                           
 11022                           ;main.c: 950: TRISCbits.TRISC6 = 0;
 11023  12B0  130E               	bcf	14,6	;volatile
 11024                           
 11025                           ;main.c: 951: TRISCbits.TRISC7 = 1;
 11026  12B1  178E               	bsf	14,7	;volatile
 11027                           
 11028                           ;main.c: 953: clearAllPorts();
 11029  12B2  3190  2086         	fcall	_clearAllPorts
 11030  12B4  0008               	return
 11031  12B5                     __end_of_GPIO_pin_Initialize:	
 11032                           
 11033                           	psect	text48
 11034  10AF                     __ptext48:	
 11035 ;; *************** function _pinINIT_extra *****************
 11036 ;; Defined at:
 11037 ;;		line 1396 in file "main.c"
 11038 ;; Parameters:    Size  Location     Type
 11039 ;;		None
 11040 ;; Auto vars:     Size  Location     Type
 11041 ;;		None
 11042 ;; Return value:  Size  Location     Type
 11043 ;;                  1    wreg      void 
 11044 ;; Registers used:
 11045 ;;		status,2
 11046 ;; Tracked objects:
 11047 ;;		On entry : 0/0
 11048 ;;		On exit  : 0/0
 11049 ;;		Unchanged: 0/0
 11050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 11051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 11052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 11053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 11054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 11055 ;;Total ram usage:        0 bytes
 11056 ;; Hardware stack levels used:    1
 11057 ;; Hardware stack levels required when called:    2
 11058 ;; This function calls:
 11059 ;;		Nothing
 11060 ;; This function is called by:
 11061 ;;		_GPIO_pin_Initialize
 11062 ;; This function uses a non-reentrant model
 11063 ;;
 11064                           
 11065                           
 11066                           ;psect for function _pinINIT_extra
 11067  10AF                     _pinINIT_extra:	
 11068                           
 11069                           ;main.c: 1397: ANSELG=0x00; WPUG = 0;
 11070                           
 11071                           ;incstack = 0
 11072                           ; Regs used in _pinINIT_extra: [status,2]
 11073  10AF  0028               	movlb	8	; select bank8
 11074  10B0  018D               	clrf	13	;volatile
 11075  10B1  0029               	movlb	9	; select bank9
 11076  10B2  018D               	clrf	13	;volatile
 11077                           
 11078                           ;main.c: 1399: ANSELF=0x00;
 11079  10B3  0028               	movlb	8	; select bank8
 11080  10B4  018C               	clrf	12	;volatile
 11081                           
 11082                           ;main.c: 1401: ANSELE=0x00; WPUE=0x00;
 11083  10B5  0023               	movlb	3	; select bank3
 11084  10B6  0190               	clrf	16	;volatile
 11085  10B7  0024               	movlb	4	; select bank4
 11086  10B8  0190               	clrf	16	;volatile
 11087                           
 11088                           ;main.c: 1403: ANSELD=0x00; WPUD=0x00;
 11089  10B9  0023               	movlb	3	; select bank3
 11090  10BA  018F               	clrf	15	;volatile
 11091  10BB  0024               	movlb	4	; select bank4
 11092  10BC  018F               	clrf	15	;volatile
 11093                           
 11094                           ;main.c: 1405: ANSELB=0x00; WPUB=0x00;
 11095  10BD  0023               	movlb	3	; select bank3
 11096  10BE  018D               	clrf	13	;volatile
 11097  10BF  0024               	movlb	4	; select bank4
 11098  10C0  018D               	clrf	13	;volatile
 11099                           
 11100                           ;main.c: 1407: ANSELA=0x00;
 11101  10C1  0023               	movlb	3	; select bank3
 11102  10C2  018C               	clrf	12	;volatile
 11103  10C3  0008               	return
 11104  10C4                     __end_of_pinINIT_extra:	
 11105                           
 11106                           	psect	text49
 11107  1086                     __ptext49:	
 11108 ;; *************** function _clearAllPorts *****************
 11109 ;; Defined at:
 11110 ;;		line 1413 in file "main.c"
 11111 ;; Parameters:    Size  Location     Type
 11112 ;;		None
 11113 ;; Auto vars:     Size  Location     Type
 11114 ;;		None
 11115 ;; Return value:  Size  Location     Type
 11116 ;;                  1    wreg      void 
 11117 ;; Registers used:
 11118 ;;		None
 11119 ;; Tracked objects:
 11120 ;;		On entry : 0/0
 11121 ;;		On exit  : 0/0
 11122 ;;		Unchanged: 0/0
 11123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 11124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 11125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 11126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 11127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 11128 ;;Total ram usage:        0 bytes
 11129 ;; Hardware stack levels used:    1
 11130 ;; Hardware stack levels required when called:    2
 11131 ;; This function calls:
 11132 ;;		Nothing
 11133 ;; This function is called by:
 11134 ;;		_GPIO_pin_Initialize
 11135 ;; This function uses a non-reentrant model
 11136 ;;
 11137                           
 11138                           
 11139                           ;psect for function _clearAllPorts
 11140  1086                     _clearAllPorts:	
 11141                           
 11142                           ;main.c: 1417: PORTEbits.RE0=0;
 11143                           
 11144                           ;incstack = 0
 11145                           ; Regs used in _clearAllPorts: []
 11146  1086  0020               	movlb	0	; select bank0
 11147  1087  1010               	bcf	16,0	;volatile
 11148                           
 11149                           ;main.c: 1418: PORTEbits.RE1=0;
 11150  1088  1090               	bcf	16,1	;volatile
 11151                           
 11152                           ;main.c: 1419: PORTGbits.RG0=0;
 11153  1089  0025               	movlb	5	; select bank5
 11154  108A  100D               	bcf	13,0	;volatile
 11155                           
 11156                           ;main.c: 1420: PORTGbits.RG3=0;
 11157  108B  118D               	bcf	13,3	;volatile
 11158                           
 11159                           ;main.c: 1421: PORTGbits.RG4=0;
 11160  108C  120D               	bcf	13,4	;volatile
 11161                           
 11162                           ;main.c: 1422: PORTFbits.RF6=0;
 11163  108D  130C               	bcf	12,6	;volatile
 11164                           
 11165                           ;main.c: 1423: PORTFbits.RF5=0;
 11166  108E  128C               	bcf	12,5	;volatile
 11167                           
 11168                           ;main.c: 1424: PORTFbits.RF4=0;
 11169  108F  120C               	bcf	12,4	;volatile
 11170                           
 11171                           ;main.c: 1425: PORTFbits.RF0 = 1;
 11172  1090  140C               	bsf	12,0	;volatile
 11173                           
 11174                           ;main.c: 1426: PORTFbits.RF1 = 1;
 11175  1091  148C               	bsf	12,1	;volatile
 11176                           
 11177                           ;main.c: 1427: PORTFbits.RF2 = 1;
 11178  1092  150C               	bsf	12,2	;volatile
 11179                           
 11180                           ;main.c: 1429: PORTDbits.RD4=0;
 11181  1093  0020               	movlb	0	; select bank0
 11182  1094  120F               	bcf	15,4	;volatile
 11183                           
 11184                           ;main.c: 1430: PORTDbits.RD3=0;
 11185  1095  118F               	bcf	15,3	;volatile
 11186                           
 11187                           ;main.c: 1431: PORTDbits.RD2=0;
 11188  1096  110F               	bcf	15,2	;volatile
 11189                           
 11190                           ;main.c: 1432: PORTFbits.RF3 = 0;
 11191  1097  0025               	movlb	5	; select bank5
 11192  1098  118C               	bcf	12,3	;volatile
 11193  1099  0008               	return
 11194  109A                     __end_of_clearAllPorts:	
 11195                           
 11196                           	psect	intentry
 11197  0004                     __pintentry:	
 11198 ;; *************** function _isr *****************
 11199 ;; Defined at:
 11200 ;;		line 314 in file "main.c"
 11201 ;; Parameters:    Size  Location     Type
 11202 ;;		None
 11203 ;; Auto vars:     Size  Location     Type
 11204 ;;		None
 11205 ;; Return value:  Size  Location     Type
 11206 ;;                  1    wreg      void 
 11207 ;; Registers used:
 11208 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11209 ;; Tracked objects:
 11210 ;;		On entry : 0/0
 11211 ;;		On exit  : 0/0
 11212 ;;		Unchanged: 0/0
 11213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 11214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 11215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 11216 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0
 11217 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0
 11218 ;;Total ram usage:        2 bytes
 11219 ;; Hardware stack levels used:    1
 11220 ;; Hardware stack levels required when called:    1
 11221 ;; This function calls:
 11222 ;;		_errorsISR
 11223 ;; This function is called by:
 11224 ;;		Interrupt level 1
 11225 ;; This function uses a non-reentrant model
 11226 ;;
 11227                           
 11228  0004                     _isr:	
 11229                           
 11230                           ;incstack = 0
 11231  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11232                           
 11233                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11234  0005  3180               	pagesel	$
 11235  0006  0020               	movlb	0	; select bank0
 11236  0007  087F               	movf	127,w
 11237  0008  00F9               	movwf	??_isr+1
 11238                           
 11239                           ;main.c: 317: if(RC1IF){
 11240  0009  1E91               	btfss	17,5	;volatile
 11241  000A  2868               	goto	i1l4167
 11242                           
 11243                           ;main.c: 318: if(RC1STAbits.OERR){
 11244  000B  0023               	movlb	3	; select bank3
 11245  000C  1C9D               	btfss	29,1	;volatile
 11246  000D  2817               	goto	i1l4135
 11247                           
 11248                           ;main.c: 319: RC1STAbits.CREN = 0;
 11249  000E  121D               	bcf	29,4	;volatile
 11250                           
 11251                           ;main.c: 320: RC1STAbits.CREN = 1;
 11252  000F  161D               	bsf	29,4	;volatile
 11253                           
 11254                           ;main.c: 321: errorsISR("EROV");
 11255  0010  3025               	movlw	low (STR_14| (0+32768))
 11256  0011  00F5               	movwf	errorsISR@errNum
 11257  0012  3098               	movlw	high (STR_14| (0+32768))
 11258  0013  00F6               	movwf	errorsISR@errNum+1
 11259  0014  3190  209A  3180   	fcall	_errorsISR
 11260  0017                     i1l4135:	
 11261                           
 11262                           ;main.c: 322: }
 11263                           ;main.c: 324: mainReceivedDataBuffer[mainReceivedDataPosition]=RC1REG;
 11264  0017  0023               	movlb	3	; select bank3
 11265  0018  0819               	movf	25,w	;volatile
 11266  0019  00F8               	movwf	??_isr
 11267  001A  0870               	movf	_mainReceivedDataPosition,w
 11268  001B  3E5C               	addlw	(low (_mainReceivedDataBuffer| (0+512)))& (0+255)
 11269  001C  0086               	movwf	6
 11270  001D  3002               	movlw	2	; select bank4/5
 11271  001E  0087               	movwf	7
 11272  001F  0878               	movf	??_isr,w
 11273  0020  0081               	movwf	1
 11274                           
 11275                           ;main.c: 327: TX1REG=mainReceivedDataBuffer[mainReceivedDataPosition];
 11276  0021  0870               	movf	_mainReceivedDataPosition,w
 11277  0022  3E5C               	addlw	(low (_mainReceivedDataBuffer| (0+512)))& (0+255)
 11278  0023  0086               	movwf	6
 11279  0024  3002               	movlw	2	; select bank4/5
 11280  0025  0087               	movwf	7
 11281  0026  0801               	movf	1,w
 11282  0027  009A               	movwf	26	;volatile
 11283                           
 11284                           ;main.c: 329: if(mainReceivedDataBuffer[0]=='%'){
 11285  0028  3025               	movlw	37
 11286  0029  0024               	movlb	4	; select bank4
 11287  002A  065C               	xorwf	_mainReceivedDataBuffer^(0+512),w
 11288  002B  1D03               	btfss	3,2
 11289  002C  283D               	goto	i1l4149
 11290                           
 11291                           ;main.c: 330: mainReceivedDataPosition++;
 11292  002D  3001               	movlw	1
 11293  002E  07F0               	addwf	_mainReceivedDataPosition,f
 11294  002F  3000               	movlw	0
 11295  0030  3DF1               	addwfc	_mainReceivedDataPosition+1,f
 11296                           
 11297                           ;main.c: 331: if(mainReceivedDataPosition>15){
 11298  0031  0871               	movf	_mainReceivedDataPosition+1,w
 11299  0032  3A80               	xorlw	128
 11300  0033  00F8               	movwf	??_isr
 11301  0034  3080               	movlw	128
 11302  0035  0278               	subwf	??_isr,w
 11303  0036  1D03               	skipz
 11304  0037  283A               	goto	u352_25
 11305  0038  3010               	movlw	16
 11306  0039  0270               	subwf	_mainReceivedDataPosition,w
 11307  003A                     u352_25:	
 11308  003A  1C03               	skipc
 11309  003B  2868               	goto	i1l4167
 11310  003C  2852               	goto	i1l4157
 11311  003D                     i1l4149:	
 11312                           ;main.c: 335: }
 11313                           ;main.c: 336: }
 11314                           
 11315                           ;main.c: 334: RC1IF=0;
 11316                           
 11317                           ;main.c: 333: mainReceivedDataPosition=0;
 11318                           
 11319                           ;main.c: 332: mainDataReceived=1;
 11320                           
 11321                           
 11322                           ;main.c: 337: else if((mainReceivedDataBuffer[0]=='R') && mainReceivedDataBuffer[0] != (
      +                          0))
 11323  003D  3052               	movlw	82
 11324  003E  0024               	movlb	4	; select bank4
 11325  003F  065C               	xorwf	_mainReceivedDataBuffer^(0+512),w
 11326  0040  1D03               	btfss	3,2
 11327  0041  285C               	goto	i1l489
 11328  0042  085C               	movf	_mainReceivedDataBuffer^(0+512),w
 11329  0043  1903               	btfsc	3,2
 11330  0044  285C               	goto	i1l489
 11331                           
 11332                           ;main.c: 338: {
 11333                           ;main.c: 339: mainReceivedDataPosition++;
 11334  0045  3001               	movlw	1
 11335  0046  07F0               	addwf	_mainReceivedDataPosition,f
 11336  0047  3000               	movlw	0
 11337  0048  3DF1               	addwfc	_mainReceivedDataPosition+1,f
 11338                           
 11339                           ;main.c: 340: if(mainReceivedDataBuffer[mainReceivedDataPosition] == '|'){
 11340  0049  0870               	movf	_mainReceivedDataPosition,w
 11341  004A  3E5C               	addlw	(low (_mainReceivedDataBuffer| (0+512)))& (0+255)
 11342  004B  0086               	movwf	6
 11343  004C  3002               	movlw	2	; select bank4/5
 11344  004D  0087               	movwf	7
 11345  004E  307C               	movlw	124
 11346  004F  0601               	xorwf	1,w
 11347  0050  1D03               	btfss	3,2
 11348  0051  2868               	goto	i1l4167
 11349  0052                     i1l4157:	
 11350                           
 11351                           ;main.c: 341: mainDataReceived=1;
 11352  0052  3001               	movlw	1
 11353  0053  0022               	movlb	2	; select bank2
 11354  0054  00D0               	movwf	_mainDataReceived^(0+256)
 11355  0055  3000               	movlw	0
 11356  0056  00D1               	movwf	(_mainDataReceived^(0+256)+1)
 11357                           
 11358                           ;main.c: 342: mainReceivedDataPosition=0;
 11359  0057  01F0               	clrf	_mainReceivedDataPosition
 11360  0058  01F1               	clrf	_mainReceivedDataPosition+1
 11361                           
 11362                           ;main.c: 343: RC1IF=0;
 11363  0059  0020               	movlb	0	; select bank0
 11364  005A  1291               	bcf	17,5	;volatile
 11365                           
 11366                           ;main.c: 344: }
 11367                           ;main.c: 345: }
 11368  005B  2868               	goto	i1l4167
 11369  005C                     i1l489:	
 11370                           
 11371                           ;main.c: 346: else{
 11372                           ;main.c: 347: RC1STAbits.CREN = 0;
 11373  005C  0023               	movlb	3	; select bank3
 11374  005D  121D               	bcf	29,4	;volatile
 11375                           
 11376                           ;main.c: 348: RC1STAbits.CREN = 1;
 11377  005E  161D               	bsf	29,4	;volatile
 11378                           
 11379                           ;main.c: 349: mainReceivedDataPosition=0;
 11380  005F  01F0               	clrf	_mainReceivedDataPosition
 11381  0060  01F1               	clrf	_mainReceivedDataPosition+1
 11382                           
 11383                           ;main.c: 350: errorsISR("ERRX");
 11384  0061  302A               	movlw	low (STR_15| (0+32768))
 11385  0062  00F5               	movwf	errorsISR@errNum
 11386  0063  3098               	movlw	high (STR_15| (0+32768))
 11387  0064  00F6               	movwf	errorsISR@errNum+1
 11388  0065  3190  209A  3180   	fcall	_errorsISR
 11389  0068                     i1l4167:	
 11390                           
 11391                           ;main.c: 351: }
 11392                           ;main.c: 352: }
 11393                           ;main.c: 359: if(PIE2bits.TMR10IE == 1 && PIR2bits.TMR10IF==1)
 11394  0068  0021               	movlb	1	; select bank1
 11395  0069  1D12               	btfss	18,2	;volatile
 11396  006A  2873               	goto	i1l492
 11397  006B  0020               	movlb	0	; select bank0
 11398  006C  1D12               	btfss	18,2	;volatile
 11399  006D  2873               	goto	i1l492
 11400                           
 11401                           ;main.c: 360: {
 11402                           ;main.c: 362: PIR2bits.TMR10IF=0;
 11403  006E  1112               	bcf	18,2	;volatile
 11404                           
 11405                           ;main.c: 363: T10CONbits.TMR10ON = 0;
 11406  006F  002B               	movlb	11	; select bank11
 11407  0070  111E               	bcf	30,2	;volatile
 11408                           
 11409                           ;main.c: 364: PORTFbits.RF3=0;
 11410  0071  0025               	movlb	5	; select bank5
 11411  0072  118C               	bcf	12,3	;volatile
 11412  0073                     i1l492:	
 11413                           
 11414                           ;main.c: 366: }
 11415                           ;main.c: 367: if(PIE2bits.TMR8IE==1 && PIR2bits.TMR8IF==1)
 11416  0073  0021               	movlb	1	; select bank1
 11417  0074  1C92               	btfss	18,1	;volatile
 11418  0075  2881               	goto	i1l4181
 11419  0076  0020               	movlb	0	; select bank0
 11420  0077  1C92               	btfss	18,1	;volatile
 11421  0078  2881               	goto	i1l4181
 11422                           
 11423                           ;main.c: 368: {
 11424                           ;main.c: 371: PIR2bits.TMR8IF=0;
 11425  0079  1092               	bcf	18,1	;volatile
 11426                           
 11427                           ;main.c: 372: PORTFbits.RF3=1;
 11428  007A  0025               	movlb	5	; select bank5
 11429  007B  158C               	bsf	12,3	;volatile
 11430                           
 11431                           ;main.c: 373: T8CONbits.TMR8ON=0;
 11432  007C  002B               	movlb	11	; select bank11
 11433  007D  1117               	bcf	23,2	;volatile
 11434                           
 11435                           ;main.c: 374: PR10=0xEA;
 11436  007E  30EA               	movlw	234
 11437  007F  009D               	movwf	29	;volatile
 11438                           
 11439                           ;main.c: 375: T10CONbits.TMR10ON=1;
 11440  0080  151E               	bsf	30,2	;volatile
 11441  0081                     i1l4181:	
 11442                           
 11443                           ;main.c: 376: }
 11444                           ;main.c: 379: if(PIE1bits.TMR2IE==1 && PIR1bits.TMR2IF==1)
 11445  0081  0021               	movlb	1	; select bank1
 11446  0082  1C91               	btfss	17,1	;volatile
 11447  0083  288A               	goto	i1l494
 11448  0084  0020               	movlb	0	; select bank0
 11449  0085  1C91               	btfss	17,1	;volatile
 11450  0086  288A               	goto	i1l494
 11451                           
 11452                           ;main.c: 380: {
 11453                           ;main.c: 383: PIR1bits.TMR2IF=0;
 11454  0087  1091               	bcf	17,1	;volatile
 11455                           
 11456                           ;main.c: 384: PORTDbits.RD4 = 0;
 11457  0088  120F               	bcf	15,4	;volatile
 11458                           
 11459                           ;main.c: 385: T2CONbits.TMR2ON=0;
 11460  0089  111C               	bcf	28,2	;volatile
 11461  008A                     i1l494:	
 11462                           
 11463                           ;main.c: 386: }
 11464                           ;main.c: 389: if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF==1)
 11465  008A  0021               	movlb	1	; select bank1
 11466  008B  1C11               	btfss	17,0	;volatile
 11467  008C  2896               	goto	i1l4197
 11468  008D  0020               	movlb	0	; select bank0
 11469  008E  1C11               	btfss	17,0	;volatile
 11470  008F  2896               	goto	i1l4197
 11471                           
 11472                           ;main.c: 390: {
 11473                           ;main.c: 391: PIR1bits.TMR1IF=0;
 11474  0090  1011               	bcf	17,0	;volatile
 11475                           
 11476                           ;main.c: 392: PORTDbits.RD4 = 1;
 11477  0091  160F               	bsf	15,4	;volatile
 11478                           
 11479                           ;main.c: 393: PR2=0x9F;
 11480  0092  309F               	movlw	159
 11481  0093  009B               	movwf	27	;volatile
 11482                           
 11483                           ;main.c: 394: T2CONbits.TMR2ON = 1;
 11484  0094  151C               	bsf	28,2	;volatile
 11485                           
 11486                           ;main.c: 395: T1CONbits.TMR1ON = 0;
 11487  0095  1018               	bcf	24,0	;volatile
 11488  0096                     i1l4197:	
 11489                           
 11490                           ;main.c: 397: }
 11491                           ;main.c: 401: if(PIE3bits.TMR4IE==1 && PIR3bits.TMR4IF==1)
 11492  0096  0021               	movlb	1	; select bank1
 11493  0097  1C93               	btfss	19,1	;volatile
 11494  0098  28A0               	goto	i1l496
 11495  0099  0020               	movlb	0	; select bank0
 11496  009A  1C93               	btfss	19,1	;volatile
 11497  009B  28A0               	goto	i1l496
 11498                           
 11499                           ;main.c: 402: {
 11500                           ;main.c: 403: PIR3bits.TMR4IF=0;
 11501  009C  1093               	bcf	19,1	;volatile
 11502                           
 11503                           ;main.c: 404: PORTDbits.RD3 = 0;
 11504  009D  118F               	bcf	15,3	;volatile
 11505                           
 11506                           ;main.c: 405: T4CONbits.TMR4ON=0;
 11507  009E  0028               	movlb	8	; select bank8
 11508  009F  1117               	bcf	23,2	;volatile
 11509  00A0                     i1l496:	
 11510                           
 11511                           ;main.c: 407: }
 11512                           ;main.c: 409: if(PIE3bits.TMR3IE == 1 && PIR3bits.TMR3IF==1)
 11513  00A0  0021               	movlb	1	; select bank1
 11514  00A1  1C13               	btfss	19,0	;volatile
 11515  00A2  28AD               	goto	i1l4213
 11516  00A3  0020               	movlb	0	; select bank0
 11517  00A4  1C13               	btfss	19,0	;volatile
 11518  00A5  28AD               	goto	i1l4213
 11519                           
 11520                           ;main.c: 410: {
 11521                           ;main.c: 411: PIR3bits.TMR3IF=0;
 11522  00A6  1013               	bcf	19,0	;volatile
 11523                           
 11524                           ;main.c: 412: PORTDbits.RD3 = 1;
 11525  00A7  158F               	bsf	15,3	;volatile
 11526                           
 11527                           ;main.c: 413: PR4=0x9F;
 11528  00A8  309F               	movlw	159
 11529  00A9  0028               	movlb	8	; select bank8
 11530  00AA  0096               	movwf	22	;volatile
 11531                           
 11532                           ;main.c: 414: T4CONbits.TMR4ON = 1;
 11533  00AB  1517               	bsf	23,2	;volatile
 11534                           
 11535                           ;main.c: 415: T3CONbits.TMR3ON = 0;
 11536  00AC  1013               	bcf	19,0	;volatile
 11537  00AD                     i1l4213:	
 11538                           
 11539                           ;main.c: 416: }
 11540                           ;main.c: 419: if(PIE3bits.TMR6IE == 1 && PIR3bits.TMR6IF == 1)
 11541  00AD  0021               	movlb	1	; select bank1
 11542  00AE  1D93               	btfss	19,3	;volatile
 11543  00AF  28B7               	goto	i1l498
 11544  00B0  0020               	movlb	0	; select bank0
 11545  00B1  1D93               	btfss	19,3	;volatile
 11546  00B2  28B7               	goto	i1l498
 11547                           
 11548                           ;main.c: 420: {
 11549                           ;main.c: 421: PIR3bits.TMR6IF=0;
 11550  00B3  1193               	bcf	19,3	;volatile
 11551                           
 11552                           ;main.c: 422: PORTDbits.RD2 = 0;
 11553  00B4  110F               	bcf	15,2	;volatile
 11554                           
 11555                           ;main.c: 423: T6CONbits.TMR6ON=0;
 11556  00B5  0028               	movlb	8	; select bank8
 11557  00B6  111E               	bcf	30,2	;volatile
 11558  00B7                     i1l498:	
 11559                           
 11560                           ;main.c: 424: }
 11561                           ;main.c: 426: if(PIE3bits.TMR5IE == 1 && PIR3bits.TMR5IF==1)
 11562  00B7  0021               	movlb	1	; select bank1
 11563  00B8  1D13               	btfss	19,2	;volatile
 11564  00B9  28C4               	goto	i1l4229
 11565  00BA  0020               	movlb	0	; select bank0
 11566  00BB  1D13               	btfss	19,2	;volatile
 11567  00BC  28C4               	goto	i1l4229
 11568                           
 11569                           ;main.c: 427: {
 11570                           ;main.c: 428: PIR3bits.TMR5IF=0;
 11571  00BD  1113               	bcf	19,2	;volatile
 11572                           
 11573                           ;main.c: 429: PORTDbits.RD2 = 1;
 11574  00BE  150F               	bsf	15,2	;volatile
 11575                           
 11576                           ;main.c: 430: PR6=0x9F;
 11577  00BF  309F               	movlw	159
 11578  00C0  0028               	movlb	8	; select bank8
 11579  00C1  009D               	movwf	29	;volatile
 11580                           
 11581                           ;main.c: 431: T6CONbits.TMR6ON=1;
 11582  00C2  151E               	bsf	30,2	;volatile
 11583                           
 11584                           ;main.c: 432: T5CONbits.TMR5ON=0;
 11585  00C3  101A               	bcf	26,0	;volatile
 11586  00C4                     i1l4229:	
 11587                           
 11588                           ;main.c: 433: }
 11589                           ;main.c: 439: if(PIR4bits.CCP8IF==1 || PIR4bits.CCP7IF == 1 || PIR4bits.CCP9IF==1 || PIR
      +                          4bits.CCP10IF==1){
 11590  00C4  0020               	movlb	0	; select bank0
 11591  00C5  1D94               	btfss	20,3	;volatile
 11592  00C6  1914               	btfsc	20,2	;volatile
 11593  00C7  28CC               	goto	i1l502
 11594  00C8  1B14               	btfsc	20,6	;volatile
 11595  00C9  28CC               	goto	i1l502
 11596  00CA  1F94               	btfss	20,7	;volatile
 11597  00CB  2922               	goto	i1l515
 11598  00CC                     i1l502:	
 11599                           
 11600                           ;main.c: 441: if(CCP10IF){
 11601  00CC  1B94               	btfsc	20,7	;volatile
 11602                           
 11603                           ;main.c: 442: if(CCP10IF == 1){
 11604  00CD  1F94               	btfss	20,7	;volatile
 11605  00CE  28DB               	goto	i1l4247
 11606                           
 11607                           ;main.c: 443: CCP10IF=0;
 11608  00CF  1394               	bcf	20,7	;volatile
 11609                           
 11610                           ;main.c: 444: if(start_PWM_Generation_For_DIMMER == 1)
 11611  00D0  0022               	movlb	2	; select bank2
 11612  00D1  034E               	decf	_start_PWM_Generation_For_DIMMER^(0+256),w
 11613  00D2  044F               	iorwf	(_start_PWM_Generation_For_DIMMER+1)^(0+256),w
 11614  00D3  1D03               	btfss	3,2
 11615  00D4  28D9               	goto	i1l4245
 11616                           
 11617                           ;main.c: 445: PR8 = Timer8HL;
 11618  00D5  0023               	movlb	3	; select bank3
 11619  00D6  0820               	movf	_Timer8HL^(0+384),w
 11620  00D7  002B               	movlb	11	; select bank11
 11621  00D8  0096               	movwf	22	;volatile
 11622  00D9                     i1l4245:	
 11623                           
 11624                           ;main.c: 446: T8CONbits.TMR8ON = 1;
 11625  00D9  002B               	movlb	11	; select bank11
 11626  00DA  1517               	bsf	23,2	;volatile
 11627  00DB                     i1l4247:	
 11628                           
 11629                           ;main.c: 448: }
 11630                           ;main.c: 449: }
 11631                           ;main.c: 451: if(CCP9IF){
 11632  00DB  0020               	movlb	0	; select bank0
 11633  00DC  1B14               	btfsc	20,6	;volatile
 11634                           
 11635                           ;main.c: 452: if(CCP9IF == 1){
 11636  00DD  1F14               	btfss	20,6	;volatile
 11637  00DE  28F2               	goto	i1l4265
 11638                           
 11639                           ;main.c: 453: CCP9IF=0;
 11640  00DF  1314               	bcf	20,6	;volatile
 11641                           
 11642                           ;main.c: 454: if(start_PWM_Generation_For_RedLed == 1){
 11643  00E0  0022               	movlb	2	; select bank2
 11644  00E1  034C               	decf	_start_PWM_Generation_For_RedLed^(0+256),w
 11645  00E2  044D               	iorwf	(_start_PWM_Generation_For_RedLed+1)^(0+256),w
 11646  00E3  1D03               	btfss	3,2
 11647  00E4  28F2               	goto	i1l4265
 11648                           
 11649                           ;main.c: 455: TMR1H = Timer1H;
 11650  00E5  0846               	movf	_Timer1H^(0+256),w
 11651  00E6  0020               	movlb	0	; select bank0
 11652  00E7  0097               	movwf	23	;volatile
 11653                           
 11654                           ;main.c: 456: TMR1L = Timer1L;
 11655  00E8  0022               	movlb	2	; select bank2
 11656  00E9  0844               	movf	_Timer1L^(0+256),w
 11657  00EA  0020               	movlb	0	; select bank0
 11658  00EB  0096               	movwf	22	;volatile
 11659                           
 11660                           ;main.c: 457: T1CONbits.TMR1ON = 1;
 11661  00EC  1418               	bsf	24,0	;volatile
 11662                           
 11663                           ;main.c: 458: PORTDbits.RD4=1;
 11664  00ED  160F               	bsf	15,4	;volatile
 11665                           
 11666                           ;main.c: 459: PIE1bits.TMR1IE = 1;
 11667  00EE  0021               	movlb	1	; select bank1
 11668  00EF  1411               	bsf	17,0	;volatile
 11669                           
 11670                           ;main.c: 460: PIR1bits.TMR1IF=0;
 11671  00F0  0020               	movlb	0	; select bank0
 11672  00F1  1011               	bcf	17,0	;volatile
 11673  00F2                     i1l4265:	
 11674                           
 11675                           ;main.c: 461: }
 11676                           ;main.c: 462: }
 11677                           ;main.c: 463: }
 11678                           ;main.c: 465: if(CCP8IF){
 11679  00F2  0020               	movlb	0	; select bank0
 11680  00F3  1994               	btfsc	20,3	;volatile
 11681                           
 11682                           ;main.c: 466: if(CCP8IF == 1){
 11683  00F4  1D94               	btfss	20,3	;volatile
 11684  00F5  290A               	goto	i1l4283
 11685                           
 11686                           ;main.c: 467: CCP8IF=0;
 11687  00F6  1194               	bcf	20,3	;volatile
 11688                           
 11689                           ;main.c: 468: if(start_PWM_Generation_For_GreenLed == 1){
 11690  00F7  0022               	movlb	2	; select bank2
 11691  00F8  034A               	decf	_start_PWM_Generation_For_GreenLed^(0+256),w
 11692  00F9  044B               	iorwf	(_start_PWM_Generation_For_GreenLed+1)^(0+256),w
 11693  00FA  1D03               	btfss	3,2
 11694  00FB  290A               	goto	i1l4283
 11695                           
 11696                           ;main.c: 469: TMR3H = Timer3H;
 11697  00FC  0842               	movf	_Timer3H^(0+256),w
 11698  00FD  0028               	movlb	8	; select bank8
 11699  00FE  0092               	movwf	18	;volatile
 11700                           
 11701                           ;main.c: 470: TMR3L = Timer3L;
 11702  00FF  0022               	movlb	2	; select bank2
 11703  0100  0840               	movf	_Timer3L^(0+256),w
 11704  0101  0028               	movlb	8	; select bank8
 11705  0102  0091               	movwf	17	;volatile
 11706                           
 11707                           ;main.c: 471: T3CONbits.TMR3ON = 1;
 11708  0103  1413               	bsf	19,0	;volatile
 11709                           
 11710                           ;main.c: 472: PORTDbits.RD3=1;
 11711  0104  0020               	movlb	0	; select bank0
 11712  0105  158F               	bsf	15,3	;volatile
 11713                           
 11714                           ;main.c: 473: PIE3bits.TMR3IE = 1;
 11715  0106  0021               	movlb	1	; select bank1
 11716  0107  1413               	bsf	19,0	;volatile
 11717                           
 11718                           ;main.c: 474: PIR3bits.TMR3IF = 0;
 11719  0108  0020               	movlb	0	; select bank0
 11720  0109  1013               	bcf	19,0	;volatile
 11721  010A                     i1l4283:	
 11722                           
 11723                           ;main.c: 476: }
 11724                           ;main.c: 477: }
 11725                           ;main.c: 478: }
 11726                           ;main.c: 480: if(CCP7IF){
 11727  010A  0020               	movlb	0	; select bank0
 11728  010B  1914               	btfsc	20,2	;volatile
 11729                           
 11730                           ;main.c: 481: if(CCP7IF == 1){
 11731  010C  1D14               	btfss	20,2	;volatile
 11732  010D  2922               	goto	i1l515
 11733                           
 11734                           ;main.c: 482: CCP7IF=0;
 11735  010E  1114               	bcf	20,2	;volatile
 11736                           
 11737                           ;main.c: 483: if(start_PWM_Generation_For_BlueLed == 1){
 11738  010F  0022               	movlb	2	; select bank2
 11739  0110  0348               	decf	_start_PWM_Generation_For_BlueLed^(0+256),w
 11740  0111  0449               	iorwf	(_start_PWM_Generation_For_BlueLed+1)^(0+256),w
 11741  0112  1D03               	btfss	3,2
 11742  0113  2922               	goto	i1l515
 11743                           
 11744                           ;main.c: 484: TMR5H = Timer5H;
 11745  0114  083E               	movf	_Timer5H^(0+256),w
 11746  0115  0028               	movlb	8	; select bank8
 11747  0116  0099               	movwf	25	;volatile
 11748                           
 11749                           ;main.c: 485: TMR5L = Timer5L;
 11750  0117  0022               	movlb	2	; select bank2
 11751  0118  083C               	movf	_Timer5L^(0+256),w
 11752  0119  0028               	movlb	8	; select bank8
 11753  011A  0098               	movwf	24	;volatile
 11754                           
 11755                           ;main.c: 486: T5CONbits.TMR5ON = 1;
 11756  011B  141A               	bsf	26,0	;volatile
 11757                           
 11758                           ;main.c: 487: PORTDbits.RD2=1;
 11759  011C  0020               	movlb	0	; select bank0
 11760  011D  150F               	bsf	15,2	;volatile
 11761                           
 11762                           ;main.c: 488: PIE3bits.TMR5IE = 1;
 11763  011E  0021               	movlb	1	; select bank1
 11764  011F  1513               	bsf	19,2	;volatile
 11765                           
 11766                           ;main.c: 489: PIR3bits.TMR5IF=0;
 11767  0120  0020               	movlb	0	; select bank0
 11768  0121  1113               	bcf	19,2	;volatile
 11769  0122                     i1l515:	
 11770  0122  0879               	movf	??_isr+1,w
 11771  0123  0020               	movlb	0	; select bank0
 11772  0124  00FF               	movwf	127
 11773  0125  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11774  0126  0009               	retfie
 11775  0127                     __end_of_isr:	
 11776                           
 11777                           	psect	text51
 11778  109A                     __ptext51:	
 11779 ;; *************** function _errorsISR *****************
 11780 ;; Defined at:
 11781 ;;		line 1291 in file "main.c"
 11782 ;; Parameters:    Size  Location     Type
 11783 ;;  errNum          2    0[COMMON] PTR const unsigned char 
 11784 ;;		 -> STR_15(5), STR_14(5), 
 11785 ;; Auto vars:     Size  Location     Type
 11786 ;;		None
 11787 ;; Return value:  Size  Location     Type
 11788 ;;                  1    wreg      void 
 11789 ;; Registers used:
 11790 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11791 ;; Tracked objects:
 11792 ;;		On entry : 0/0
 11793 ;;		On exit  : 0/0
 11794 ;;		Unchanged: 0/0
 11795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 11796 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0
 11797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 11798 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0
 11799 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0
 11800 ;;Total ram usage:        3 bytes
 11801 ;; Hardware stack levels used:    1
 11802 ;; This function calls:
 11803 ;;		Nothing
 11804 ;; This function is called by:
 11805 ;;		_isr
 11806 ;; This function uses a non-reentrant model
 11807 ;;
 11808                           
 11809                           
 11810                           ;psect for function _errorsISR
 11811  109A                     _errorsISR:	
 11812  109A                     i1l3967:	
 11813                           ;main.c: 1293: while(*errNum != (0))
 11814                           
 11815                           ;incstack = 0
 11816                           ; Regs used in _errorsISR: [wreg-fsr0h+status,2+status,0+pclath]
 11817                           
 11818  109A  0875               	movf	errorsISR@errNum,w
 11819  109B  0084               	movwf	4
 11820  109C  0876               	movf	errorsISR@errNum+1,w
 11821  109D  0085               	movwf	5
 11822  109E  0012               	moviw fsr0++
 11823  109F  1903               	btfsc	3,2
 11824  10A0  0008               	return
 11825  10A1                     i1l637:	
 11826                           ;main.c: 1294: {
 11827                           ;main.c: 1295: while (!TX1STAbits.TRMT);
 11828                           
 11829  10A1  0023               	movlb	3	; select bank3
 11830  10A2  1C9E               	btfss	30,1	;volatile
 11831  10A3  28A1               	goto	i1l637
 11832                           
 11833                           ;main.c: 1296: TX1REG = *errNum;
 11834  10A4  0875               	movf	errorsISR@errNum,w
 11835  10A5  0084               	movwf	4
 11836  10A6  0876               	movf	errorsISR@errNum+1,w
 11837  10A7  0085               	movwf	5
 11838  10A8  0800               	movf	0,w	;code access
 11839  10A9  009A               	movwf	26	;volatile
 11840                           
 11841                           ;main.c: 1297: *errNum++;
 11842  10AA  3001               	movlw	1
 11843  10AB  07F5               	addwf	errorsISR@errNum,f
 11844  10AC  3000               	movlw	0
 11845  10AD  3DF6               	addwfc	errorsISR@errNum+1,f
 11846  10AE  289A               	goto	i1l3967
 11847  10AF                     __end_of_errorsISR:	
 11848  007E                     btemp	set	126	;btemp
 11849  007E                     int$flags	set	126
 11850  007E                     wtemp0	set	126


Data Sizes:
    Strings     48
    Constant    8
    Data        133
    BSS         174
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     65      74
    BANK1            80     75      80
    BANK2            80      0      79
    BANK3            80      0      73
    BANK4            80      0      78
    BANK5            80     10      68
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            32      0       0

Pointer List with Targets:

    StopBitString	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    FinalframebitString	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_18(CODE[2]), STR_16(CODE[2]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_18(CODE[2]), STR_16(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(1) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 2
		 -> STR_18(CODE[2]), STR_16(CODE[2]), NULL(NULL[0]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_18(CODE[2]), STR_16(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(1) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), NULL(NULL[0]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_18(CODE[2]), STR_16(CODE[2]), 

    strtok@sp	PTR unsigned char  size(1) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(1) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), NULL(NULL[0]), 

    strncpy@from	PTR const unsigned char  size(1) Largest target is 5
		 -> applicationControlRGB@HexlevelBuffer(BANK1[5]), 

    strncpy@to	PTR unsigned char  size(1) Largest target is 3
		 -> applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), applicationControlRGB@strGreenH(BANK1[3]), 
		 -> applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 3
		 -> applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), applicationControlRGB@strGreenH(BANK1[3]), 
		 -> applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), 
		 -> applicationControlRGB@strGreenH(BANK1[3]), applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), applicationControlRGB@HexlevelBuffer(BANK1[5]), 
		 -> applianceControl@strD(BANK1[6]), applianceControl@HexlevelBuffer(BANK1[5]), NULL(NULL[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), 
		 -> applicationControlRGB@strGreenH(BANK1[3]), applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), applicationControlRGB@HexlevelBuffer(BANK1[5]), 
		 -> applianceControl@strD(BANK1[6]), applianceControl@HexlevelBuffer(BANK1[5]), NULL(NULL[0]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), applianceControl@HexlevelBuffer(BANK1[5]), NULL(NULL[0]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), applianceControl@strD(BANK1[6]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), applianceControl@strD(BANK1[6]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_17(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), NULL(NULL[0]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 18
		 -> ChildLockbuffer(BANK2[2]), switchstatusbuffer(BANK2[2]), switchNumberBuffer(BANK3[3]), mainReceivedDataBuffer(BANK4[18]), 
		 -> STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[7]), STR_3(CODE[2]), 
		 -> STR_2(CODE[2]), NULL(NULL[0]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    memset@p1	PTR void  size(2) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), applicationControlRGB@HexlevelBuffer(BANK1[5]), 

    memset@p	PTR unsigned char  size(2) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), applicationControlRGB@HexlevelBuffer(BANK1[5]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 18
		 -> ChildLockbuffer(BANK2[2]), switchstatusbuffer(BANK2[2]), switchNumberBuffer(BANK3[3]), mainReceivedDataBuffer(BANK4[18]), 
		 -> applianceControl@dimmerSpeedStringBuffer(BANK1[2]), applianceControl@switchNumberStringBuffer(BANK1[2]), NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 5
		 -> applicationControlRGB@HexlevelBuffer(BANK1[5]), applianceControl@HexlevelBuffer(BANK1[5]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sendAcknowledgment@currentStateBuffer	PTR unsigned char  size(1) Largest target is 58
		 -> sendFinalBufferToGAteway(BANK4[46]), currentStateBuffer(BANK5[58]), 

    hexadecimalToDecimal@hexVal	PTR unsigned char  size(1) Largest target is 6
		 -> applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), applicationControlRGB@strGreenH(BANK1[3]), 
		 -> applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), applianceControl@strD(BANK1[6]), 

    errorsMain@errNum	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_19(CODE[5]), 

    errorsISR@errNum	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_15(CODE[5]), STR_14(CODE[5]), 

    AllColorIntensityString	PTR unsigned char  size(1) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), NULL(NULL[0]), 

    ChildLockString	PTR unsigned char  size(1) Largest target is 2
		 -> ChildLockbuffer(BANK2[2]), NULL(NULL[0]), 

    BlueColorIntensityString	PTR unsigned char  size(1) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), NULL(NULL[0]), 

    GreenColorIntensityString	PTR unsigned char  size(1) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), NULL(NULL[0]), 

    RedColorIntensityString	PTR unsigned char  size(1) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), NULL(NULL[0]), 

    SwitchStatusString	PTR unsigned char  size(1) Largest target is 2
		 -> switchstatusbuffer(BANK2[2]), NULL(NULL[0]), 

    AcknowledgementString	PTR unsigned char  size(1) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), NULL(NULL[0]), 

    SwitchNumberString	PTR unsigned char  size(1) Largest target is 3
		 -> switchNumberBuffer(BANK3[3]), NULL(NULL[0]), 

    ModuleNameString	PTR unsigned char  size(1) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), NULL(NULL[0]), 

    sp__strtok	PTR unsigned char  size(1) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), NULL(NULL[0]), 

    token	PTR unsigned char  size(1) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), NULL(NULL[0]), 

    ConvertmaindataReceiveIntoString	PTR unsigned char  size(1) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), NULL(NULL[0]), 

    sp__memset	PTR void  size(2) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), applicationControlRGB@HexlevelBuffer(BANK1[5]), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 3
		 -> applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), applicationControlRGB@strGreenH(BANK1[3]), 
		 -> applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    applicationControlRGB@ModuleNamestr	PTR unsigned char  size(1) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), NULL(NULL[0]), 

    applicationControlRGB@ChildLockstr	PTR unsigned char  size(1) Largest target is 2
		 -> ChildLockbuffer(BANK2[2]), NULL(NULL[0]), 

    applicationControlRGB@Allcolorstr	PTR unsigned char  size(1) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), NULL(NULL[0]), 

    applicationControlRGB@GreenColorIntensitystr	PTR unsigned char  size(1) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), NULL(NULL[0]), 

    applicationControlRGB@BlueColorIntensitystr	PTR unsigned char  size(1) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), NULL(NULL[0]), 

    applicationControlRGB@RedColorIntensitystr	PTR unsigned char  size(1) Largest target is 18
		 -> mainReceivedDataBuffer(BANK4[18]), NULL(NULL[0]), 

    applicationControlRGB@SwitchStatusstr	PTR unsigned char  size(1) Largest target is 2
		 -> switchstatusbuffer(BANK2[2]), NULL(NULL[0]), 

    applicationControlRGB@SwitchNumberstr	PTR unsigned char  size(1) Largest target is 3
		 -> switchNumberBuffer(BANK3[3]), NULL(NULL[0]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), applianceControl@strD(BANK1[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_errorsISR

Critical Paths under _main in BANK0

    _main->_applianceControl
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _applicationControlRGB->___fttol
    ___lwtoft->___ftpack
    _applianceControl->___fttol
    _sprintf->___lwdiv
    _hexadecimalToDecimal->___wmul
    _hexadecimalToDecimal->_strlen
    _atoi->___wmul
    ___fttol->___ftdiv
    ___ftmul->___ftpack
    ___ftdiv->___awtoft
    ___awtoft->___ftpack

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_applicationControlRGB

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   54146
                                             58 BANK0      7     7      0
                                              0 BANK5     10    10      0
                _GPIO_pin_Initialize
     _ReceivingIndicationLedBlinking
           _SwitchOffStatustToGatway
            _SwitchOnStatustToGatway
  _TransmissionIndicationLedBlinking
                  _allPeripheralInit
                   _applianceControl
              _applicationControlRGB
             _copyReceivedDataBuffer
                         _errorsMain
                             _memset
                             _strcmp
                             _strlen
                             _strtok
 ---------------------------------------------------------------------------------
 (1) _strtok                                               6     4      2    1855
                                             14 BANK0      6     4      2
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (2) _strspn                                               7     5      2     675
                                              7 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strcspn                                              7     5      2     675
                                              7 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strchr                                               7     3      4     432
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               5     3      2     243
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _errorsMain                                           3     1      2     142
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _copyReceivedDataBuffer                               3     3      0     164
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _applicationControlRGB                               84    77      7   28159
                                             44 BANK0      9     2      7
                                              0 BANK1     75    75      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _abs
                               _atoi
               _hexadecimalToDecimal
                             _memset
                 _sendAcknowledgment
                            _sprintf
                             _strcat
                             _strcpy
                             _strlen
                            _strncpy
 ---------------------------------------------------------------------------------
 (2) _strncpy                                              6     3      3    1324
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     3      2    1903
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     901
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     324
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2726
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _applianceControl                                    67    61      6   19825
                                             44 BANK0     14     8      6
                                              0 BANK1     53    53      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                               _atoi
               _hexadecimalToDecimal
                 _sendAcknowledgment
                            _sprintf
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     337
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             26    20      6    1432
                                              8 BANK0     18    12      6
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     395
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendAcknowledgment                                   4     4      0     137
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _hexadecimalToDecimal                                13    11      2    1896
                                              6 BANK0     13    11      2
                             ___wmul
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               6     4      2     389
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2    1660
                                              6 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     598
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     679
                                             30 BANK0     14    10      4
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3568
                                              8 BANK0     16    10      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    4578
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2905
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2464
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _allPeripheralInit                                    0     0      0       0
                   _CCP10_Initialize
                    _CCP7_Initialize
                    _CCP8_Initialize
                    _CCP9_Initialize
                  _EUSART_Initialize
                   _TMR10_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR3_Initialize
                    _TMR4_Initialize
                    _TMR5_Initialize
                    _TMR6_Initialize
                    _TMR8_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR8_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR10_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP9_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP8_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP7_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP10_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TransmissionIndicationLedBlinking                    2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SwitchOnStatustToGatway                              3     1      2     724
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _SwitchOffStatustToGatway                             3     1      2     724
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReceivingIndicationLedBlinking                       2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPIO_pin_Initialize                                  0     0      0       0
                      _clearAllPorts
                      _pinINIT_extra
 ---------------------------------------------------------------------------------
 (2) _pinINIT_extra                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clearAllPorts                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0     173
                                              3 COMMON     2     2      0
                          _errorsISR
 ---------------------------------------------------------------------------------
 (5) _errorsISR                                            3     1      2     173
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GPIO_pin_Initialize
     _clearAllPorts
     _pinINIT_extra
   _ReceivingIndicationLedBlinking
   _SwitchOffStatustToGatway
   _SwitchOnStatustToGatway
   _TransmissionIndicationLedBlinking
   _allPeripheralInit
     _CCP10_Initialize
     _CCP7_Initialize
     _CCP8_Initialize
     _CCP9_Initialize
     _EUSART_Initialize
     _TMR10_Initialize
     _TMR1_Initialize
     _TMR2_Initialize
     _TMR3_Initialize
     _TMR4_Initialize
     _TMR5_Initialize
     _TMR6_Initialize
     _TMR8_Initialize
   _applianceControl
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     _atoi
       ___wmul
       _isdigit
     _hexadecimalToDecimal
       ___wmul
       _strlen
     _sendAcknowledgment
     _sprintf
       ___lwdiv
     _strcpy
     _strlen
   _applicationControlRGB
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___lwtoft
       ___ftpack
     _abs
     _atoi
       ___wmul
       _isdigit
     _hexadecimalToDecimal
       ___wmul
       _strlen
     _memset
     _sendAcknowledgment
     _sprintf
       ___lwdiv
     _strcat
     _strcpy
     _strlen
     _strncpy
   _copyReceivedDataBuffer
   _errorsMain
   _memset
   _strcmp
   _strlen
   _strtok
     _strcspn
       _strchr
     _strspn
       _strchr

 _isr (ROOT)
   _errorsISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     1CE       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     41      4A       6       92.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     4B      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4F      10       98.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      49      12       91.3%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      4E      14       97.5%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      A      44      16       85.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            20      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               20      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
DATA                 0      0     1CE      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Mar 06 14:22:35 2019

                          _IntegerGreenColorIntensity 00EB                            __size_of_allPeripheralInit 0027  
                                                   pc 0002                                           __CFG_CP$OFF 0000  
                                                  _M1 0130                                                    _M2 012E  
                                                  _M3 012C                                                    _M4 012A  
                                                  _M5 0128                                                    _M6 0126  
                                                  _M7 0124                                                    _M8 0122  
                                                  _M9 0120                               hexadecimalToDecimal@len 002A  
                                 ___wmul@multiplicand 0022                          applianceControl@integerSpeed 00C5  
                                                 l450 0AA7                                                   l455 0AED  
                                                 l720 115F                                                   l900 1444  
                                                 l548 0D53                                                   l646 1110  
                                                 l582 0FD1                                                   l479 07A6  
                                                 l584 0FFA                                                   l907 1457  
                                                 l667 11B2                                                   l908 145F  
                                                 l669 11B9                                                   l991 15D6  
                                                 _GIE 005F                         applianceControl@clockPerCycle 00BA  
                                                 _PR2 001B                                                   _PR4 0416  
                                                 _PR6 041D                 _ConvertIntegertoStringBlueColorBuffer 01BB  
                                                 _PR8 0596                              hexadecimalToDecimal@base 002E  
                                    _ModuleNameBuffer 01A4                                                   _abs 1055  
                           __size_of_applianceControl 02B0                                                   _isr 0004  
                                     _TMR2_Initialize 1010                                          __CFG_BORV$LO 0000  
                                                 wreg 0009                                          __CFG_FOSC$HS 0000  
                                    _ModuleNameString 0067                                                  S6493 1000  
                                        __CFG_LVP$OFF 0000                                          ___ftdiv@cntr 0038  
                                        ___ftdiv@sign 003D                                                  ?_abs 0020  
                                                l1180 1121                                                  l5013 16D9  
                                                l5101 123D                                                  l5023 16EA  
                                                l5007 16C1                                                  l5103 1249  
                                                l5041 169F                                                  l6001 0C0A  
                                                l5043 1747                                                  l5051 1140  
                                                l5107 1251                                                  l5123 12BB  
                                                l6011 0C36                                                  l5029 1709  
                                                l5125 12D1                                                  l6101 0DA1  
                                                l5039 170D                                                  l6023 0C7B  
                                                l6015 0C4D                                                  l5401 15C0  
                                                l5081 1520                                                  l5073 1503  
                                                l5137 10F4                                                  l5129 12D9  
                                                l6201 0E87                                                  l6121 0DCE  
                                                l6105 0DA7                                                  l6009 0C30  
                                                l5331 1763                                                  l6019 0C64  
                                                l5317 1677                                                  l5309 165E  
                                                l5413 15E7                                                  l5093 1564  
                                                l6213 0EA6                                                  l6133 0DED  
                                                l6117 0DC6                                                  l6037 0CB5  
                                                l6029 0C8D                                                  l6045 0CD2  
                                                l6053 0D1A                                                  l5407 15CD  
                                                l5423 1319                                                  l6039 0CBB  
                                                l6047 0CE5                                                  l6071 0D56  
                                                l5361 17D0                                                  l5353 17BC  
                                                l5337 1779                                                  l5409 15D9  
                                                l5089 155E                                                  l5441 130F  
                                                l5425 1321                                                  l6313 0F8B  
                                                l6233 0ED1                                                  l6217 0EAD  
                                                l6153 0E19                                                  l6137 0DF3  
                                                l6065 0D35                                                  l6049 0CE9  
                                                l5531 0A7E                                                  l5523 0A5E  
                                                l5435 12E9                                                  l4901 1449  
                                                l5365 17D8                                                  l5349 17B4  
                                                l5381 1582                                                  l6501 0AD0  
                                                l5541 0AAA                                                  l5533 0A86  
                                                l5525 0A66                                                  l5437 12F1  
                                                l5429 133F                                                  l6325 0FAA  
                                                l6309 0F84                                                  l6261 0F16  
                                                l6245 0EF0                                                  l6229 0ECC  
                                                l6181 0E5C                                                  l6165 0E38  
                                                l6149 0E12                                                  l6085 0D7A  
                                                l4903 1451                                                  l5279 11F9  
                                                l5295 161D                                                  l5535 0A8E  
                                                l5527 0A6E                                                  l5289 1607  
                                                l5545 0ABB                                                  l5537 0A96  
                                                l5529 0A76                                                  l5721 070D  
                                                l6329 0FAF                                                  l6281 0F41  
                                                l6265 0F1B                                                  l6249 0EF7  
                                                l6185 0E63                                                  l6169 0E3D  
                                                l6089 0D82                                                  l4923 1053  
                                                l5539 0A9E                                                  l5731 0732  
                                                l6347 0FD8                                                  l5549 0ACA  
                                                l5725 0715                                                  l5717 0705  
                                                l5709 06F9                                                  l6293 0F60  
                                                l6277 0F3A                                                  l6197 0E82  
                                                l5399 15B2                                                  l4871 1159  
                                                l4863 1194                                                  l5735 073A  
                                                l5903 1283                                                  l4865 11A0  
                                                l4945 1403                                                  l4937 13E5  
                                                l5753 076F                                                  l5745 075F  
                                                l5761 078C                                                  l5913 1108  
                                                l6297 0F65                                                  l4891 1421  
                                                l4939 13F1                                                  l5739 0742  
                                                l6491 0CD8                                                  ?_isr 0075  
                                                l4893 142B                                                  l4965 147F  
                                                l4949 140C                                                  l5749 0767  
                                                l5765 079B                                                  l4895 1430  
                                                l4887 141A                                                  l4967 1476  
                                                l6495 0792                                                  l4985 14A5  
                                                l4969 1485                                                  l6497 07A1  
                                                l5881 07CC                                                  l5873 07B5  
                                                l5937 0B25                                                  l4995 14E2  
                                                l4987 14A9                                                  l4979 149D  
                                                l6499 0AC1                                                  l5891 07F0  
                                                l5867 07B0                                                  l5955 0B6D  
                                                l4989 14D2                                                  l5973 0BA0  
                                                l5991 0BEB                                                  l5983 0BC5  
                                                l5897 1262                                                  l5889 07EF  
                                                l5993 0BF1                                                  l5977 0BB3  
                                                l5899 126A                                                  l5995 0BF8  
                                                STR_1 1833                                                  STR_2 1836  
                                                STR_3 1836                                                  STR_4 1819  
                                                STR_5 1836                                                  STR_6 1836  
                                                STR_7 1836                                                  STR_8 1836  
                                                STR_9 1836                                                  _PR10 059D  
                                                u5005 13FC                                                  u5015 1404  
                                                u6005 0D33                                                  u5135 16FF  
                                                u6015 0D51                                                  _PEIE 005E  
                                                u5405 1678                                                  u5515 17D9  
                                                u5365 162F                                                  u5525 17DF  
                                                u5445 1785                                                  u4805 1165  
                                                u5375 163F                                                  u5455 1795  
                                                u5615 15CE                                                  u5385 165F  
                                                u5395 166E                                                  u5475 17BD  
                                                u5555 1589                                                  u4925 1466  
                                                u4845 1426                                                  u5485 17C3  
                                                u4865 143F                                                  u5585 15B3  
                                                u4795 1160                                                  u5755 1356  
                                                u4885 144C                                                  u6807 137D  
                                                u4975 13E8                                                  u5935 0BC3  
                                                u6817 1389                                                  u5945 0BE9  
                                                u6827 1395                                                  u4995 13F2  
                                                u5955 0C08                                                  u6747 0AF4  
                                                u6837 13A3                                                  u6757 107D  
                                                u5965 0C2E                                                  u6847 106C  
                                                u6767 13B0                                                  u5975 0C8B  
                                                u6777 13BC                                                  u5985 0CB3  
                                                u6787 13C8                                                  u6797 13D6  
                                                _TMR2 001A                                                  _TMR4 0415  
                                                _TMR6 041C                                                  _TMR8 0595  
                                                _WPUB 020D                                                  _WPUD 020F  
                                                _WPUE 0210                                                  _WPUG 048D  
                                        __CFG_WRT$OFF 0000                                                  abs@a 0020  
                                                _atoi 1476                                                  _main 0AEE  
                                        ___ftpack@arg 0020                                          ___ftpack@exp 0023  
                  applicationControlRGB@CompleteClock 00D6                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                                                  btemp 007E  
                             _copy_parentalLockBuffer 01CC                                                  start 0127  
                                       __CFG_IESO$OFF 0000                                       _TMR3_Initialize 103A  
                      applianceControl@HexlevelBuffer 00AE                                __size_of_pinINIT_extra 0015  
                  applicationControlRGB@NeedBluePulse 00BA                                          ___ftmul@cntr 0036  
                                        ___ftmul@sign 0037                        applicationControlRGB@remainder 00A0  
                                        ___fttol@exp1 004B                                                 ??_abs 0022  
                                        ___fttol@lval 0047                                                 ??_isr 0078  
                 applianceControl@charParentalControl 0050                             __size_of_CCP10_Initialize 000A  
                                               ?_atoi 0026                                                 ?_main 0075  
                                               STR_10 1836                                                 STR_11 1833  
                                               STR_12 1833                                                 STR_20 1808  
                                               STR_13 1833                                                 STR_14 1825  
                                               STR_15 182A                                                 STR_16 1836  
                                               STR_17 182F                                         __CFG_WDTE$OFF 0000  
                                               STR_18 1836                                                 STR_19 1820  
                                     __end_of___ftdiv 1699                                       __end_of___ftmul 1800  
                                               _T1CON 0018                                       __end_of___fttol 15F0  
                                               _T2CON 001C                                                 _T3CON 0413  
                                               _RC1IF 008D                                                 _T4CON 0417  
                             _AllColorIntensityString 0063                                                 _T5CON 041A  
                                               _T6CON 041E                                                 _T8CON 0597  
                                     __end_of___lwdiv 1411                                                 i1l502 00CC  
                                               i1l515 0122                         applianceControl@CompleteClock 00B3  
                                               i1l492 0073                                                 i1l637 10A1  
                                               i1l494 008A                                                 i1l496 00A0  
                                               i1l489 005C                                                 i1l498 00B7  
                                               _TMR10 059C                                                 _TMR1H 0017  
                                               _TMR3H 0412                                                 _TMR1L 0016  
                                               _TMR3L 0411                                                 _TMR5H 0419  
                                               _TMR5L 0418                             applianceControl@remainder 00A2  
                              ??_hexadecimalToDecimal 0028                                       _TMR4_Initialize 102F  
                                     _charSwitchState 0166                        applicationControlRGB@strGreenH 00C5  
                      applicationControlRGB@strGreenL 00C8                                        __CFG_FCMEN$OFF 0000  
                                       ___awtoft@sign 002D                                       _CCP7_Initialize 1FE2  
                                     __end_of_isdigit 1055                                         ___ftpack@sign 0024  
                                               atoi@a 002B                                                 atoi@s 0026  
                                               _token 0068      applicationControlRGB@ConvertIntoTenMsRangeFactor 00E0  
                                               main@j 02DC                                                 main@k 02DE  
                             __end_of_TMR1_Initialize 102F                                        __CFG_BOREN$OFF 0000  
                _ConvertIntegertoStringRedColorBuffer 01BF                        __size_of_applicationControlRGB 061D  
                       _RedColorIntensityStringLength 01B7                         __end_of_applicationControlRGB 07A7  
                                               status 0003                                                 wtemp0 007E  
                                     __end_of_sprintf 174C   applicationControlRGB@ConvertIntToTimeInMicrosecBlue 00E8  
                                     __end_of_strcspn 1314                                       __end_of_strncpy 12E4  
                               __end_of_clearAllPorts 109A                                   _GPIO_pin_Initialize 1289  
                                     _TMR5_Initialize 101A                                        __CFG_MCLRE$OFF 0000  
                                     __initialization 0129                               ?_copyReceivedDataBuffer 0075  
                                        __end_of_atoi 14E7                                          __end_of_main 1000  
                                     _CCP8_Initialize 1FEC                                            _ErrorNames 01E4  
                             __end_of_TMR2_Initialize 101A                                        __CFG_LPBOR$OFF 0000  
                               _GreenLedSwitchCounter 01AB                                                ??_atoi 0028  
                                              ??_main 005A                                         ___fttol@sign1 0046  
                            _BlueColorIntensityBuffer 01C7                                  ?_GPIO_pin_Initialize 0075  
           __end_of_TransmissionIndicationLedBlinking 1086            __size_of_TransmissionIndicationLedBlinking 0011  
                 ??_TransmissionIndicationLedBlinking 0020                    ?_TransmissionIndicationLedBlinking 0075  
                   _TransmissionIndicationLedBlinking 1075                                    _switchstatusbuffer 0160  
                       applicationControlRGB@RedPulse 00A6                                         _pinINIT_extra 10AF  
                                     _TMR6_Initialize 1FC6                              _BlueColorIntensityString 0064  
                                     _CCP9_Initialize 1FF6                                                _CCP7IF 00A2  
                                              _CCP8IF 00A3                                                _CCP9IF 00A6  
                                              _T10CON 059E                                                _CCPR7H 0615  
                                              _CCPR8H 0618                                                _CCPR9H 061B  
                                              _CCPR7L 0614                                                _CCPR8L 0617  
                                              _CCPR9L 061A                                      __end_of___awtoft 1210  
                                              _ANSELA 018C                                                _ANSELB 018D  
                                              _ANSELD 018F                                                _ANSELE 0190  
                                              _ANSELF 040C                                      __end_of___ftpack 1476  
                                              _ANSELG 040D                                                _T1GCON 0019  
                                              _T3GCON 0414                                                _T5GCON 041B  
                                              _RC1REG 0199                                   _RedLedSwitchCounter 01AD  
                                              _RC1STA 019D                                                i1l4213 00AD  
                                              i1l4135 0017                               __end_of_TMR3_Initialize 1046  
                                              i1l4245 00D9                                                i1l4229 00C4  
                                              i1l4181 0081                                                i1l4157 0052  
                                              i1l4149 003D                                                i1l4247 00DB  
                                              i1l4167 0068                                                i1l4265 00F2  
                                              i1l4283 010A                                                i1l4197 0096  
                                              i1l3967 109A                                                u352_25 003A  
                                    __end_of___lwtoft 10D9                                                _TX1REG 019A  
                                              _TX1STA 019E                                        __CFG_PWRTE$OFF 0000  
                      __end_of_copyReceivedDataBuffer 1376                           __size_of_sendAcknowledgment 0020  
                                 _FinalFramebitBuffer 015C                                                ___wmul 1156  
                                           ??___ftdiv 0034                                             ??___ftmul 002E  
                                           ??___fttol 0042                                             ??___lwdiv 0024  
                                              _memset 10EF                               __end_of_TMR4_Initialize 103A  
                                              _strcat 1237                                                _strchr 1121  
                                              _strcmp 125F                                                _strcpy 113B  
                                              _strlen 118F                               __end_of_CCP7_Initialize 1FEC  
                                              _strtok 07A7                                                _strspn 1314  
                               ??_GPIO_pin_Initialize 0020                                 ___ftmul@f3_as_product 0033  
                            _mainReceivedDataPosition 0070                                      _applianceControl 083E  
                                           ??_isdigit 0020                                        ?_pinINIT_extra 0075  
                                     _TMR8_Initialize 1FCF                                             ??_sprintf 002E  
                                           ??_strcspn 0029                            ??_SwitchOffStatustToGatway 0022  
                                           ??_strncpy 0023  applicationControlRGB@ConvertIntToTimeInMicrosecGreen 00E5  
                                    ?_TMR1_Initialize 0075                               __end_of_TMR5_Initialize 1024  
                             __end_of__initialization 0186                         applicationControlRGB@strBlueH 00CB  
                       applicationControlRGB@strBlueL 00CE                               __end_of_CCP8_Initialize 1FF6  
                                          ___ftdiv@f1 0031                                            ___ftdiv@f2 002E  
                                          ___ftdiv@f3 0039                                            ___awtoft@c 0028  
                                          ___ftmul@f1 0028                                            ___ftmul@f2 002B  
                                          ___fttol@f1 003E                                        __pcstackCOMMON 0075  
                    __size_of_SwitchOnStatustToGatway 0033                             __size_of_TMR10_Initialize 0009  
                                        __pidataBANK1 07FF                                          __pidataBANK2 07F2  
                                        __pidataBANK3 1172                                          __pidataBANK4 11CE  
                                        __pidataBANK5 0804                                      ?_TMR2_Initialize 0075  
                                    _CCP10_Initialize 1FD8                               __end_of_TMR6_Initialize 1FCF  
           applicationControlRGB@RedColorIntensitystr 004E                      applicationControlRGB@Allcolorstr 0052  
                                          ___lwtoft@c 0028                               __end_of_CCP9_Initialize 2000  
                                          __pbssBANK0 0061                                            __pbssBANK1 00EB  
                                          __pbssBANK2 0120                                            __pbssBANK3 01A0  
                                          __pbssBANK4 0220                                      ?_TMR3_Initialize 0075  
                                     __CFG_VCAPEN$OFF 0000                                    __size_of_errorsISR 0015  
                        applicationControlRGB@strRedH 00BF                          applicationControlRGB@strRedL 00C2  
                      _BlueColorIntensityStringLength 01B1                                            __pmaintext 0AEE  
                                 _IntegerSwitchNumber 0138                                               ?___wmul 0020  
                                          __pintentry 0004                                               _CCP10IF 00A7  
                          sendAcknowledgment@Tx_count 0021                                               _CCP7CON 0616  
                                             _CCP9CON 061C                                               _CCPR10H 061E  
                                             _CCPR10L 061D                                               ?_memset 0020  
                                    ?_TMR4_Initialize 0075                                             ?___awtoft 0028  
                             __end_of_TMR8_Initialize 1FD8                                             ?___ftpack 0020  
                                   _FrameLegthCounter 01C5                                       ??_pinINIT_extra 0020  
                                             ?_strcat 0020                                               ?_strchr 0020  
                                             ?_strcmp 0020                                               ?_strcpy 0020  
                                             ?_strlen 0020                                             ?___lwtoft 0028  
                                             ?_strtok 002E                                               ?_strspn 0027  
                                    ?_CCP7_Initialize 0075                      _start_PWM_Generation_For_BlueLed 0148  
                                             _SP1BRGH 019C                                               _SP1BRGL 019B  
                     _start_PWM_Generation_For_DIMMER 014E                                      ?_TMR5_Initialize 0075  
                     _GreenColorIntensityStringLength 01B5                       _start_PWM_Generation_For_RedLed 014C  
         applianceControl@currentStateBufferPositions 00D1                                      ?_CCP8_Initialize 0075  
                    applianceControl@chDimmerSpeedLSB 004F                      applianceControl@chDimmerSpeedMSB 004E  
                                             _Timer1H 0146                                               _Timer1L 0144  
                                             _Timer3H 0142                                               _Timer3L 0140  
                                             _Timer5H 013E                                               _Timer5L 013C  
                     applicationControlRGB@GreenPulse 00AA                                               ___ftdiv 15F0  
                                     __size_of___wmul 001C                                               ___ftmul 174C  
                                             ___fttol 1569                              _sendFinalBufferToGAteway 0220  
                                             ___lwdiv 13DC                                       __CFG_STVREN$OFF 0000  
                                          ??___awtoft 002B                                            ??___ftpack 0025  
                                     __size_of_memset 0019                                      ?_TMR6_Initialize 0075  
                                          _errorsMain 1108                                               __ptext1 07A7  
                                             __ptext2 1314                                               __ptext3 12E4  
                                             __ptext4 1121                                               __ptext5 125F  
                                             __ptext6 1108                                               __ptext7 1344  
                                             __ptext8 018A                                               __ptext9 12B5  
                                          ??___lwtoft 002B                                       __size_of_strcat 0028  
                                     __size_of_strchr 001A                                       __size_of_strcmp 002A  
                                     __size_of_strcpy 001B                                       __size_of_strlen 001F  
                                   __end_of_hexpowers 1808                                             _T1CONbits 0018  
                                    ?_CCP9_Initialize 0075                                       __size_of_strtok 004B  
                                     __size_of_strspn 0030                                             _T2CONbits 001C  
                                        __size_of_abs 000F                                               _isdigit 1046  
                                        __size_of_isr 0123                                             _T3CONbits 0413  
                                   __end_of_errorsISR 10AF                                             _T4CONbits 0417  
                                           _T5CONbits 041A                                             _T6CONbits 041E  
                             _RedColorIntensityBuffer 0154                         __size_of_hexadecimalToDecimal 0082  
                sendAcknowledgment@currentStateBuffer 0023                      __end_of_SwitchOffStatustToGatway 13A9  
                                           _T8CONbits 0597                             _IntergerRedColorIntensity 00ED  
                                             main@man 02E2                                               _sprintf 1699  
                                             clrloop0 1FB2                                               _strcspn 12E4  
                                             _strncpy 12B5                                  end_of_initialization 0186  
                             _RedColorIntensityString 0066                                               init_ram 1FB7  
                            applicationControlRGB@end 00A4                                               memset@c 0022  
                                             memset@n 0024                                               memset@p 0026  
                                             initloop 1FB8                                 _applicationControlRGB 018A  
                                   _EUSART_Initialize 10D9                                     _levelofDimmer_LSB 016D  
                                   _levelofDimmer_MSB 016E                              __end_of_applianceControl 0AEE  
                  applianceControl@integerSwitchState 00D3                               _SwitchOnStatustToGatway 13A9  
                applicationControlRGB@SwitchNumberstr 004C                                    ?_EUSART_Initialize 0075  
                                    _TMR10_Initialize 1FBD            applicationControlRGB@BlueColorIntensitystr 0050  
                                             strcmp@r 0023                                               strlen@s 0020  
                                 ??_EUSART_Initialize 0020                                      ?_TMR8_Initialize 0075  
                                             strspn@i 002B                  applicationControlRGB@SwitchStatusstr 004D  
                                           _PORTBbits 000D                                             _PORTDbits 000F  
                                           _PORTEbits 0010                                             _PORTFbits 028C  
                                           _PORTGbits 028D                __end_of_ReceivingIndicationLedBlinking 1075  
             __size_of_ReceivingIndicationLedBlinking 0011                        _ReceivingIndicationLedBlinking 1064  
                              __size_of_clearAllPorts 0014                                             _TRISBbits 008D  
                                           _TRISCbits 008E                                             _TRISDbits 008F  
                                           _TRISEbits 0090                                             _TRISFbits 030C  
                                           _TRISGbits 030D                                     _levelofRedLed_LSB 0169  
                                   _levelofRedLed_MSB 016A                                            main@k_1266 02E0  
                                _IntergerSwitchStatus 0136               SwitchOffStatustToGatway@SwitchOffNumber 0020  
                            __end_of_CCP10_Initialize 1FE2                             __end_of_EUSART_Initialize 10EF  
                                         ___ftdiv@exp 003C                     applicationControlRGB@ChildLockstr 0051  
            applianceControl@switchNumberStringBuffer 00C8                            __end_of_sendAcknowledgment 11CE  
                                         ___ftmul@exp 0032                           __end_of_GPIO_pin_Initialize 12B5  
                                      __end_of___wmul 1172                                _mainReceivedDataBuffer 025C  
              _ConvertIntegertoStringGreenColorBuffer 01BD                                   _FinalframebitString 015A  
                applianceControl@ConvertStringIntoInt 00A0                                           ?_errorsMain 0020  
                                       _charchildLock 00EF                                        __end_of_memset 1108  
                                 _Finalframebitbuffer 01AF                                        __end_of_strcat 125F  
                                      __end_of_strchr 113B                                        __end_of_strcmp 1289  
                                      __end_of_strcpy 1156                                        __end_of_strlen 11AE  
  applicationControlRGB@ConvertIntToTimeInMicrosecRed 00E2                                        __end_of_strtok 07F2  
                                      __end_of_strspn 1344                                   start_initialization 0129  
                                  _SwitchNumberBuffer 0156                                           __end_of_abs 1064  
                                         __end_of_isr 0127                                 applianceControl@F3972 0164  
                               applianceControl@F3974 0162                                    _SwitchNumberString 0073  
                          applicationControlRGB@start 00A2                                ?_applicationControlRGB 004C  
                           ??_SwitchOnStatustToGatway 0022                                 applianceControl@Pulse 00BD  
                  applicationControlRGB@ModuleNamestr 00BE                                 _AcknowledgementString 015B  
                               applianceControl@start 00A4                             _GreenColorIntensityBuffer 0152  
                                       _clearAllPorts 1086                              __size_of_TMR1_Initialize 000B  
             copyReceivedDataBuffer@dataBufferCounter 0021                                              ??___wmul 0024  
                   __size_of_SwitchOffStatustToGatway 0033                             _GreenColorIntensityString 0065  
                           ?_SwitchOffStatustToGatway 0020                                           __pdataBANK1 00EF  
                                         __pdataBANK2 0162                                           __pdataBANK3 01CC  
                                         __pdataBANK4 024E                                           __pdataBANK5 02A0  
                                            ??_memset 0026           applicationControlRGB@GreenColorIntensitystr 004F  
                                            ??_strcat 0022                                              ??_strchr 0024  
                                            ??_strcmp 0022                                              ??_strcpy 0024  
                                            ??_strlen 0022                                              ??_strtok 0030  
                                            ??_strspn 0029                                     __size_of___awtoft 0022  
                                   __size_of___ftpack 0065                                      _mainDataReceived 0150  
                                         __pbssCOMMON 0070                                             ___latbits 0002  
                                   __size_of___lwtoft 0015                                         __pcstackBANK0 0020  
                                       __pcstackBANK1 00A0                                         __pcstackBANK5 02DA  
                            __size_of_TMR2_Initialize 000A                                  _mainReceivedDataFlag 01C3  
                                        _isdigit$1545 0020                              ??_copyReceivedDataBuffer 0020  
                          __size_of_EUSART_Initialize 0016             applianceControl@ConvertIntToTimeInMilisec 00CA  
                                         sprintf@flag 0032                                           sprintf@prec 0037  
                                 __size_of_errorsMain 0019                                        ?_clearAllPorts 0075  
                                    ___lwdiv@dividend 0022                                       errorsISR@errNum 0075  
                            __size_of_TMR3_Initialize 000C                                      errorsMain@errNum 0020  
                                            ?___ftdiv 002E                                              ?___ftmul 0028  
                                            ?___fttol 003E                                              ?___lwdiv 0020  
                                     _ChildLockBuffer 015D                       __end_of_SwitchOnStatustToGatway 13DC  
                                           __pswtext1 1000                                              _CCP10CON 061F  
                                    _IntegerChildLock 0132                                       _ChildLockString 0062  
                                            _BAUD1CON 019F                                 __end_of_pinINIT_extra 10C4  
                                            ?_isdigit 0075                                       _ChildLockbuffer 015E  
                       _AllColorIntensityStringLength 01B3                              __size_of_TMR4_Initialize 000B  
                                           _hexpowers 1800                   applianceControl@charFinalFrameState 0051  
                            __end_of_TMR10_Initialize 1FC6                                      ___lwdiv@quotient 0026  
                                            ?_sprintf 0028                                             _errorsISR 109A  
                                            ?_strcspn 0027                                              ?_strncpy 0020  
                            __size_of_CCP7_Initialize 000A               applianceControl@dimmerSpeedStringBuffer 00CD  
                                      ___wmul@product 0024                                             clear_ram0 1FB1  
                                         strncpy@from 0020                                              _PIE1bits 0091  
                                            _PIE2bits 0092                                           strncpy@size 0021  
                                            _PIE3bits 0093                                              _PIE4bits 0094  
                   _start_PWM_Generation_For_GreenLed 014A                                    _SwitchStatusBuffer 0074  
                                   ?_applianceControl 004C                           hexadecimalToDecimal@dec_val 002C  
                                            _PIR1bits 0011                          __end_of_hexadecimalToDecimal 1569  
                                            _PIR2bits 0012                                              _PIR3bits 0013  
                                            _PIR4bits 0014                              __size_of_TMR5_Initialize 000A  
                                  ??_applianceControl 0052                                    _SwitchStatusString 0072  
                            __size_of_CCP8_Initialize 000A                                     ??_TMR1_Initialize 0020  
                               hexadecimalToDecimal@i 0030                                     ___wmul@multiplier 0020  
                   applicationControlRGB@NeedRedPulse 00B2                 SwitchOnStatustToGatway@SwitchOnNumber 0020  
                 applicationControlRGB@NeedGreenPulse 00B6                         applianceControl@charSwitchLSB 004C  
                       applianceControl@charSwitchMSB 00C7                              __size_of_TMR6_Initialize 0009  
                                          ?_errorsISR 0075                              __size_of_CCP9_Initialize 000A  
                     __size_of_copyReceivedDataBuffer 0032                                     ??_TMR2_Initialize 0020  
                                   ?_CCP10_Initialize 0075                                       ??_clearAllPorts 0020  
                    ??_ReceivingIndicationLedBlinking 0020                       ?_ReceivingIndicationLedBlinking 0075  
                                          _T10CONbits 059E                           _mainDataReceiveStringLength 01B9  
                                  ??_CCP10_Initialize 0020                                  applianceControl@deno 00B7  
                                applianceControl@strD 00A8                                              _Timer8HL 01A0  
                                    __size_of___ftdiv 00A9                                      __size_of___ftmul 00B4  
                                    __size_of___fttol 0087                                     _allPeripheralInit 1210  
                                    __size_of___lwdiv 0035                                              ___awtoft 11EE  
                                            ___ftpack 1411                                          ??_errorsMain 0022  
                                  _sendAcknowledgment 11AE                                     ??_TMR3_Initialize 0020  
                                            ___lwtoft 10C4                                    ?_allPeripheralInit 0075  
                                          sprintf@idx 0033                                            sprintf@val 0035  
                                          strcat@from 0020                                      __size_of_isdigit 000F  
                                     ___lwdiv@divisor 0020                                   ?_sendAcknowledgment 0075  
                                     ___lwdiv@counter 0025                                              __ptext10 1237  
                                            __ptext11 10EF                                              __ptext20 118F  
                                            __ptext12 1055                                              __ptext21 1476  
                                            __ptext13 10C4                                              __ptext30 1FCF  
                                            __ptext22 1046                                              __ptext14 083E  
                                            __ptext31 1FC6                                              __ptext23 1156  
                                            __ptext15 113B                                              __ptext40 1FEC  
                                            __ptext32 101A                                              __ptext24 1569  
                                            __ptext16 1699                                              __ptext41 1FE2  
                                            __ptext33 102F                                              __ptext25 174C  
                                            __ptext17 13DC                                              __ptext42 1FD8  
                                            __ptext34 103A                                              __ptext26 15F0  
                                            __ptext18 11AE                                              __ptext51 109A  
                                            __ptext43 1075                                              __ptext35 1010  
                                            __ptext27 11EE                                              __ptext19 14E7  
                                            __ptext44 13A9                                              __ptext36 1024  
                                            __ptext28 1411                                              __ptext45 1376  
                                            __ptext37 1FBD                                              __ptext29 1210  
                                            __ptext46 1064                                              __ptext38 10D9  
                                            __ptext47 1289                                              __ptext39 1FF6  
                            __size_of_TMR8_Initialize 0009                                              __ptext48 10AF  
                                            __ptext49 1086                                   ??_allPeripheralInit 0020  
                     applianceControl@charSwitchSTATE 004D       applicationControlRGB@Convert255RangeintoHundred 00DA  
                             ??_applicationControlRGB 0053                                      __size_of_sprintf 00B3  
                                    __size_of_strcspn 0030                                      __size_of_strncpy 002F  
                                          strcpy@from 0022                                 main@dataBufferCounter 02DA  
                                         _partCounter 013A                                     ??_TMR4_Initialize 0020  
                                       __size_of_atoi 0071                                         __size_of_main 0512  
                                  __end_of_errorsMain 1121                                     ??_CCP7_Initialize 0020  
                                  _currentStateBuffer 02A0                                            _RC1STAbits 019D  
                                ??_sendAcknowledgment 0020                            hexadecimalToDecimal@hexVal 0032  
                           _IntegerBlueColorIntensity 0134                             __end_of_allPeripheralInit 1237  
                                            int$flags 007E                                              atoi@sign 002A  
                            _IntegerAllColorIntensity 01A7                                _copyReceivedDataBuffer 1344  
                      applicationControlRGB@BluePulse 00AE                                     ??_TMR5_Initialize 0020  
                              _tempReceivedDataBuffer 01DA                          __size_of_GPIO_pin_Initialize 002C  
                                   ??_CCP8_Initialize 0020                                    _levelofBlueLed_LSB 016B  
                                  _levelofBlueLed_MSB 016C                                   applianceControl@end 00A6  
                                  _switchNumberBuffer 01C9                                              isdigit@c 0021  
                                _hexadecimalToDecimal 14E7                                              memset@p1 0020  
                                         ??_errorsISR 0077                                  _mainDatacopyPosition 01C1  
                                            intlevel1 0000                                             sprintf@ap 0034  
                                           sprintf@sp 0038                                             strchr@chr 0022  
                                           strchr@ptr 0020                                     ??_TMR6_Initialize 0020  
                                   __CFG_CLKOUTEN$OFF 0000                   applianceControl@integerSwitchNumber 00CF  
                                           strcspn@s1 002D                                             strcspn@s2 0027  
                                   ??_CCP9_Initialize 0020                             applianceControl@NeedPulse 00C1  
                                           strncpy@cp 0024                                             strncpy@to 0025  
                                  _parentalLockBuffer 024E                                    _StopBitStringbufer 0158  
                                       __pstringtext1 1800                                         __pstringtext2 1819  
                                       __pstringtext3 1820                                         __pstringtext4 1825  
                                       __pstringtext5 182A                                         __pstringtext6 182F  
                                       __pstringtext7 1833                                         __pstringtext8 1836  
                                       __pstringtext9 0000                                              sprintf@c 0039  
                                            sprintf@f 0028                                              strcat@cp 0023  
                                            strcat@to 0024                                              strcmp@s1 0024  
                                            strcmp@s2 0020                                              strcpy@cp 0024  
                                            strlen@cp 0024                                              strcpy@to 0020  
                                            strcspn@i 002B                                         _StopBitString 0159  
                               ?_hexadecimalToDecimal 0026                                              strtok@s1 0033  
                                            strtok@s2 002E                                              strspn@s1 002D  
                                            strspn@s2 0027                                              strtok@sp 0061  
                                          _TX1STAbits 019E                                     ?_TMR10_Initialize 0075  
                                _BlueLedSwitchCounter 01A9                              ?_SwitchOnStatustToGatway 0020  
                    _ConvertmaindataReceiveIntoString 0069                                   _levelofGreenLed_LSB 0167  
                                 _levelofGreenLed_MSB 0168                                    ??_TMR10_Initialize 0020  
                  applicationControlRGB@clockPerCycle 00DD                                     ??_TMR8_Initialize 0020  
                 applicationControlRGB@HexlevelBuffer 00D1                                       _TMR1_Initialize 1024  
                            _SwitchOffStatustToGatway 1376  
