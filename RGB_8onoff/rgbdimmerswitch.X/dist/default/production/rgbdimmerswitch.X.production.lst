

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Apr 11 18:59:03 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1526
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	idataBANK5,global,class=CODE,delta=2
     9                           	psect	idataBANK6,global,class=CODE,delta=2
    10                           	psect	idataBANK7,global,class=CODE,delta=2
    11                           	psect	stringtext1,global,class=STRCODE,delta=2
    12                           	psect	stringtext2,global,class=STRCODE,delta=2
    13                           	psect	stringtext3,global,class=STRCODE,delta=2
    14                           	psect	stringtext4,global,class=STRCODE,delta=2
    15                           	psect	stringtext5,global,class=STRCODE,delta=2
    16                           	psect	stringtext6,global,class=STRCODE,delta=2
    17                           	psect	stringtext7,global,class=STRCODE,delta=2
    18                           	psect	stringtext8,global,class=STRCODE,delta=2
    19                           	psect	stringtext9,global,class=STRCODE,delta=2
    20                           	psect	stringtext10,global,class=STRCODE,delta=2
    21                           	psect	stringtext11,global,class=STRCODE,delta=2
    22                           	psect	cinit,global,class=CODE,merge=1,delta=2
    23                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    27                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    28                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    29                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    30                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    31                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    32                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    33                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    34                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    35                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    36                           	psect	inittext,global,class=CODE,delta=2
    37                           	psect	clrtext,global,class=CODE,delta=2
    38                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    39                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    40                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    41                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    42                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    43                           	psect	swtext1,local,class=CONST,delta=2
    44                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text6,local,class=CODE,merge=1,delta=2
    50                           	psect	text7,local,class=CODE,merge=1,delta=2
    51                           	psect	text8,local,class=CODE,merge=1,delta=2
    52                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text12,local,class=CODE,merge=1,delta=2
    56                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text14,local,class=CODE,merge=1,delta=2
    58                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text16,local,class=CODE,merge=1,delta=2
    60                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	text25,local,class=CODE,merge=1,delta=2
    69                           	psect	swtext2,local,class=CONST,delta=2
    70                           	psect	text26,local,class=CODE,merge=1,delta=2
    71                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    74                           	psect	text30,local,class=CODE,merge=1,delta=2
    75                           	psect	text31,local,class=CODE,merge=1,delta=2
    76                           	psect	text32,local,class=CODE,merge=1,delta=2
    77                           	psect	text33,local,class=CODE,merge=1,delta=2
    78                           	psect	text34,local,class=CODE,merge=1,delta=2
    79                           	psect	text35,local,class=CODE,merge=1,delta=2
    80                           	psect	text36,local,class=CODE,merge=1,delta=2
    81                           	psect	text37,local,class=CODE,merge=1,delta=2
    82                           	psect	text38,local,class=CODE,merge=1,delta=2
    83                           	psect	text39,local,class=CODE,merge=1,delta=2
    84                           	psect	text40,local,class=CODE,merge=1,delta=2
    85                           	psect	text41,local,class=CODE,merge=1,delta=2
    86                           	psect	text42,local,class=CODE,merge=1,delta=2
    87                           	psect	text43,local,class=CODE,merge=1,delta=2
    88                           	psect	text44,local,class=CODE,merge=1,delta=2
    89                           	psect	text45,local,class=CODE,merge=1,delta=2
    90                           	psect	text46,local,class=CODE,merge=1,delta=2
    91                           	psect	text47,local,class=CODE,merge=1,delta=2
    92                           	psect	intentry,global,class=CODE,delta=2
    93                           	psect	text49,local,class=CODE,merge=1,delta=2
    94                           	dabs	1,0x7E,2
    95  0000                     
    96                           ; Version 1.45
    97                           ; Generated 16/11/2017 GMT
    98                           ; 
    99                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   100                           ; All rights reserved.
   101                           ; 
   102                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   103                           ; 
   104                           ; Redistribution and use in source and binary forms, with or without modification, are
   105                           ; permitted provided that the following conditions are met:
   106                           ; 
   107                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   108                           ;        conditions and the following disclaimer.
   109                           ; 
   110                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   111                           ;        of conditions and the following disclaimer in the documentation and/or other
   112                           ;        materials provided with the distribution.
   113                           ; 
   114                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   115                           ;        software without specific prior written permission.
   116                           ; 
   117                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   118                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   119                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   120                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   121                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   122                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   123                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   124                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   125                           ; 
   126                           ; 
   127                           ; Code-generator required, PIC16F1526 Definitions
   128                           ; 
   129                           ; SFR Addresses
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  000F                     	;# 
   146  0010                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0014                     	;# 
   151  0015                     	;# 
   152  0016                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  008C                     	;# 
   161  008D                     	;# 
   162  008E                     	;# 
   163  008F                     	;# 
   164  0090                     	;# 
   165  0091                     	;# 
   166  0092                     	;# 
   167  0093                     	;# 
   168  0094                     	;# 
   169  0095                     	;# 
   170  0096                     	;# 
   171  0097                     	;# 
   172  0099                     	;# 
   173  009A                     	;# 
   174  009B                     	;# 
   175  009B                     	;# 
   176  009C                     	;# 
   177  009D                     	;# 
   178  009E                     	;# 
   179  010C                     	;# 
   180  010D                     	;# 
   181  010E                     	;# 
   182  010F                     	;# 
   183  0110                     	;# 
   184  0116                     	;# 
   185  0117                     	;# 
   186  011D                     	;# 
   187  018C                     	;# 
   188  018D                     	;# 
   189  018F                     	;# 
   190  0190                     	;# 
   191  0191                     	;# 
   192  0191                     	;# 
   193  0192                     	;# 
   194  0193                     	;# 
   195  0193                     	;# 
   196  0194                     	;# 
   197  0195                     	;# 
   198  0196                     	;# 
   199  0197                     	;# 
   200  0199                     	;# 
   201  0199                     	;# 
   202  0199                     	;# 
   203  019A                     	;# 
   204  019A                     	;# 
   205  019A                     	;# 
   206  019B                     	;# 
   207  019B                     	;# 
   208  019B                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019C                     	;# 
   212  019C                     	;# 
   213  019C                     	;# 
   214  019D                     	;# 
   215  019D                     	;# 
   216  019D                     	;# 
   217  019E                     	;# 
   218  019E                     	;# 
   219  019E                     	;# 
   220  019F                     	;# 
   221  019F                     	;# 
   222  019F                     	;# 
   223  020D                     	;# 
   224  020F                     	;# 
   225  0210                     	;# 
   226  0211                     	;# 
   227  0211                     	;# 
   228  0212                     	;# 
   229  0212                     	;# 
   230  0213                     	;# 
   231  0213                     	;# 
   232  0214                     	;# 
   233  0214                     	;# 
   234  0215                     	;# 
   235  0215                     	;# 
   236  0215                     	;# 
   237  0216                     	;# 
   238  0216                     	;# 
   239  0217                     	;# 
   240  0217                     	;# 
   241  0219                     	;# 
   242  021A                     	;# 
   243  021B                     	;# 
   244  021C                     	;# 
   245  021D                     	;# 
   246  021E                     	;# 
   247  021F                     	;# 
   248  028C                     	;# 
   249  028D                     	;# 
   250  0291                     	;# 
   251  0291                     	;# 
   252  0292                     	;# 
   253  0293                     	;# 
   254  0298                     	;# 
   255  0298                     	;# 
   256  0299                     	;# 
   257  029A                     	;# 
   258  029D                     	;# 
   259  029E                     	;# 
   260  029F                     	;# 
   261  030C                     	;# 
   262  030D                     	;# 
   263  0311                     	;# 
   264  0311                     	;# 
   265  0312                     	;# 
   266  0313                     	;# 
   267  0318                     	;# 
   268  0318                     	;# 
   269  0319                     	;# 
   270  031A                     	;# 
   271  031C                     	;# 
   272  031C                     	;# 
   273  031D                     	;# 
   274  031E                     	;# 
   275  038C                     	;# 
   276  038D                     	;# 
   277  0394                     	;# 
   278  0395                     	;# 
   279  0396                     	;# 
   280  040C                     	;# 
   281  040D                     	;# 
   282  0411                     	;# 
   283  0411                     	;# 
   284  0412                     	;# 
   285  0413                     	;# 
   286  0414                     	;# 
   287  0415                     	;# 
   288  0416                     	;# 
   289  0417                     	;# 
   290  0418                     	;# 
   291  0418                     	;# 
   292  0419                     	;# 
   293  041A                     	;# 
   294  041B                     	;# 
   295  041C                     	;# 
   296  041D                     	;# 
   297  041E                     	;# 
   298  048D                     	;# 
   299  0491                     	;# 
   300  0491                     	;# 
   301  0492                     	;# 
   302  0492                     	;# 
   303  0493                     	;# 
   304  0493                     	;# 
   305  0493                     	;# 
   306  0494                     	;# 
   307  0494                     	;# 
   308  0495                     	;# 
   309  0495                     	;# 
   310  0496                     	;# 
   311  0496                     	;# 
   312  0497                     	;# 
   313  0497                     	;# 
   314  0595                     	;# 
   315  0596                     	;# 
   316  0597                     	;# 
   317  059C                     	;# 
   318  059D                     	;# 
   319  059E                     	;# 
   320  0611                     	;# 
   321  0611                     	;# 
   322  0612                     	;# 
   323  0613                     	;# 
   324  0614                     	;# 
   325  0614                     	;# 
   326  0615                     	;# 
   327  0616                     	;# 
   328  0617                     	;# 
   329  0617                     	;# 
   330  0618                     	;# 
   331  0619                     	;# 
   332  061A                     	;# 
   333  061A                     	;# 
   334  061B                     	;# 
   335  061C                     	;# 
   336  061D                     	;# 
   337  061D                     	;# 
   338  061E                     	;# 
   339  061F                     	;# 
   340  0FE4                     	;# 
   341  0FE5                     	;# 
   342  0FE6                     	;# 
   343  0FE7                     	;# 
   344  0FE8                     	;# 
   345  0FE9                     	;# 
   346  0FEA                     	;# 
   347  0FEB                     	;# 
   348  0FED                     	;# 
   349  0FEE                     	;# 
   350  0FEF                     	;# 
   351                           
   352                           	psect	idataBANK0
   353  0003                     __pidataBANK0:	
   354                           
   355                           ;initializer for _charchildLock
   356  0003  3430               	retlw	48
   357                           
   358                           	psect	idataBANK2
   359  07F5                     __pidataBANK2:	
   360                           
   361                           ;initializer for applianceControl@F4006
   362  07F5  3423               	retlw	35
   363  07F6  3400               	retlw	0
   364                           
   365                           ;initializer for applianceControl@F4004
   366  07F7  3423               	retlw	35
   367  07F8  3400               	retlw	0
   368                           
   369                           ;initializer for _charSwitchState
   370  07F9  3430               	retlw	48
   371                           
   372                           ;initializer for _levelofGreenLed_LSB
   373  07FA  3430               	retlw	48
   374                           
   375                           ;initializer for _levelofGreenLed_MSB
   376  07FB  3430               	retlw	48
   377                           
   378                           ;initializer for _levelofRedLed_LSB
   379  07FC  3430               	retlw	48
   380                           
   381                           ;initializer for _levelofRedLed_MSB
   382  07FD  3430               	retlw	48
   383                           
   384                           ;initializer for _levelofBlueLed_LSB
   385  07FE  3430               	retlw	48
   386                           
   387                           ;initializer for _levelofBlueLed_MSB
   388  07FF  3430               	retlw	48
   389                           
   390                           	psect	idataBANK3
   391  1485                     __pidataBANK3:	
   392                           
   393                           ;initializer for _tempReceivedDataBuffer
   394  1485  3423               	retlw	35
   395  1486  3400               	retlw	0
   396  1487  3400               	retlw	0
   397  1488  3400               	retlw	0
   398  1489  3400               	retlw	0
   399  148A  3400               	retlw	0
   400  148B  3400               	retlw	0
   401  148C  3400               	retlw	0
   402  148D  3400               	retlw	0
   403  148E  3400               	retlw	0
   404  148F  3400               	retlw	0
   405  1490  3400               	retlw	0
   406  1491  3400               	retlw	0
   407  1492  3400               	retlw	0
   408  1493  3400               	retlw	0
   409  1494  3400               	retlw	0
   410  1495  3400               	retlw	0
   411  1496  3400               	retlw	0
   412  1497  3400               	retlw	0
   413  1498  3400               	retlw	0
   414  1499  3400               	retlw	0
   415  149A  3400               	retlw	0
   416  149B  3400               	retlw	0
   417  149C  3400               	retlw	0
   418                           
   419                           ;initializer for _copy_parentalLockBuffer
   420  149D  3430               	retlw	48
   421  149E  3400               	retlw	0
   422  149F  3400               	retlw	0
   423  14A0  3400               	retlw	0
   424  14A1  3400               	retlw	0
   425  14A2  3400               	retlw	0
   426  14A3  3400               	retlw	0
   427  14A4  3400               	retlw	0
   428  14A5  3400               	retlw	0
   429  14A6  3400               	retlw	0
   430  14A7  3400               	retlw	0
   431  14A8  3400               	retlw	0
   432  14A9  3400               	retlw	0
   433  14AA  3400               	retlw	0
   434  14AB  3400               	retlw	0
   435  14AC  3400               	retlw	0
   436  14AD  3400               	retlw	0
   437  14AE  3400               	retlw	0
   438                           
   439                           ;initializer for _ErrorNames
   440  14AF  3423               	retlw	35
   441  14B0  3423               	retlw	35
   442  14B1  3423               	retlw	35
   443  14B2  3423               	retlw	35
   444  14B3  3400               	retlw	0
   445                           
   446                           	psect	idataBANK4
   447  1398                     __pidataBANK4:	
   448                           
   449                           ;initializer for _copymainReceivedDataBuffer
   450  1398  3423               	retlw	35
   451  1399  3400               	retlw	0
   452  139A  3400               	retlw	0
   453  139B  3400               	retlw	0
   454  139C  3400               	retlw	0
   455  139D  3400               	retlw	0
   456  139E  3400               	retlw	0
   457  139F  3400               	retlw	0
   458  13A0  3400               	retlw	0
   459  13A1  3400               	retlw	0
   460  13A2  3400               	retlw	0
   461  13A3  3400               	retlw	0
   462  13A4  3400               	retlw	0
   463  13A5  3400               	retlw	0
   464  13A6  3400               	retlw	0
   465  13A7  3400               	retlw	0
   466  13A8  3400               	retlw	0
   467  13A9  3400               	retlw	0
   468  13AA  3400               	retlw	0
   469  13AB  3400               	retlw	0
   470  13AC  3400               	retlw	0
   471  13AD  3400               	retlw	0
   472  13AE  3400               	retlw	0
   473  13AF  3400               	retlw	0
   474  13B0  3400               	retlw	0
   475  13B1  3400               	retlw	0
   476  13B2  3400               	retlw	0
   477  13B3  3400               	retlw	0
   478  13B4  3400               	retlw	0
   479  13B5  3400               	retlw	0
   480  13B6  3400               	retlw	0
   481  13B7  3400               	retlw	0
   482                           
   483                           	psect	idataBANK5
   484  1546                     __pidataBANK5:	
   485                           
   486                           ;initializer for _mainReceivedDataBuffer
   487  1546  3423               	retlw	35
   488  1547  3400               	retlw	0
   489  1548  3400               	retlw	0
   490  1549  3400               	retlw	0
   491  154A  3400               	retlw	0
   492  154B  3400               	retlw	0
   493  154C  3400               	retlw	0
   494  154D  3400               	retlw	0
   495  154E  3400               	retlw	0
   496  154F  3400               	retlw	0
   497  1550  3400               	retlw	0
   498  1551  3400               	retlw	0
   499  1552  3400               	retlw	0
   500  1553  3400               	retlw	0
   501  1554  3400               	retlw	0
   502  1555  3400               	retlw	0
   503  1556  3400               	retlw	0
   504  1557  3400               	retlw	0
   505  1558  3400               	retlw	0
   506  1559  3400               	retlw	0
   507  155A  3400               	retlw	0
   508  155B  3400               	retlw	0
   509  155C  3400               	retlw	0
   510  155D  3400               	retlw	0
   511  155E  3400               	retlw	0
   512  155F  3400               	retlw	0
   513  1560  3400               	retlw	0
   514  1561  3400               	retlw	0
   515  1562  3400               	retlw	0
   516  1563  3400               	retlw	0
   517  1564  3400               	retlw	0
   518  1565  3400               	retlw	0
   519                           
   520                           ;initializer for _parentalLockBuffer
   521  1566  3430               	retlw	48
   522  1567  3400               	retlw	0
   523  1568  3400               	retlw	0
   524  1569  3400               	retlw	0
   525  156A  3400               	retlw	0
   526  156B  3400               	retlw	0
   527  156C  3400               	retlw	0
   528  156D  3400               	retlw	0
   529  156E  3400               	retlw	0
   530  156F  3400               	retlw	0
   531  1570  3400               	retlw	0
   532  1571  3400               	retlw	0
   533  1572  3400               	retlw	0
   534  1573  3400               	retlw	0
   535  1574  3400               	retlw	0
   536  1575  3400               	retlw	0
   537  1576  3400               	retlw	0
   538  1577  3400               	retlw	0
   539                           
   540                           	psect	idataBANK6
   541  1378                     __pidataBANK6:	
   542                           
   543                           ;initializer for _tempRGBReceivedDataBuffer
   544  1378  3423               	retlw	35
   545  1379  3400               	retlw	0
   546  137A  3400               	retlw	0
   547  137B  3400               	retlw	0
   548  137C  3400               	retlw	0
   549  137D  3400               	retlw	0
   550  137E  3400               	retlw	0
   551  137F  3400               	retlw	0
   552  1380  3400               	retlw	0
   553  1381  3400               	retlw	0
   554  1382  3400               	retlw	0
   555  1383  3400               	retlw	0
   556  1384  3400               	retlw	0
   557  1385  3400               	retlw	0
   558  1386  3400               	retlw	0
   559  1387  3400               	retlw	0
   560  1388  3400               	retlw	0
   561  1389  3400               	retlw	0
   562  138A  3400               	retlw	0
   563  138B  3400               	retlw	0
   564  138C  3400               	retlw	0
   565  138D  3400               	retlw	0
   566  138E  3400               	retlw	0
   567  138F  3400               	retlw	0
   568  1390  3400               	retlw	0
   569  1391  3400               	retlw	0
   570  1392  3400               	retlw	0
   571  1393  3400               	retlw	0
   572  1394  3400               	retlw	0
   573  1395  3400               	retlw	0
   574  1396  3400               	retlw	0
   575  1397  3400               	retlw	0
   576                           
   577                           	psect	idataBANK7
   578  1613                     __pidataBANK7:	
   579                           
   580                           ;initializer for _currentStateBuffer
   581  1613  3423               	retlw	35
   582  1614  3400               	retlw	0
   583  1615  3400               	retlw	0
   584  1616  3400               	retlw	0
   585  1617  3400               	retlw	0
   586  1618  3400               	retlw	0
   587  1619  3400               	retlw	0
   588  161A  3400               	retlw	0
   589  161B  3400               	retlw	0
   590  161C  3400               	retlw	0
   591  161D  3400               	retlw	0
   592  161E  3400               	retlw	0
   593  161F  3400               	retlw	0
   594  1620  3400               	retlw	0
   595  1621  3400               	retlw	0
   596  1622  3400               	retlw	0
   597  1623  3400               	retlw	0
   598  1624  3400               	retlw	0
   599  1625  3400               	retlw	0
   600  1626  3400               	retlw	0
   601  1627  3400               	retlw	0
   602  1628  3400               	retlw	0
   603  1629  3400               	retlw	0
   604  162A  3400               	retlw	0
   605  162B  3400               	retlw	0
   606  162C  3400               	retlw	0
   607  162D  3400               	retlw	0
   608  162E  3400               	retlw	0
   609  162F  3400               	retlw	0
   610  1630  3400               	retlw	0
   611  1631  3400               	retlw	0
   612  1632  3400               	retlw	0
   613  1633  3400               	retlw	0
   614  1634  3400               	retlw	0
   615  1635  3400               	retlw	0
   616  1636  3400               	retlw	0
   617  1637  3400               	retlw	0
   618  1638  3400               	retlw	0
   619  1639  3400               	retlw	0
   620  163A  3400               	retlw	0
   621  163B  3400               	retlw	0
   622  163C  3400               	retlw	0
   623  163D  3400               	retlw	0
   624  163E  3400               	retlw	0
   625  163F  3400               	retlw	0
   626  1640  3400               	retlw	0
   627  1641  3400               	retlw	0
   628  1642  3400               	retlw	0
   629  1643  3400               	retlw	0
   630  1644  3400               	retlw	0
   631  1645  3400               	retlw	0
   632  1646  3400               	retlw	0
   633  1647  3400               	retlw	0
   634  1648  3400               	retlw	0
   635  1649  3400               	retlw	0
   636  164A  3400               	retlw	0
   637  164B  3400               	retlw	0
   638  164C  3400               	retlw	0
   639  164D  3400               	retlw	0
   640  164E  3400               	retlw	0
   641  164F  3400               	retlw	0
   642  1650  3400               	retlw	0
   643  1651  3400               	retlw	0
   644  1652  3400               	retlw	0
   645  1653  3400               	retlw	0
   646  1654  3400               	retlw	0
   647  1655  3400               	retlw	0
   648  1656  3400               	retlw	0
   649  1657  3400               	retlw	0
   650  1658  3400               	retlw	0
   651  1659  3400               	retlw	0
   652  165A  3400               	retlw	0
   653  165B  3400               	retlw	0
   654  165C  3400               	retlw	0
   655                           
   656                           	psect	stringtext1
   657  1800                     __pstringtext1:	
   658  1800                     _hexpowers:	
   659  1800  3401               	retlw	1
   660  1801  3400               	retlw	0
   661  1802  3410               	retlw	16
   662  1803  3400               	retlw	0
   663  1804  3400               	retlw	0
   664  1805  3401               	retlw	1
   665  1806  3400               	retlw	0
   666  1807  3410               	retlw	16
   667  1808                     __end_of_hexpowers:	
   668  001A                     _TMR2	set	26
   669  001C                     _T2CON	set	28
   670  0019                     _T1GCON	set	25
   671  0018                     _T1CON	set	24
   672  000D                     _PORTBbits	set	13
   673  0016                     _TMR1L	set	22
   674  0017                     _TMR1H	set	23
   675  0014                     _PIR4bits	set	20
   676  0013                     _PIR3bits	set	19
   677  0018                     _T1CONbits	set	24
   678  001B                     _PR2	set	27
   679  001C                     _T2CONbits	set	28
   680  0011                     _PIR1bits	set	17
   681  0010                     _PORTEbits	set	16
   682  000F                     _PORTDbits	set	15
   683  005E                     _PEIE	set	94
   684  005F                     _GIE	set	95
   685  00A2                     _CCP7IF	set	162
   686  00A3                     _CCP8IF	set	163
   687  00A6                     _CCP9IF	set	166
   688  008D                     _RC1IF	set	141
   689  0094                     _PIE4bits	set	148
   690  008E                     _TRISCbits	set	142
   691  0090                     _TRISEbits	set	144
   692  008D                     _TRISBbits	set	141
   693  008F                     _TRISDbits	set	143
   694  0093                     _PIE3bits	set	147
   695  0091                     _PIE1bits	set	145
   696  018C                     _ANSELA	set	396
   697  018D                     _ANSELB	set	397
   698  018F                     _ANSELD	set	399
   699  0190                     _ANSELE	set	400
   700  019C                     _SP1BRGH	set	412
   701  019B                     _SP1BRGL	set	411
   702  019E                     _TX1STA	set	414
   703  019D                     _RC1STA	set	413
   704  019F                     _BAUD1CON	set	415
   705  0199                     _RC1REG	set	409
   706  019D                     _RC1STAbits	set	413
   707  019A                     _TX1REG	set	410
   708  019E                     _TX1STAbits	set	414
   709  020D                     _WPUB	set	525
   710  020F                     _WPUD	set	527
   711  0210                     _WPUE	set	528
   712  028C                     _PORTFbits	set	652
   713  028D                     _PORTGbits	set	653
   714  030C                     _TRISFbits	set	780
   715  030D                     _TRISGbits	set	781
   716  040C                     _ANSELF	set	1036
   717  040D                     _ANSELG	set	1037
   718  041C                     _TMR6	set	1052
   719  041E                     _T6CON	set	1054
   720  0415                     _TMR4	set	1045
   721  0417                     _T4CON	set	1047
   722  041B                     _T5GCON	set	1051
   723  041A                     _T5CON	set	1050
   724  0414                     _T3GCON	set	1044
   725  0413                     _T3CON	set	1043
   726  0418                     _TMR5L	set	1048
   727  0419                     _TMR5H	set	1049
   728  0411                     _TMR3L	set	1041
   729  0412                     _TMR3H	set	1042
   730  041A                     _T5CONbits	set	1050
   731  041D                     _PR6	set	1053
   732  041E                     _T6CONbits	set	1054
   733  0413                     _T3CONbits	set	1043
   734  0416                     _PR4	set	1046
   735  0417                     _T4CONbits	set	1047
   736  048D                     _WPUG	set	1165
   737  0617                     _CCPR8L	set	1559
   738  0618                     _CCPR8H	set	1560
   739  0614                     _CCPR7L	set	1556
   740  0615                     _CCPR7H	set	1557
   741  0616                     _CCP7CON	set	1558
   742  061A                     _CCPR9L	set	1562
   743  061B                     _CCPR9H	set	1563
   744  061C                     _CCP9CON	set	1564
   745  1808                     STR_20:	
   746  1808  3452               	retlw	82	;'R'
   747  1809  3447               	retlw	71	;'G'
   748  180A  3442               	retlw	66	;'B'
   749  180B  342E               	retlw	46	;'.'
   750  180C  3439               	retlw	57	;'9'
   751  180D  342E               	retlw	46	;'.'
   752  180E  3441               	retlw	65	;'A'
   753  180F  3443               	retlw	67	;'C'
   754  1810  3454               	retlw	84	;'T'
   755  1811  3441               	retlw	65	;'A'
   756  1812  3443               	retlw	67	;'C'
   757  1813  344B               	retlw	75	;'K'
   758  1814  342E               	retlw	46	;'.'
   759  1815  3430               	retlw	48	;'0'
   760  1816  342E               	retlw	46	;'.'
   761  1817  3430               	retlw	48	;'0'
   762  1818  342E               	retlw	46	;'.'
   763  1819  3430               	retlw	48	;'0'
   764  181A  342E               	retlw	46	;'.'
   765  181B  3430               	retlw	48	;'0'
   766  181C  342E               	retlw	46	;'.'
   767  181D  3430               	retlw	48	;'0'
   768  181E  342E               	retlw	46	;'.'
   769  181F  3431               	retlw	49	;'1'
   770  1820  3430               	retlw	48	;'0'
   771  1821  3430               	retlw	48	;'0'
   772  1822  3400               	retlw	0
   773                           
   774                           	psect	stringtext2
   775  1823                     __pstringtext2:	
   776  1823                     STR_19:	
   777  1823  3452               	retlw	82	;'R'
   778  1824  3447               	retlw	71	;'G'
   779  1825  3442               	retlw	66	;'B'
   780  1826  342E               	retlw	46	;'.'
   781  1827  3439               	retlw	57	;'9'
   782  1828  342E               	retlw	46	;'.'
   783  1829  3441               	retlw	65	;'A'
   784  182A  3443               	retlw	67	;'C'
   785  182B  3454               	retlw	84	;'T'
   786  182C  3441               	retlw	65	;'A'
   787  182D  3443               	retlw	67	;'C'
   788  182E  344B               	retlw	75	;'K'
   789  182F  342E               	retlw	46	;'.'
   790  1830  3431               	retlw	49	;'1'
   791  1831  342E               	retlw	46	;'.'
   792  1832  3430               	retlw	48	;'0'
   793  1833  342E               	retlw	46	;'.'
   794  1834  3430               	retlw	48	;'0'
   795  1835  342E               	retlw	46	;'.'
   796  1836  3430               	retlw	48	;'0'
   797  1837  342E               	retlw	46	;'.'
   798  1838  3430               	retlw	48	;'0'
   799  1839  342E               	retlw	46	;'.'
   800  183A  3431               	retlw	49	;'1'
   801  183B  3430               	retlw	48	;'0'
   802  183C  3430               	retlw	48	;'0'
   803  183D  3400               	retlw	0
   804                           
   805                           	psect	stringtext3
   806  183E                     __pstringtext3:	
   807  183E                     STR_21:	
   808  183E  3430               	retlw	48	;'0'
   809  183F  3431               	retlw	49	;'1'
   810  1840  3432               	retlw	50	;'2'
   811  1841  3433               	retlw	51	;'3'
   812  1842  3434               	retlw	52	;'4'
   813  1843  3435               	retlw	53	;'5'
   814  1844  3436               	retlw	54	;'6'
   815  1845  3437               	retlw	55	;'7'
   816  1846  3438               	retlw	56	;'8'
   817  1847  3439               	retlw	57	;'9'
   818  1848  3441               	retlw	65	;'A'
   819  1849  3442               	retlw	66	;'B'
   820  184A  3443               	retlw	67	;'C'
   821  184B  3444               	retlw	68	;'D'
   822  184C  3445               	retlw	69	;'E'
   823  184D  3446               	retlw	70	;'F'
   824  184E  3400               	retlw	0
   825                           
   826                           	psect	stringtext4
   827  184F                     __pstringtext4:	
   828  184F                     STR_3:	
   829  184F  3441               	retlw	65	;'A'
   830  1850  3443               	retlw	67	;'C'
   831  1851  3454               	retlw	84	;'T'
   832  1852  3441               	retlw	65	;'A'
   833  1853  3443               	retlw	67	;'C'
   834  1854  344B               	retlw	75	;'K'
   835  1855  3400               	retlw	0
   836                           
   837                           	psect	stringtext5
   838  1856                     __pstringtext5:	
   839  1856                     STR_18:	
   840  1856  3445               	retlw	69	;'E'
   841  1857  3452               	retlw	82	;'R'
   842  1858  344C               	retlw	76	;'L'
   843  1859  3453               	retlw	83	;'S'
   844  185A  3400               	retlw	0
   845                           
   846                           	psect	stringtext6
   847  185B                     __pstringtext6:	
   848  185B                     STR_13:	
   849  185B  3445               	retlw	69	;'E'
   850  185C  3452               	retlw	82	;'R'
   851  185D  344F               	retlw	79	;'O'
   852  185E  3456               	retlw	86	;'V'
   853  185F  3400               	retlw	0
   854                           
   855                           	psect	stringtext7
   856  1860                     __pstringtext7:	
   857  1860                     STR_14:	
   858  1860  3445               	retlw	69	;'E'
   859  1861  3452               	retlw	82	;'R'
   860  1862  3452               	retlw	82	;'R'
   861  1863  3458               	retlw	88	;'X'
   862  1864  3400               	retlw	0
   863                           
   864                           	psect	stringtext8
   865  1865                     __pstringtext8:	
   866  1865                     STR_16:	
   867  1865  3452               	retlw	82	;'R'
   868  1866  3447               	retlw	71	;'G'
   869  1867  3442               	retlw	66	;'B'
   870  1868  3400               	retlw	0
   871                           
   872                           	psect	stringtext9
   873  1869                     __pstringtext9:	
   874  1869                     STR_10:	
   875  1869  3425               	retlw	37	;'%'
   876  186A  3458               	retlw	88	;'X'
   877  186B  3400               	retlw	0
   878                           
   879                           	psect	stringtext10
   880  186C                     __pstringtext10:	
   881  186C                     STR_1:	
   882  186C  342E               	retlw	46	;'.'
   883  186D  3400               	retlw	0
   884                           
   885                           	psect	stringtext11
   886  0000                     __pstringtext11:	
   887  186C                     
   888                           ; #config settings
   889  0000                     
   890                           	psect	cinit
   891  00F1                     start_initialization:	
   892  00F1                     __initialization:	
   893                           
   894                           ; Initialize objects allocated to BANK0
   895  00F1  3180  2003  3180   	fcall	__pidataBANK0	;fetch initializer
   896  00F4  00E7               	movwf	__pdataBANK0& (0+127)
   897                           
   898                           ; Initialize objects allocated to BANK2
   899  00F5  30F5               	movlw	low __pidataBANK2
   900  00F6  0084               	movwf	4
   901  00F7  3087               	movlw	(high __pidataBANK2)| (0+128)
   902  00F8  0085               	movwf	5
   903  00F9  3064               	movlw	low __pdataBANK2
   904  00FA  0086               	movwf	6
   905  00FB  3001               	movlw	high __pdataBANK2
   906  00FC  0087               	movwf	7
   907  00FD  300B               	movlw	11
   908  00FE  3191  2167  3180   	fcall	init_ram
   909                           
   910                           ; Initialize objects allocated to BANK3
   911  0101  3085               	movlw	low __pidataBANK3
   912  0102  0084               	movwf	4
   913  0103  3094               	movlw	(high __pidataBANK3)| (0+128)
   914  0104  0085               	movwf	5
   915  0105  30A0               	movlw	low __pdataBANK3
   916  0106  0086               	movwf	6
   917  0107  3001               	movlw	high __pdataBANK3
   918  0108  0087               	movwf	7
   919  0109  302F               	movlw	47
   920  010A  3191  2167  3180   	fcall	init_ram
   921                           
   922                           ; Initialize objects allocated to BANK4
   923  010D  3098               	movlw	low __pidataBANK4
   924  010E  0084               	movwf	4
   925  010F  3093               	movlw	(high __pidataBANK4)| (0+128)
   926  0110  0085               	movwf	5
   927  0111  304E               	movlw	low __pdataBANK4
   928  0112  0086               	movwf	6
   929  0113  3002               	movlw	high __pdataBANK4
   930  0114  0087               	movwf	7
   931  0115  3020               	movlw	32
   932  0116  3191  2167  3180   	fcall	init_ram
   933                           
   934                           ; Initialize objects allocated to BANK5
   935  0119  3046               	movlw	low __pidataBANK5
   936  011A  0084               	movwf	4
   937  011B  3095               	movlw	(high __pidataBANK5)| (0+128)
   938  011C  0085               	movwf	5
   939  011D  30A0               	movlw	low __pdataBANK5
   940  011E  0086               	movwf	6
   941  011F  3002               	movlw	high __pdataBANK5
   942  0120  0087               	movwf	7
   943  0121  3032               	movlw	50
   944  0122  3191  2167  3180   	fcall	init_ram
   945                           
   946                           ; Initialize objects allocated to BANK6
   947  0125  3078               	movlw	low __pidataBANK6
   948  0126  0084               	movwf	4
   949  0127  3093               	movlw	(high __pidataBANK6)| (0+128)
   950  0128  0085               	movwf	5
   951  0129  3020               	movlw	low __pdataBANK6
   952  012A  0086               	movwf	6
   953  012B  3003               	movlw	high __pdataBANK6
   954  012C  0087               	movwf	7
   955  012D  3020               	movlw	32
   956  012E  3191  2167  3180   	fcall	init_ram
   957                           
   958                           ; Initialize objects allocated to BANK7
   959  0131  3013               	movlw	low __pidataBANK7
   960  0132  0084               	movwf	4
   961  0133  3096               	movlw	(high __pidataBANK7)| (0+128)
   962  0134  0085               	movwf	5
   963  0135  30A0               	movlw	low __pdataBANK7
   964  0136  0086               	movwf	6
   965  0137  3003               	movlw	high __pdataBANK7
   966  0138  0087               	movwf	7
   967  0139  304A               	movlw	74
   968  013A  3191  2167  3180   	fcall	init_ram
   969                           
   970                           ; Clear objects allocated to COMMON
   971  013D  01F0               	clrf	__pbssCOMMON& (0+127)
   972  013E  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   973  013F  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   974  0140  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   975  0141  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   976  0142  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   977                           
   978                           ; Clear objects allocated to BANK0
   979  0143  305C               	movlw	low __pbssBANK0
   980  0144  0084               	movwf	4
   981  0145  3000               	movlw	high __pbssBANK0
   982  0146  0085               	movwf	5
   983  0147  300B               	movlw	11
   984  0148  3191  2161  3180   	fcall	clear_ram0
   985                           
   986                           ; Clear objects allocated to BANK1
   987  014B  0021               	movlb	1	; select bank1
   988  014C  01EB               	clrf	__pbssBANK1& (0+127)
   989  014D  01EC               	clrf	(__pbssBANK1+1)& (0+127)
   990  014E  01ED               	clrf	(__pbssBANK1+2)& (0+127)
   991  014F  01EE               	clrf	(__pbssBANK1+3)& (0+127)
   992  0150  01EF               	clrf	(__pbssBANK1+4)& (0+127)
   993                           
   994                           ; Clear objects allocated to BANK2
   995  0151  3020               	movlw	low __pbssBANK2
   996  0152  0084               	movwf	4
   997  0153  3001               	movlw	high __pbssBANK2
   998  0154  0085               	movwf	5
   999  0155  3044               	movlw	68
  1000  0156  3191  2161  3180   	fcall	clear_ram0
  1001                           
  1002                           ; Clear objects allocated to BANK3
  1003  0159  30CF               	movlw	low __pbssBANK3
  1004  015A  0084               	movwf	4
  1005  015B  3001               	movlw	high __pbssBANK3
  1006  015C  0085               	movwf	5
  1007  015D  301E               	movlw	30
  1008  015E  3191  2161  3180   	fcall	clear_ram0
  1009                           
  1010                           ; Clear objects allocated to BANK4
  1011  0161  3020               	movlw	low __pbssBANK4
  1012  0162  0084               	movwf	4
  1013  0163  3002               	movlw	high __pbssBANK4
  1014  0164  0085               	movwf	5
  1015  0165  302E               	movlw	46
  1016  0166  3191  2161         	fcall	clear_ram0
  1017  0168                     end_of_initialization:	
  1018                           ;End of C runtime variable initialization code
  1019                           
  1020  0168                     __end_of__initialization:	
  1021  0168  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1022  0169  0020               	movlb	0
  1023  016A  318B  2B12         	ljmp	_main	;jump to C main() function
  1024                           
  1025                           	psect	bssCOMMON
  1026  0070                     __pbssCOMMON:	
  1027  0070                     _IntegerBlueColorIntensity:	
  1028  0070                     	ds	2
  1029  0072                     _mainReceivedDataPosition:	
  1030  0072                     	ds	2
  1031  0074                     _ChildLockBuffer:	
  1032  0074                     	ds	1
  1033  0075                     _SwitchStatusBuffer:	
  1034  0075                     	ds	1
  1035                           
  1036                           	psect	bssBANK0
  1037  005C                     __pbssBANK0:	
  1038  005C                     strtok@sp:	
  1039  005C                     	ds	1
  1040  005D                     _ChildLockString:	
  1041  005D                     	ds	1
  1042  005E                     _AllColorIntensityString:	
  1043  005E                     	ds	1
  1044  005F                     _BlueColorIntensityString:	
  1045  005F                     	ds	1
  1046  0060                     _GreenColorIntensityString:	
  1047  0060                     	ds	1
  1048  0061                     _RedColorIntensityString:	
  1049  0061                     	ds	1
  1050  0062                     _SwitchStatusString:	
  1051  0062                     	ds	1
  1052  0063                     _SwitchNumberString:	
  1053  0063                     	ds	1
  1054  0064                     _ModuleNameString:	
  1055  0064                     	ds	1
  1056  0065                     _token:	
  1057  0065                     	ds	1
  1058  0066                     _ConvertmaindataReceiveIntoString:	
  1059  0066                     	ds	1
  1060                           
  1061                           	psect	dataBANK0
  1062  0067                     __pdataBANK0:	
  1063  0067                     _charchildLock:	
  1064  0067                     	ds	1
  1065                           
  1066                           	psect	bssBANK1
  1067  00EB                     __pbssBANK1:	
  1068  00EB                     _IntegerGreenColorIntensity:	
  1069  00EB                     	ds	2
  1070  00ED                     _IntergerRedColorIntensity:	
  1071  00ED                     	ds	2
  1072  00EF                     _FinalFramebitBuffer:	
  1073  00EF                     	ds	1
  1074                           
  1075                           	psect	bssBANK2
  1076  0120                     __pbssBANK2:	
  1077  0120                     _M9:	
  1078  0120                     	ds	2
  1079  0122                     _M8:	
  1080  0122                     	ds	2
  1081  0124                     _M7:	
  1082  0124                     	ds	2
  1083  0126                     _M6:	
  1084  0126                     	ds	2
  1085  0128                     _M5:	
  1086  0128                     	ds	2
  1087  012A                     _M4:	
  1088  012A                     	ds	2
  1089  012C                     _M3:	
  1090  012C                     	ds	2
  1091  012E                     _M2:	
  1092  012E                     	ds	2
  1093  0130                     _M1:	
  1094  0130                     	ds	2
  1095  0132                     _IntegerChildLock:	
  1096  0132                     	ds	2
  1097  0134                     _IntergerSwitchStatus:	
  1098  0134                     	ds	2
  1099  0136                     _IntegerSwitchNumber:	
  1100  0136                     	ds	2
  1101  0138                     _partCounter:	
  1102  0138                     	ds	2
  1103  013A                     _ConvertIntegertoStringRedColorBuffer:	
  1104  013A                     	ds	2
  1105  013C                     _Timer5L:	
  1106  013C                     	ds	2
  1107  013E                     _Timer5H:	
  1108  013E                     	ds	2
  1109  0140                     _Timer3L:	
  1110  0140                     	ds	2
  1111  0142                     _Timer3H:	
  1112  0142                     	ds	2
  1113  0144                     _Timer1L:	
  1114  0144                     	ds	2
  1115  0146                     _Timer1H:	
  1116  0146                     	ds	2
  1117  0148                     _start_PWM_Generation_For_BlueLed:	
  1118  0148                     	ds	2
  1119  014A                     _start_PWM_Generation_For_GreenLed:	
  1120  014A                     	ds	2
  1121  014C                     _start_PWM_Generation_For_RedLed:	
  1122  014C                     	ds	2
  1123  014E                     _mainDatacopyPosition:	
  1124  014E                     	ds	2
  1125  0150                     _mainReceivedDataFlag:	
  1126  0150                     	ds	2
  1127  0152                     _mainDataReceived:	
  1128  0152                     	ds	2
  1129  0154                     _BlueColorIntensityBuffer:	
  1130  0154                     	ds	2
  1131  0156                     _GreenColorIntensityBuffer:	
  1132  0156                     	ds	2
  1133  0158                     _RedColorIntensityBuffer:	
  1134  0158                     	ds	2
  1135  015A                     _SwitchNumberBuffer:	
  1136  015A                     	ds	2
  1137  015C                     _StopBitStringbufer:	
  1138  015C                     	ds	1
  1139  015D                     _StopBitString:	
  1140  015D                     	ds	1
  1141  015E                     _FinalframebitString:	
  1142  015E                     	ds	1
  1143  015F                     _AcknowledgementString:	
  1144  015F                     	ds	1
  1145  0160                     _ChildLockbuffer:	
  1146  0160                     	ds	2
  1147  0162                     _switchstatusbuffer:	
  1148  0162                     	ds	2
  1149                           
  1150                           	psect	dataBANK2
  1151  0164                     __pdataBANK2:	
  1152  0164                     applianceControl@F4006:	
  1153  0164                     	ds	2
  1154  0166                     applianceControl@F4004:	
  1155  0166                     	ds	2
  1156  0168                     _charSwitchState:	
  1157  0168                     	ds	1
  1158  0169                     _levelofGreenLed_LSB:	
  1159  0169                     	ds	1
  1160  016A                     _levelofGreenLed_MSB:	
  1161  016A                     	ds	1
  1162  016B                     _levelofRedLed_LSB:	
  1163  016B                     	ds	1
  1164  016C                     _levelofRedLed_MSB:	
  1165  016C                     	ds	1
  1166  016D                     _levelofBlueLed_LSB:	
  1167  016D                     	ds	1
  1168  016E                     _levelofBlueLed_MSB:	
  1169  016E                     	ds	1
  1170                           
  1171                           	psect	bssBANK3
  1172  01CF                     __pbssBANK3:	
  1173  01CF                     _ModuleNameBuffer:	
  1174  01CF                     	ds	3
  1175  01D2                     _IntegerAllColorIntensity:	
  1176  01D2                     	ds	2
  1177  01D4                     _BlueLedSwitchCounter:	
  1178  01D4                     	ds	2
  1179  01D6                     _GreenLedSwitchCounter:	
  1180  01D6                     	ds	2
  1181  01D8                     _RedLedSwitchCounter:	
  1182  01D8                     	ds	2
  1183  01DA                     _Finalframebitbuffer:	
  1184  01DA                     	ds	2
  1185  01DC                     _BlueColorIntensityStringLength:	
  1186  01DC                     	ds	2
  1187  01DE                     _AllColorIntensityStringLength:	
  1188  01DE                     	ds	2
  1189  01E0                     _GreenColorIntensityStringLength:	
  1190  01E0                     	ds	2
  1191  01E2                     _RedColorIntensityStringLength:	
  1192  01E2                     	ds	2
  1193  01E4                     _mainDataReceiveStringLength:	
  1194  01E4                     	ds	2
  1195  01E6                     _ConvertIntegertoStringBlueColorBuffer:	
  1196  01E6                     	ds	2
  1197  01E8                     _ConvertIntegertoStringGreenColorBuffer:	
  1198  01E8                     	ds	2
  1199  01EA                     _switchNumberBuffer:	
  1200  01EA                     	ds	3
  1201                           
  1202                           	psect	dataBANK3
  1203  01A0                     __pdataBANK3:	
  1204  01A0                     _tempReceivedDataBuffer:	
  1205  01A0                     	ds	24
  1206  01B8                     _copy_parentalLockBuffer:	
  1207  01B8                     	ds	18
  1208  01CA                     _ErrorNames:	
  1209  01CA                     	ds	5
  1210                           
  1211                           	psect	bssBANK4
  1212  0220                     __pbssBANK4:	
  1213  0220                     _sendFinalBufferToGAteway:	
  1214  0220                     	ds	46
  1215                           
  1216                           	psect	dataBANK4
  1217  024E                     __pdataBANK4:	
  1218  024E                     _copymainReceivedDataBuffer:	
  1219  024E                     	ds	32
  1220                           
  1221                           	psect	dataBANK5
  1222  02A0                     __pdataBANK5:	
  1223  02A0                     _mainReceivedDataBuffer:	
  1224  02A0                     	ds	32
  1225  02C0                     _parentalLockBuffer:	
  1226  02C0                     	ds	18
  1227                           
  1228                           	psect	dataBANK6
  1229  0320                     __pdataBANK6:	
  1230  0320                     _tempRGBReceivedDataBuffer:	
  1231  0320                     	ds	32
  1232                           
  1233                           	psect	dataBANK7
  1234  03A0                     __pdataBANK7:	
  1235  03A0                     _currentStateBuffer:	
  1236  03A0                     	ds	74
  1237                           
  1238                           	psect	inittext
  1239  1167                     init_ram:	
  1240  1167  00FE               	movwf	126
  1241  1168                     initloop:	
  1242  1168  0012               	moviw fsr0++
  1243  1169  001E               	movwi fsr1++
  1244  116A  0BFE               	decfsz	126,f
  1245  116B  2968               	goto	initloop
  1246  116C  3400               	retlw	0
  1247                           
  1248                           	psect	clrtext
  1249  1161                     clear_ram0:	
  1250                           ;	Called with FSR0 containing the base address, and
  1251                           ;	WREG with the size to clear
  1252                           
  1253  1161  0064               	clrwdt	;clear the watchdog before getting into this loop
  1254  1162                     clrloop0:	
  1255  1162  0180               	clrf	0	;clear RAM location pointed to by FSR
  1256  1163  3101               	addfsr 0,1
  1257  1164  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1258  1165  2962               	goto	clrloop0	;have we reached the end yet?
  1259  1166  3400               	retlw	0	;all done for this memory range, return
  1260                           
  1261                           	psect	cstackBANK5
  1262  02D2                     __pcstackBANK5:	
  1263  02D2                     main@dataBufferCounter:	
  1264                           
  1265                           ; 2 bytes @ 0x0
  1266  02D2                     	ds	2
  1267  02D4                     main@j:	
  1268                           
  1269                           ; 2 bytes @ 0x2
  1270  02D4                     	ds	2
  1271  02D6                     main@k:	
  1272                           
  1273                           ; 2 bytes @ 0x4
  1274  02D6                     	ds	2
  1275  02D8                     main@k_1110:	
  1276                           
  1277                           ; 2 bytes @ 0x6
  1278  02D8                     	ds	2
  1279  02DA                     main@man:	
  1280                           
  1281                           ; 2 bytes @ 0x8
  1282  02DA                     	ds	2
  1283                           
  1284                           	psect	cstackBANK1
  1285  00A0                     __pcstackBANK1:	
  1286  00A0                     applicationControlRGB@remainder:	
  1287                           
  1288                           ; 2 bytes @ 0x0
  1289  00A0                     	ds	2
  1290  00A2                     applicationControlRGB@start:	
  1291                           
  1292                           ; 2 bytes @ 0x2
  1293  00A2                     	ds	2
  1294  00A4                     applicationControlRGB@end:	
  1295                           
  1296                           ; 2 bytes @ 0x4
  1297  00A4                     	ds	2
  1298  00A6                     applicationControlRGB@RedPulse:	
  1299                           
  1300                           ; 4 bytes @ 0x6
  1301  00A6                     	ds	4
  1302  00AA                     applicationControlRGB@GreenPulse:	
  1303                           
  1304                           ; 4 bytes @ 0xA
  1305  00AA                     	ds	4
  1306  00AE                     applicationControlRGB@BluePulse:	
  1307                           
  1308                           ; 4 bytes @ 0xE
  1309  00AE                     	ds	4
  1310  00B2                     applicationControlRGB@NeedRedPulse:	
  1311                           
  1312                           ; 4 bytes @ 0x12
  1313  00B2                     	ds	4
  1314  00B6                     applicationControlRGB@NeedGreenPulse:	
  1315                           
  1316                           ; 4 bytes @ 0x16
  1317  00B6                     	ds	4
  1318  00BA                     applicationControlRGB@NeedBluePulse:	
  1319                           
  1320                           ; 4 bytes @ 0x1A
  1321  00BA                     	ds	4
  1322  00BE                     applicationControlRGB@ModuleNamestr:	
  1323                           
  1324                           ; 1 bytes @ 0x1E
  1325  00BE                     	ds	1
  1326  00BF                     applicationControlRGB@strRedH:	
  1327                           
  1328                           ; 3 bytes @ 0x1F
  1329  00BF                     	ds	3
  1330  00C2                     applicationControlRGB@strRedL:	
  1331                           
  1332                           ; 3 bytes @ 0x22
  1333  00C2                     	ds	3
  1334  00C5                     applicationControlRGB@strGreenH:	
  1335                           
  1336                           ; 3 bytes @ 0x25
  1337  00C5                     	ds	3
  1338  00C8                     applicationControlRGB@strGreenL:	
  1339                           
  1340                           ; 3 bytes @ 0x28
  1341  00C8                     	ds	3
  1342  00CB                     applicationControlRGB@strBlueH:	
  1343                           
  1344                           ; 3 bytes @ 0x2B
  1345  00CB                     	ds	3
  1346  00CE                     applicationControlRGB@strBlueL:	
  1347                           
  1348                           ; 3 bytes @ 0x2E
  1349  00CE                     	ds	3
  1350  00D1                     applicationControlRGB@HexlevelBuffer:	
  1351                           
  1352                           ; 5 bytes @ 0x31
  1353  00D1                     	ds	5
  1354  00D6                     applicationControlRGB@CompleteClock:	
  1355                           
  1356                           ; 4 bytes @ 0x36
  1357  00D6                     	ds	4
  1358  00DA                     applicationControlRGB@Convert255RangeintoHundred:	
  1359                           
  1360                           ; 3 bytes @ 0x3A
  1361  00DA                     	ds	3
  1362  00DD                     applicationControlRGB@clockPerCycle:	
  1363                           
  1364                           ; 3 bytes @ 0x3D
  1365  00DD                     	ds	3
  1366  00E0                     applicationControlRGB@ConvertIntoTenMsRangeFactor:	
  1367                           
  1368                           ; 2 bytes @ 0x40
  1369  00E0                     	ds	2
  1370  00E2                     applicationControlRGB@ConvertIntToTimeInMicrosecRed:	
  1371                           
  1372                           ; 3 bytes @ 0x42
  1373  00E2                     	ds	3
  1374  00E5                     applicationControlRGB@ConvertIntToTimeInMicrosecGreen:	
  1375                           
  1376                           ; 3 bytes @ 0x45
  1377  00E5                     	ds	3
  1378  00E8                     applicationControlRGB@ConvertIntToTimeInMicrosecBlue:	
  1379                           
  1380                           ; 3 bytes @ 0x48
  1381  00E8                     	ds	3
  1382                           
  1383                           	psect	cstackCOMMON
  1384  0076                     __pcstackCOMMON:	
  1385  0076                     ?_isdigit:	
  1386  0076                     ?_errorsISR:	
  1387                           ; 1 bit 
  1388                           
  1389  0076                     ?_GPIO_pin_Initialize:	
  1390                           ; 1 bytes @ 0x0
  1391                           
  1392  0076                     ?_allPeripheralInit:	
  1393                           ; 1 bytes @ 0x0
  1394                           
  1395  0076                     ?_ReceivingIndicationLedBlinking:	
  1396                           ; 1 bytes @ 0x0
  1397                           
  1398  0076                     ?_copyReceivedDataBuffer:	
  1399                           ; 1 bytes @ 0x0
  1400                           
  1401  0076                     ?_TransmissionIndicationLedBlinking:	
  1402                           ; 1 bytes @ 0x0
  1403                           
  1404  0076                     ?_clearAllPorts:	
  1405                           ; 1 bytes @ 0x0
  1406                           
  1407  0076                     ?_pinINIT_extra:	
  1408                           ; 1 bytes @ 0x0
  1409                           
  1410  0076                     ?_EUSART_Initialize:	
  1411                           ; 1 bytes @ 0x0
  1412                           
  1413  0076                     ?_TMR1_Initialize:	
  1414                           ; 1 bytes @ 0x0
  1415                           
  1416  0076                     ?_TMR2_Initialize:	
  1417                           ; 1 bytes @ 0x0
  1418                           
  1419  0076                     ?_TMR3_Initialize:	
  1420                           ; 1 bytes @ 0x0
  1421                           
  1422  0076                     ?_TMR4_Initialize:	
  1423                           ; 1 bytes @ 0x0
  1424                           
  1425  0076                     ?_TMR5_Initialize:	
  1426                           ; 1 bytes @ 0x0
  1427                           
  1428  0076                     ?_TMR6_Initialize:	
  1429                           ; 1 bytes @ 0x0
  1430                           
  1431  0076                     ?_CCP9_Initialize:	
  1432                           ; 1 bytes @ 0x0
  1433                           
  1434  0076                     ?_CCP8_Initialize:	
  1435                           ; 1 bytes @ 0x0
  1436                           
  1437  0076                     ?_CCP7_Initialize:	
  1438                           ; 1 bytes @ 0x0
  1439                           
  1440  0076                     ?_isr:	
  1441                           ; 1 bytes @ 0x0
  1442                           
  1443  0076                     ?_main:	
  1444                           ; 1 bytes @ 0x0
  1445                           
  1446  0076                     errorsISR@errNum:	
  1447                           ; 2 bytes @ 0x0
  1448                           
  1449                           
  1450                           ; 2 bytes @ 0x0
  1451  0076                     	ds	2
  1452  0078                     ??_errorsISR:	
  1453  0078                     errorsISR@Tx_count:	
  1454                           ; 1 bytes @ 0x2
  1455                           
  1456                           
  1457                           ; 2 bytes @ 0x2
  1458  0078                     	ds	2
  1459  007A                     ??_isr:	
  1460                           
  1461                           ; 1 bytes @ 0x4
  1462  007A                     	ds	2
  1463                           
  1464                           	psect	cstackBANK0
  1465  0020                     __pcstackBANK0:	
  1466  0020                     ?_strcpy:	
  1467  0020                     ?_strcat:	
  1468                           ; 1 bytes @ 0x0
  1469                           
  1470  0020                     ?_sendAcknowledgmentRGB:	
  1471                           ; 1 bytes @ 0x0
  1472                           
  1473  0020                     ?_strncpy:	
  1474                           ; 1 bytes @ 0x0
  1475                           
  1476  0020                     ?_memset:	
  1477                           ; 1 bytes @ 0x0
  1478                           
  1479  0020                     ?_sendAcknowledgment:	
  1480                           ; 1 bytes @ 0x0
  1481                           
  1482  0020                     ??_GPIO_pin_Initialize:	
  1483                           ; 1 bytes @ 0x0
  1484                           
  1485  0020                     ??_allPeripheralInit:	
  1486                           ; 1 bytes @ 0x0
  1487                           
  1488  0020                     ??_ReceivingIndicationLedBlinking:	
  1489                           ; 1 bytes @ 0x0
  1490                           
  1491  0020                     ??_copyReceivedDataBuffer:	
  1492                           ; 1 bytes @ 0x0
  1493                           
  1494  0020                     ?_errorsMain:	
  1495                           ; 1 bytes @ 0x0
  1496                           
  1497  0020                     ?_SwitchOnStatustToGatway:	
  1498                           ; 1 bytes @ 0x0
  1499                           
  1500  0020                     ??_TransmissionIndicationLedBlinking:	
  1501                           ; 1 bytes @ 0x0
  1502                           
  1503  0020                     ?_SwitchOffStatustToGatway:	
  1504                           ; 1 bytes @ 0x0
  1505                           
  1506  0020                     ??_clearAllPorts:	
  1507                           ; 1 bytes @ 0x0
  1508                           
  1509  0020                     ??_pinINIT_extra:	
  1510                           ; 1 bytes @ 0x0
  1511                           
  1512  0020                     ??_EUSART_Initialize:	
  1513                           ; 1 bytes @ 0x0
  1514                           
  1515  0020                     ??_TMR1_Initialize:	
  1516                           ; 1 bytes @ 0x0
  1517                           
  1518  0020                     ??_TMR2_Initialize:	
  1519                           ; 1 bytes @ 0x0
  1520                           
  1521  0020                     ??_TMR3_Initialize:	
  1522                           ; 1 bytes @ 0x0
  1523                           
  1524  0020                     ??_TMR4_Initialize:	
  1525                           ; 1 bytes @ 0x0
  1526                           
  1527  0020                     ??_TMR5_Initialize:	
  1528                           ; 1 bytes @ 0x0
  1529                           
  1530  0020                     ??_TMR6_Initialize:	
  1531                           ; 1 bytes @ 0x0
  1532                           
  1533  0020                     ??_CCP9_Initialize:	
  1534                           ; 1 bytes @ 0x0
  1535                           
  1536  0020                     ??_CCP8_Initialize:	
  1537                           ; 1 bytes @ 0x0
  1538                           
  1539  0020                     ??_CCP7_Initialize:	
  1540                           ; 1 bytes @ 0x0
  1541                           
  1542  0020                     ??_isdigit:	
  1543                           ; 1 bytes @ 0x0
  1544                           
  1545  0020                     ?_strlen:	
  1546                           ; 1 bytes @ 0x0
  1547                           
  1548  0020                     ?_abs:	
  1549                           ; 2 bytes @ 0x0
  1550                           
  1551  0020                     ?_strcmp:	
  1552                           ; 2 bytes @ 0x0
  1553                           
  1554  0020                     ?_strchr:	
  1555                           ; 2 bytes @ 0x0
  1556                           
  1557  0020                     ?___wmul:	
  1558                           ; 2 bytes @ 0x0
  1559                           
  1560  0020                     ?___lwdiv:	
  1561                           ; 2 bytes @ 0x0
  1562                           
  1563  0020                     ?___ftpack:	
  1564                           ; 2 bytes @ 0x0
  1565                           
  1566  0020                     _isdigit$1388:	
  1567                           ; 3 bytes @ 0x0
  1568                           
  1569  0020                     strcpy@from:	
  1570                           ; 1 bytes @ 0x0
  1571                           
  1572  0020                     strncpy@from:	
  1573                           ; 1 bytes @ 0x0
  1574                           
  1575  0020                     sendAcknowledgment@currentStateBuffer:	
  1576                           ; 1 bytes @ 0x0
  1577                           
  1578  0020                     errorsMain@errNum:	
  1579                           ; 2 bytes @ 0x0
  1580                           
  1581  0020                     sendAcknowledgmentRGB@currentStateBufferRGB:	
  1582                           ; 2 bytes @ 0x0
  1583                           
  1584  0020                     SwitchOffStatustToGatway@SwitchOffNumber:	
  1585                           ; 2 bytes @ 0x0
  1586                           
  1587  0020                     SwitchOnStatustToGatway@SwitchOnNumber:	
  1588                           ; 2 bytes @ 0x0
  1589                           
  1590  0020                     ___wmul@multiplier:	
  1591                           ; 2 bytes @ 0x0
  1592                           
  1593  0020                     abs@a:	
  1594                           ; 2 bytes @ 0x0
  1595                           
  1596  0020                     ___lwdiv@divisor:	
  1597                           ; 2 bytes @ 0x0
  1598                           
  1599  0020                     memset@c:	
  1600                           ; 2 bytes @ 0x0
  1601                           
  1602  0020                     strcat@from:	
  1603                           ; 2 bytes @ 0x0
  1604                           
  1605  0020                     strcmp@s2:	
  1606                           ; 2 bytes @ 0x0
  1607                           
  1608  0020                     strlen@s:	
  1609                           ; 2 bytes @ 0x0
  1610                           
  1611  0020                     strchr@ptr:	
  1612                           ; 2 bytes @ 0x0
  1613                           
  1614  0020                     ___ftpack@arg:	
  1615                           ; 2 bytes @ 0x0
  1616                           
  1617                           
  1618                           ; 3 bytes @ 0x0
  1619  0020                     	ds	1
  1620  0021                     ??_strcpy:	
  1621  0021                     isdigit@c:	
  1622                           ; 1 bytes @ 0x1
  1623                           
  1624  0021                     copyReceivedDataBuffer@dataBufferCounter:	
  1625                           ; 1 bytes @ 0x1
  1626                           
  1627  0021                     strncpy@size:	
  1628                           ; 2 bytes @ 0x1
  1629                           
  1630                           
  1631                           ; 2 bytes @ 0x1
  1632  0021                     	ds	1
  1633  0022                     ??_strcat:	
  1634  0022                     ??_sendAcknowledgmentRGB:	
  1635                           ; 1 bytes @ 0x2
  1636                           
  1637  0022                     ??_strlen:	
  1638                           ; 1 bytes @ 0x2
  1639                           
  1640  0022                     ??_abs:	
  1641                           ; 1 bytes @ 0x2
  1642                           
  1643  0022                     ??_sendAcknowledgment:	
  1644                           ; 1 bytes @ 0x2
  1645                           
  1646  0022                     ??_strcmp:	
  1647                           ; 1 bytes @ 0x2
  1648                           
  1649  0022                     ??_errorsMain:	
  1650                           ; 1 bytes @ 0x2
  1651                           
  1652  0022                     ??_SwitchOnStatustToGatway:	
  1653                           ; 1 bytes @ 0x2
  1654                           
  1655  0022                     ??_SwitchOffStatustToGatway:	
  1656                           ; 1 bytes @ 0x2
  1657                           
  1658  0022                     strcpy@to:	
  1659                           ; 1 bytes @ 0x2
  1660                           
  1661  0022                     sendAcknowledgment@Tx_count:	
  1662                           ; 1 bytes @ 0x2
  1663                           
  1664  0022                     errorsMain@Tx_count:	
  1665                           ; 2 bytes @ 0x2
  1666                           
  1667  0022                     ___wmul@multiplicand:	
  1668                           ; 2 bytes @ 0x2
  1669                           
  1670  0022                     ___lwdiv@dividend:	
  1671                           ; 2 bytes @ 0x2
  1672                           
  1673  0022                     memset@n:	
  1674                           ; 2 bytes @ 0x2
  1675                           
  1676  0022                     strchr@chr:	
  1677                           ; 2 bytes @ 0x2
  1678                           
  1679                           
  1680                           ; 2 bytes @ 0x2
  1681  0022                     	ds	1
  1682  0023                     ??_strncpy:	
  1683  0023                     ___ftpack@exp:	
  1684                           ; 1 bytes @ 0x3
  1685                           
  1686  0023                     strcat@cp:	
  1687                           ; 1 bytes @ 0x3
  1688                           
  1689  0023                     strcmp@r:	
  1690                           ; 1 bytes @ 0x3
  1691                           
  1692  0023                     strcpy@cp:	
  1693                           ; 1 bytes @ 0x3
  1694                           
  1695  0023                     sendAcknowledgmentRGB@Tx_count:	
  1696                           ; 1 bytes @ 0x3
  1697                           
  1698                           
  1699                           ; 2 bytes @ 0x3
  1700  0023                     	ds	1
  1701  0024                     ??_memset:	
  1702  0024                     ??_strchr:	
  1703                           ; 1 bytes @ 0x4
  1704                           
  1705  0024                     ??___wmul:	
  1706                           ; 1 bytes @ 0x4
  1707                           
  1708  0024                     ??___lwdiv:	
  1709                           ; 1 bytes @ 0x4
  1710                           
  1711  0024                     ___ftpack@sign:	
  1712                           ; 1 bytes @ 0x4
  1713                           
  1714  0024                     strcat@to:	
  1715                           ; 1 bytes @ 0x4
  1716                           
  1717  0024                     strcmp@s1:	
  1718                           ; 1 bytes @ 0x4
  1719                           
  1720  0024                     strncpy@cp:	
  1721                           ; 1 bytes @ 0x4
  1722                           
  1723  0024                     ___wmul@product:	
  1724                           ; 1 bytes @ 0x4
  1725                           
  1726  0024                     strlen@cp:	
  1727                           ; 2 bytes @ 0x4
  1728                           
  1729                           
  1730                           ; 2 bytes @ 0x4
  1731  0024                     	ds	1
  1732  0025                     ??___ftpack:	
  1733  0025                     ___lwdiv@counter:	
  1734                           ; 1 bytes @ 0x5
  1735                           
  1736  0025                     memset@p:	
  1737                           ; 1 bytes @ 0x5
  1738                           
  1739  0025                     strncpy@to:	
  1740                           ; 1 bytes @ 0x5
  1741                           
  1742                           
  1743                           ; 1 bytes @ 0x5
  1744  0025                     	ds	1
  1745  0026                     ?_atoi:	
  1746  0026                     ?_hexadecimalToDecimal:	
  1747                           ; 2 bytes @ 0x6
  1748                           
  1749  0026                     memset@p1:	
  1750                           ; 2 bytes @ 0x6
  1751                           
  1752  0026                     atoi@s:	
  1753                           ; 1 bytes @ 0x6
  1754                           
  1755  0026                     ___lwdiv@quotient:	
  1756                           ; 2 bytes @ 0x6
  1757                           
  1758                           
  1759                           ; 2 bytes @ 0x6
  1760  0026                     	ds	1
  1761  0027                     ?_strspn:	
  1762  0027                     ?_strcspn:	
  1763                           ; 2 bytes @ 0x7
  1764                           
  1765  0027                     strcspn@s2:	
  1766                           ; 2 bytes @ 0x7
  1767                           
  1768  0027                     strspn@s2:	
  1769                           ; 2 bytes @ 0x7
  1770                           
  1771                           
  1772                           ; 2 bytes @ 0x7
  1773  0027                     	ds	1
  1774  0028                     ??_atoi:	
  1775  0028                     ??_hexadecimalToDecimal:	
  1776                           ; 1 bytes @ 0x8
  1777                           
  1778  0028                     ?_sprintf:	
  1779                           ; 1 bytes @ 0x8
  1780                           
  1781  0028                     ?___awtoft:	
  1782                           ; 2 bytes @ 0x8
  1783                           
  1784  0028                     ?___ftmul:	
  1785                           ; 3 bytes @ 0x8
  1786                           
  1787  0028                     ?___lwtoft:	
  1788                           ; 3 bytes @ 0x8
  1789                           
  1790  0028                     sprintf@f:	
  1791                           ; 3 bytes @ 0x8
  1792                           
  1793  0028                     ___awtoft@c:	
  1794                           ; 2 bytes @ 0x8
  1795                           
  1796  0028                     ___lwtoft@c:	
  1797                           ; 2 bytes @ 0x8
  1798                           
  1799  0028                     ___ftmul@f1:	
  1800                           ; 2 bytes @ 0x8
  1801                           
  1802                           
  1803                           ; 3 bytes @ 0x8
  1804  0028                     	ds	1
  1805  0029                     ??_strspn:	
  1806  0029                     ??_strcspn:	
  1807                           ; 1 bytes @ 0x9
  1808                           
  1809                           
  1810                           ; 1 bytes @ 0x9
  1811  0029                     	ds	1
  1812  002A                     atoi@sign:	
  1813  002A                     hexadecimalToDecimal@len:	
  1814                           ; 1 bytes @ 0xA
  1815                           
  1816                           
  1817                           ; 2 bytes @ 0xA
  1818  002A                     	ds	1
  1819  002B                     ??___awtoft:	
  1820  002B                     ??___lwtoft:	
  1821                           ; 1 bytes @ 0xB
  1822                           
  1823  002B                     atoi@a:	
  1824                           ; 1 bytes @ 0xB
  1825                           
  1826  002B                     strcspn@i:	
  1827                           ; 2 bytes @ 0xB
  1828                           
  1829  002B                     strspn@i:	
  1830                           ; 2 bytes @ 0xB
  1831                           
  1832  002B                     ___ftmul@f2:	
  1833                           ; 2 bytes @ 0xB
  1834                           
  1835                           
  1836                           ; 3 bytes @ 0xB
  1837  002B                     	ds	1
  1838  002C                     hexadecimalToDecimal@dec_val:	
  1839                           
  1840                           ; 2 bytes @ 0xC
  1841  002C                     	ds	1
  1842  002D                     ?_applianceControl:	
  1843  002D                     applianceControl@charSwitchLSB:	
  1844                           ; 1 bytes @ 0xD
  1845                           
  1846  002D                     ___awtoft@sign:	
  1847                           ; 1 bytes @ 0xD
  1848                           
  1849  002D                     strcspn@s1:	
  1850                           ; 1 bytes @ 0xD
  1851                           
  1852  002D                     strspn@s1:	
  1853                           ; 1 bytes @ 0xD
  1854                           
  1855                           
  1856                           ; 1 bytes @ 0xD
  1857  002D                     	ds	1
  1858  002E                     ??_sprintf:	
  1859  002E                     ?_strtok:	
  1860                           ; 1 bytes @ 0xE
  1861                           
  1862  002E                     ??___ftmul:	
  1863                           ; 1 bytes @ 0xE
  1864                           
  1865  002E                     ?___ftdiv:	
  1866                           ; 1 bytes @ 0xE
  1867                           
  1868  002E                     applianceControl@charSwitchSTATE:	
  1869                           ; 3 bytes @ 0xE
  1870                           
  1871  002E                     hexadecimalToDecimal@base:	
  1872                           ; 1 bytes @ 0xE
  1873                           
  1874  002E                     strtok@s2:	
  1875                           ; 2 bytes @ 0xE
  1876                           
  1877  002E                     ___ftdiv@f2:	
  1878                           ; 2 bytes @ 0xE
  1879                           
  1880                           
  1881                           ; 3 bytes @ 0xE
  1882  002E                     	ds	1
  1883  002F                     applianceControl@chDimmerSpeedMSB:	
  1884                           
  1885                           ; 1 bytes @ 0xF
  1886  002F                     	ds	1
  1887  0030                     ??_strtok:	
  1888  0030                     applianceControl@chDimmerSpeedLSB:	
  1889                           ; 1 bytes @ 0x10
  1890                           
  1891  0030                     hexadecimalToDecimal@i:	
  1892                           ; 1 bytes @ 0x10
  1893                           
  1894                           
  1895                           ; 2 bytes @ 0x10
  1896  0030                     	ds	1
  1897  0031                     applianceControl@charParentalControl:	
  1898  0031                     ___ftdiv@f1:	
  1899                           ; 1 bytes @ 0x11
  1900                           
  1901                           
  1902                           ; 3 bytes @ 0x11
  1903  0031                     	ds	1
  1904  0032                     applianceControl@charFinalFrameState:	
  1905  0032                     hexadecimalToDecimal@hexVal:	
  1906                           ; 1 bytes @ 0x12
  1907                           
  1908  0032                     sprintf@flag:	
  1909                           ; 1 bytes @ 0x12
  1910                           
  1911  0032                     ___ftmul@exp:	
  1912                           ; 1 bytes @ 0x12
  1913                           
  1914                           
  1915                           ; 1 bytes @ 0x12
  1916  0032                     	ds	1
  1917  0033                     ??_applianceControl:	
  1918  0033                     sprintf@idx:	
  1919                           ; 1 bytes @ 0x13
  1920                           
  1921  0033                     strtok@s1:	
  1922                           ; 1 bytes @ 0x13
  1923                           
  1924  0033                     ___ftmul@f3_as_product:	
  1925                           ; 1 bytes @ 0x13
  1926                           
  1927                           
  1928                           ; 3 bytes @ 0x13
  1929  0033                     	ds	1
  1930  0034                     ??___ftdiv:	
  1931  0034                     sprintf@ap:	
  1932                           ; 1 bytes @ 0x14
  1933                           
  1934                           
  1935                           ; 1 bytes @ 0x14
  1936  0034                     	ds	1
  1937  0035                     applianceControl@integerSpeed:	
  1938  0035                     sprintf@val:	
  1939                           ; 2 bytes @ 0x15
  1940                           
  1941                           
  1942                           ; 2 bytes @ 0x15
  1943  0035                     	ds	1
  1944  0036                     ___ftmul@cntr:	
  1945                           
  1946                           ; 1 bytes @ 0x16
  1947  0036                     	ds	1
  1948  0037                     applianceControl@charSwitchMSB:	
  1949  0037                     sprintf@prec:	
  1950                           ; 1 bytes @ 0x17
  1951                           
  1952  0037                     ___ftmul@sign:	
  1953                           ; 1 bytes @ 0x17
  1954                           
  1955                           
  1956                           ; 1 bytes @ 0x17
  1957  0037                     	ds	1
  1958  0038                     sprintf@sp:	
  1959  0038                     ___ftdiv@cntr:	
  1960                           ; 1 bytes @ 0x18
  1961                           
  1962  0038                     applianceControl@switchNumberStringBuffer:	
  1963                           ; 1 bytes @ 0x18
  1964                           
  1965                           
  1966                           ; 2 bytes @ 0x18
  1967  0038                     	ds	1
  1968  0039                     sprintf@c:	
  1969  0039                     ___ftdiv@f3:	
  1970                           ; 1 bytes @ 0x19
  1971                           
  1972                           
  1973                           ; 3 bytes @ 0x19
  1974  0039                     	ds	1
  1975  003A                     applianceControl@dimmerSpeedStringBuffer:	
  1976                           
  1977                           ; 2 bytes @ 0x1A
  1978  003A                     	ds	2
  1979  003C                     ___ftdiv@exp:	
  1980  003C                     applianceControl@integerSwitchNumber:	
  1981                           ; 1 bytes @ 0x1C
  1982                           
  1983                           
  1984                           ; 2 bytes @ 0x1C
  1985  003C                     	ds	1
  1986  003D                     ___ftdiv@sign:	
  1987                           
  1988                           ; 1 bytes @ 0x1D
  1989  003D                     	ds	1
  1990  003E                     ?___fttol:	
  1991  003E                     applianceControl@currentStateBufferPositions:	
  1992                           ; 4 bytes @ 0x1E
  1993                           
  1994  003E                     ___fttol@f1:	
  1995                           ; 2 bytes @ 0x1E
  1996                           
  1997                           
  1998                           ; 3 bytes @ 0x1E
  1999  003E                     	ds	2
  2000  0040                     applianceControl@integerSwitchState:	
  2001                           
  2002                           ; 2 bytes @ 0x20
  2003  0040                     	ds	2
  2004  0042                     ??___fttol:	
  2005                           
  2006                           ; 1 bytes @ 0x22
  2007  0042                     	ds	4
  2008  0046                     ___fttol@sign1:	
  2009                           
  2010                           ; 1 bytes @ 0x26
  2011  0046                     	ds	1
  2012  0047                     ___fttol@lval:	
  2013                           
  2014                           ; 4 bytes @ 0x27
  2015  0047                     	ds	4
  2016  004B                     ___fttol@exp1:	
  2017                           
  2018                           ; 1 bytes @ 0x2B
  2019  004B                     	ds	1
  2020  004C                     ?_applicationControlRGB:	
  2021  004C                     applicationControlRGB@SwitchNumberstr:	
  2022                           ; 1 bytes @ 0x2C
  2023                           
  2024                           
  2025                           ; 1 bytes @ 0x2C
  2026  004C                     	ds	1
  2027  004D                     applicationControlRGB@SwitchStatusstr:	
  2028                           
  2029                           ; 1 bytes @ 0x2D
  2030  004D                     	ds	1
  2031  004E                     applicationControlRGB@RedColorIntensitystr:	
  2032                           
  2033                           ; 1 bytes @ 0x2E
  2034  004E                     	ds	1
  2035  004F                     applicationControlRGB@GreenColorIntensitystr:	
  2036                           
  2037                           ; 1 bytes @ 0x2F
  2038  004F                     	ds	1
  2039  0050                     applicationControlRGB@BlueColorIntensitystr:	
  2040                           
  2041                           ; 1 bytes @ 0x30
  2042  0050                     	ds	1
  2043  0051                     applicationControlRGB@ChildLockstr:	
  2044                           
  2045                           ; 1 bytes @ 0x31
  2046  0051                     	ds	1
  2047  0052                     applicationControlRGB@Allcolorstr:	
  2048                           
  2049                           ; 1 bytes @ 0x32
  2050  0052                     	ds	1
  2051  0053                     ??_applicationControlRGB:	
  2052                           
  2053                           ; 1 bytes @ 0x33
  2054  0053                     	ds	2
  2055  0055                     ??_main:	
  2056                           
  2057                           ; 1 bytes @ 0x35
  2058  0055                     	ds	7
  2059                           
  2060                           	psect	maintext
  2061  0B12                     __pmaintext:	
  2062 ;;
  2063 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
  2064 ;;
  2065 ;; *************** function _main *****************
  2066 ;; Defined at:
  2067 ;;		line 475 in file "main.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;		None
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;  k               2    6[BANK5 ] int 
  2072 ;;  k               2    4[BANK5 ] int 
  2073 ;;  j               2    2[BANK5 ] int 
  2074 ;;  dataBufferCo    2    0[BANK5 ] int 
  2075 ;;  man             2    8[BANK5 ] int 
  2076 ;; Return value:  Size  Location     Type
  2077 ;;                  2  477[None  ] int 
  2078 ;; Registers used:
  2079 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2080 ;; Tracked objects:
  2081 ;;		On entry : B1F/0
  2082 ;;		On exit  : 0/0
  2083 ;;		Unchanged: 0/0
  2084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2086 ;;      Locals:         0       0       0       0       0       0      10       0       0       0       0
  2087 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0
  2088 ;;      Totals:         0       7       0       0       0       0      10       0       0       0       0
  2089 ;;Total ram usage:       17 bytes
  2090 ;; Hardware stack levels required when called:    5
  2091 ;; This function calls:
  2092 ;;		_GPIO_pin_Initialize
  2093 ;;		_ReceivingIndicationLedBlinking
  2094 ;;		_SwitchOffStatustToGatway
  2095 ;;		_SwitchOnStatustToGatway
  2096 ;;		_TransmissionIndicationLedBlinking
  2097 ;;		_allPeripheralInit
  2098 ;;		_applianceControl
  2099 ;;		_applicationControlRGB
  2100 ;;		_copyReceivedDataBuffer
  2101 ;;		_errorsMain
  2102 ;;		_sendAcknowledgment
  2103 ;;		_sendAcknowledgmentRGB
  2104 ;;		_strcmp
  2105 ;;		_strlen
  2106 ;;		_strtok
  2107 ;; This function is called by:
  2108 ;;		Startup code after reset
  2109 ;; This function uses a non-reentrant model
  2110 ;;
  2111                           
  2112                           
  2113                           ;psect for function _main
  2114  0B12                     _main:	
  2115                           
  2116                           ;main.c: 476: _delay((unsigned long)((2000)*(16000000/4000.0)));
  2117                           
  2118                           ;incstack = 0
  2119                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2120  0B12  3029               	movlw	41
  2121  0B13  0020               	movlb	0	; select bank0
  2122  0B14  00D6               	movwf	??_main+1
  2123  0B15  3096               	movlw	150
  2124  0B16  00D5               	movwf	??_main
  2125  0B17  307F               	movlw	127
  2126  0B18                     u6667:	
  2127  0B18  0B89               	decfsz	9,f
  2128  0B19  2B18               	goto	u6667
  2129  0B1A  0BD5               	decfsz	??_main,f
  2130  0B1B  2B18               	goto	u6667
  2131  0B1C  0BD6               	decfsz	??_main+1,f
  2132  0B1D  2B18               	goto	u6667
  2133                           
  2134                           ;main.c: 477: M1=0; M2=0; M3=0; M4=0; M5=0; M6=0; M7=0;M8=0;
  2135  0B1E  0022               	movlb	2	; select bank2
  2136  0B1F  01B0               	clrf	_M1^(0+256)
  2137  0B20  01B1               	clrf	(_M1+1)^(0+256)
  2138  0B21  01AE               	clrf	_M2^(0+256)
  2139  0B22  01AF               	clrf	(_M2+1)^(0+256)
  2140  0B23  01AC               	clrf	_M3^(0+256)
  2141  0B24  01AD               	clrf	(_M3+1)^(0+256)
  2142  0B25  01AA               	clrf	_M4^(0+256)
  2143  0B26  01AB               	clrf	(_M4+1)^(0+256)
  2144  0B27  01A8               	clrf	_M5^(0+256)
  2145  0B28  01A9               	clrf	(_M5+1)^(0+256)
  2146  0B29  01A6               	clrf	_M6^(0+256)
  2147  0B2A  01A7               	clrf	(_M6+1)^(0+256)
  2148  0B2B  01A4               	clrf	_M7^(0+256)
  2149  0B2C  01A5               	clrf	(_M7+1)^(0+256)
  2150  0B2D  01A2               	clrf	_M8^(0+256)
  2151  0B2E  01A3               	clrf	(_M8+1)^(0+256)
  2152                           
  2153                           ;main.c: 478: M9=0;
  2154  0B2F  01A0               	clrf	_M9^(0+256)
  2155  0B30  01A1               	clrf	(_M9+1)^(0+256)
  2156                           
  2157                           ;main.c: 479: GPIO_pin_Initialize();
  2158  0B31  3194  2402  318B   	fcall	_GPIO_pin_Initialize
  2159                           
  2160                           ;main.c: 480: allPeripheralInit();
  2161  0B34  3193  231C  318B   	fcall	_allPeripheralInit
  2162  0B37                     l5752:	
  2163                           ;main.c: 482: while(1){
  2164                           
  2165                           
  2166                           ;main.c: 483: if(mainDataReceived==1){
  2167  0B37  0022               	movlb	2	; select bank2
  2168  0B38  0352               	decf	_mainDataReceived^(0+256),w
  2169  0B39  0453               	iorwf	(_mainDataReceived+1)^(0+256),w
  2170  0B3A  1D03               	btfss	3,2
  2171  0B3B  2D5C               	goto	l5886
  2172                           
  2173                           ;main.c: 485: mainDataReceived=0;
  2174  0B3C  01D2               	clrf	_mainDataReceived^(0+256)
  2175  0B3D  01D3               	clrf	(_mainDataReceived+1)^(0+256)
  2176                           
  2177                           ;main.c: 486: if(copymainReceivedDataBuffer[0]=='%' && copymainReceivedDataBuffer[1]=='%
      +                          ' && copymainReceivedDataBuffer[14]=='@' && copymainReceivedDataBuffer[15]=='@'){
  2178  0B3E  3025               	movlw	37
  2179  0B3F  0024               	movlb	4	; select bank4
  2180  0B40  064E               	xorwf	_copymainReceivedDataBuffer^(0+512),w
  2181  0B41  1D03               	btfss	3,2
  2182  0B42  2B7F               	goto	l5770
  2183  0B43  3025               	movlw	37
  2184  0B44  064F               	xorwf	(_copymainReceivedDataBuffer^(0+512)+1),w
  2185  0B45  1D03               	btfss	3,2
  2186  0B46  2B7F               	goto	l5770
  2187  0B47  3040               	movlw	64
  2188  0B48  065C               	xorwf	(_copymainReceivedDataBuffer^(0+512)+14),w
  2189  0B49  1D03               	btfss	3,2
  2190  0B4A  2B7F               	goto	l5770
  2191  0B4B  3040               	movlw	64
  2192  0B4C  065D               	xorwf	(_copymainReceivedDataBuffer^(0+512)+15),w
  2193  0B4D  1D03               	btfss	3,2
  2194  0B4E  2B7F               	goto	l5770
  2195                           
  2196                           ;main.c: 487: ReceivingIndicationLedBlinking();
  2197  0B4F  3191  21E8  318B   	fcall	_ReceivingIndicationLedBlinking
  2198                           
  2199                           ;main.c: 488: copyReceivedDataBuffer();
  2200  0B52  3195  2514  318B   	fcall	_copyReceivedDataBuffer
  2201                           
  2202                           ;main.c: 490: applianceControl(tempReceivedDataBuffer[0],
  2203                           ;main.c: 491: tempReceivedDataBuffer[1],
  2204                           ;main.c: 492: tempReceivedDataBuffer[2],
  2205                           ;main.c: 493: tempReceivedDataBuffer[3],
  2206                           ;main.c: 494: tempReceivedDataBuffer[4],
  2207                           ;main.c: 495: tempReceivedDataBuffer[5],
  2208                           ;main.c: 496: tempReceivedDataBuffer[6]);
  2209  0B55  0023               	movlb	3	; select bank3
  2210  0B56  0821               	movf	(_tempReceivedDataBuffer^(0+384)+1),w
  2211  0B57  0020               	movlb	0	; select bank0
  2212  0B58  00D5               	movwf	??_main
  2213  0B59  0855               	movf	??_main,w
  2214  0B5A  00AD               	movwf	applianceControl@charSwitchLSB
  2215  0B5B  0023               	movlb	3	; select bank3
  2216  0B5C  0822               	movf	(_tempReceivedDataBuffer^(0+384)+2),w
  2217  0B5D  0020               	movlb	0	; select bank0
  2218  0B5E  00D6               	movwf	??_main+1
  2219  0B5F  0856               	movf	??_main+1,w
  2220  0B60  00AE               	movwf	applianceControl@charSwitchSTATE
  2221  0B61  0023               	movlb	3	; select bank3
  2222  0B62  0823               	movf	(_tempReceivedDataBuffer^(0+384)+3),w
  2223  0B63  0020               	movlb	0	; select bank0
  2224  0B64  00D7               	movwf	??_main+2
  2225  0B65  0857               	movf	??_main+2,w
  2226  0B66  00AF               	movwf	applianceControl@chDimmerSpeedMSB
  2227  0B67  0023               	movlb	3	; select bank3
  2228  0B68  0824               	movf	(_tempReceivedDataBuffer^(0+384)+4),w
  2229  0B69  0020               	movlb	0	; select bank0
  2230  0B6A  00D8               	movwf	??_main+3
  2231  0B6B  0858               	movf	??_main+3,w
  2232  0B6C  00B0               	movwf	applianceControl@chDimmerSpeedLSB
  2233  0B6D  0023               	movlb	3	; select bank3
  2234  0B6E  0825               	movf	(_tempReceivedDataBuffer^(0+384)+5),w
  2235  0B6F  0020               	movlb	0	; select bank0
  2236  0B70  00D9               	movwf	??_main+4
  2237  0B71  0859               	movf	??_main+4,w
  2238  0B72  00B1               	movwf	applianceControl@charParentalControl
  2239  0B73  0023               	movlb	3	; select bank3
  2240  0B74  0826               	movf	(_tempReceivedDataBuffer^(0+384)+6),w
  2241  0B75  0020               	movlb	0	; select bank0
  2242  0B76  00DA               	movwf	??_main+5
  2243  0B77  085A               	movf	??_main+5,w
  2244  0B78  00B2               	movwf	applianceControl@charFinalFrameState
  2245  0B79  0023               	movlb	3	; select bank3
  2246  0B7A  0820               	movf	_tempReceivedDataBuffer^(0+384),w
  2247  0B7B  318A  2213  318B   	fcall	_applianceControl
  2248                           
  2249                           ;main.c: 498: }
  2250  0B7E  2D5C               	goto	l5886
  2251  0B7F                     l5770:	
  2252                           
  2253                           ;main.c: 499: else if(copymainReceivedDataBuffer[0]=='R' && copymainReceivedDataBuffer[1
      +                          ]=='G' && copymainReceivedDataBuffer[2]=='B'){
  2254  0B7F  3052               	movlw	82
  2255  0B80  0024               	movlb	4	; select bank4
  2256  0B81  064E               	xorwf	_copymainReceivedDataBuffer^(0+512),w
  2257  0B82  1D03               	btfss	3,2
  2258  0B83  2D20               	goto	l5868
  2259  0B84  3047               	movlw	71
  2260  0B85  064F               	xorwf	(_copymainReceivedDataBuffer^(0+512)+1),w
  2261  0B86  1D03               	btfss	3,2
  2262  0B87  2D20               	goto	l5868
  2263  0B88  3042               	movlw	66
  2264  0B89  0650               	xorwf	(_copymainReceivedDataBuffer^(0+512)+2),w
  2265  0B8A  1D03               	btfss	3,2
  2266  0B8B  2D20               	goto	l5868
  2267                           
  2268                           ;main.c: 500: ReceivingIndicationLedBlinking();
  2269  0B8C  3191  21E8  318B   	fcall	_ReceivingIndicationLedBlinking
  2270                           
  2271                           ;main.c: 506: ConvertmaindataReceiveIntoString = copymainReceivedDataBuffer;
  2272  0B8F  304E               	movlw	(low (_copymainReceivedDataBuffer| (0+512)))& (0+255)
  2273  0B90  0020               	movlb	0	; select bank0
  2274  0B91  00D5               	movwf	??_main
  2275  0B92  0855               	movf	??_main,w
  2276  0B93  00E6               	movwf	_ConvertmaindataReceiveIntoString
  2277                           
  2278                           ;main.c: 509: token = strtok(ConvertmaindataReceiveIntoString,".");
  2279  0B94  306C               	movlw	low (STR_1| (0+32768))
  2280  0B95  00AE               	movwf	strtok@s2
  2281  0B96  3098               	movlw	high (STR_1| (0+32768))
  2282  0B97  00AF               	movwf	strtok@s2+1
  2283  0B98  0866               	movf	_ConvertmaindataReceiveIntoString,w
  2284  0B99  3196  265D  318B   	fcall	_strtok
  2285  0B9C  0020               	movlb	0	; select bank0
  2286  0B9D  00D5               	movwf	??_main
  2287  0B9E  0855               	movf	??_main,w
  2288  0B9F  00E5               	movwf	_token
  2289                           
  2290                           ;main.c: 510: ModuleNameString = token;
  2291  0BA0  0865               	movf	_token,w
  2292  0BA1  00D5               	movwf	??_main
  2293  0BA2  0855               	movf	??_main,w
  2294  0BA3  00E4               	movwf	_ModuleNameString
  2295                           
  2296                           ;main.c: 511: partCounter=0;
  2297  0BA4  0022               	movlb	2	; select bank2
  2298  0BA5  01B8               	clrf	_partCounter^(0+256)
  2299  0BA6  01B9               	clrf	(_partCounter+1)^(0+256)
  2300                           
  2301                           ;main.c: 513: if((strcmp(ModuleNameString,"RGB") == 0)){
  2302  0BA7  3065               	movlw	low (STR_16| (0+32768))
  2303  0BA8  0020               	movlb	0	; select bank0
  2304  0BA9  00A0               	movwf	strcmp@s2
  2305  0BAA  3098               	movlw	high (STR_16| (0+32768))
  2306  0BAB  00A1               	movwf	strcmp@s2+1
  2307  0BAC  0864               	movf	_ModuleNameString,w
  2308  0BAD  3194  242C  318B   	fcall	_strcmp
  2309  0BB0  0020               	movlb	0	; select bank0
  2310  0BB1  0820               	movf	?_strcmp,w
  2311  0BB2  0421               	iorwf	?_strcmp+1,w
  2312  0BB3  1903               	btfsc	3,2
  2313  0BB4  2CFB               	goto	l5864
  2314  0BB5  2CFF               	goto	l5866
  2315  0BB6                     l5790:	
  2316                           ;main.c: 514: while(token != (0))
  2317                           
  2318                           
  2319                           ;main.c: 515: {
  2320                           ;main.c: 516: partCounter++;
  2321  0BB6  3001               	movlw	1
  2322  0BB7  0022               	movlb	2	; select bank2
  2323  0BB8  07B8               	addwf	_partCounter^(0+256),f
  2324  0BB9  3000               	movlw	0
  2325  0BBA  3DB9               	addwfc	(_partCounter+1)^(0+256),f
  2326                           
  2327                           ;main.c: 517: token = strtok((0),".");
  2328  0BBB  306C               	movlw	low (STR_1| (0+32768))
  2329  0BBC  0020               	movlb	0	; select bank0
  2330  0BBD  00AE               	movwf	strtok@s2
  2331  0BBE  3098               	movlw	high (STR_1| (0+32768))
  2332  0BBF  00AF               	movwf	strtok@s2+1
  2333  0BC0  3000               	movlw	0
  2334  0BC1  3196  265D  318B   	fcall	_strtok
  2335  0BC4  0020               	movlb	0	; select bank0
  2336  0BC5  00D5               	movwf	??_main
  2337  0BC6  0855               	movf	??_main,w
  2338  0BC7  00E5               	movwf	_token
  2339                           
  2340                           ;main.c: 518: switch(partCounter){
  2341  0BC8  2CE8               	goto	l5862
  2342  0BC9                     l5794:	
  2343                           ;main.c: 519: case 1:
  2344                           
  2345                           
  2346                           ;main.c: 520: {
  2347                           ;main.c: 521: int j=0;
  2348  0BC9  0025               	movlb	5	; select bank5
  2349  0BCA  01D4               	clrf	main@j^(0+640)
  2350  0BCB  01D5               	clrf	(main@j+1)^(0+640)
  2351                           
  2352                           ;main.c: 522: for(j=0;j<1;j++)
  2353  0BCC  01D4               	clrf	main@j^(0+640)
  2354  0BCD  01D5               	clrf	(main@j+1)^(0+640)
  2355  0BCE  0855               	movf	(main@j+1)^(0+640),w
  2356  0BCF  3A80               	xorlw	128
  2357  0BD0  0020               	movlb	0	; select bank0
  2358  0BD1  00D5               	movwf	??_main
  2359  0BD2  3080               	movlw	128
  2360  0BD3  0255               	subwf	??_main,w
  2361  0BD4  1D03               	skipz
  2362  0BD5  2BD9               	goto	u5855
  2363  0BD6  3001               	movlw	1
  2364  0BD7  0025               	movlb	5	; select bank5
  2365  0BD8  0254               	subwf	main@j^(0+640),w
  2366  0BD9                     u5855:	
  2367  0BD9  1803               	btfsc	3,0
  2368  0BDA  2C01               	goto	l5808
  2369  0BDB                     l5800:	
  2370                           
  2371                           ;main.c: 523: {
  2372                           ;main.c: 524: switchNumberBuffer[j]= *token;
  2373  0BDB  0020               	movlb	0	; select bank0
  2374  0BDC  0865               	movf	_token,w
  2375  0BDD  0086               	movwf	6
  2376  0BDE  3002               	movlw	2	; select bank4/5
  2377  0BDF  0087               	movwf	7
  2378  0BE0  0801               	movf	1,w
  2379  0BE1  00D5               	movwf	??_main
  2380  0BE2  0025               	movlb	5	; select bank5
  2381  0BE3  0854               	movf	main@j^(0+640),w
  2382  0BE4  3EEA               	addlw	(low (_switchNumberBuffer| (0+256)))& (0+255)
  2383  0BE5  0086               	movwf	6
  2384  0BE6  3001               	movlw	1	; select bank3/4
  2385  0BE7  0087               	movwf	7
  2386  0BE8  0020               	movlb	0	; select bank0
  2387  0BE9  0855               	movf	??_main,w
  2388  0BEA  0081               	movwf	1
  2389                           
  2390                           ;main.c: 525: *token++;
  2391  0BEB  3001               	movlw	1
  2392  0BEC  00D5               	movwf	??_main
  2393  0BED  0855               	movf	??_main,w
  2394  0BEE  07E5               	addwf	_token,f
  2395  0BEF  3001               	movlw	1
  2396  0BF0  0025               	movlb	5	; select bank5
  2397  0BF1  07D4               	addwf	main@j^(0+640),f
  2398  0BF2  3000               	movlw	0
  2399  0BF3  3DD5               	addwfc	(main@j+1)^(0+640),f
  2400  0BF4  0855               	movf	(main@j+1)^(0+640),w
  2401  0BF5  3A80               	xorlw	128
  2402  0BF6  0020               	movlb	0	; select bank0
  2403  0BF7  00D5               	movwf	??_main
  2404  0BF8  3080               	movlw	128
  2405  0BF9  0255               	subwf	??_main,w
  2406  0BFA  1D03               	skipz
  2407  0BFB  2BFF               	goto	u5865
  2408  0BFC  3001               	movlw	1
  2409  0BFD  0025               	movlb	5	; select bank5
  2410  0BFE  0254               	subwf	main@j^(0+640),w
  2411  0BFF                     u5865:	
  2412  0BFF  1C03               	skipc
  2413  0C00  2BDB               	goto	l5800
  2414  0C01                     l5808:	
  2415                           
  2416                           ;main.c: 526: }
  2417                           ;main.c: 527: SwitchNumberString = switchNumberBuffer;
  2418  0C01  30EA               	movlw	(low (_switchNumberBuffer| (0+256)))& (0+255)
  2419  0C02  0020               	movlb	0	; select bank0
  2420  0C03  00D5               	movwf	??_main
  2421  0C04  0855               	movf	??_main,w
  2422  0C05  00E3               	movwf	_SwitchNumberString
  2423                           
  2424                           ;main.c: 530: }break;
  2425  0C06  2CFB               	goto	l5864
  2426  0C07                     l5810:	
  2427                           ;main.c: 532: case 2:
  2428                           
  2429                           
  2430                           ;main.c: 533: {
  2431                           ;main.c: 534: AcknowledgementString = token;
  2432  0C07  0020               	movlb	0	; select bank0
  2433  0C08  0865               	movf	_token,w
  2434  0C09  00D5               	movwf	??_main
  2435  0C0A  0855               	movf	??_main,w
  2436  0C0B  0022               	movlb	2	; select bank2
  2437  0C0C  00DF               	movwf	_AcknowledgementString^(0+256)
  2438                           
  2439                           ;main.c: 537: }break;
  2440  0C0D  2CFB               	goto	l5864
  2441  0C0E                     l5812:	
  2442                           ;main.c: 538: case 3:
  2443                           
  2444                           
  2445                           ;main.c: 539: {
  2446                           ;main.c: 540: int k=0;
  2447  0C0E  0025               	movlb	5	; select bank5
  2448  0C0F  01D6               	clrf	main@k^(0+640)
  2449  0C10  01D7               	clrf	(main@k+1)^(0+640)
  2450                           
  2451                           ;main.c: 541: for(k=0;k<1;k++)
  2452  0C11  01D6               	clrf	main@k^(0+640)
  2453  0C12  01D7               	clrf	(main@k+1)^(0+640)
  2454  0C13  0857               	movf	(main@k+1)^(0+640),w
  2455  0C14  3A80               	xorlw	128
  2456  0C15  0020               	movlb	0	; select bank0
  2457  0C16  00D5               	movwf	??_main
  2458  0C17  3080               	movlw	128
  2459  0C18  0255               	subwf	??_main,w
  2460  0C19  1D03               	skipz
  2461  0C1A  2C1E               	goto	u5875
  2462  0C1B  3001               	movlw	1
  2463  0C1C  0025               	movlb	5	; select bank5
  2464  0C1D  0256               	subwf	main@k^(0+640),w
  2465  0C1E                     u5875:	
  2466  0C1E  1803               	btfsc	3,0
  2467  0C1F  2C46               	goto	l5826
  2468  0C20                     l5818:	
  2469                           
  2470                           ;main.c: 542: {
  2471                           ;main.c: 543: switchstatusbuffer[k]= *token;
  2472  0C20  0020               	movlb	0	; select bank0
  2473  0C21  0865               	movf	_token,w
  2474  0C22  0086               	movwf	6
  2475  0C23  3002               	movlw	2	; select bank4/5
  2476  0C24  0087               	movwf	7
  2477  0C25  0801               	movf	1,w
  2478  0C26  00D5               	movwf	??_main
  2479  0C27  0025               	movlb	5	; select bank5
  2480  0C28  0856               	movf	main@k^(0+640),w
  2481  0C29  3E62               	addlw	(low (_switchstatusbuffer| (0+256)))& (0+255)
  2482  0C2A  0086               	movwf	6
  2483  0C2B  3001               	movlw	1	; select bank2/3
  2484  0C2C  0087               	movwf	7
  2485  0C2D  0020               	movlb	0	; select bank0
  2486  0C2E  0855               	movf	??_main,w
  2487  0C2F  0081               	movwf	1
  2488                           
  2489                           ;main.c: 544: *token++;
  2490  0C30  3001               	movlw	1
  2491  0C31  00D5               	movwf	??_main
  2492  0C32  0855               	movf	??_main,w
  2493  0C33  07E5               	addwf	_token,f
  2494  0C34  3001               	movlw	1
  2495  0C35  0025               	movlb	5	; select bank5
  2496  0C36  07D6               	addwf	main@k^(0+640),f
  2497  0C37  3000               	movlw	0
  2498  0C38  3DD7               	addwfc	(main@k+1)^(0+640),f
  2499  0C39  0857               	movf	(main@k+1)^(0+640),w
  2500  0C3A  3A80               	xorlw	128
  2501  0C3B  0020               	movlb	0	; select bank0
  2502  0C3C  00D5               	movwf	??_main
  2503  0C3D  3080               	movlw	128
  2504  0C3E  0255               	subwf	??_main,w
  2505  0C3F  1D03               	skipz
  2506  0C40  2C44               	goto	u5885
  2507  0C41  3001               	movlw	1
  2508  0C42  0025               	movlb	5	; select bank5
  2509  0C43  0256               	subwf	main@k^(0+640),w
  2510  0C44                     u5885:	
  2511  0C44  1C03               	skipc
  2512  0C45  2C20               	goto	l5818
  2513  0C46                     l5826:	
  2514                           
  2515                           ;main.c: 545: }
  2516                           ;main.c: 546: SwitchStatusString = switchstatusbuffer;
  2517  0C46  3062               	movlw	(low (_switchstatusbuffer| (0+256)))& (0+255)
  2518  0C47  0020               	movlb	0	; select bank0
  2519  0C48  00D5               	movwf	??_main
  2520  0C49  0855               	movf	??_main,w
  2521  0C4A  00E2               	movwf	_SwitchStatusString
  2522                           
  2523                           ;main.c: 550: } break;
  2524  0C4B  2CFB               	goto	l5864
  2525  0C4C                     l5828:	
  2526                           ;main.c: 551: case 4:
  2527                           
  2528                           
  2529                           ;main.c: 552: {
  2530                           ;main.c: 553: RedColorIntensityString = token;
  2531  0C4C  0020               	movlb	0	; select bank0
  2532  0C4D  0865               	movf	_token,w
  2533  0C4E  00D5               	movwf	??_main
  2534  0C4F  0855               	movf	??_main,w
  2535  0C50  00E1               	movwf	_RedColorIntensityString
  2536                           
  2537                           ;main.c: 554: RedColorIntensityStringLength = strlen(RedColorIntensityString);
  2538  0C51  0861               	movf	_RedColorIntensityString,w
  2539  0C52  00A0               	movwf	strlen@s
  2540  0C53  39FF               	andlw	255
  2541  0C54  1D03               	skipz
  2542  0C55  3002               	movlw	2
  2543  0C56  00A1               	movwf	strlen@s+1
  2544  0C57  3193  233A  318B   	fcall	_strlen
  2545  0C5A  0020               	movlb	0	; select bank0
  2546  0C5B  0821               	movf	?_strlen+1,w
  2547  0C5C  0023               	movlb	3	; select bank3
  2548  0C5D  00E3               	movwf	(_RedColorIntensityStringLength+1)^(0+384)
  2549  0C5E  0020               	movlb	0	; select bank0
  2550  0C5F  0820               	movf	?_strlen,w
  2551  0C60  0023               	movlb	3	; select bank3
  2552  0C61  00E2               	movwf	_RedColorIntensityStringLength^(0+384)
  2553                           
  2554                           ;main.c: 557: } break;
  2555  0C62  2CFB               	goto	l5864
  2556  0C63                     l5832:	
  2557                           ;main.c: 558: case 5:
  2558                           
  2559                           
  2560                           ;main.c: 559: {
  2561                           ;main.c: 560: GreenColorIntensityString = token;
  2562  0C63  0020               	movlb	0	; select bank0
  2563  0C64  0865               	movf	_token,w
  2564  0C65  00D5               	movwf	??_main
  2565  0C66  0855               	movf	??_main,w
  2566  0C67  00E0               	movwf	_GreenColorIntensityString
  2567                           
  2568                           ;main.c: 561: GreenColorIntensityStringLength = strlen(GreenColorIntensityString);
  2569  0C68  0860               	movf	_GreenColorIntensityString,w
  2570  0C69  00A0               	movwf	strlen@s
  2571  0C6A  39FF               	andlw	255
  2572  0C6B  1D03               	skipz
  2573  0C6C  3002               	movlw	2
  2574  0C6D  00A1               	movwf	strlen@s+1
  2575  0C6E  3193  233A  318B   	fcall	_strlen
  2576  0C71  0020               	movlb	0	; select bank0
  2577  0C72  0821               	movf	?_strlen+1,w
  2578  0C73  0023               	movlb	3	; select bank3
  2579  0C74  00E1               	movwf	(_GreenColorIntensityStringLength+1)^(0+384)
  2580  0C75  0020               	movlb	0	; select bank0
  2581  0C76  0820               	movf	?_strlen,w
  2582  0C77  0023               	movlb	3	; select bank3
  2583  0C78  00E0               	movwf	_GreenColorIntensityStringLength^(0+384)
  2584                           
  2585                           ;main.c: 564: } break;
  2586  0C79  2CFB               	goto	l5864
  2587  0C7A                     l5836:	
  2588                           ;main.c: 565: case 6:
  2589                           
  2590                           
  2591                           ;main.c: 566: {
  2592                           ;main.c: 567: BlueColorIntensityString = token;
  2593  0C7A  0020               	movlb	0	; select bank0
  2594  0C7B  0865               	movf	_token,w
  2595  0C7C  00D5               	movwf	??_main
  2596  0C7D  0855               	movf	??_main,w
  2597  0C7E  00DF               	movwf	_BlueColorIntensityString
  2598                           
  2599                           ;main.c: 568: BlueColorIntensityStringLength = strlen(BlueColorIntensityString);
  2600  0C7F  085F               	movf	_BlueColorIntensityString,w
  2601  0C80  00A0               	movwf	strlen@s
  2602  0C81  39FF               	andlw	255
  2603  0C82  1D03               	skipz
  2604  0C83  3002               	movlw	2
  2605  0C84  00A1               	movwf	strlen@s+1
  2606  0C85  3193  233A  318B   	fcall	_strlen
  2607  0C88  0020               	movlb	0	; select bank0
  2608  0C89  0821               	movf	?_strlen+1,w
  2609  0C8A  0023               	movlb	3	; select bank3
  2610  0C8B  00DD               	movwf	(_BlueColorIntensityStringLength+1)^(0+384)
  2611  0C8C  0020               	movlb	0	; select bank0
  2612  0C8D  0820               	movf	?_strlen,w
  2613  0C8E  0023               	movlb	3	; select bank3
  2614  0C8F  00DC               	movwf	_BlueColorIntensityStringLength^(0+384)
  2615                           
  2616                           ;main.c: 571: } break;
  2617  0C90  2CFB               	goto	l5864
  2618  0C91                     l5840:	
  2619                           ;main.c: 572: case 7:
  2620                           
  2621                           
  2622                           ;main.c: 573: {
  2623                           ;main.c: 575: int k=0;
  2624  0C91  0025               	movlb	5	; select bank5
  2625  0C92  01D8               	clrf	main@k_1110^(0+640)
  2626  0C93  01D9               	clrf	(main@k_1110+1)^(0+640)
  2627                           
  2628                           ;main.c: 576: for(k=0;k<1;k++)
  2629  0C94  01D8               	clrf	main@k_1110^(0+640)
  2630  0C95  01D9               	clrf	(main@k_1110+1)^(0+640)
  2631  0C96  0859               	movf	(main@k_1110+1)^(0+640),w
  2632  0C97  3A80               	xorlw	128
  2633  0C98  0020               	movlb	0	; select bank0
  2634  0C99  00D5               	movwf	??_main
  2635  0C9A  3080               	movlw	128
  2636  0C9B  0255               	subwf	??_main,w
  2637  0C9C  1D03               	skipz
  2638  0C9D  2CA1               	goto	u5895
  2639  0C9E  3001               	movlw	1
  2640  0C9F  0025               	movlb	5	; select bank5
  2641  0CA0  0258               	subwf	main@k_1110^(0+640),w
  2642  0CA1                     u5895:	
  2643  0CA1  1803               	btfsc	3,0
  2644  0CA2  2CCB               	goto	l5854
  2645  0CA3                     l5846:	
  2646                           
  2647                           ;main.c: 577: {
  2648                           ;main.c: 578: ChildLockString[k]= *token;
  2649  0CA3  0020               	movlb	0	; select bank0
  2650  0CA4  0865               	movf	_token,w
  2651  0CA5  0086               	movwf	6
  2652  0CA6  3002               	movlw	2	; select bank4/5
  2653  0CA7  0087               	movwf	7
  2654  0CA8  0801               	movf	1,w
  2655  0CA9  00D5               	movwf	??_main
  2656  0CAA  0025               	movlb	5	; select bank5
  2657  0CAB  0858               	movf	main@k_1110^(0+640),w
  2658  0CAC  0020               	movlb	0	; select bank0
  2659  0CAD  075D               	addwf	_ChildLockString,w
  2660  0CAE  00D6               	movwf	??_main+1
  2661  0CAF  0856               	movf	??_main+1,w
  2662  0CB0  0086               	movwf	6
  2663  0CB1  3001               	movlw	1	; select bank2/3
  2664  0CB2  0087               	movwf	7
  2665  0CB3  0855               	movf	??_main,w
  2666  0CB4  0081               	movwf	1
  2667                           
  2668                           ;main.c: 579: *token++;
  2669  0CB5  3001               	movlw	1
  2670  0CB6  00D5               	movwf	??_main
  2671  0CB7  0855               	movf	??_main,w
  2672  0CB8  07E5               	addwf	_token,f
  2673  0CB9  3001               	movlw	1
  2674  0CBA  0025               	movlb	5	; select bank5
  2675  0CBB  07D8               	addwf	main@k_1110^(0+640),f
  2676  0CBC  3000               	movlw	0
  2677  0CBD  3DD9               	addwfc	(main@k_1110+1)^(0+640),f
  2678  0CBE  0859               	movf	(main@k_1110+1)^(0+640),w
  2679  0CBF  3A80               	xorlw	128
  2680  0CC0  0020               	movlb	0	; select bank0
  2681  0CC1  00D5               	movwf	??_main
  2682  0CC2  3080               	movlw	128
  2683  0CC3  0255               	subwf	??_main,w
  2684  0CC4  1D03               	skipz
  2685  0CC5  2CC9               	goto	u5905
  2686  0CC6  3001               	movlw	1
  2687  0CC7  0025               	movlb	5	; select bank5
  2688  0CC8  0258               	subwf	main@k_1110^(0+640),w
  2689  0CC9                     u5905:	
  2690  0CC9  1C03               	skipc
  2691  0CCA  2CA3               	goto	l5846
  2692  0CCB                     l5854:	
  2693                           
  2694                           ;main.c: 580: }
  2695                           ;main.c: 581: ChildLockString = ChildLockbuffer;
  2696  0CCB  3060               	movlw	(low (_ChildLockbuffer| (0+256)))& (0+255)
  2697  0CCC  0020               	movlb	0	; select bank0
  2698  0CCD  00D5               	movwf	??_main
  2699  0CCE  0855               	movf	??_main,w
  2700  0CCF  00DD               	movwf	_ChildLockString
  2701                           
  2702                           ;main.c: 584: } break;
  2703  0CD0  2CFB               	goto	l5864
  2704  0CD1                     l5856:	
  2705                           ;main.c: 585: case 8:
  2706                           
  2707                           
  2708                           ;main.c: 586: {
  2709                           ;main.c: 587: AllColorIntensityString = token;
  2710  0CD1  0020               	movlb	0	; select bank0
  2711  0CD2  0865               	movf	_token,w
  2712  0CD3  00D5               	movwf	??_main
  2713  0CD4  0855               	movf	??_main,w
  2714  0CD5  00DE               	movwf	_AllColorIntensityString
  2715                           
  2716                           ;main.c: 588: AllColorIntensityStringLength = strlen(AllColorIntensityString);
  2717  0CD6  085E               	movf	_AllColorIntensityString,w
  2718  0CD7  00A0               	movwf	strlen@s
  2719  0CD8  39FF               	andlw	255
  2720  0CD9  1D03               	skipz
  2721  0CDA  3002               	movlw	2
  2722  0CDB  00A1               	movwf	strlen@s+1
  2723  0CDC  3193  233A  318B   	fcall	_strlen
  2724  0CDF  0020               	movlb	0	; select bank0
  2725  0CE0  0821               	movf	?_strlen+1,w
  2726  0CE1  0023               	movlb	3	; select bank3
  2727  0CE2  00DF               	movwf	(_AllColorIntensityStringLength+1)^(0+384)
  2728  0CE3  0020               	movlb	0	; select bank0
  2729  0CE4  0820               	movf	?_strlen,w
  2730  0CE5  0023               	movlb	3	; select bank3
  2731  0CE6  00DE               	movwf	_AllColorIntensityStringLength^(0+384)
  2732                           
  2733                           ;main.c: 595: }
  2734                           
  2735                           ;main.c: 592: break;
  2736                           
  2737                           ;main.c: 591: default:
  2738                           
  2739                           ;main.c: 589: }break;
  2740  0CE7  2CFB               	goto	l5864
  2741  0CE8                     l5862:	
  2742                           
  2743                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2744                           ; Switch size 1, requested type "space"
  2745                           ; Number of cases is 1, Range of values is 0 to 0
  2746                           ; switch strategies available:
  2747                           ; Name         Instructions Cycles
  2748                           ; simple_byte            4     3 (average)
  2749                           ; direct_byte            8     6 (fixed)
  2750                           ; jumptable            260     6 (fixed)
  2751                           ;	Chosen strategy is simple_byte
  2752  0CE8  0022               	movlb	2	; select bank2
  2753  0CE9  0839               	movf	(_partCounter+1)^(0+256),w
  2754  0CEA  3A00               	xorlw	0	; case 0
  2755  0CEB  1903               	skipnz
  2756  0CEC  2CEE               	goto	l6312
  2757  0CED  2CFB               	goto	l5864
  2758  0CEE                     l6312:	
  2759                           
  2760                           ; Switch size 1, requested type "space"
  2761                           ; Number of cases is 8, Range of values is 1 to 8
  2762                           ; switch strategies available:
  2763                           ; Name         Instructions Cycles
  2764                           ; direct_byte           25     9 (fixed)
  2765                           ; simple_byte           25    13 (average)
  2766                           ; jumptable            263     9 (fixed)
  2767                           ;	Chosen strategy is direct_byte
  2768  0CEE  0838               	movf	_partCounter^(0+256),w
  2769  0CEF  3EFF               	addlw	-1
  2770  0CF0  1C03               	skipc
  2771  0CF1  2CFB               	goto	l5864
  2772  0CF2  0084               	movwf	4
  2773  0CF3  3008               	movlw	8
  2774  0CF4  0204               	subwf	4,w
  2775  0CF5  1803               	skipnc
  2776  0CF6  2CFB               	goto	l5864
  2777  0CF7  3190               	movlp	high S6314
  2778  0CF8  3504               	lslf	4,w
  2779  0CF9  3E00               	addlw	low S6314
  2780  0CFA  0082               	movwf	2
  2781  0CFB                     l5864:	
  2782  0CFB  0020               	movlb	0	; select bank0
  2783  0CFC  0865               	movf	_token,w
  2784  0CFD  1D03               	btfss	3,2
  2785  0CFE  2BB6               	goto	l5790
  2786  0CFF                     l5866:	
  2787                           
  2788                           ;main.c: 596: }
  2789                           ;main.c: 598: }
  2790                           ;main.c: 600: applicationControlRGB(ModuleNameString,SwitchNumberString,SwitchStatusStri
      +                          ng,
  2791                           ;main.c: 601: RedColorIntensityString,GreenColorIntensityString,BlueColorIntensityString
      +                          ,ChildLockString,AllColorIntensityString );
  2792  0CFF  0863               	movf	_SwitchNumberString,w
  2793  0D00  00D5               	movwf	??_main
  2794  0D01  0855               	movf	??_main,w
  2795  0D02  00CC               	movwf	applicationControlRGB@SwitchNumberstr
  2796  0D03  0862               	movf	_SwitchStatusString,w
  2797  0D04  00D6               	movwf	??_main+1
  2798  0D05  0856               	movf	??_main+1,w
  2799  0D06  00CD               	movwf	applicationControlRGB@SwitchStatusstr
  2800  0D07  0861               	movf	_RedColorIntensityString,w
  2801  0D08  00D7               	movwf	??_main+2
  2802  0D09  0857               	movf	??_main+2,w
  2803  0D0A  00CE               	movwf	applicationControlRGB@RedColorIntensitystr
  2804  0D0B  0860               	movf	_GreenColorIntensityString,w
  2805  0D0C  00D8               	movwf	??_main+3
  2806  0D0D  0858               	movf	??_main+3,w
  2807  0D0E  00CF               	movwf	applicationControlRGB@GreenColorIntensitystr
  2808  0D0F  085F               	movf	_BlueColorIntensityString,w
  2809  0D10  00D9               	movwf	??_main+4
  2810  0D11  0859               	movf	??_main+4,w
  2811  0D12  00D0               	movwf	applicationControlRGB@BlueColorIntensitystr
  2812  0D13  085D               	movf	_ChildLockString,w
  2813  0D14  00DA               	movwf	??_main+5
  2814  0D15  085A               	movf	??_main+5,w
  2815  0D16  00D1               	movwf	applicationControlRGB@ChildLockstr
  2816  0D17  085E               	movf	_AllColorIntensityString,w
  2817  0D18  00DB               	movwf	??_main+6
  2818  0D19  085B               	movf	??_main+6,w
  2819  0D1A  00D2               	movwf	applicationControlRGB@Allcolorstr
  2820  0D1B  0864               	movf	_ModuleNameString,w
  2821  0D1C  3181  216C  318B   	fcall	_applicationControlRGB
  2822                           
  2823                           ;main.c: 603: }
  2824  0D1F  2D5C               	goto	l5886
  2825  0D20                     l5868:	
  2826                           
  2827                           ;main.c: 605: else
  2828                           ;main.c: 606: {
  2829                           ;main.c: 608: errorsMain("ERLS");
  2830  0D20  3056               	movlw	low (STR_18| (0+32768))
  2831  0D21  0020               	movlb	0	; select bank0
  2832  0D22  00A0               	movwf	errorsMain@errNum
  2833  0D23  3098               	movlw	high (STR_18| (0+32768))
  2834  0D24  00A1               	movwf	errorsMain@errNum+1
  2835  0D25  3192  22FF  318B   	fcall	_errorsMain
  2836                           
  2837                           ;main.c: 609: RC1STAbits.SPEN = 0;
  2838  0D28  0023               	movlb	3	; select bank3
  2839  0D29  139D               	bcf	29,7	;volatile
  2840                           
  2841                           ;main.c: 610: RC1STAbits.CREN = 0;
  2842  0D2A  121D               	bcf	29,4	;volatile
  2843                           
  2844                           ;main.c: 611: for(int dataBufferCounter = 0; dataBufferCounter< 15; dataBufferCounter++)
  2845  0D2B  0025               	movlb	5	; select bank5
  2846  0D2C  01D2               	clrf	main@dataBufferCounter^(0+640)
  2847  0D2D  01D3               	clrf	(main@dataBufferCounter+1)^(0+640)
  2848  0D2E  0853               	movf	(main@dataBufferCounter+1)^(0+640),w
  2849  0D2F  3A80               	xorlw	128
  2850  0D30  0020               	movlb	0	; select bank0
  2851  0D31  00D5               	movwf	??_main
  2852  0D32  3080               	movlw	128
  2853  0D33  0255               	subwf	??_main,w
  2854  0D34  1D03               	skipz
  2855  0D35  2D39               	goto	u5925
  2856  0D36  300F               	movlw	15
  2857  0D37  0025               	movlb	5	; select bank5
  2858  0D38  0252               	subwf	main@dataBufferCounter^(0+640),w
  2859  0D39                     u5925:	
  2860  0D39  1803               	btfsc	3,0
  2861  0D3A  2D59               	goto	l506
  2862  0D3B                     l5880:	
  2863                           
  2864                           ;main.c: 612: {
  2865                           ;main.c: 613: mainReceivedDataBuffer[dataBufferCounter] = '#';
  2866  0D3B  3023               	movlw	35
  2867  0D3C  0020               	movlb	0	; select bank0
  2868  0D3D  00D5               	movwf	??_main
  2869  0D3E  0025               	movlb	5	; select bank5
  2870  0D3F  0852               	movf	main@dataBufferCounter^(0+640),w
  2871  0D40  3EA0               	addlw	(low (_mainReceivedDataBuffer| (0+512)))& (0+255)
  2872  0D41  0086               	movwf	6
  2873  0D42  3002               	movlw	2	; select bank5/6
  2874  0D43  0087               	movwf	7
  2875  0D44  0020               	movlb	0	; select bank0
  2876  0D45  0855               	movf	??_main,w
  2877  0D46  0081               	movwf	1
  2878  0D47  3001               	movlw	1
  2879  0D48  0025               	movlb	5	; select bank5
  2880  0D49  07D2               	addwf	main@dataBufferCounter^(0+640),f
  2881  0D4A  3000               	movlw	0
  2882  0D4B  3DD3               	addwfc	(main@dataBufferCounter+1)^(0+640),f
  2883  0D4C  0853               	movf	(main@dataBufferCounter+1)^(0+640),w
  2884  0D4D  3A80               	xorlw	128
  2885  0D4E  0020               	movlb	0	; select bank0
  2886  0D4F  00D5               	movwf	??_main
  2887  0D50  3080               	movlw	128
  2888  0D51  0255               	subwf	??_main,w
  2889  0D52  1D03               	skipz
  2890  0D53  2D57               	goto	u5935
  2891  0D54  300F               	movlw	15
  2892  0D55  0025               	movlb	5	; select bank5
  2893  0D56  0252               	subwf	main@dataBufferCounter^(0+640),w
  2894  0D57                     u5935:	
  2895  0D57  1C03               	skipc
  2896  0D58  2D3B               	goto	l5880
  2897  0D59                     l506:	
  2898                           
  2899                           ;main.c: 614: }
  2900                           ;main.c: 615: RC1STAbits.CREN = 1;
  2901  0D59  0023               	movlb	3	; select bank3
  2902  0D5A  161D               	bsf	29,4	;volatile
  2903                           
  2904                           ;main.c: 616: RC1STAbits.SPEN=1;
  2905  0D5B  179D               	bsf	29,7	;volatile
  2906  0D5C                     l5886:	
  2907                           
  2908                           ;main.c: 617: }
  2909                           ;main.c: 618: }
  2910                           ;main.c: 623: int man = 1;
  2911  0D5C  3001               	movlw	1
  2912  0D5D  0025               	movlb	5	; select bank5
  2913  0D5E  00DA               	movwf	main@man^(0+640)
  2914  0D5F  3000               	movlw	0
  2915  0D60  00DB               	movwf	(main@man^(0+640)+1)
  2916                           
  2917                           ;main.c: 624: if(copy_parentalLockBuffer[1] == '0' && PORTDbits.RD6 == 0 && M1 == 0)
  2918  0D61  3030               	movlw	48
  2919  0D62  0023               	movlb	3	; select bank3
  2920  0D63  0639               	xorwf	(_copy_parentalLockBuffer^(0+384)+1),w
  2921  0D64  1D03               	btfss	3,2
  2922  0D65  2D88               	goto	l5904
  2923  0D66  0020               	movlb	0	; select bank0
  2924  0D67  1B0F               	btfsc	15,6	;volatile
  2925  0D68  2D88               	goto	l5904
  2926  0D69  0022               	movlb	2	; select bank2
  2927  0D6A  0830               	movf	_M1^(0+256),w
  2928  0D6B  0431               	iorwf	(_M1+1)^(0+256),w
  2929  0D6C  1D03               	btfss	3,2
  2930  0D6D  2D88               	goto	l5904
  2931                           
  2932                           ;main.c: 625: {
  2933                           ;main.c: 626: if(man == 1)
  2934  0D6E  0025               	movlb	5	; select bank5
  2935  0D6F  035A               	decf	main@man^(0+640),w
  2936  0D70  045B               	iorwf	(main@man+1)^(0+640),w
  2937  0D71  1D03               	btfss	3,2
  2938  0D72  2D80               	goto	l5900
  2939                           
  2940                           ;main.c: 627: {
  2941                           ;main.c: 628: SwitchOnStatustToGatway(1);
  2942  0D73  3001               	movlw	1
  2943  0D74  0020               	movlb	0	; select bank0
  2944  0D75  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  2945  0D76  3000               	movlw	0
  2946  0D77  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  2947  0D78  3195  25AB  318B   	fcall	_SwitchOnStatustToGatway
  2948                           
  2949                           ;main.c: 630: TransmissionIndicationLedBlinking();
  2950  0D7B  3191  21F9  318B   	fcall	_TransmissionIndicationLedBlinking
  2951                           
  2952                           ;main.c: 631: PORTEbits.RE0=1;
  2953  0D7E  0020               	movlb	0	; select bank0
  2954  0D7F  1410               	bsf	16,0	;volatile
  2955  0D80                     l5900:	
  2956                           
  2957                           ;main.c: 633: }
  2958                           ;main.c: 634: man=0;
  2959  0D80  0025               	movlb	5	; select bank5
  2960  0D81  01DA               	clrf	main@man^(0+640)
  2961  0D82  01DB               	clrf	(main@man+1)^(0+640)
  2962                           
  2963                           ;main.c: 635: M1=1;
  2964  0D83  3001               	movlw	1
  2965  0D84  0022               	movlb	2	; select bank2
  2966  0D85  00B0               	movwf	_M1^(0+256)
  2967  0D86  3000               	movlw	0
  2968  0D87  00B1               	movwf	(_M1^(0+256)+1)
  2969  0D88                     l5904:	
  2970                           
  2971                           ;main.c: 637: }
  2972                           ;main.c: 639: if(copy_parentalLockBuffer[1] == '0' && PORTDbits.RD6 == 1 && M1 == 1)
  2973  0D88  3030               	movlw	48
  2974  0D89  0023               	movlb	3	; select bank3
  2975  0D8A  0639               	xorwf	(_copy_parentalLockBuffer^(0+384)+1),w
  2976  0D8B  1D03               	btfss	3,2
  2977  0D8C  2DAD               	goto	l5920
  2978  0D8D  0020               	movlb	0	; select bank0
  2979  0D8E  1F0F               	btfss	15,6	;volatile
  2980  0D8F  2DAD               	goto	l5920
  2981  0D90  0022               	movlb	2	; select bank2
  2982  0D91  0330               	decf	_M1^(0+256),w
  2983  0D92  0431               	iorwf	(_M1+1)^(0+256),w
  2984  0D93  1D03               	btfss	3,2
  2985  0D94  2DAD               	goto	l5920
  2986                           
  2987                           ;main.c: 640: {
  2988                           ;main.c: 642: if(man==1)
  2989  0D95  0025               	movlb	5	; select bank5
  2990  0D96  035A               	decf	main@man^(0+640),w
  2991  0D97  045B               	iorwf	(main@man+1)^(0+640),w
  2992  0D98  1D03               	btfss	3,2
  2993  0D99  2DA7               	goto	l5916
  2994                           
  2995                           ;main.c: 643: {
  2996                           ;main.c: 644: SwitchOffStatustToGatway(1);
  2997  0D9A  3001               	movlw	1
  2998  0D9B  0020               	movlb	0	; select bank0
  2999  0D9C  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3000  0D9D  3000               	movlw	0
  3001  0D9E  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3002  0D9F  3195  2578  318B   	fcall	_SwitchOffStatustToGatway
  3003                           
  3004                           ;main.c: 645: TransmissionIndicationLedBlinking();
  3005  0DA2  3191  21F9  318B   	fcall	_TransmissionIndicationLedBlinking
  3006                           
  3007                           ;main.c: 646: PORTEbits.RE0=0;
  3008  0DA5  0020               	movlb	0	; select bank0
  3009  0DA6  1010               	bcf	16,0	;volatile
  3010  0DA7                     l5916:	
  3011                           
  3012                           ;main.c: 647: }
  3013                           ;main.c: 648: man=0;
  3014  0DA7  0025               	movlb	5	; select bank5
  3015  0DA8  01DA               	clrf	main@man^(0+640)
  3016  0DA9  01DB               	clrf	(main@man+1)^(0+640)
  3017                           
  3018                           ;main.c: 649: M1=0;
  3019  0DAA  0022               	movlb	2	; select bank2
  3020  0DAB  01B0               	clrf	_M1^(0+256)
  3021  0DAC  01B1               	clrf	(_M1+1)^(0+256)
  3022  0DAD                     l5920:	
  3023                           
  3024                           ;main.c: 650: }
  3025                           ;main.c: 654: if(copy_parentalLockBuffer[2] == '0' && PORTDbits.RD7 == 0 && M2 == 0)
  3026  0DAD  3030               	movlw	48
  3027  0DAE  0023               	movlb	3	; select bank3
  3028  0DAF  063A               	xorwf	(_copy_parentalLockBuffer^(0+384)+2),w
  3029  0DB0  1D03               	btfss	3,2
  3030  0DB1  2DD4               	goto	l5936
  3031  0DB2  0020               	movlb	0	; select bank0
  3032  0DB3  1B8F               	btfsc	15,7	;volatile
  3033  0DB4  2DD4               	goto	l5936
  3034  0DB5  0022               	movlb	2	; select bank2
  3035  0DB6  082E               	movf	_M2^(0+256),w
  3036  0DB7  042F               	iorwf	(_M2+1)^(0+256),w
  3037  0DB8  1D03               	btfss	3,2
  3038  0DB9  2DD4               	goto	l5936
  3039                           
  3040                           ;main.c: 655: {
  3041                           ;main.c: 656: if(man==1)
  3042  0DBA  0025               	movlb	5	; select bank5
  3043  0DBB  035A               	decf	main@man^(0+640),w
  3044  0DBC  045B               	iorwf	(main@man+1)^(0+640),w
  3045  0DBD  1D03               	btfss	3,2
  3046  0DBE  2DCC               	goto	l5932
  3047                           
  3048                           ;main.c: 657: {
  3049                           ;main.c: 658: SwitchOnStatustToGatway(2);
  3050  0DBF  3002               	movlw	2
  3051  0DC0  0020               	movlb	0	; select bank0
  3052  0DC1  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3053  0DC2  3000               	movlw	0
  3054  0DC3  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3055  0DC4  3195  25AB  318B   	fcall	_SwitchOnStatustToGatway
  3056                           
  3057                           ;main.c: 659: TransmissionIndicationLedBlinking();
  3058  0DC7  3191  21F9  318B   	fcall	_TransmissionIndicationLedBlinking
  3059                           
  3060                           ;main.c: 660: PORTEbits.RE1=1;
  3061  0DCA  0020               	movlb	0	; select bank0
  3062  0DCB  1490               	bsf	16,1	;volatile
  3063  0DCC                     l5932:	
  3064                           
  3065                           ;main.c: 661: }
  3066                           ;main.c: 662: man=0;
  3067  0DCC  0025               	movlb	5	; select bank5
  3068  0DCD  01DA               	clrf	main@man^(0+640)
  3069  0DCE  01DB               	clrf	(main@man+1)^(0+640)
  3070                           
  3071                           ;main.c: 663: M2=1;
  3072  0DCF  3001               	movlw	1
  3073  0DD0  0022               	movlb	2	; select bank2
  3074  0DD1  00AE               	movwf	_M2^(0+256)
  3075  0DD2  3000               	movlw	0
  3076  0DD3  00AF               	movwf	(_M2^(0+256)+1)
  3077  0DD4                     l5936:	
  3078                           
  3079                           ;main.c: 664: }
  3080                           ;main.c: 666: if(copy_parentalLockBuffer[2] == '0' && PORTDbits.RD7 == 1 && M2 == 1)
  3081  0DD4  3030               	movlw	48
  3082  0DD5  0023               	movlb	3	; select bank3
  3083  0DD6  063A               	xorwf	(_copy_parentalLockBuffer^(0+384)+2),w
  3084  0DD7  1D03               	btfss	3,2
  3085  0DD8  2DF9               	goto	l5952
  3086  0DD9  0020               	movlb	0	; select bank0
  3087  0DDA  1F8F               	btfss	15,7	;volatile
  3088  0DDB  2DF9               	goto	l5952
  3089  0DDC  0022               	movlb	2	; select bank2
  3090  0DDD  032E               	decf	_M2^(0+256),w
  3091  0DDE  042F               	iorwf	(_M2+1)^(0+256),w
  3092  0DDF  1D03               	btfss	3,2
  3093  0DE0  2DF9               	goto	l5952
  3094                           
  3095                           ;main.c: 667: {
  3096                           ;main.c: 668: if(man==1)
  3097  0DE1  0025               	movlb	5	; select bank5
  3098  0DE2  035A               	decf	main@man^(0+640),w
  3099  0DE3  045B               	iorwf	(main@man+1)^(0+640),w
  3100  0DE4  1D03               	btfss	3,2
  3101  0DE5  2DF3               	goto	l5948
  3102                           
  3103                           ;main.c: 669: {
  3104                           ;main.c: 670: SwitchOffStatustToGatway(2);
  3105  0DE6  3002               	movlw	2
  3106  0DE7  0020               	movlb	0	; select bank0
  3107  0DE8  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3108  0DE9  3000               	movlw	0
  3109  0DEA  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3110  0DEB  3195  2578  318B   	fcall	_SwitchOffStatustToGatway
  3111                           
  3112                           ;main.c: 671: TransmissionIndicationLedBlinking();
  3113  0DEE  3191  21F9  318B   	fcall	_TransmissionIndicationLedBlinking
  3114                           
  3115                           ;main.c: 672: PORTEbits.RE1=0;
  3116  0DF1  0020               	movlb	0	; select bank0
  3117  0DF2  1090               	bcf	16,1	;volatile
  3118  0DF3                     l5948:	
  3119                           
  3120                           ;main.c: 673: }
  3121                           ;main.c: 674: man=0;
  3122  0DF3  0025               	movlb	5	; select bank5
  3123  0DF4  01DA               	clrf	main@man^(0+640)
  3124  0DF5  01DB               	clrf	(main@man+1)^(0+640)
  3125                           
  3126                           ;main.c: 675: M2=0;
  3127  0DF6  0022               	movlb	2	; select bank2
  3128  0DF7  01AE               	clrf	_M2^(0+256)
  3129  0DF8  01AF               	clrf	(_M2+1)^(0+256)
  3130  0DF9                     l5952:	
  3131                           
  3132                           ;main.c: 676: }
  3133                           ;main.c: 681: if(copy_parentalLockBuffer[3] == '0' && PORTBbits.RB0 == 0 && M3 == 0)
  3134  0DF9  3030               	movlw	48
  3135  0DFA  0023               	movlb	3	; select bank3
  3136  0DFB  063B               	xorwf	(_copy_parentalLockBuffer^(0+384)+3),w
  3137  0DFC  1D03               	btfss	3,2
  3138  0DFD  2E1F               	goto	l5968
  3139  0DFE  0020               	movlb	0	; select bank0
  3140  0DFF  180D               	btfsc	13,0	;volatile
  3141  0E00  2E1F               	goto	l5968
  3142  0E01  0022               	movlb	2	; select bank2
  3143  0E02  082C               	movf	_M3^(0+256),w
  3144  0E03  042D               	iorwf	(_M3+1)^(0+256),w
  3145  0E04  1D03               	btfss	3,2
  3146  0E05  2E1F               	goto	l5968
  3147                           
  3148                           ;main.c: 682: {
  3149                           ;main.c: 683: if(man == 1)
  3150  0E06  0025               	movlb	5	; select bank5
  3151  0E07  035A               	decf	main@man^(0+640),w
  3152  0E08  045B               	iorwf	(main@man+1)^(0+640),w
  3153  0E09  1D03               	btfss	3,2
  3154  0E0A  2E18               	goto	l5964
  3155                           
  3156                           ;main.c: 684: {
  3157                           ;main.c: 685: SwitchOnStatustToGatway(3);
  3158  0E0B  3003               	movlw	3
  3159  0E0C  0020               	movlb	0	; select bank0
  3160  0E0D  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3161  0E0E  3000               	movlw	0
  3162  0E0F  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3163  0E10  3195  25AB  318B   	fcall	_SwitchOnStatustToGatway
  3164                           
  3165                           ;main.c: 686: TransmissionIndicationLedBlinking();
  3166  0E13  3191  21F9  318B   	fcall	_TransmissionIndicationLedBlinking
  3167                           
  3168                           ;main.c: 687: PORTGbits.RG0=1;
  3169  0E16  0025               	movlb	5	; select bank5
  3170  0E17  140D               	bsf	13,0	;volatile
  3171  0E18                     l5964:	
  3172                           
  3173                           ;main.c: 688: }
  3174                           ;main.c: 689: man=0;
  3175  0E18  01DA               	clrf	main@man^(0+640)
  3176  0E19  01DB               	clrf	(main@man+1)^(0+640)
  3177                           
  3178                           ;main.c: 690: M3=1;
  3179  0E1A  3001               	movlw	1
  3180  0E1B  0022               	movlb	2	; select bank2
  3181  0E1C  00AC               	movwf	_M3^(0+256)
  3182  0E1D  3000               	movlw	0
  3183  0E1E  00AD               	movwf	(_M3^(0+256)+1)
  3184  0E1F                     l5968:	
  3185                           
  3186                           ;main.c: 692: }
  3187                           ;main.c: 694: if(copy_parentalLockBuffer[3] == '0' && PORTBbits.RB0 == 1 && M3 == 1)
  3188  0E1F  3030               	movlw	48
  3189  0E20  0023               	movlb	3	; select bank3
  3190  0E21  063B               	xorwf	(_copy_parentalLockBuffer^(0+384)+3),w
  3191  0E22  1D03               	btfss	3,2
  3192  0E23  2E43               	goto	l5984
  3193  0E24  0020               	movlb	0	; select bank0
  3194  0E25  1C0D               	btfss	13,0	;volatile
  3195  0E26  2E43               	goto	l5984
  3196  0E27  0022               	movlb	2	; select bank2
  3197  0E28  032C               	decf	_M3^(0+256),w
  3198  0E29  042D               	iorwf	(_M3+1)^(0+256),w
  3199  0E2A  1D03               	btfss	3,2
  3200  0E2B  2E43               	goto	l5984
  3201                           
  3202                           ;main.c: 695: {
  3203                           ;main.c: 696: if(man==1)
  3204  0E2C  0025               	movlb	5	; select bank5
  3205  0E2D  035A               	decf	main@man^(0+640),w
  3206  0E2E  045B               	iorwf	(main@man+1)^(0+640),w
  3207  0E2F  1D03               	btfss	3,2
  3208  0E30  2E3E               	goto	l5980
  3209                           
  3210                           ;main.c: 697: {
  3211                           ;main.c: 698: SwitchOffStatustToGatway(3);
  3212  0E31  3003               	movlw	3
  3213  0E32  0020               	movlb	0	; select bank0
  3214  0E33  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3215  0E34  3000               	movlw	0
  3216  0E35  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3217  0E36  3195  2578  318B   	fcall	_SwitchOffStatustToGatway
  3218                           
  3219                           ;main.c: 699: TransmissionIndicationLedBlinking();
  3220  0E39  3191  21F9  318B   	fcall	_TransmissionIndicationLedBlinking
  3221                           
  3222                           ;main.c: 700: PORTGbits.RG0=0;
  3223  0E3C  0025               	movlb	5	; select bank5
  3224  0E3D  100D               	bcf	13,0	;volatile
  3225  0E3E                     l5980:	
  3226                           
  3227                           ;main.c: 701: }
  3228                           ;main.c: 702: man=0;
  3229  0E3E  01DA               	clrf	main@man^(0+640)
  3230  0E3F  01DB               	clrf	(main@man+1)^(0+640)
  3231                           
  3232                           ;main.c: 703: M3=0;
  3233  0E40  0022               	movlb	2	; select bank2
  3234  0E41  01AC               	clrf	_M3^(0+256)
  3235  0E42  01AD               	clrf	(_M3+1)^(0+256)
  3236  0E43                     l5984:	
  3237                           
  3238                           ;main.c: 705: }
  3239                           ;main.c: 710: if(copy_parentalLockBuffer[4] == '0' && PORTBbits.RB1 == 0 && M4 == 0)
  3240  0E43  3030               	movlw	48
  3241  0E44  0023               	movlb	3	; select bank3
  3242  0E45  063C               	xorwf	(_copy_parentalLockBuffer^(0+384)+4),w
  3243  0E46  1D03               	btfss	3,2
  3244  0E47  2E69               	goto	l6000
  3245  0E48  0020               	movlb	0	; select bank0
  3246  0E49  188D               	btfsc	13,1	;volatile
  3247  0E4A  2E69               	goto	l6000
  3248  0E4B  0022               	movlb	2	; select bank2
  3249  0E4C  082A               	movf	_M4^(0+256),w
  3250  0E4D  042B               	iorwf	(_M4+1)^(0+256),w
  3251  0E4E  1D03               	btfss	3,2
  3252  0E4F  2E69               	goto	l6000
  3253                           
  3254                           ;main.c: 711: {
  3255                           ;main.c: 712: if(man==1)
  3256  0E50  0025               	movlb	5	; select bank5
  3257  0E51  035A               	decf	main@man^(0+640),w
  3258  0E52  045B               	iorwf	(main@man+1)^(0+640),w
  3259  0E53  1D03               	btfss	3,2
  3260  0E54  2E62               	goto	l5996
  3261                           
  3262                           ;main.c: 713: {
  3263                           ;main.c: 714: SwitchOnStatustToGatway(4);
  3264  0E55  3004               	movlw	4
  3265  0E56  0020               	movlb	0	; select bank0
  3266  0E57  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3267  0E58  3000               	movlw	0
  3268  0E59  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3269  0E5A  3195  25AB  318B   	fcall	_SwitchOnStatustToGatway
  3270                           
  3271                           ;main.c: 715: TransmissionIndicationLedBlinking();
  3272  0E5D  3191  21F9  318B   	fcall	_TransmissionIndicationLedBlinking
  3273                           
  3274                           ;main.c: 716: PORTGbits.RG3=1;
  3275  0E60  0025               	movlb	5	; select bank5
  3276  0E61  158D               	bsf	13,3	;volatile
  3277  0E62                     l5996:	
  3278                           
  3279                           ;main.c: 717: }
  3280                           ;main.c: 718: man=0;
  3281  0E62  01DA               	clrf	main@man^(0+640)
  3282  0E63  01DB               	clrf	(main@man+1)^(0+640)
  3283                           
  3284                           ;main.c: 719: M4=1;
  3285  0E64  3001               	movlw	1
  3286  0E65  0022               	movlb	2	; select bank2
  3287  0E66  00AA               	movwf	_M4^(0+256)
  3288  0E67  3000               	movlw	0
  3289  0E68  00AB               	movwf	(_M4^(0+256)+1)
  3290  0E69                     l6000:	
  3291                           
  3292                           ;main.c: 721: }
  3293                           ;main.c: 723: if(copy_parentalLockBuffer[4] == '0' && PORTBbits.RB1 == 1 && M4 == 1)
  3294  0E69  3030               	movlw	48
  3295  0E6A  0023               	movlb	3	; select bank3
  3296  0E6B  063C               	xorwf	(_copy_parentalLockBuffer^(0+384)+4),w
  3297  0E6C  1D03               	btfss	3,2
  3298  0E6D  2E8D               	goto	l6016
  3299  0E6E  0020               	movlb	0	; select bank0
  3300  0E6F  1C8D               	btfss	13,1	;volatile
  3301  0E70  2E8D               	goto	l6016
  3302  0E71  0022               	movlb	2	; select bank2
  3303  0E72  032A               	decf	_M4^(0+256),w
  3304  0E73  042B               	iorwf	(_M4+1)^(0+256),w
  3305  0E74  1D03               	btfss	3,2
  3306  0E75  2E8D               	goto	l6016
  3307                           
  3308                           ;main.c: 724: {
  3309                           ;main.c: 725: if(man==1)
  3310  0E76  0025               	movlb	5	; select bank5
  3311  0E77  035A               	decf	main@man^(0+640),w
  3312  0E78  045B               	iorwf	(main@man+1)^(0+640),w
  3313  0E79  1D03               	btfss	3,2
  3314  0E7A  2E88               	goto	l6012
  3315                           
  3316                           ;main.c: 726: {
  3317                           ;main.c: 728: SwitchOffStatustToGatway(4);
  3318  0E7B  3004               	movlw	4
  3319  0E7C  0020               	movlb	0	; select bank0
  3320  0E7D  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3321  0E7E  3000               	movlw	0
  3322  0E7F  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3323  0E80  3195  2578  318B   	fcall	_SwitchOffStatustToGatway
  3324                           
  3325                           ;main.c: 729: TransmissionIndicationLedBlinking();
  3326  0E83  3191  21F9  318B   	fcall	_TransmissionIndicationLedBlinking
  3327                           
  3328                           ;main.c: 730: PORTGbits.RG3=0;
  3329  0E86  0025               	movlb	5	; select bank5
  3330  0E87  118D               	bcf	13,3	;volatile
  3331  0E88                     l6012:	
  3332                           
  3333                           ;main.c: 731: }
  3334                           ;main.c: 732: man=0;
  3335  0E88  01DA               	clrf	main@man^(0+640)
  3336  0E89  01DB               	clrf	(main@man+1)^(0+640)
  3337                           
  3338                           ;main.c: 733: M4=0;
  3339  0E8A  0022               	movlb	2	; select bank2
  3340  0E8B  01AA               	clrf	_M4^(0+256)
  3341  0E8C  01AB               	clrf	(_M4+1)^(0+256)
  3342  0E8D                     l6016:	
  3343                           
  3344                           ;main.c: 735: }
  3345                           ;main.c: 737: if(copy_parentalLockBuffer[5] == '0' && PORTBbits.RB2 == 0 && M5 == 0)
  3346  0E8D  3030               	movlw	48
  3347  0E8E  0023               	movlb	3	; select bank3
  3348  0E8F  063D               	xorwf	(_copy_parentalLockBuffer^(0+384)+5),w
  3349  0E90  1D03               	btfss	3,2
  3350  0E91  2EB3               	goto	l6032
  3351  0E92  0020               	movlb	0	; select bank0
  3352  0E93  190D               	btfsc	13,2	;volatile
  3353  0E94  2EB3               	goto	l6032
  3354  0E95  0022               	movlb	2	; select bank2
  3355  0E96  0828               	movf	_M5^(0+256),w
  3356  0E97  0429               	iorwf	(_M5+1)^(0+256),w
  3357  0E98  1D03               	btfss	3,2
  3358  0E99  2EB3               	goto	l6032
  3359                           
  3360                           ;main.c: 738: {
  3361                           ;main.c: 739: if(man==1)
  3362  0E9A  0025               	movlb	5	; select bank5
  3363  0E9B  035A               	decf	main@man^(0+640),w
  3364  0E9C  045B               	iorwf	(main@man+1)^(0+640),w
  3365  0E9D  1D03               	btfss	3,2
  3366  0E9E  2EAC               	goto	l6028
  3367                           
  3368                           ;main.c: 740: {
  3369                           ;main.c: 741: SwitchOnStatustToGatway(5);
  3370  0E9F  3005               	movlw	5
  3371  0EA0  0020               	movlb	0	; select bank0
  3372  0EA1  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3373  0EA2  3000               	movlw	0
  3374  0EA3  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3375  0EA4  3195  25AB  318B   	fcall	_SwitchOnStatustToGatway
  3376                           
  3377                           ;main.c: 742: TransmissionIndicationLedBlinking();
  3378  0EA7  3191  21F9  318B   	fcall	_TransmissionIndicationLedBlinking
  3379                           
  3380                           ;main.c: 743: PORTGbits.RG4=1;
  3381  0EAA  0025               	movlb	5	; select bank5
  3382  0EAB  160D               	bsf	13,4	;volatile
  3383  0EAC                     l6028:	
  3384                           
  3385                           ;main.c: 744: }
  3386                           ;main.c: 745: man=0;
  3387  0EAC  01DA               	clrf	main@man^(0+640)
  3388  0EAD  01DB               	clrf	(main@man+1)^(0+640)
  3389                           
  3390                           ;main.c: 746: M5=1;
  3391  0EAE  3001               	movlw	1
  3392  0EAF  0022               	movlb	2	; select bank2
  3393  0EB0  00A8               	movwf	_M5^(0+256)
  3394  0EB1  3000               	movlw	0
  3395  0EB2  00A9               	movwf	(_M5^(0+256)+1)
  3396  0EB3                     l6032:	
  3397                           
  3398                           ;main.c: 748: }
  3399                           ;main.c: 750: if(copy_parentalLockBuffer[5] == '0' && PORTBbits.RB2 == 1 && M5 == 1)
  3400  0EB3  3030               	movlw	48
  3401  0EB4  0023               	movlb	3	; select bank3
  3402  0EB5  063D               	xorwf	(_copy_parentalLockBuffer^(0+384)+5),w
  3403  0EB6  1D03               	btfss	3,2
  3404  0EB7  2ED7               	goto	l6048
  3405  0EB8  0020               	movlb	0	; select bank0
  3406  0EB9  1D0D               	btfss	13,2	;volatile
  3407  0EBA  2ED7               	goto	l6048
  3408  0EBB  0022               	movlb	2	; select bank2
  3409  0EBC  0328               	decf	_M5^(0+256),w
  3410  0EBD  0429               	iorwf	(_M5+1)^(0+256),w
  3411  0EBE  1D03               	btfss	3,2
  3412  0EBF  2ED7               	goto	l6048
  3413                           
  3414                           ;main.c: 751: {
  3415                           ;main.c: 752: if(man==1)
  3416  0EC0  0025               	movlb	5	; select bank5
  3417  0EC1  035A               	decf	main@man^(0+640),w
  3418  0EC2  045B               	iorwf	(main@man+1)^(0+640),w
  3419  0EC3  1D03               	btfss	3,2
  3420  0EC4  2ED2               	goto	l6044
  3421                           
  3422                           ;main.c: 753: {
  3423                           ;main.c: 755: SwitchOffStatustToGatway(5);
  3424  0EC5  3005               	movlw	5
  3425  0EC6  0020               	movlb	0	; select bank0
  3426  0EC7  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3427  0EC8  3000               	movlw	0
  3428  0EC9  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3429  0ECA  3195  2578  318B   	fcall	_SwitchOffStatustToGatway
  3430                           
  3431                           ;main.c: 756: TransmissionIndicationLedBlinking();
  3432  0ECD  3191  21F9  318B   	fcall	_TransmissionIndicationLedBlinking
  3433                           
  3434                           ;main.c: 757: PORTGbits.RG4=0;
  3435  0ED0  0025               	movlb	5	; select bank5
  3436  0ED1  120D               	bcf	13,4	;volatile
  3437  0ED2                     l6044:	
  3438                           
  3439                           ;main.c: 758: }
  3440                           ;main.c: 759: man=0;
  3441  0ED2  01DA               	clrf	main@man^(0+640)
  3442  0ED3  01DB               	clrf	(main@man+1)^(0+640)
  3443                           
  3444                           ;main.c: 760: M5=0;
  3445  0ED4  0022               	movlb	2	; select bank2
  3446  0ED5  01A8               	clrf	_M5^(0+256)
  3447  0ED6  01A9               	clrf	(_M5+1)^(0+256)
  3448  0ED7                     l6048:	
  3449                           
  3450                           ;main.c: 762: }
  3451                           ;main.c: 765: if(copy_parentalLockBuffer[6] == '0' && PORTBbits.RB3 == 0 && M6 == 0)
  3452  0ED7  3030               	movlw	48
  3453  0ED8  0023               	movlb	3	; select bank3
  3454  0ED9  063E               	xorwf	(_copy_parentalLockBuffer^(0+384)+6),w
  3455  0EDA  1D03               	btfss	3,2
  3456  0EDB  2EFD               	goto	l6064
  3457  0EDC  0020               	movlb	0	; select bank0
  3458  0EDD  198D               	btfsc	13,3	;volatile
  3459  0EDE  2EFD               	goto	l6064
  3460  0EDF  0022               	movlb	2	; select bank2
  3461  0EE0  0826               	movf	_M6^(0+256),w
  3462  0EE1  0427               	iorwf	(_M6+1)^(0+256),w
  3463  0EE2  1D03               	btfss	3,2
  3464  0EE3  2EFD               	goto	l6064
  3465                           
  3466                           ;main.c: 766: {
  3467                           ;main.c: 767: if(man==1)
  3468  0EE4  0025               	movlb	5	; select bank5
  3469  0EE5  035A               	decf	main@man^(0+640),w
  3470  0EE6  045B               	iorwf	(main@man+1)^(0+640),w
  3471  0EE7  1D03               	btfss	3,2
  3472  0EE8  2EF6               	goto	l6060
  3473                           
  3474                           ;main.c: 768: {
  3475                           ;main.c: 769: SwitchOnStatustToGatway(6);
  3476  0EE9  3006               	movlw	6
  3477  0EEA  0020               	movlb	0	; select bank0
  3478  0EEB  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3479  0EEC  3000               	movlw	0
  3480  0EED  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3481  0EEE  3195  25AB  318B   	fcall	_SwitchOnStatustToGatway
  3482                           
  3483                           ;main.c: 770: TransmissionIndicationLedBlinking();
  3484  0EF1  3191  21F9  318B   	fcall	_TransmissionIndicationLedBlinking
  3485                           
  3486                           ;main.c: 771: PORTFbits.RF6=1;
  3487  0EF4  0025               	movlb	5	; select bank5
  3488  0EF5  170C               	bsf	12,6	;volatile
  3489  0EF6                     l6060:	
  3490                           
  3491                           ;main.c: 772: }
  3492                           ;main.c: 773: man=0;
  3493  0EF6  01DA               	clrf	main@man^(0+640)
  3494  0EF7  01DB               	clrf	(main@man+1)^(0+640)
  3495                           
  3496                           ;main.c: 774: M6=1;
  3497  0EF8  3001               	movlw	1
  3498  0EF9  0022               	movlb	2	; select bank2
  3499  0EFA  00A6               	movwf	_M6^(0+256)
  3500  0EFB  3000               	movlw	0
  3501  0EFC  00A7               	movwf	(_M6^(0+256)+1)
  3502  0EFD                     l6064:	
  3503                           
  3504                           ;main.c: 776: }
  3505                           ;main.c: 778: if(copy_parentalLockBuffer[6] == '0' && PORTBbits.RB3 == 1 && M6 == 1)
  3506  0EFD  3030               	movlw	48
  3507  0EFE  0023               	movlb	3	; select bank3
  3508  0EFF  063E               	xorwf	(_copy_parentalLockBuffer^(0+384)+6),w
  3509  0F00  1D03               	btfss	3,2
  3510  0F01  2F21               	goto	l6080
  3511  0F02  0020               	movlb	0	; select bank0
  3512  0F03  1D8D               	btfss	13,3	;volatile
  3513  0F04  2F21               	goto	l6080
  3514  0F05  0022               	movlb	2	; select bank2
  3515  0F06  0326               	decf	_M6^(0+256),w
  3516  0F07  0427               	iorwf	(_M6+1)^(0+256),w
  3517  0F08  1D03               	btfss	3,2
  3518  0F09  2F21               	goto	l6080
  3519                           
  3520                           ;main.c: 779: {
  3521                           ;main.c: 780: if(man==1)
  3522  0F0A  0025               	movlb	5	; select bank5
  3523  0F0B  035A               	decf	main@man^(0+640),w
  3524  0F0C  045B               	iorwf	(main@man+1)^(0+640),w
  3525  0F0D  1D03               	btfss	3,2
  3526  0F0E  2F1C               	goto	l6076
  3527                           
  3528                           ;main.c: 781: {
  3529                           ;main.c: 783: SwitchOffStatustToGatway(6);
  3530  0F0F  3006               	movlw	6
  3531  0F10  0020               	movlb	0	; select bank0
  3532  0F11  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3533  0F12  3000               	movlw	0
  3534  0F13  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3535  0F14  3195  2578  318B   	fcall	_SwitchOffStatustToGatway
  3536                           
  3537                           ;main.c: 784: TransmissionIndicationLedBlinking();
  3538  0F17  3191  21F9  318B   	fcall	_TransmissionIndicationLedBlinking
  3539                           
  3540                           ;main.c: 785: PORTFbits.RF6=0;
  3541  0F1A  0025               	movlb	5	; select bank5
  3542  0F1B  130C               	bcf	12,6	;volatile
  3543  0F1C                     l6076:	
  3544                           
  3545                           ;main.c: 786: }
  3546                           ;main.c: 787: man=0;
  3547  0F1C  01DA               	clrf	main@man^(0+640)
  3548  0F1D  01DB               	clrf	(main@man+1)^(0+640)
  3549                           
  3550                           ;main.c: 788: M6=0;
  3551  0F1E  0022               	movlb	2	; select bank2
  3552  0F1F  01A6               	clrf	_M6^(0+256)
  3553  0F20  01A7               	clrf	(_M6+1)^(0+256)
  3554  0F21                     l6080:	
  3555                           
  3556                           ;main.c: 790: }
  3557                           ;main.c: 794: if(copy_parentalLockBuffer[7] == '0' && PORTBbits.RB4 == 0 && M7 == 0)
  3558  0F21  3030               	movlw	48
  3559  0F22  0023               	movlb	3	; select bank3
  3560  0F23  063F               	xorwf	(_copy_parentalLockBuffer^(0+384)+7),w
  3561  0F24  1D03               	btfss	3,2
  3562  0F25  2F47               	goto	l6096
  3563  0F26  0020               	movlb	0	; select bank0
  3564  0F27  1A0D               	btfsc	13,4	;volatile
  3565  0F28  2F47               	goto	l6096
  3566  0F29  0022               	movlb	2	; select bank2
  3567  0F2A  0824               	movf	_M7^(0+256),w
  3568  0F2B  0425               	iorwf	(_M7+1)^(0+256),w
  3569  0F2C  1D03               	btfss	3,2
  3570  0F2D  2F47               	goto	l6096
  3571                           
  3572                           ;main.c: 795: {
  3573                           ;main.c: 796: if(man==1)
  3574  0F2E  0025               	movlb	5	; select bank5
  3575  0F2F  035A               	decf	main@man^(0+640),w
  3576  0F30  045B               	iorwf	(main@man+1)^(0+640),w
  3577  0F31  1D03               	btfss	3,2
  3578  0F32  2F40               	goto	l6092
  3579                           
  3580                           ;main.c: 797: {
  3581                           ;main.c: 798: SwitchOnStatustToGatway(7);
  3582  0F33  3007               	movlw	7
  3583  0F34  0020               	movlb	0	; select bank0
  3584  0F35  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3585  0F36  3000               	movlw	0
  3586  0F37  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3587  0F38  3195  25AB  318B   	fcall	_SwitchOnStatustToGatway
  3588                           
  3589                           ;main.c: 799: TransmissionIndicationLedBlinking();
  3590  0F3B  3191  21F9  318B   	fcall	_TransmissionIndicationLedBlinking
  3591                           
  3592                           ;main.c: 800: PORTFbits.RF5=1;
  3593  0F3E  0025               	movlb	5	; select bank5
  3594  0F3F  168C               	bsf	12,5	;volatile
  3595  0F40                     l6092:	
  3596                           
  3597                           ;main.c: 801: }
  3598                           ;main.c: 802: man=0;
  3599  0F40  01DA               	clrf	main@man^(0+640)
  3600  0F41  01DB               	clrf	(main@man+1)^(0+640)
  3601                           
  3602                           ;main.c: 803: M7=1;
  3603  0F42  3001               	movlw	1
  3604  0F43  0022               	movlb	2	; select bank2
  3605  0F44  00A4               	movwf	_M7^(0+256)
  3606  0F45  3000               	movlw	0
  3607  0F46  00A5               	movwf	(_M7^(0+256)+1)
  3608  0F47                     l6096:	
  3609                           
  3610                           ;main.c: 805: }
  3611                           ;main.c: 807: if(copy_parentalLockBuffer[7] == '0' && PORTBbits.RB4 == 1 && M7 == 1)
  3612  0F47  3030               	movlw	48
  3613  0F48  0023               	movlb	3	; select bank3
  3614  0F49  063F               	xorwf	(_copy_parentalLockBuffer^(0+384)+7),w
  3615  0F4A  1D03               	btfss	3,2
  3616  0F4B  2F6B               	goto	l6112
  3617  0F4C  0020               	movlb	0	; select bank0
  3618  0F4D  1E0D               	btfss	13,4	;volatile
  3619  0F4E  2F6B               	goto	l6112
  3620  0F4F  0022               	movlb	2	; select bank2
  3621  0F50  0324               	decf	_M7^(0+256),w
  3622  0F51  0425               	iorwf	(_M7+1)^(0+256),w
  3623  0F52  1D03               	btfss	3,2
  3624  0F53  2F6B               	goto	l6112
  3625                           
  3626                           ;main.c: 808: {
  3627                           ;main.c: 809: if(man==1)
  3628  0F54  0025               	movlb	5	; select bank5
  3629  0F55  035A               	decf	main@man^(0+640),w
  3630  0F56  045B               	iorwf	(main@man+1)^(0+640),w
  3631  0F57  1D03               	btfss	3,2
  3632  0F58  2F66               	goto	l6108
  3633                           
  3634                           ;main.c: 810: {
  3635                           ;main.c: 812: SwitchOffStatustToGatway(7);
  3636  0F59  3007               	movlw	7
  3637  0F5A  0020               	movlb	0	; select bank0
  3638  0F5B  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3639  0F5C  3000               	movlw	0
  3640  0F5D  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3641  0F5E  3195  2578  318B   	fcall	_SwitchOffStatustToGatway
  3642                           
  3643                           ;main.c: 813: TransmissionIndicationLedBlinking();
  3644  0F61  3191  21F9  318B   	fcall	_TransmissionIndicationLedBlinking
  3645                           
  3646                           ;main.c: 814: PORTFbits.RF5=0;
  3647  0F64  0025               	movlb	5	; select bank5
  3648  0F65  128C               	bcf	12,5	;volatile
  3649  0F66                     l6108:	
  3650                           
  3651                           ;main.c: 815: }
  3652                           ;main.c: 816: man=0;
  3653  0F66  01DA               	clrf	main@man^(0+640)
  3654  0F67  01DB               	clrf	(main@man+1)^(0+640)
  3655                           
  3656                           ;main.c: 817: M7=0;
  3657  0F68  0022               	movlb	2	; select bank2
  3658  0F69  01A4               	clrf	_M7^(0+256)
  3659  0F6A  01A5               	clrf	(_M7+1)^(0+256)
  3660  0F6B                     l6112:	
  3661                           
  3662                           ;main.c: 819: }
  3663                           ;main.c: 824: if(copy_parentalLockBuffer[8] == '0' && PORTBbits.RB5 == 0 && M8 == 0)
  3664  0F6B  3030               	movlw	48
  3665  0F6C  0023               	movlb	3	; select bank3
  3666  0F6D  0640               	xorwf	(_copy_parentalLockBuffer^(0+384)+8),w
  3667  0F6E  1D03               	btfss	3,2
  3668  0F6F  2F91               	goto	l6128
  3669  0F70  0020               	movlb	0	; select bank0
  3670  0F71  1A8D               	btfsc	13,5	;volatile
  3671  0F72  2F91               	goto	l6128
  3672  0F73  0022               	movlb	2	; select bank2
  3673  0F74  0822               	movf	_M8^(0+256),w
  3674  0F75  0423               	iorwf	(_M8+1)^(0+256),w
  3675  0F76  1D03               	btfss	3,2
  3676  0F77  2F91               	goto	l6128
  3677                           
  3678                           ;main.c: 825: {
  3679                           ;main.c: 826: if(man==1)
  3680  0F78  0025               	movlb	5	; select bank5
  3681  0F79  035A               	decf	main@man^(0+640),w
  3682  0F7A  045B               	iorwf	(main@man+1)^(0+640),w
  3683  0F7B  1D03               	btfss	3,2
  3684  0F7C  2F8A               	goto	l6124
  3685                           
  3686                           ;main.c: 827: {
  3687                           ;main.c: 828: SwitchOnStatustToGatway(8);
  3688  0F7D  3008               	movlw	8
  3689  0F7E  0020               	movlb	0	; select bank0
  3690  0F7F  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3691  0F80  3000               	movlw	0
  3692  0F81  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3693  0F82  3195  25AB  318B   	fcall	_SwitchOnStatustToGatway
  3694                           
  3695                           ;main.c: 829: TransmissionIndicationLedBlinking();
  3696  0F85  3191  21F9  318B   	fcall	_TransmissionIndicationLedBlinking
  3697                           
  3698                           ;main.c: 830: PORTFbits.RF4=1;
  3699  0F88  0025               	movlb	5	; select bank5
  3700  0F89  160C               	bsf	12,4	;volatile
  3701  0F8A                     l6124:	
  3702                           
  3703                           ;main.c: 831: }
  3704                           ;main.c: 832: man=0;
  3705  0F8A  01DA               	clrf	main@man^(0+640)
  3706  0F8B  01DB               	clrf	(main@man+1)^(0+640)
  3707                           
  3708                           ;main.c: 833: M8=1;
  3709  0F8C  3001               	movlw	1
  3710  0F8D  0022               	movlb	2	; select bank2
  3711  0F8E  00A2               	movwf	_M8^(0+256)
  3712  0F8F  3000               	movlw	0
  3713  0F90  00A3               	movwf	(_M8^(0+256)+1)
  3714  0F91                     l6128:	
  3715                           
  3716                           ;main.c: 835: }
  3717                           ;main.c: 837: if(copy_parentalLockBuffer[8] == '0' && PORTBbits.RB5 == 1 && M8 == 1)
  3718  0F91  3030               	movlw	48
  3719  0F92  0023               	movlb	3	; select bank3
  3720  0F93  0640               	xorwf	(_copy_parentalLockBuffer^(0+384)+8),w
  3721  0F94  1D03               	btfss	3,2
  3722  0F95  2FB5               	goto	l6144
  3723  0F96  0020               	movlb	0	; select bank0
  3724  0F97  1E8D               	btfss	13,5	;volatile
  3725  0F98  2FB5               	goto	l6144
  3726  0F99  0022               	movlb	2	; select bank2
  3727  0F9A  0322               	decf	_M8^(0+256),w
  3728  0F9B  0423               	iorwf	(_M8+1)^(0+256),w
  3729  0F9C  1D03               	btfss	3,2
  3730  0F9D  2FB5               	goto	l6144
  3731                           
  3732                           ;main.c: 838: {
  3733                           ;main.c: 839: if(man==1)
  3734  0F9E  0025               	movlb	5	; select bank5
  3735  0F9F  035A               	decf	main@man^(0+640),w
  3736  0FA0  045B               	iorwf	(main@man+1)^(0+640),w
  3737  0FA1  1D03               	btfss	3,2
  3738  0FA2  2FB0               	goto	l6140
  3739                           
  3740                           ;main.c: 840: {
  3741                           ;main.c: 842: SwitchOffStatustToGatway(8);
  3742  0FA3  3008               	movlw	8
  3743  0FA4  0020               	movlb	0	; select bank0
  3744  0FA5  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3745  0FA6  3000               	movlw	0
  3746  0FA7  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3747  0FA8  3195  2578  318B   	fcall	_SwitchOffStatustToGatway
  3748                           
  3749                           ;main.c: 843: TransmissionIndicationLedBlinking();
  3750  0FAB  3191  21F9  318B   	fcall	_TransmissionIndicationLedBlinking
  3751                           
  3752                           ;main.c: 844: PORTFbits.RF4=0;
  3753  0FAE  0025               	movlb	5	; select bank5
  3754  0FAF  120C               	bcf	12,4	;volatile
  3755  0FB0                     l6140:	
  3756                           
  3757                           ;main.c: 845: }
  3758                           ;main.c: 846: man=0;
  3759  0FB0  01DA               	clrf	main@man^(0+640)
  3760  0FB1  01DB               	clrf	(main@man+1)^(0+640)
  3761                           
  3762                           ;main.c: 847: M8=0;
  3763  0FB2  0022               	movlb	2	; select bank2
  3764  0FB3  01A2               	clrf	_M8^(0+256)
  3765  0FB4  01A3               	clrf	(_M8+1)^(0+256)
  3766  0FB5                     l6144:	
  3767                           
  3768                           ;main.c: 849: }
  3769                           ;main.c: 851: if(copy_parentalLockBuffer[9] == '0' && PORTDbits.RD5 == 0 && M9 == 0)
  3770  0FB5  3030               	movlw	48
  3771  0FB6  0023               	movlb	3	; select bank3
  3772  0FB7  0641               	xorwf	(_copy_parentalLockBuffer^(0+384)+9),w
  3773  0FB8  1D03               	btfss	3,2
  3774  0FB9  2FDB               	goto	l6164
  3775  0FBA  0020               	movlb	0	; select bank0
  3776  0FBB  1A8F               	btfsc	15,5	;volatile
  3777  0FBC  2FDB               	goto	l6164
  3778  0FBD  0022               	movlb	2	; select bank2
  3779  0FBE  0820               	movf	_M9^(0+256),w
  3780  0FBF  0421               	iorwf	(_M9+1)^(0+256),w
  3781  0FC0  1D03               	btfss	3,2
  3782  0FC1  2FDB               	goto	l6164
  3783                           
  3784                           ;main.c: 852: {
  3785                           ;main.c: 853: if(man==1)
  3786  0FC2  0025               	movlb	5	; select bank5
  3787  0FC3  035A               	decf	main@man^(0+640),w
  3788  0FC4  045B               	iorwf	(main@man+1)^(0+640),w
  3789  0FC5  1D03               	btfss	3,2
  3790  0FC6  2FD3               	goto	l6160
  3791                           
  3792                           ;main.c: 854: {
  3793                           ;main.c: 855: sendAcknowledgmentRGB("RGB.9.ACTACK.1.0.0.0.0.100");
  3794  0FC7  3023               	movlw	low (STR_19| (0+32768))
  3795  0FC8  0020               	movlb	0	; select bank0
  3796  0FC9  00A0               	movwf	sendAcknowledgmentRGB@currentStateBufferRGB
  3797  0FCA  3098               	movlw	high (STR_19| (0+32768))
  3798  0FCB  00A1               	movwf	sendAcknowledgmentRGB@currentStateBufferRGB+1
  3799  0FCC  3193  2359  318B   	fcall	_sendAcknowledgmentRGB
  3800                           
  3801                           ;main.c: 856: PORTDbits.RD2=1;
  3802  0FCF  0020               	movlb	0	; select bank0
  3803  0FD0  150F               	bsf	15,2	;volatile
  3804                           
  3805                           ;main.c: 857: PORTDbits.RD4=0;
  3806  0FD1  120F               	bcf	15,4	;volatile
  3807                           
  3808                           ;main.c: 858: PORTDbits.RD3=0;
  3809  0FD2  118F               	bcf	15,3	;volatile
  3810  0FD3                     l6160:	
  3811                           
  3812                           ;main.c: 860: }
  3813                           ;main.c: 861: man=0;
  3814  0FD3  0025               	movlb	5	; select bank5
  3815  0FD4  01DA               	clrf	main@man^(0+640)
  3816  0FD5  01DB               	clrf	(main@man+1)^(0+640)
  3817                           
  3818                           ;main.c: 862: M9=1;
  3819  0FD6  3001               	movlw	1
  3820  0FD7  0022               	movlb	2	; select bank2
  3821  0FD8  00A0               	movwf	_M9^(0+256)
  3822  0FD9  3000               	movlw	0
  3823  0FDA  00A1               	movwf	(_M9^(0+256)+1)
  3824  0FDB                     l6164:	
  3825                           
  3826                           ;main.c: 864: }
  3827                           ;main.c: 866: if(copy_parentalLockBuffer[9] == '0' && PORTDbits.RD5 == 1 && M9 == 1)
  3828  0FDB  3030               	movlw	48
  3829  0FDC  0023               	movlb	3	; select bank3
  3830  0FDD  0641               	xorwf	(_copy_parentalLockBuffer^(0+384)+9),w
  3831  0FDE  1D03               	btfss	3,2
  3832  0FDF  2B37               	goto	l5752
  3833  0FE0  0020               	movlb	0	; select bank0
  3834  0FE1  1E8F               	btfss	15,5	;volatile
  3835  0FE2  2B37               	goto	l5752
  3836  0FE3  0022               	movlb	2	; select bank2
  3837  0FE4  0320               	decf	_M9^(0+256),w
  3838  0FE5  0421               	iorwf	(_M9+1)^(0+256),w
  3839  0FE6  1D03               	btfss	3,2
  3840  0FE7  2B37               	goto	l5752
  3841                           
  3842                           ;main.c: 867: {
  3843                           ;main.c: 868: if(man==1)
  3844  0FE8  0025               	movlb	5	; select bank5
  3845  0FE9  035A               	decf	main@man^(0+640),w
  3846  0FEA  045B               	iorwf	(main@man+1)^(0+640),w
  3847  0FEB  1D03               	btfss	3,2
  3848  0FEC  2FF9               	goto	l6180
  3849                           
  3850                           ;main.c: 869: {
  3851                           ;main.c: 870: sendAcknowledgment("RGB.9.ACTACK.0.0.0.0.0.100");
  3852  0FED  3008               	movlw	low (STR_20| (0+32768))
  3853  0FEE  0020               	movlb	0	; select bank0
  3854  0FEF  00A0               	movwf	sendAcknowledgment@currentStateBuffer
  3855  0FF0  3098               	movlw	high (STR_20| (0+32768))
  3856  0FF1  00A1               	movwf	sendAcknowledgment@currentStateBuffer+1
  3857  0FF2  3192  22E2  318B   	fcall	_sendAcknowledgment
  3858                           
  3859                           ;main.c: 871: PORTDbits.RD2=0;
  3860  0FF5  0020               	movlb	0	; select bank0
  3861  0FF6  110F               	bcf	15,2	;volatile
  3862                           
  3863                           ;main.c: 872: PORTDbits.RD4=0;
  3864  0FF7  120F               	bcf	15,4	;volatile
  3865                           
  3866                           ;main.c: 873: PORTDbits.RD3=0;
  3867  0FF8  118F               	bcf	15,3	;volatile
  3868  0FF9                     l6180:	
  3869                           
  3870                           ;main.c: 874: }
  3871                           ;main.c: 875: man=0;
  3872  0FF9  0025               	movlb	5	; select bank5
  3873  0FFA  01DA               	clrf	main@man^(0+640)
  3874  0FFB  01DB               	clrf	(main@man+1)^(0+640)
  3875                           
  3876                           ;main.c: 876: M9=0;
  3877  0FFC  0022               	movlb	2	; select bank2
  3878  0FFD  01A0               	clrf	_M9^(0+256)
  3879  0FFE  01A1               	clrf	(_M9+1)^(0+256)
  3880  0FFF  2B37               	goto	l5752
  3881  1000                     __end_of_main:	
  3882                           
  3883                           	psect	swtext1
  3884  1000                     __pswtext1:	
  3885  1000                     S6314:	
  3886  1000  318B  2BC9         	ljmp	l5794
  3887  1002  318C  2C07         	ljmp	l5810
  3888  1004  318C  2C0E         	ljmp	l5812
  3889  1006  318C  2C4C         	ljmp	l5828
  3890  1008  318C  2C63         	ljmp	l5832
  3891  100A  318C  2C7A         	ljmp	l5836
  3892  100C  318C  2C91         	ljmp	l5840
  3893  100E  318C  2CD1         	ljmp	l5856
  3894                           
  3895                           	psect	text1
  3896  165D                     __ptext1:	
  3897 ;; *************** function _strtok *****************
  3898 ;; Defined at:
  3899 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtok.c"
  3900 ;; Parameters:    Size  Location     Type
  3901 ;;  s1              1    wreg     PTR unsigned char 
  3902 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  3903 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
  3904 ;;		 -> STR_17(2), STR_15(2), 
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;  s1              1   19[BANK0 ] PTR unsigned char 
  3907 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  3908 ;; Return value:  Size  Location     Type
  3909 ;;                  1    wreg      PTR unsigned char 
  3910 ;; Registers used:
  3911 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3912 ;; Tracked objects:
  3913 ;;		On entry : 0/0
  3914 ;;		On exit  : 0/0
  3915 ;;		Unchanged: 0/0
  3916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3917 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  3918 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0
  3919 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0
  3920 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  3921 ;;Total ram usage:        6 bytes
  3922 ;; Hardware stack levels used:    1
  3923 ;; Hardware stack levels required when called:    4
  3924 ;; This function calls:
  3925 ;;		_strcspn
  3926 ;;		_strspn
  3927 ;; This function is called by:
  3928 ;;		_main
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           
  3933                           ;psect for function _strtok
  3934  165D                     _strtok:	
  3935                           
  3936                           ;incstack = 0
  3937                           ; Regs used in _strtok: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3938                           ;strtok@s1 stored from wreg
  3939  165D  0020               	movlb	0	; select bank0
  3940  165E  00B3               	movwf	strtok@s1
  3941  165F  0833               	movf	strtok@s1,w
  3942  1660  1D03               	btfss	3,2
  3943  1661  2E66               	goto	l5660
  3944  1662  085C               	movf	strtok@sp,w
  3945  1663  00B0               	movwf	??_strtok
  3946  1664  0830               	movf	??_strtok,w
  3947  1665  00B3               	movwf	strtok@s1
  3948  1666                     l5660:	
  3949  1666  0833               	movf	strtok@s1,w
  3950  1667  1D03               	btfss	3,2
  3951  1668  2E6B               	goto	l5666
  3952  1669  3000               	movlw	0
  3953  166A  0008               	return
  3954  166B                     l5666:	
  3955  166B  082F               	movf	strtok@s2+1,w
  3956  166C  00A8               	movwf	strspn@s2+1
  3957  166D  082E               	movf	strtok@s2,w
  3958  166E  00A7               	movwf	strspn@s2
  3959  166F  0833               	movf	strtok@s1,w
  3960  1670  3194  24E4  3196   	fcall	_strspn
  3961  1673  0020               	movlb	0	; select bank0
  3962  1674  0827               	movf	?_strspn,w
  3963  1675  00B0               	movwf	??_strtok
  3964  1676  0830               	movf	??_strtok,w
  3965  1677  07B3               	addwf	strtok@s1,f
  3966  1678  0833               	movf	strtok@s1,w
  3967  1679  0086               	movwf	6
  3968  167A  3002               	movlw	2	; select bank4/5
  3969  167B  0087               	movwf	7
  3970  167C  0801               	movf	1,w
  3971  167D  1D03               	btfss	3,2
  3972  167E  2E82               	goto	l5674
  3973  167F  01DC               	clrf	strtok@sp
  3974  1680  3000               	movlw	0
  3975  1681  0008               	return
  3976  1682                     l5674:	
  3977  1682  082F               	movf	strtok@s2+1,w
  3978  1683  00A8               	movwf	strcspn@s2+1
  3979  1684  082E               	movf	strtok@s2,w
  3980  1685  00A7               	movwf	strcspn@s2
  3981  1686  0833               	movf	strtok@s1,w
  3982  1687  3194  24B4  3196   	fcall	_strcspn
  3983  168A  0020               	movlb	0	; select bank0
  3984  168B  0827               	movf	?_strcspn,w
  3985  168C  00B0               	movwf	??_strtok
  3986  168D  0828               	movf	?_strcspn+1,w
  3987  168E  00B1               	movwf	??_strtok+1
  3988  168F  0833               	movf	strtok@s1,w
  3989  1690  0730               	addwf	??_strtok,w
  3990  1691  00B2               	movwf	??_strtok+2
  3991  1692  0832               	movf	??_strtok+2,w
  3992  1693  00DC               	movwf	strtok@sp
  3993  1694  085C               	movf	strtok@sp,w
  3994  1695  0086               	movwf	6
  3995  1696  3002               	movlw	2	; select bank4/5
  3996  1697  0087               	movwf	7
  3997  1698  0801               	movf	1,w
  3998  1699  1903               	btfsc	3,2
  3999  169A  2EA5               	goto	l5682
  4000  169B  085C               	movf	strtok@sp,w
  4001  169C  0086               	movwf	6
  4002  169D  3002               	movlw	2	; select bank4/5
  4003  169E  0087               	movwf	7
  4004  169F  0181               	clrf	1
  4005  16A0  3001               	movlw	1
  4006  16A1  00B0               	movwf	??_strtok
  4007  16A2  0830               	movf	??_strtok,w
  4008  16A3  07DC               	addwf	strtok@sp,f
  4009  16A4  2EA6               	goto	l5684
  4010  16A5                     l5682:	
  4011  16A5  01DC               	clrf	strtok@sp
  4012  16A6                     l5684:	
  4013  16A6  0833               	movf	strtok@s1,w
  4014  16A7  0008               	return
  4015  16A8                     __end_of_strtok:	
  4016                           
  4017                           	psect	text2
  4018  14E4                     __ptext2:	
  4019 ;; *************** function _strspn *****************
  4020 ;; Defined at:
  4021 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strspn.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;  s1              1    wreg     PTR const unsigned char 
  4024 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4025 ;;  s2              2    7[BANK0 ] PTR const unsigned char 
  4026 ;;		 -> STR_17(2), STR_15(2), 
  4027 ;; Auto vars:     Size  Location     Type
  4028 ;;  s1              1   13[BANK0 ] PTR const unsigned char 
  4029 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4030 ;;  i               2   11[BANK0 ] unsigned int 
  4031 ;; Return value:  Size  Location     Type
  4032 ;;                  2    7[BANK0 ] unsigned int 
  4033 ;; Registers used:
  4034 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4035 ;; Tracked objects:
  4036 ;;		On entry : 0/0
  4037 ;;		On exit  : 0/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4040 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  4041 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  4042 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  4043 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0
  4044 ;;Total ram usage:        7 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; Hardware stack levels required when called:    3
  4047 ;; This function calls:
  4048 ;;		_strchr
  4049 ;; This function is called by:
  4050 ;;		_strtok
  4051 ;; This function uses a non-reentrant model
  4052 ;;
  4053                           
  4054                           
  4055                           ;psect for function _strspn
  4056  14E4                     _strspn:	
  4057                           
  4058                           ;incstack = 0
  4059                           ; Regs used in _strspn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4060                           ;strspn@s1 stored from wreg
  4061  14E4  0020               	movlb	0	; select bank0
  4062  14E5  00AD               	movwf	strspn@s1
  4063  14E6  01AB               	clrf	strspn@i
  4064  14E7  01AC               	clrf	strspn@i+1
  4065  14E8  2CF1               	goto	l5262
  4066  14E9                     l5260:	
  4067  14E9  3001               	movlw	1
  4068  14EA  00A9               	movwf	??_strspn
  4069  14EB  0829               	movf	??_strspn,w
  4070  14EC  07AD               	addwf	strspn@s1,f
  4071  14ED  3001               	movlw	1
  4072  14EE  07AB               	addwf	strspn@i,f
  4073  14EF  3000               	movlw	0
  4074  14F0  3DAC               	addwfc	strspn@i+1,f
  4075  14F1                     l5262:	
  4076  14F1  082D               	movf	strspn@s1,w
  4077  14F2  0086               	movwf	6
  4078  14F3  3002               	movlw	2	; select bank4/5
  4079  14F4  0087               	movwf	7
  4080  14F5  0801               	movf	1,w
  4081  14F6  1903               	btfsc	3,2
  4082  14F7  2D0F               	goto	l5266
  4083  14F8  0828               	movf	strspn@s2+1,w
  4084  14F9  00A1               	movwf	strchr@ptr+1
  4085  14FA  0827               	movf	strspn@s2,w
  4086  14FB  00A0               	movwf	strchr@ptr
  4087  14FC  082D               	movf	strspn@s1,w
  4088  14FD  0086               	movwf	6
  4089  14FE  3002               	movlw	2	; select bank4/5
  4090  14FF  0087               	movwf	7
  4091  1500  0801               	movf	1,w
  4092  1501  00A9               	movwf	??_strspn
  4093  1502  01AA               	clrf	??_strspn+1
  4094  1503  0829               	movf	??_strspn,w
  4095  1504  00A2               	movwf	strchr@chr
  4096  1505  082A               	movf	??_strspn+1,w
  4097  1506  00A3               	movwf	strchr@chr+1
  4098  1507  3192  2275  3194   	fcall	_strchr
  4099  150A  0020               	movlb	0	; select bank0
  4100  150B  0820               	movf	?_strchr,w
  4101  150C  0421               	iorwf	?_strchr+1,w
  4102  150D  1D03               	btfss	3,2
  4103  150E  2CE9               	goto	l5260
  4104  150F                     l5266:	
  4105  150F  082C               	movf	strspn@i+1,w
  4106  1510  00A8               	movwf	?_strspn+1
  4107  1511  082B               	movf	strspn@i,w
  4108  1512  00A7               	movwf	?_strspn
  4109  1513  0008               	return
  4110  1514                     __end_of_strspn:	
  4111                           
  4112                           	psect	text3
  4113  14B4                     __ptext3:	
  4114 ;; *************** function _strcspn *****************
  4115 ;; Defined at:
  4116 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcspn.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;  s1              1    wreg     PTR const unsigned char 
  4119 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4120 ;;  s2              2    7[BANK0 ] PTR const unsigned char 
  4121 ;;		 -> STR_17(2), STR_15(2), 
  4122 ;; Auto vars:     Size  Location     Type
  4123 ;;  s1              1   13[BANK0 ] PTR const unsigned char 
  4124 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4125 ;;  i               2   11[BANK0 ] unsigned int 
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  2    7[BANK0 ] unsigned int 
  4128 ;; Registers used:
  4129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4135 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  4136 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  4137 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  4138 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0
  4139 ;;Total ram usage:        7 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:    3
  4142 ;; This function calls:
  4143 ;;		_strchr
  4144 ;; This function is called by:
  4145 ;;		_strtok
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           
  4150                           ;psect for function _strcspn
  4151  14B4                     _strcspn:	
  4152                           
  4153                           ;incstack = 0
  4154                           ; Regs used in _strcspn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4155                           ;strcspn@s1 stored from wreg
  4156  14B4  0020               	movlb	0	; select bank0
  4157  14B5  00AD               	movwf	strcspn@s1
  4158  14B6  01AB               	clrf	strcspn@i
  4159  14B7  01AC               	clrf	strcspn@i+1
  4160  14B8  2CC1               	goto	l5274
  4161  14B9                     l5272:	
  4162  14B9  3001               	movlw	1
  4163  14BA  00A9               	movwf	??_strcspn
  4164  14BB  0829               	movf	??_strcspn,w
  4165  14BC  07AD               	addwf	strcspn@s1,f
  4166  14BD  3001               	movlw	1
  4167  14BE  07AB               	addwf	strcspn@i,f
  4168  14BF  3000               	movlw	0
  4169  14C0  3DAC               	addwfc	strcspn@i+1,f
  4170  14C1                     l5274:	
  4171  14C1  082D               	movf	strcspn@s1,w
  4172  14C2  0086               	movwf	6
  4173  14C3  3002               	movlw	2	; select bank4/5
  4174  14C4  0087               	movwf	7
  4175  14C5  0801               	movf	1,w
  4176  14C6  1903               	btfsc	3,2
  4177  14C7  2CDF               	goto	l5278
  4178  14C8  0828               	movf	strcspn@s2+1,w
  4179  14C9  00A1               	movwf	strchr@ptr+1
  4180  14CA  0827               	movf	strcspn@s2,w
  4181  14CB  00A0               	movwf	strchr@ptr
  4182  14CC  082D               	movf	strcspn@s1,w
  4183  14CD  0086               	movwf	6
  4184  14CE  3002               	movlw	2	; select bank4/5
  4185  14CF  0087               	movwf	7
  4186  14D0  0801               	movf	1,w
  4187  14D1  00A9               	movwf	??_strcspn
  4188  14D2  01AA               	clrf	??_strcspn+1
  4189  14D3  0829               	movf	??_strcspn,w
  4190  14D4  00A2               	movwf	strchr@chr
  4191  14D5  082A               	movf	??_strcspn+1,w
  4192  14D6  00A3               	movwf	strchr@chr+1
  4193  14D7  3192  2275  3194   	fcall	_strchr
  4194  14DA  0020               	movlb	0	; select bank0
  4195  14DB  0820               	movf	?_strchr,w
  4196  14DC  0421               	iorwf	?_strchr+1,w
  4197  14DD  1903               	btfsc	3,2
  4198  14DE  2CB9               	goto	l5272
  4199  14DF                     l5278:	
  4200  14DF  082C               	movf	strcspn@i+1,w
  4201  14E0  00A8               	movwf	?_strcspn+1
  4202  14E1  082B               	movf	strcspn@i,w
  4203  14E2  00A7               	movwf	?_strcspn
  4204  14E3  0008               	return
  4205  14E4                     __end_of_strcspn:	
  4206                           
  4207                           	psect	text4
  4208  1275                     __ptext4:	
  4209 ;; *************** function _strchr *****************
  4210 ;; Defined at:
  4211 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
  4214 ;;		 -> STR_17(2), STR_15(2), 
  4215 ;;  chr             2    2[BANK0 ] int 
  4216 ;; Auto vars:     Size  Location     Type
  4217 ;;		None
  4218 ;; Return value:  Size  Location     Type
  4219 ;;                  2    0[BANK0 ] PTR unsigned char 
  4220 ;; Registers used:
  4221 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4222 ;; Tracked objects:
  4223 ;;		On entry : 0/0
  4224 ;;		On exit  : 0/0
  4225 ;;		Unchanged: 0/0
  4226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4227 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  4228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  4229 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0
  4230 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0
  4231 ;;Total ram usage:        7 bytes
  4232 ;; Hardware stack levels used:    1
  4233 ;; Hardware stack levels required when called:    2
  4234 ;; This function calls:
  4235 ;;		Nothing
  4236 ;; This function is called by:
  4237 ;;		_strcspn
  4238 ;;		_strspn
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241                           
  4242                           
  4243                           ;psect for function _strchr
  4244  1275                     _strchr:	
  4245  1275                     l1141:	
  4246                           ;incstack = 0
  4247                           ; Regs used in _strchr: [wreg-fsr0h+status,2+status,0+pclath]
  4248                           
  4249  1275  0020               	movlb	0	; select bank0
  4250  1276  0820               	movf	strchr@ptr,w
  4251  1277  0084               	movwf	4
  4252  1278  0821               	movf	strchr@ptr+1,w
  4253  1279  0085               	movwf	5
  4254  127A  0800               	movf	0,w	;code access
  4255  127B  0622               	xorwf	strchr@chr,w
  4256  127C  1903               	btfsc	3,2
  4257  127D  0008               	return
  4258  127E  0821               	movf	strchr@ptr+1,w
  4259  127F  00A5               	movwf	??_strchr+1
  4260  1280  0820               	movf	strchr@ptr,w
  4261  1281  00A4               	movwf	??_strchr
  4262  1282  0AA0               	incf	strchr@ptr,f
  4263  1283  1903               	skipnz
  4264  1284  0AA1               	incf	strchr@ptr+1,f
  4265  1285  0824               	movf	??_strchr,w
  4266  1286  0084               	movwf	4
  4267  1287  0825               	movf	??_strchr+1,w
  4268  1288  0085               	movwf	5
  4269  1289  0012               	moviw fsr0++
  4270  128A  1D03               	btfss	3,2
  4271  128B  2A75               	goto	l1141
  4272  128C  01A0               	clrf	?_strchr
  4273  128D  01A1               	clrf	?_strchr+1
  4274  128E  0008               	return
  4275  128F                     __end_of_strchr:	
  4276                           
  4277                           	psect	text5
  4278  142C                     __ptext5:	
  4279 ;; *************** function _strcmp *****************
  4280 ;; Defined at:
  4281 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
  4282 ;; Parameters:    Size  Location     Type
  4283 ;;  s1              1    wreg     PTR const unsigned char 
  4284 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4285 ;;  s2              2    0[BANK0 ] PTR const unsigned char 
  4286 ;;		 -> STR_16(4), 
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;  s1              1    4[BANK0 ] PTR const unsigned char 
  4289 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4290 ;;  r               1    3[BANK0 ] char 
  4291 ;; Return value:  Size  Location     Type
  4292 ;;                  2    0[BANK0 ] int 
  4293 ;; Registers used:
  4294 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4300 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  4301 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  4302 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  4303 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0
  4304 ;;Total ram usage:        5 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    2
  4307 ;; This function calls:
  4308 ;;		Nothing
  4309 ;; This function is called by:
  4310 ;;		_main
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           
  4315                           ;psect for function _strcmp
  4316  142C                     _strcmp:	
  4317                           
  4318                           ;incstack = 0
  4319                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0+pclath]
  4320                           ;strcmp@s1 stored from wreg
  4321  142C  0020               	movlb	0	; select bank0
  4322  142D  00A4               	movwf	strcmp@s1
  4323  142E  2C37               	goto	l5692
  4324  142F                     l5690:	
  4325  142F  3001               	movlw	1
  4326  1430  00A2               	movwf	??_strcmp
  4327  1431  0822               	movf	??_strcmp,w
  4328  1432  07A4               	addwf	strcmp@s1,f
  4329  1433  3001               	movlw	1
  4330  1434  07A0               	addwf	strcmp@s2,f
  4331  1435  3000               	movlw	0
  4332  1436  3DA1               	addwfc	strcmp@s2+1,f
  4333  1437                     l5692:	
  4334  1437  0824               	movf	strcmp@s1,w
  4335  1438  0086               	movwf	6
  4336  1439  3002               	movlw	2	; select bank4/5
  4337  143A  0087               	movwf	7
  4338  143B  0820               	movf	strcmp@s2,w
  4339  143C  0084               	movwf	4
  4340  143D  0821               	movf	strcmp@s2+1,w
  4341  143E  0085               	movwf	5
  4342  143F  0800               	movf	0,w	;code access
  4343  1440  3AFF               	xorlw	255
  4344  1441  3E01               	addlw	1
  4345  1442  0701               	addwf	1,w
  4346  1443  00A2               	movwf	??_strcmp
  4347  1444  0822               	movf	??_strcmp,w
  4348  1445  00A3               	movwf	strcmp@r
  4349  1446  0823               	movf	strcmp@r,w
  4350  1447  1D03               	btfss	3,2
  4351  1448  2C50               	goto	l5696
  4352  1449  0824               	movf	strcmp@s1,w
  4353  144A  0086               	movwf	6
  4354  144B  3002               	movlw	2	; select bank4/5
  4355  144C  0087               	movwf	7
  4356  144D  0801               	movf	1,w
  4357  144E  1D03               	btfss	3,2
  4358  144F  2C2F               	goto	l5690
  4359  1450                     l5696:	
  4360  1450  0823               	movf	strcmp@r,w
  4361  1451  00A0               	movwf	?_strcmp
  4362  1452  01A1               	clrf	?_strcmp+1
  4363  1453  1BA0               	btfsc	?_strcmp,7
  4364  1454  03A1               	decf	?_strcmp+1,f
  4365  1455  0008               	return
  4366  1456                     __end_of_strcmp:	
  4367                           
  4368                           	psect	text6
  4369  12FF                     __ptext6:	
  4370 ;; *************** function _errorsMain *****************
  4371 ;; Defined at:
  4372 ;;		line 1224 in file "main.c"
  4373 ;; Parameters:    Size  Location     Type
  4374 ;;  errNum          2    0[BANK0 ] PTR const unsigned char 
  4375 ;;		 -> STR_18(5), 
  4376 ;; Auto vars:     Size  Location     Type
  4377 ;;  Tx_count        2    2[BANK0 ] int 
  4378 ;; Return value:  Size  Location     Type
  4379 ;;                  1    wreg      void 
  4380 ;; Registers used:
  4381 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4382 ;; Tracked objects:
  4383 ;;		On entry : 0/0
  4384 ;;		On exit  : 0/0
  4385 ;;		Unchanged: 0/0
  4386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4387 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  4388 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  4389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  4390 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  4391 ;;Total ram usage:        4 bytes
  4392 ;; Hardware stack levels used:    1
  4393 ;; Hardware stack levels required when called:    2
  4394 ;; This function calls:
  4395 ;;		Nothing
  4396 ;; This function is called by:
  4397 ;;		_main
  4398 ;; This function uses a non-reentrant model
  4399 ;;
  4400                           
  4401                           
  4402                           ;psect for function _errorsMain
  4403  12FF                     _errorsMain:	
  4404                           
  4405                           ;main.c: 1225: int Tx_count=0;
  4406                           
  4407                           ;incstack = 0
  4408                           ; Regs used in _errorsMain: [wreg-fsr0h+status,2+status,0+pclath]
  4409  12FF  0020               	movlb	0	; select bank0
  4410  1300  01A2               	clrf	errorsMain@Tx_count
  4411  1301  01A3               	clrf	errorsMain@Tx_count+1
  4412  1302                     l5708:	
  4413                           ;main.c: 1226: while(Tx_count!=4)
  4414                           
  4415  1302  3004               	movlw	4
  4416  1303  0622               	xorwf	errorsMain@Tx_count,w
  4417  1304  0423               	iorwf	errorsMain@Tx_count+1,w
  4418  1305  1903               	btfsc	3,2
  4419  1306  0008               	return
  4420  1307                     l595:	
  4421                           ;main.c: 1227: {
  4422                           ;main.c: 1228: while (!TX1STAbits.TRMT);
  4423                           
  4424  1307  0023               	movlb	3	; select bank3
  4425  1308  1C9E               	btfss	30,1	;volatile
  4426  1309  2B07               	goto	l595
  4427                           
  4428                           ;main.c: 1229: TX1REG = *errNum;
  4429  130A  0020               	movlb	0	; select bank0
  4430  130B  0820               	movf	errorsMain@errNum,w
  4431  130C  0084               	movwf	4
  4432  130D  0821               	movf	errorsMain@errNum+1,w
  4433  130E  0085               	movwf	5
  4434  130F  0800               	movf	0,w	;code access
  4435  1310  0023               	movlb	3	; select bank3
  4436  1311  009A               	movwf	26	;volatile
  4437                           
  4438                           ;main.c: 1230: *errNum++;
  4439  1312  3001               	movlw	1
  4440  1313  0020               	movlb	0	; select bank0
  4441  1314  07A0               	addwf	errorsMain@errNum,f
  4442  1315  3000               	movlw	0
  4443  1316  3DA1               	addwfc	errorsMain@errNum+1,f
  4444                           
  4445                           ;main.c: 1231: Tx_count++;
  4446  1317  3001               	movlw	1
  4447  1318  07A2               	addwf	errorsMain@Tx_count,f
  4448  1319  3000               	movlw	0
  4449  131A  3DA3               	addwfc	errorsMain@Tx_count+1,f
  4450  131B  2B02               	goto	l5708
  4451  131C                     __end_of_errorsMain:	
  4452                           
  4453                           	psect	text7
  4454  1514                     __ptext7:	
  4455 ;; *************** function _copyReceivedDataBuffer *****************
  4456 ;; Defined at:
  4457 ;;		line 1308 in file "main.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;		None
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;  dataBufferCo    2    1[BANK0 ] int 
  4462 ;; Return value:  Size  Location     Type
  4463 ;;                  1    wreg      void 
  4464 ;; Registers used:
  4465 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  4472 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  4473 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  4474 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0
  4475 ;;Total ram usage:        3 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:    2
  4478 ;; This function calls:
  4479 ;;		Nothing
  4480 ;; This function is called by:
  4481 ;;		_main
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           
  4486                           ;psect for function _copyReceivedDataBuffer
  4487  1514                     _copyReceivedDataBuffer:	
  4488                           
  4489                           ;main.c: 1309: int dataBufferCounter=2;
  4490                           
  4491                           ;incstack = 0
  4492                           ; Regs used in _copyReceivedDataBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  4493  1514  3002               	movlw	2
  4494  1515  0020               	movlb	0	; select bank0
  4495  1516  00A1               	movwf	copyReceivedDataBuffer@dataBufferCounter
  4496  1517  3000               	movlw	0
  4497  1518  00A2               	movwf	copyReceivedDataBuffer@dataBufferCounter+1
  4498                           
  4499                           ;main.c: 1310: for(dataBufferCounter=2;dataBufferCounter<9;dataBufferCounter++){
  4500  1519  3002               	movlw	2
  4501  151A  00A1               	movwf	copyReceivedDataBuffer@dataBufferCounter
  4502  151B  3000               	movlw	0
  4503  151C  00A2               	movwf	copyReceivedDataBuffer@dataBufferCounter+1
  4504  151D                     L1:	
  4505  151D  0822               	movf	copyReceivedDataBuffer@dataBufferCounter+1,w
  4506  151E  3A80               	xorlw	128
  4507  151F  00A0               	movwf	??_copyReceivedDataBuffer
  4508  1520  3080               	movlw	128
  4509  1521  0220               	subwf	??_copyReceivedDataBuffer,w
  4510  1522  1D03               	skipz
  4511  1523  2D26               	goto	u5665
  4512  1524  3009               	movlw	9
  4513  1525  0221               	subwf	copyReceivedDataBuffer@dataBufferCounter,w
  4514  1526                     u5665:	
  4515  1526  1803               	btfsc	3,0
  4516  1527  0008               	return
  4517                           
  4518                           ;main.c: 1311: tempReceivedDataBuffer[dataBufferCounter-2]=copymainReceivedDataBuffer[da
      +                          taBufferCounter];
  4519  1528  0020               	movlb	0	; select bank0
  4520  1529  0821               	movf	copyReceivedDataBuffer@dataBufferCounter,w
  4521  152A  3E4E               	addlw	(low (_copymainReceivedDataBuffer| (0+512)))& (0+255)
  4522  152B  0086               	movwf	6
  4523  152C  3002               	movlw	2	; select bank4/5
  4524  152D  0087               	movwf	7
  4525  152E  0801               	movf	1,w
  4526  152F  00A0               	movwf	??_copyReceivedDataBuffer
  4527  1530  0821               	movf	copyReceivedDataBuffer@dataBufferCounter,w
  4528  1531  3EFE               	addlw	254
  4529  1532  3EA0               	addlw	(low (_tempReceivedDataBuffer| (0+256)))& (0+255)
  4530  1533  0086               	movwf	6
  4531  1534  3001               	movlw	1	; select bank3/4
  4532  1535  0087               	movwf	7
  4533  1536  0820               	movf	??_copyReceivedDataBuffer,w
  4534  1537  0081               	movwf	1
  4535                           
  4536                           ;main.c: 1312: copymainReceivedDataBuffer[dataBufferCounter]='#';
  4537  1538  3023               	movlw	35
  4538  1539  00A0               	movwf	??_copyReceivedDataBuffer
  4539  153A  0821               	movf	copyReceivedDataBuffer@dataBufferCounter,w
  4540  153B  3E4E               	addlw	(low (_copymainReceivedDataBuffer| (0+512)))& (0+255)
  4541  153C  0086               	movwf	6
  4542  153D  3002               	movlw	2	; select bank4/5
  4543  153E  0087               	movwf	7
  4544  153F  0820               	movf	??_copyReceivedDataBuffer,w
  4545  1540  0081               	movwf	1
  4546  1541  3001               	movlw	1
  4547  1542  07A1               	addwf	copyReceivedDataBuffer@dataBufferCounter,f
  4548  1543  3000               	movlw	0
  4549  1544  3DA2               	addwfc	copyReceivedDataBuffer@dataBufferCounter+1,f
  4550  1545  2D1D               	goto	L1
  4551  1546                     __end_of_copyReceivedDataBuffer:	
  4552                           
  4553                           	psect	text8
  4554  016C                     __ptext8:	
  4555 ;; *************** function _applicationControlRGB *****************
  4556 ;; Defined at:
  4557 ;;		line 1 in file "applicationcontrolRGB.h"
  4558 ;; Parameters:    Size  Location     Type
  4559 ;;  ModuleNamest    1    wreg     PTR unsigned char 
  4560 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4561 ;;  SwitchNumber    1   44[BANK0 ] PTR unsigned char 
  4562 ;;		 -> switchNumberBuffer(3), NULL(0), 
  4563 ;;  SwitchStatus    1   45[BANK0 ] PTR unsigned char 
  4564 ;;		 -> switchstatusbuffer(2), NULL(0), 
  4565 ;;  RedColorInte    1   46[BANK0 ] PTR unsigned char 
  4566 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4567 ;;  GreenColorIn    1   47[BANK0 ] PTR unsigned char 
  4568 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4569 ;;  BlueColorInt    1   48[BANK0 ] PTR unsigned char 
  4570 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4571 ;;  ChildLockstr    1   49[BANK0 ] PTR unsigned char 
  4572 ;;		 -> ChildLockbuffer(2), NULL(0), 
  4573 ;;  Allcolorstr     1   50[BANK0 ] PTR unsigned char 
  4574 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4575 ;; Auto vars:     Size  Location     Type
  4576 ;;  ModuleNamest    1   30[BANK1 ] PTR unsigned char 
  4577 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4578 ;;  HexlevelBuff    5   49[BANK1 ] unsigned char [5]
  4579 ;;  CompleteCloc    4   54[BANK1 ] unsigned long 
  4580 ;;  NeedBluePuls    4   26[BANK1 ] unsigned long 
  4581 ;;  NeedGreenPul    4   22[BANK1 ] unsigned long 
  4582 ;;  NeedRedPulse    4   18[BANK1 ] unsigned long 
  4583 ;;  BluePulse       4   14[BANK1 ] unsigned long 
  4584 ;;  GreenPulse      4   10[BANK1 ] unsigned long 
  4585 ;;  RedPulse        4    6[BANK1 ] unsigned long 
  4586 ;;  strBlueL        3   46[BANK1 ] unsigned char [3]
  4587 ;;  strBlueH        3   43[BANK1 ] unsigned char [3]
  4588 ;;  strGreenL       3   40[BANK1 ] unsigned char [3]
  4589 ;;  strGreenH       3   37[BANK1 ] unsigned char [3]
  4590 ;;  strRedL         3   34[BANK1 ] unsigned char [3]
  4591 ;;  strRedH         3   31[BANK1 ] unsigned char [3]
  4592 ;;  ConvertIntTo    3   72[BANK1 ] unsigned char [3]
  4593 ;;  ConvertIntTo    3   69[BANK1 ] unsigned char [3]
  4594 ;;  ConvertIntTo    3   66[BANK1 ] unsigned char [3]
  4595 ;;  clockPerCycl    3   61[BANK1 ] float 
  4596 ;;  Convert255Ra    3   58[BANK1 ] float 
  4597 ;;  ConvertIntoT    2   64[BANK1 ] int 
  4598 ;;  end             2    4[BANK1 ] int 
  4599 ;;  start           2    2[BANK1 ] int 
  4600 ;;  remainder       2    0[BANK1 ] int 
  4601 ;; Return value:  Size  Location     Type
  4602 ;;                  1    wreg      void 
  4603 ;; Registers used:
  4604 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4605 ;; Tracked objects:
  4606 ;;		On entry : 0/0
  4607 ;;		On exit  : 0/0
  4608 ;;		Unchanged: 0/0
  4609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4610 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0
  4611 ;;      Locals:         0       0      75       0       0       0       0       0       0       0       0
  4612 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  4613 ;;      Totals:         0       9      75       0       0       0       0       0       0       0       0
  4614 ;;Total ram usage:       84 bytes
  4615 ;; Hardware stack levels used:    1
  4616 ;; Hardware stack levels required when called:    4
  4617 ;; This function calls:
  4618 ;;		___awtoft
  4619 ;;		___ftdiv
  4620 ;;		___ftmul
  4621 ;;		___fttol
  4622 ;;		___lwtoft
  4623 ;;		_abs
  4624 ;;		_atoi
  4625 ;;		_hexadecimalToDecimal
  4626 ;;		_memset
  4627 ;;		_sendAcknowledgmentRGB
  4628 ;;		_sprintf
  4629 ;;		_strcat
  4630 ;;		_strcpy
  4631 ;;		_strlen
  4632 ;;		_strncpy
  4633 ;; This function is called by:
  4634 ;;		_main
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           
  4639                           ;psect for function _applicationControlRGB
  4640  016C                     _applicationControlRGB:	
  4641                           
  4642                           ;incstack = 0
  4643                           ; Regs used in _applicationControlRGB: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4644                           ;applicationControlRGB@ModuleNamestr stored from wreg
  4645  016C  0021               	movlb	1	; select bank1
  4646  016D  00BE               	movwf	applicationControlRGB@ModuleNamestr^(0+128)
  4647                           
  4648                           ;applicationcontrolRGB.h: 7: IntegerSwitchNumber = atoi(SwitchNumberstr);
  4649  016E  0020               	movlb	0	; select bank0
  4650  016F  084C               	movf	applicationControlRGB@SwitchNumberstr,w
  4651  0170  00A6               	movwf	atoi@s
  4652  0171  39FF               	andlw	255
  4653  0172  1D03               	skipz
  4654  0173  3001               	movlw	1
  4655  0174  00A7               	movwf	atoi@s+1
  4656  0175  3197  270D  3181   	fcall	_atoi
  4657  0178  0020               	movlb	0	; select bank0
  4658  0179  0827               	movf	?_atoi+1,w
  4659  017A  0022               	movlb	2	; select bank2
  4660  017B  00B7               	movwf	(_IntegerSwitchNumber+1)^(0+256)
  4661  017C  0020               	movlb	0	; select bank0
  4662  017D  0826               	movf	?_atoi,w
  4663  017E  0022               	movlb	2	; select bank2
  4664  017F  00B6               	movwf	_IntegerSwitchNumber^(0+256)
  4665                           
  4666                           ;applicationcontrolRGB.h: 8: IntergerSwitchStatus = atoi(SwitchStatusstr);
  4667  0180  0020               	movlb	0	; select bank0
  4668  0181  084D               	movf	applicationControlRGB@SwitchStatusstr,w
  4669  0182  00A6               	movwf	atoi@s
  4670  0183  39FF               	andlw	255
  4671  0184  1D03               	skipz
  4672  0185  3001               	movlw	1
  4673  0186  00A7               	movwf	atoi@s+1
  4674  0187  3197  270D  3181   	fcall	_atoi
  4675  018A  0020               	movlb	0	; select bank0
  4676  018B  0827               	movf	?_atoi+1,w
  4677  018C  0022               	movlb	2	; select bank2
  4678  018D  00B5               	movwf	(_IntergerSwitchStatus+1)^(0+256)
  4679  018E  0020               	movlb	0	; select bank0
  4680  018F  0826               	movf	?_atoi,w
  4681  0190  0022               	movlb	2	; select bank2
  4682  0191  00B4               	movwf	_IntergerSwitchStatus^(0+256)
  4683                           
  4684                           ;applicationcontrolRGB.h: 9: IntergerRedColorIntensity = atoi(RedColorIntensitystr);
  4685  0192  0020               	movlb	0	; select bank0
  4686  0193  084E               	movf	applicationControlRGB@RedColorIntensitystr,w
  4687  0194  00A6               	movwf	atoi@s
  4688  0195  39FF               	andlw	255
  4689  0196  1D03               	skipz
  4690  0197  3002               	movlw	2
  4691  0198  00A7               	movwf	atoi@s+1
  4692  0199  3197  270D  3181   	fcall	_atoi
  4693  019C  0020               	movlb	0	; select bank0
  4694  019D  0827               	movf	?_atoi+1,w
  4695  019E  0021               	movlb	1	; select bank1
  4696  019F  00EE               	movwf	(_IntergerRedColorIntensity+1)^(0+128)
  4697  01A0  0020               	movlb	0	; select bank0
  4698  01A1  0826               	movf	?_atoi,w
  4699  01A2  0021               	movlb	1	; select bank1
  4700  01A3  00ED               	movwf	_IntergerRedColorIntensity^(0+128)
  4701                           
  4702                           ;applicationcontrolRGB.h: 10: IntegerBlueColorIntensity = atoi(BlueColorIntensitystr);
  4703  01A4  0020               	movlb	0	; select bank0
  4704  01A5  0850               	movf	applicationControlRGB@BlueColorIntensitystr,w
  4705  01A6  00A6               	movwf	atoi@s
  4706  01A7  39FF               	andlw	255
  4707  01A8  1D03               	skipz
  4708  01A9  3002               	movlw	2
  4709  01AA  00A7               	movwf	atoi@s+1
  4710  01AB  3197  270D  3181   	fcall	_atoi
  4711  01AE  0020               	movlb	0	; select bank0
  4712  01AF  0827               	movf	?_atoi+1,w
  4713  01B0  00F1               	movwf	_IntegerBlueColorIntensity+1
  4714  01B1  0826               	movf	?_atoi,w
  4715  01B2  00F0               	movwf	_IntegerBlueColorIntensity
  4716                           
  4717                           ;applicationcontrolRGB.h: 11: IntegerGreenColorIntensity = atoi(GreenColorIntensitystr);
  4718  01B3  084F               	movf	applicationControlRGB@GreenColorIntensitystr,w
  4719  01B4  00A6               	movwf	atoi@s
  4720  01B5  39FF               	andlw	255
  4721  01B6  1D03               	skipz
  4722  01B7  3002               	movlw	2
  4723  01B8  00A7               	movwf	atoi@s+1
  4724  01B9  3197  270D  3181   	fcall	_atoi
  4725  01BC  0020               	movlb	0	; select bank0
  4726  01BD  0827               	movf	?_atoi+1,w
  4727  01BE  0021               	movlb	1	; select bank1
  4728  01BF  00EC               	movwf	(_IntegerGreenColorIntensity+1)^(0+128)
  4729  01C0  0020               	movlb	0	; select bank0
  4730  01C1  0826               	movf	?_atoi,w
  4731  01C2  0021               	movlb	1	; select bank1
  4732  01C3  00EB               	movwf	_IntegerGreenColorIntensity^(0+128)
  4733                           
  4734                           ;applicationcontrolRGB.h: 12: IntegerAllColorIntensity = atoi(Allcolorstr);
  4735  01C4  0020               	movlb	0	; select bank0
  4736  01C5  0852               	movf	applicationControlRGB@Allcolorstr,w
  4737  01C6  00A6               	movwf	atoi@s
  4738  01C7  39FF               	andlw	255
  4739  01C8  1D03               	skipz
  4740  01C9  3002               	movlw	2
  4741  01CA  00A7               	movwf	atoi@s+1
  4742  01CB  3197  270D  3181   	fcall	_atoi
  4743  01CE  0020               	movlb	0	; select bank0
  4744  01CF  0827               	movf	?_atoi+1,w
  4745  01D0  0023               	movlb	3	; select bank3
  4746  01D1  00D3               	movwf	(_IntegerAllColorIntensity+1)^(0+384)
  4747  01D2  0020               	movlb	0	; select bank0
  4748  01D3  0826               	movf	?_atoi,w
  4749  01D4  0023               	movlb	3	; select bank3
  4750  01D5  00D2               	movwf	_IntegerAllColorIntensity^(0+384)
  4751                           
  4752                           ;applicationcontrolRGB.h: 13: IntegerChildLock = atoi(ChildLockstr);
  4753  01D6  0020               	movlb	0	; select bank0
  4754  01D7  0851               	movf	applicationControlRGB@ChildLockstr,w
  4755  01D8  00A6               	movwf	atoi@s
  4756  01D9  39FF               	andlw	255
  4757  01DA  1D03               	skipz
  4758  01DB  3001               	movlw	1
  4759  01DC  00A7               	movwf	atoi@s+1
  4760  01DD  3197  270D  3181   	fcall	_atoi
  4761  01E0  0020               	movlb	0	; select bank0
  4762  01E1  0827               	movf	?_atoi+1,w
  4763  01E2  0022               	movlb	2	; select bank2
  4764  01E3  00B3               	movwf	(_IntegerChildLock+1)^(0+256)
  4765  01E4  0020               	movlb	0	; select bank0
  4766  01E5  0826               	movf	?_atoi,w
  4767  01E6  0022               	movlb	2	; select bank2
  4768  01E7  00B2               	movwf	_IntegerChildLock^(0+256)
  4769                           
  4770                           ;applicationcontrolRGB.h: 16: charchildLock = IntegerChildLock + '0';
  4771  01E8  0832               	movf	_IntegerChildLock^(0+256),w
  4772  01E9  3E30               	addlw	48
  4773  01EA  0020               	movlb	0	; select bank0
  4774  01EB  00D3               	movwf	??_applicationControlRGB
  4775  01EC  0853               	movf	??_applicationControlRGB,w
  4776  01ED  00E7               	movwf	_charchildLock
  4777                           
  4778                           ;applicationcontrolRGB.h: 17: charSwitchState = IntergerSwitchStatus + '0';
  4779  01EE  0022               	movlb	2	; select bank2
  4780  01EF  0834               	movf	_IntergerSwitchStatus^(0+256),w
  4781  01F0  3E30               	addlw	48
  4782  01F1  0020               	movlb	0	; select bank0
  4783  01F2  00D3               	movwf	??_applicationControlRGB
  4784  01F3  0853               	movf	??_applicationControlRGB,w
  4785  01F4  0022               	movlb	2	; select bank2
  4786  01F5  00E8               	movwf	_charSwitchState^(0+256)
  4787                           
  4788                           ;applicationcontrolRGB.h: 20: strcpy(sendFinalBufferToGAteway,ModuleNamestr);
  4789  01F6  0021               	movlb	1	; select bank1
  4790  01F7  083E               	movf	applicationControlRGB@ModuleNamestr^(0+128),w
  4791  01F8  0020               	movlb	0	; select bank0
  4792  01F9  00D3               	movwf	??_applicationControlRGB
  4793  01FA  0853               	movf	??_applicationControlRGB,w
  4794  01FB  00A0               	movwf	strcpy@from
  4795  01FC  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4796  01FD  3192  22C6  3181   	fcall	_strcpy
  4797                           
  4798                           ;applicationcontrolRGB.h: 21: strcat(sendFinalBufferToGAteway,".");
  4799  0200  306C               	movlw	low (STR_1| (0+32768))
  4800  0201  0020               	movlb	0	; select bank0
  4801  0202  00A0               	movwf	strcat@from
  4802  0203  3098               	movlw	high (STR_1| (0+32768))
  4803  0204  00A1               	movwf	strcat@from+1
  4804  0205  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4805  0206  3193  23DA  3181   	fcall	_strcat
  4806                           
  4807                           ;applicationcontrolRGB.h: 22: strcat(sendFinalBufferToGAteway,SwitchNumberstr);
  4808  0209  0020               	movlb	0	; select bank0
  4809  020A  084C               	movf	applicationControlRGB@SwitchNumberstr,w
  4810  020B  00A0               	movwf	strcat@from
  4811  020C  39FF               	andlw	255
  4812  020D  1D03               	skipz
  4813  020E  3001               	movlw	1
  4814  020F  00A1               	movwf	strcat@from+1
  4815  0210  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4816  0211  3193  23DA  3181   	fcall	_strcat
  4817                           
  4818                           ;applicationcontrolRGB.h: 23: strcat(sendFinalBufferToGAteway,".");
  4819  0214  306C               	movlw	low (STR_1| (0+32768))
  4820  0215  0020               	movlb	0	; select bank0
  4821  0216  00A0               	movwf	strcat@from
  4822  0217  3098               	movlw	high (STR_1| (0+32768))
  4823  0218  00A1               	movwf	strcat@from+1
  4824  0219  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4825  021A  3193  23DA  3181   	fcall	_strcat
  4826                           
  4827                           ;applicationcontrolRGB.h: 24: strcat(sendFinalBufferToGAteway,"ACTACK");
  4828  021D  304F               	movlw	low (STR_3| (0+32768))
  4829  021E  0020               	movlb	0	; select bank0
  4830  021F  00A0               	movwf	strcat@from
  4831  0220  3098               	movlw	high (STR_3| (0+32768))
  4832  0221  00A1               	movwf	strcat@from+1
  4833  0222  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4834  0223  3193  23DA  3181   	fcall	_strcat
  4835                           
  4836                           ;applicationcontrolRGB.h: 25: strcat(sendFinalBufferToGAteway,".");
  4837  0226  306C               	movlw	low (STR_1| (0+32768))
  4838  0227  0020               	movlb	0	; select bank0
  4839  0228  00A0               	movwf	strcat@from
  4840  0229  3098               	movlw	high (STR_1| (0+32768))
  4841  022A  00A1               	movwf	strcat@from+1
  4842  022B  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4843  022C  3193  23DA  3181   	fcall	_strcat
  4844                           
  4845                           ;applicationcontrolRGB.h: 26: strcat(sendFinalBufferToGAteway,SwitchStatusstr);
  4846  022F  0020               	movlb	0	; select bank0
  4847  0230  084D               	movf	applicationControlRGB@SwitchStatusstr,w
  4848  0231  00A0               	movwf	strcat@from
  4849  0232  39FF               	andlw	255
  4850  0233  1D03               	skipz
  4851  0234  3001               	movlw	1
  4852  0235  00A1               	movwf	strcat@from+1
  4853  0236  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4854  0237  3193  23DA  3181   	fcall	_strcat
  4855                           
  4856                           ;applicationcontrolRGB.h: 27: strcat(sendFinalBufferToGAteway,".");
  4857  023A  306C               	movlw	low (STR_1| (0+32768))
  4858  023B  0020               	movlb	0	; select bank0
  4859  023C  00A0               	movwf	strcat@from
  4860  023D  3098               	movlw	high (STR_1| (0+32768))
  4861  023E  00A1               	movwf	strcat@from+1
  4862  023F  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4863  0240  3193  23DA  3181   	fcall	_strcat
  4864                           
  4865                           ;applicationcontrolRGB.h: 28: strcat(sendFinalBufferToGAteway,RedColorIntensitystr);
  4866  0243  0020               	movlb	0	; select bank0
  4867  0244  084E               	movf	applicationControlRGB@RedColorIntensitystr,w
  4868  0245  00A0               	movwf	strcat@from
  4869  0246  39FF               	andlw	255
  4870  0247  1D03               	skipz
  4871  0248  3002               	movlw	2
  4872  0249  00A1               	movwf	strcat@from+1
  4873  024A  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4874  024B  3193  23DA  3181   	fcall	_strcat
  4875                           
  4876                           ;applicationcontrolRGB.h: 29: strcat(sendFinalBufferToGAteway,".");
  4877  024E  306C               	movlw	low (STR_1| (0+32768))
  4878  024F  0020               	movlb	0	; select bank0
  4879  0250  00A0               	movwf	strcat@from
  4880  0251  3098               	movlw	high (STR_1| (0+32768))
  4881  0252  00A1               	movwf	strcat@from+1
  4882  0253  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4883  0254  3193  23DA  3181   	fcall	_strcat
  4884                           
  4885                           ;applicationcontrolRGB.h: 30: strcat(sendFinalBufferToGAteway,GreenColorIntensitystr);
  4886  0257  0020               	movlb	0	; select bank0
  4887  0258  084F               	movf	applicationControlRGB@GreenColorIntensitystr,w
  4888  0259  00A0               	movwf	strcat@from
  4889  025A  39FF               	andlw	255
  4890  025B  1D03               	skipz
  4891  025C  3002               	movlw	2
  4892  025D  00A1               	movwf	strcat@from+1
  4893  025E  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4894  025F  3193  23DA  3181   	fcall	_strcat
  4895                           
  4896                           ;applicationcontrolRGB.h: 31: strcat(sendFinalBufferToGAteway,".");
  4897  0262  306C               	movlw	low (STR_1| (0+32768))
  4898  0263  0020               	movlb	0	; select bank0
  4899  0264  00A0               	movwf	strcat@from
  4900  0265  3098               	movlw	high (STR_1| (0+32768))
  4901  0266  00A1               	movwf	strcat@from+1
  4902  0267  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4903  0268  3193  23DA  3181   	fcall	_strcat
  4904                           
  4905                           ;applicationcontrolRGB.h: 32: strcat(sendFinalBufferToGAteway,BlueColorIntensitystr);
  4906  026B  0020               	movlb	0	; select bank0
  4907  026C  0850               	movf	applicationControlRGB@BlueColorIntensitystr,w
  4908  026D  00A0               	movwf	strcat@from
  4909  026E  39FF               	andlw	255
  4910  026F  1D03               	skipz
  4911  0270  3002               	movlw	2
  4912  0271  00A1               	movwf	strcat@from+1
  4913  0272  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4914  0273  3193  23DA  3181   	fcall	_strcat
  4915                           
  4916                           ;applicationcontrolRGB.h: 33: strcat(sendFinalBufferToGAteway,".");
  4917  0276  306C               	movlw	low (STR_1| (0+32768))
  4918  0277  0020               	movlb	0	; select bank0
  4919  0278  00A0               	movwf	strcat@from
  4920  0279  3098               	movlw	high (STR_1| (0+32768))
  4921  027A  00A1               	movwf	strcat@from+1
  4922  027B  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4923  027C  3193  23DA  3181   	fcall	_strcat
  4924                           
  4925                           ;applicationcontrolRGB.h: 34: strcat(sendFinalBufferToGAteway,ChildLockstr);
  4926  027F  0020               	movlb	0	; select bank0
  4927  0280  0851               	movf	applicationControlRGB@ChildLockstr,w
  4928  0281  00A0               	movwf	strcat@from
  4929  0282  39FF               	andlw	255
  4930  0283  1D03               	skipz
  4931  0284  3001               	movlw	1
  4932  0285  00A1               	movwf	strcat@from+1
  4933  0286  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4934  0287  3193  23DA  3181   	fcall	_strcat
  4935                           
  4936                           ;applicationcontrolRGB.h: 35: strcat(sendFinalBufferToGAteway,".");
  4937  028A  306C               	movlw	low (STR_1| (0+32768))
  4938  028B  0020               	movlb	0	; select bank0
  4939  028C  00A0               	movwf	strcat@from
  4940  028D  3098               	movlw	high (STR_1| (0+32768))
  4941  028E  00A1               	movwf	strcat@from+1
  4942  028F  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4943  0290  3193  23DA  3181   	fcall	_strcat
  4944                           
  4945                           ;applicationcontrolRGB.h: 36: strcat(sendFinalBufferToGAteway,Allcolorstr);
  4946  0293  0020               	movlb	0	; select bank0
  4947  0294  0852               	movf	applicationControlRGB@Allcolorstr,w
  4948  0295  00A0               	movwf	strcat@from
  4949  0296  39FF               	andlw	255
  4950  0297  1D03               	skipz
  4951  0298  3002               	movlw	2
  4952  0299  00A1               	movwf	strcat@from+1
  4953  029A  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4954  029B  3193  23DA  3181   	fcall	_strcat
  4955                           
  4956                           ;applicationcontrolRGB.h: 37: sendAcknowledgmentRGB(sendFinalBufferToGAteway);
  4957  029E  3020               	movlw	low _sendFinalBufferToGAteway
  4958  029F  0020               	movlb	0	; select bank0
  4959  02A0  00A0               	movwf	sendAcknowledgmentRGB@currentStateBufferRGB
  4960  02A1  3002               	movlw	high _sendFinalBufferToGAteway
  4961  02A2  00A1               	movwf	sendAcknowledgmentRGB@currentStateBufferRGB+1
  4962  02A3  3193  2359  3181   	fcall	_sendAcknowledgmentRGB
  4963                           
  4964                           ;applicationcontrolRGB.h: 39: parentalLockBuffer[IntegerSwitchNumber] = charchildLock;
  4965  02A6  0020               	movlb	0	; select bank0
  4966  02A7  0867               	movf	_charchildLock,w
  4967  02A8  00D3               	movwf	??_applicationControlRGB
  4968  02A9  0022               	movlb	2	; select bank2
  4969  02AA  0836               	movf	_IntegerSwitchNumber^(0+256),w
  4970  02AB  3EC0               	addlw	(low (_parentalLockBuffer| (0+512)))& (0+255)
  4971  02AC  0086               	movwf	6
  4972  02AD  3002               	movlw	2	; select bank5/6
  4973  02AE  0087               	movwf	7
  4974  02AF  0020               	movlb	0	; select bank0
  4975  02B0  0853               	movf	??_applicationControlRGB,w
  4976  02B1  0081               	movwf	1
  4977                           
  4978                           ;applicationcontrolRGB.h: 41: double ConvertIntToTimeInMicrosecRed;
  4979                           ;applicationcontrolRGB.h: 42: double ConvertIntToTimeInMicrosecGreen;
  4980                           ;applicationcontrolRGB.h: 43: double ConvertIntToTimeInMicrosecBlue;
  4981                           ;applicationcontrolRGB.h: 44: unsigned long long int RedPulse=0,GreenPulse=0,BluePulse=0
      +                          ,NeedRedPulse=0,NeedGreenPulse=0,NeedBluePulse=0,CompleteClock = 65535;
  4982  02B2  3000               	movlw	0
  4983  02B3  0021               	movlb	1	; select bank1
  4984  02B4  00A9               	movwf	(applicationControlRGB@RedPulse+3)^(0+128)
  4985  02B5  3000               	movlw	0
  4986  02B6  00A8               	movwf	(applicationControlRGB@RedPulse+2)^(0+128)
  4987  02B7  3000               	movlw	0
  4988  02B8  00A7               	movwf	(applicationControlRGB@RedPulse+1)^(0+128)
  4989  02B9  3000               	movlw	0
  4990  02BA  00A6               	movwf	applicationControlRGB@RedPulse^(0+128)
  4991  02BB  3000               	movlw	0
  4992  02BC  00AD               	movwf	(applicationControlRGB@GreenPulse+3)^(0+128)
  4993  02BD  3000               	movlw	0
  4994  02BE  00AC               	movwf	(applicationControlRGB@GreenPulse+2)^(0+128)
  4995  02BF  3000               	movlw	0
  4996  02C0  00AB               	movwf	(applicationControlRGB@GreenPulse+1)^(0+128)
  4997  02C1  3000               	movlw	0
  4998  02C2  00AA               	movwf	applicationControlRGB@GreenPulse^(0+128)
  4999  02C3  3000               	movlw	0
  5000  02C4  00B1               	movwf	(applicationControlRGB@BluePulse+3)^(0+128)
  5001  02C5  3000               	movlw	0
  5002  02C6  00B0               	movwf	(applicationControlRGB@BluePulse+2)^(0+128)
  5003  02C7  3000               	movlw	0
  5004  02C8  00AF               	movwf	(applicationControlRGB@BluePulse+1)^(0+128)
  5005  02C9  3000               	movlw	0
  5006  02CA  00AE               	movwf	applicationControlRGB@BluePulse^(0+128)
  5007  02CB  3000               	movlw	0
  5008  02CC  00B5               	movwf	(applicationControlRGB@NeedRedPulse+3)^(0+128)
  5009  02CD  3000               	movlw	0
  5010  02CE  00B4               	movwf	(applicationControlRGB@NeedRedPulse+2)^(0+128)
  5011  02CF  3000               	movlw	0
  5012  02D0  00B3               	movwf	(applicationControlRGB@NeedRedPulse+1)^(0+128)
  5013  02D1  3000               	movlw	0
  5014  02D2  00B2               	movwf	applicationControlRGB@NeedRedPulse^(0+128)
  5015  02D3  3000               	movlw	0
  5016  02D4  00B9               	movwf	(applicationControlRGB@NeedGreenPulse+3)^(0+128)
  5017  02D5  3000               	movlw	0
  5018  02D6  00B8               	movwf	(applicationControlRGB@NeedGreenPulse+2)^(0+128)
  5019  02D7  3000               	movlw	0
  5020  02D8  00B7               	movwf	(applicationControlRGB@NeedGreenPulse+1)^(0+128)
  5021  02D9  3000               	movlw	0
  5022  02DA  00B6               	movwf	applicationControlRGB@NeedGreenPulse^(0+128)
  5023  02DB  3000               	movlw	0
  5024  02DC  00BD               	movwf	(applicationControlRGB@NeedBluePulse+3)^(0+128)
  5025  02DD  3000               	movlw	0
  5026  02DE  00BC               	movwf	(applicationControlRGB@NeedBluePulse+2)^(0+128)
  5027  02DF  3000               	movlw	0
  5028  02E0  00BB               	movwf	(applicationControlRGB@NeedBluePulse+1)^(0+128)
  5029  02E1  3000               	movlw	0
  5030  02E2  00BA               	movwf	applicationControlRGB@NeedBluePulse^(0+128)
  5031  02E3  3000               	movlw	0
  5032  02E4  00D9               	movwf	(applicationControlRGB@CompleteClock+3)^(0+128)
  5033  02E5  3000               	movlw	0
  5034  02E6  00D8               	movwf	(applicationControlRGB@CompleteClock+2)^(0+128)
  5035  02E7  30FF               	movlw	255
  5036  02E8  00D7               	movwf	(applicationControlRGB@CompleteClock+1)^(0+128)
  5037  02E9  30FF               	movlw	255
  5038  02EA  00D6               	movwf	applicationControlRGB@CompleteClock^(0+128)
  5039                           
  5040                           ;applicationcontrolRGB.h: 45: float Convert255RangeintoHundred = 2.57;
  5041  02EB  307B               	movlw	123
  5042  02EC  00DA               	movwf	applicationControlRGB@Convert255RangeintoHundred^(0+128)
  5043  02ED  3024               	movlw	36
  5044  02EE  00DB               	movwf	(applicationControlRGB@Convert255RangeintoHundred+1)^(0+128)
  5045  02EF  3040               	movlw	64
  5046  02F0  00DC               	movwf	(applicationControlRGB@Convert255RangeintoHundred+2)^(0+128)
  5047                           
  5048                           ;applicationcontrolRGB.h: 46: int ConvertIntoTenMsRangeFactor = 10;
  5049  02F1  300A               	movlw	10
  5050  02F2  00E0               	movwf	applicationControlRGB@ConvertIntoTenMsRangeFactor^(0+128)
  5051  02F3  3000               	movlw	0
  5052  02F4  00E1               	movwf	(applicationControlRGB@ConvertIntoTenMsRangeFactor^(0+128)+1)
  5053                           
  5054                           ;applicationcontrolRGB.h: 47: float clockPerCycle=0.25;
  5055  02F5  3000               	movlw	0
  5056  02F6  00DD               	movwf	applicationControlRGB@clockPerCycle^(0+128)
  5057  02F7  3080               	movlw	128
  5058  02F8  00DE               	movwf	(applicationControlRGB@clockPerCycle+1)^(0+128)
  5059  02F9  303E               	movlw	62
  5060  02FA  00DF               	movwf	(applicationControlRGB@clockPerCycle+2)^(0+128)
  5061                           
  5062                           ;applicationcontrolRGB.h: 48: int remainder=0;
  5063  02FB  01A0               	clrf	applicationControlRGB@remainder^(0+128)
  5064  02FC  01A1               	clrf	(applicationControlRGB@remainder+1)^(0+128)
  5065                           
  5066                           ;applicationcontrolRGB.h: 49: char HexlevelBuffer[5];
  5067                           ;applicationcontrolRGB.h: 50: int start=0;
  5068  02FD  01A2               	clrf	applicationControlRGB@start^(0+128)
  5069  02FE  01A3               	clrf	(applicationControlRGB@start+1)^(0+128)
  5070                           
  5071                           ;applicationcontrolRGB.h: 51: int end = strlen(HexlevelBuffer)-1;
  5072  02FF  30D1               	movlw	low applicationControlRGB@HexlevelBuffer
  5073  0300  0020               	movlb	0	; select bank0
  5074  0301  00A0               	movwf	strlen@s
  5075  0302  3000               	movlw	high applicationControlRGB@HexlevelBuffer
  5076  0303  00A1               	movwf	strlen@s+1
  5077  0304  3193  233A  3181   	fcall	_strlen
  5078  0307  0020               	movlb	0	; select bank0
  5079  0308  0820               	movf	?_strlen,w
  5080  0309  3EFF               	addlw	255
  5081  030A  0021               	movlb	1	; select bank1
  5082  030B  00A4               	movwf	applicationControlRGB@end^(0+128)
  5083  030C  30FF               	movlw	255
  5084  030D  0020               	movlb	0	; select bank0
  5085  030E  3D21               	addwfc	?_strlen+1,w
  5086  030F  0021               	movlb	1	; select bank1
  5087  0310  00A5               	movwf	(applicationControlRGB@end+1)^(0+128)
  5088                           
  5089                           ;applicationcontrolRGB.h: 52: char strRedH[3],strRedL[3];
  5090                           ;applicationcontrolRGB.h: 53: char strGreenH[3],strGreenL[3];
  5091                           ;applicationcontrolRGB.h: 54: char strBlueH[3],strBlueL[3];
  5092                           ;applicationcontrolRGB.h: 56: IntegerSwitchNumber = atoi(SwitchNumberstr);
  5093  0311  0020               	movlb	0	; select bank0
  5094  0312  084C               	movf	applicationControlRGB@SwitchNumberstr,w
  5095  0313  00A6               	movwf	atoi@s
  5096  0314  39FF               	andlw	255
  5097  0315  1D03               	skipz
  5098  0316  3001               	movlw	1
  5099  0317  00A7               	movwf	atoi@s+1
  5100  0318  3197  270D  3181   	fcall	_atoi
  5101  031B  0020               	movlb	0	; select bank0
  5102  031C  0827               	movf	?_atoi+1,w
  5103  031D  0022               	movlb	2	; select bank2
  5104  031E  00B7               	movwf	(_IntegerSwitchNumber+1)^(0+256)
  5105  031F  0020               	movlb	0	; select bank0
  5106  0320  0826               	movf	?_atoi,w
  5107  0321  0022               	movlb	2	; select bank2
  5108  0322  00B6               	movwf	_IntegerSwitchNumber^(0+256)
  5109                           
  5110                           ;applicationcontrolRGB.h: 57: IntergerSwitchStatus = atoi(SwitchStatusstr);
  5111  0323  0020               	movlb	0	; select bank0
  5112  0324  084D               	movf	applicationControlRGB@SwitchStatusstr,w
  5113  0325  00A6               	movwf	atoi@s
  5114  0326  39FF               	andlw	255
  5115  0327  1D03               	skipz
  5116  0328  3001               	movlw	1
  5117  0329  00A7               	movwf	atoi@s+1
  5118  032A  3197  270D  3181   	fcall	_atoi
  5119  032D  0020               	movlb	0	; select bank0
  5120  032E  0827               	movf	?_atoi+1,w
  5121  032F  0022               	movlb	2	; select bank2
  5122  0330  00B5               	movwf	(_IntergerSwitchStatus+1)^(0+256)
  5123  0331  0020               	movlb	0	; select bank0
  5124  0332  0826               	movf	?_atoi,w
  5125  0333  0022               	movlb	2	; select bank2
  5126  0334  00B4               	movwf	_IntergerSwitchStatus^(0+256)
  5127                           
  5128                           ;applicationcontrolRGB.h: 58: IntergerRedColorIntensity = atoi(RedColorIntensitystr);
  5129  0335  0020               	movlb	0	; select bank0
  5130  0336  084E               	movf	applicationControlRGB@RedColorIntensitystr,w
  5131  0337  00A6               	movwf	atoi@s
  5132  0338  39FF               	andlw	255
  5133  0339  1D03               	skipz
  5134  033A  3002               	movlw	2
  5135  033B  00A7               	movwf	atoi@s+1
  5136  033C  3197  270D  3181   	fcall	_atoi
  5137  033F  0020               	movlb	0	; select bank0
  5138  0340  0827               	movf	?_atoi+1,w
  5139  0341  0021               	movlb	1	; select bank1
  5140  0342  00EE               	movwf	(_IntergerRedColorIntensity+1)^(0+128)
  5141  0343  0020               	movlb	0	; select bank0
  5142  0344  0826               	movf	?_atoi,w
  5143  0345  0021               	movlb	1	; select bank1
  5144  0346  00ED               	movwf	_IntergerRedColorIntensity^(0+128)
  5145                           
  5146                           ;applicationcontrolRGB.h: 59: IntegerBlueColorIntensity = atoi(BlueColorIntensitystr);
  5147  0347  0020               	movlb	0	; select bank0
  5148  0348  0850               	movf	applicationControlRGB@BlueColorIntensitystr,w
  5149  0349  00A6               	movwf	atoi@s
  5150  034A  39FF               	andlw	255
  5151  034B  1D03               	skipz
  5152  034C  3002               	movlw	2
  5153  034D  00A7               	movwf	atoi@s+1
  5154  034E  3197  270D  3181   	fcall	_atoi
  5155  0351  0020               	movlb	0	; select bank0
  5156  0352  0827               	movf	?_atoi+1,w
  5157  0353  00F1               	movwf	_IntegerBlueColorIntensity+1
  5158  0354  0826               	movf	?_atoi,w
  5159  0355  00F0               	movwf	_IntegerBlueColorIntensity
  5160                           
  5161                           ;applicationcontrolRGB.h: 60: IntegerGreenColorIntensity = atoi(GreenColorIntensitystr);
  5162  0356  084F               	movf	applicationControlRGB@GreenColorIntensitystr,w
  5163  0357  00A6               	movwf	atoi@s
  5164  0358  39FF               	andlw	255
  5165  0359  1D03               	skipz
  5166  035A  3002               	movlw	2
  5167  035B  00A7               	movwf	atoi@s+1
  5168  035C  3197  270D  3181   	fcall	_atoi
  5169  035F  0020               	movlb	0	; select bank0
  5170  0360  0827               	movf	?_atoi+1,w
  5171  0361  0021               	movlb	1	; select bank1
  5172  0362  00EC               	movwf	(_IntegerGreenColorIntensity+1)^(0+128)
  5173  0363  0020               	movlb	0	; select bank0
  5174  0364  0826               	movf	?_atoi,w
  5175  0365  0021               	movlb	1	; select bank1
  5176  0366  00EB               	movwf	_IntegerGreenColorIntensity^(0+128)
  5177                           
  5178                           ;applicationcontrolRGB.h: 61: IntegerAllColorIntensity = atoi(Allcolorstr);
  5179  0367  0020               	movlb	0	; select bank0
  5180  0368  0852               	movf	applicationControlRGB@Allcolorstr,w
  5181  0369  00A6               	movwf	atoi@s
  5182  036A  39FF               	andlw	255
  5183  036B  1D03               	skipz
  5184  036C  3002               	movlw	2
  5185  036D  00A7               	movwf	atoi@s+1
  5186  036E  3197  270D  3181   	fcall	_atoi
  5187  0371  0020               	movlb	0	; select bank0
  5188  0372  0827               	movf	?_atoi+1,w
  5189  0373  0023               	movlb	3	; select bank3
  5190  0374  00D3               	movwf	(_IntegerAllColorIntensity+1)^(0+384)
  5191  0375  0020               	movlb	0	; select bank0
  5192  0376  0826               	movf	?_atoi,w
  5193  0377  0023               	movlb	3	; select bank3
  5194  0378  00D2               	movwf	_IntegerAllColorIntensity^(0+384)
  5195                           
  5196                           ;applicationcontrolRGB.h: 62: IntegerChildLock = atoi(ChildLockstr);
  5197  0379  0020               	movlb	0	; select bank0
  5198  037A  0851               	movf	applicationControlRGB@ChildLockstr,w
  5199  037B  00A6               	movwf	atoi@s
  5200  037C  39FF               	andlw	255
  5201  037D  1D03               	skipz
  5202  037E  3001               	movlw	1
  5203  037F  00A7               	movwf	atoi@s+1
  5204  0380  3197  270D  3181   	fcall	_atoi
  5205  0383  0020               	movlb	0	; select bank0
  5206  0384  0827               	movf	?_atoi+1,w
  5207  0385  0022               	movlb	2	; select bank2
  5208  0386  00B3               	movwf	(_IntegerChildLock+1)^(0+256)
  5209  0387  0020               	movlb	0	; select bank0
  5210  0388  0826               	movf	?_atoi,w
  5211  0389  0022               	movlb	2	; select bank2
  5212  038A  00B2               	movwf	_IntegerChildLock^(0+256)
  5213                           
  5214                           ;applicationcontrolRGB.h: 66: ConvertIntToTimeInMicrosecRed = (IntergerRedColorIntensity
      +                          /Convert255RangeintoHundred);
  5215  038B  0021               	movlb	1	; select bank1
  5216  038C  085A               	movf	applicationControlRGB@Convert255RangeintoHundred^(0+128),w
  5217  038D  0020               	movlb	0	; select bank0
  5218  038E  00AE               	movwf	___ftdiv@f2
  5219  038F  0021               	movlb	1	; select bank1
  5220  0390  085B               	movf	(applicationControlRGB@Convert255RangeintoHundred+1)^(0+128),w
  5221  0391  0020               	movlb	0	; select bank0
  5222  0392  00AF               	movwf	___ftdiv@f2+1
  5223  0393  0021               	movlb	1	; select bank1
  5224  0394  085C               	movf	(applicationControlRGB@Convert255RangeintoHundred+2)^(0+128),w
  5225  0395  0020               	movlb	0	; select bank0
  5226  0396  00B0               	movwf	___ftdiv@f2+2
  5227  0397  0021               	movlb	1	; select bank1
  5228  0398  086E               	movf	(_IntergerRedColorIntensity+1)^(0+128),w
  5229  0399  0020               	movlb	0	; select bank0
  5230  039A  00A9               	movwf	___lwtoft@c+1
  5231  039B  0021               	movlb	1	; select bank1
  5232  039C  086D               	movf	_IntergerRedColorIntensity^(0+128),w
  5233  039D  0020               	movlb	0	; select bank0
  5234  039E  00A8               	movwf	___lwtoft@c
  5235  039F  3192  2231  3181   	fcall	___lwtoft
  5236  03A2  0020               	movlb	0	; select bank0
  5237  03A3  0828               	movf	?___lwtoft,w
  5238  03A4  00B1               	movwf	___ftdiv@f1
  5239  03A5  0829               	movf	?___lwtoft+1,w
  5240  03A6  00B2               	movwf	___ftdiv@f1+1
  5241  03A7  082A               	movf	?___lwtoft+2,w
  5242  03A8  00B3               	movwf	___ftdiv@f1+2
  5243  03A9  3188  2003  3181   	fcall	___ftdiv
  5244  03AC  0020               	movlb	0	; select bank0
  5245  03AD  082E               	movf	?___ftdiv,w
  5246  03AE  0021               	movlb	1	; select bank1
  5247  03AF  00E2               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128)
  5248  03B0  0020               	movlb	0	; select bank0
  5249  03B1  082F               	movf	?___ftdiv+1,w
  5250  03B2  0021               	movlb	1	; select bank1
  5251  03B3  00E3               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128)
  5252  03B4  0020               	movlb	0	; select bank0
  5253  03B5  0830               	movf	?___ftdiv+2,w
  5254  03B6  0021               	movlb	1	; select bank1
  5255  03B7  00E4               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128)
  5256                           
  5257                           ;applicationcontrolRGB.h: 67: ConvertIntToTimeInMicrosecRed = (ConvertIntToTimeInMicrose
      +                          cRed/ConvertIntoTenMsRangeFactor);
  5258  03B8  0861               	movf	(applicationControlRGB@ConvertIntoTenMsRangeFactor+1)^(0+128),w
  5259  03B9  0020               	movlb	0	; select bank0
  5260  03BA  00A9               	movwf	___awtoft@c+1
  5261  03BB  0021               	movlb	1	; select bank1
  5262  03BC  0860               	movf	applicationControlRGB@ConvertIntoTenMsRangeFactor^(0+128),w
  5263  03BD  0020               	movlb	0	; select bank0
  5264  03BE  00A8               	movwf	___awtoft@c
  5265  03BF  3193  23B8  3181   	fcall	___awtoft
  5266  03C2  0020               	movlb	0	; select bank0
  5267  03C3  0828               	movf	?___awtoft,w
  5268  03C4  00AE               	movwf	___ftdiv@f2
  5269  03C5  0829               	movf	?___awtoft+1,w
  5270  03C6  00AF               	movwf	___ftdiv@f2+1
  5271  03C7  082A               	movf	?___awtoft+2,w
  5272  03C8  00B0               	movwf	___ftdiv@f2+2
  5273  03C9  0021               	movlb	1	; select bank1
  5274  03CA  0862               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128),w
  5275  03CB  0020               	movlb	0	; select bank0
  5276  03CC  00B1               	movwf	___ftdiv@f1
  5277  03CD  0021               	movlb	1	; select bank1
  5278  03CE  0863               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128),w
  5279  03CF  0020               	movlb	0	; select bank0
  5280  03D0  00B2               	movwf	___ftdiv@f1+1
  5281  03D1  0021               	movlb	1	; select bank1
  5282  03D2  0864               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128),w
  5283  03D3  0020               	movlb	0	; select bank0
  5284  03D4  00B3               	movwf	___ftdiv@f1+2
  5285  03D5  3188  2003  3181   	fcall	___ftdiv
  5286  03D8  0020               	movlb	0	; select bank0
  5287  03D9  082E               	movf	?___ftdiv,w
  5288  03DA  0021               	movlb	1	; select bank1
  5289  03DB  00E2               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128)
  5290  03DC  0020               	movlb	0	; select bank0
  5291  03DD  082F               	movf	?___ftdiv+1,w
  5292  03DE  0021               	movlb	1	; select bank1
  5293  03DF  00E3               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128)
  5294  03E0  0020               	movlb	0	; select bank0
  5295  03E1  0830               	movf	?___ftdiv+2,w
  5296  03E2  0021               	movlb	1	; select bank1
  5297  03E3  00E4               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128)
  5298                           
  5299                           ;applicationcontrolRGB.h: 68: ConvertIntToTimeInMicrosecRed = (ConvertIntToTimeInMicrose
      +                          cRed*1000);
  5300  03E4  3000               	movlw	0
  5301  03E5  0020               	movlb	0	; select bank0
  5302  03E6  00A8               	movwf	___ftmul@f1
  5303  03E7  307A               	movlw	122
  5304  03E8  00A9               	movwf	___ftmul@f1+1
  5305  03E9  3044               	movlw	68
  5306  03EA  00AA               	movwf	___ftmul@f1+2
  5307  03EB  0021               	movlb	1	; select bank1
  5308  03EC  0862               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128),w
  5309  03ED  0020               	movlb	0	; select bank0
  5310  03EE  00AB               	movwf	___ftmul@f2
  5311  03EF  0021               	movlb	1	; select bank1
  5312  03F0  0863               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128),w
  5313  03F1  0020               	movlb	0	; select bank0
  5314  03F2  00AC               	movwf	___ftmul@f2+1
  5315  03F3  0021               	movlb	1	; select bank1
  5316  03F4  0864               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128),w
  5317  03F5  0020               	movlb	0	; select bank0
  5318  03F6  00AD               	movwf	___ftmul@f2+2
  5319  03F7  3189  215F  3181   	fcall	___ftmul
  5320  03FA  0020               	movlb	0	; select bank0
  5321  03FB  0828               	movf	?___ftmul,w
  5322  03FC  0021               	movlb	1	; select bank1
  5323  03FD  00E2               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128)
  5324  03FE  0020               	movlb	0	; select bank0
  5325  03FF  0829               	movf	?___ftmul+1,w
  5326  0400  0021               	movlb	1	; select bank1
  5327  0401  00E3               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128)
  5328  0402  0020               	movlb	0	; select bank0
  5329  0403  082A               	movf	?___ftmul+2,w
  5330  0404  0021               	movlb	1	; select bank1
  5331  0405  00E4               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128)
  5332                           
  5333                           ;applicationcontrolRGB.h: 69: RedPulse = (int)(ConvertIntToTimeInMicrosecRed/clockPerCyc
      +                          le);
  5334  0406  0862               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128),w
  5335  0407  0020               	movlb	0	; select bank0
  5336  0408  00B1               	movwf	___ftdiv@f1
  5337  0409  0021               	movlb	1	; select bank1
  5338  040A  0863               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128),w
  5339  040B  0020               	movlb	0	; select bank0
  5340  040C  00B2               	movwf	___ftdiv@f1+1
  5341  040D  0021               	movlb	1	; select bank1
  5342  040E  0864               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128),w
  5343  040F  0020               	movlb	0	; select bank0
  5344  0410  00B3               	movwf	___ftdiv@f1+2
  5345  0411  0021               	movlb	1	; select bank1
  5346  0412  085D               	movf	applicationControlRGB@clockPerCycle^(0+128),w
  5347  0413  0020               	movlb	0	; select bank0
  5348  0414  00AE               	movwf	___ftdiv@f2
  5349  0415  0021               	movlb	1	; select bank1
  5350  0416  085E               	movf	(applicationControlRGB@clockPerCycle+1)^(0+128),w
  5351  0417  0020               	movlb	0	; select bank0
  5352  0418  00AF               	movwf	___ftdiv@f2+1
  5353  0419  0021               	movlb	1	; select bank1
  5354  041A  085F               	movf	(applicationControlRGB@clockPerCycle+2)^(0+128),w
  5355  041B  0020               	movlb	0	; select bank0
  5356  041C  00B0               	movwf	___ftdiv@f2+2
  5357  041D  3188  2003  3181   	fcall	___ftdiv
  5358  0420  0020               	movlb	0	; select bank0
  5359  0421  082E               	movf	?___ftdiv,w
  5360  0422  00BE               	movwf	___fttol@f1
  5361  0423  082F               	movf	?___ftdiv+1,w
  5362  0424  00BF               	movwf	___fttol@f1+1
  5363  0425  0830               	movf	?___ftdiv+2,w
  5364  0426  00C0               	movwf	___fttol@f1+2
  5365  0427  3187  276E  3181   	fcall	___fttol
  5366  042A  0020               	movlb	0	; select bank0
  5367  042B  083E               	movf	?___fttol,w
  5368  042C  0021               	movlb	1	; select bank1
  5369  042D  00A6               	movwf	applicationControlRGB@RedPulse^(0+128)
  5370  042E  0020               	movlb	0	; select bank0
  5371  042F  083F               	movf	?___fttol+1,w
  5372  0430  0021               	movlb	1	; select bank1
  5373  0431  00A7               	movwf	(applicationControlRGB@RedPulse+1)^(0+128)
  5374  0432  0D89               	rlf	9,f
  5375  0433  3B89               	subwfb	9,f
  5376  0434  0989               	comf	9,f
  5377  0435  00A8               	movwf	(applicationControlRGB@RedPulse+2)^(0+128)
  5378  0436  00A9               	movwf	(applicationControlRGB@RedPulse+3)^(0+128)
  5379                           
  5380                           ;applicationcontrolRGB.h: 70: NeedRedPulse = abs(CompleteClock - RedPulse);
  5381  0437  0926               	comf	applicationControlRGB@RedPulse^(0+128),w
  5382  0438  0020               	movlb	0	; select bank0
  5383  0439  00D3               	movwf	??_applicationControlRGB
  5384  043A  0021               	movlb	1	; select bank1
  5385  043B  0927               	comf	(applicationControlRGB@RedPulse+1)^(0+128),w
  5386  043C  0020               	movlb	0	; select bank0
  5387  043D  00D4               	movwf	??_applicationControlRGB+1
  5388  043E  0AD3               	incf	??_applicationControlRGB,f
  5389  043F  1903               	skipnz
  5390  0440  0AD4               	incf	??_applicationControlRGB+1,f
  5391  0441  0021               	movlb	1	; select bank1
  5392  0442  0856               	movf	applicationControlRGB@CompleteClock^(0+128),w
  5393  0443  0020               	movlb	0	; select bank0
  5394  0444  0753               	addwf	??_applicationControlRGB,w
  5395  0445  00A0               	movwf	abs@a
  5396  0446  0021               	movlb	1	; select bank1
  5397  0447  0857               	movf	(applicationControlRGB@CompleteClock+1)^(0+128),w
  5398  0448  0020               	movlb	0	; select bank0
  5399  0449  3D54               	addwfc	??_applicationControlRGB+1,w
  5400  044A  00A1               	movwf	abs@a+1
  5401  044B  3191  21D9  3181   	fcall	_abs
  5402  044E  0020               	movlb	0	; select bank0
  5403  044F  0820               	movf	?_abs,w
  5404  0450  0021               	movlb	1	; select bank1
  5405  0451  00B2               	movwf	applicationControlRGB@NeedRedPulse^(0+128)
  5406  0452  0020               	movlb	0	; select bank0
  5407  0453  0821               	movf	?_abs+1,w
  5408  0454  0021               	movlb	1	; select bank1
  5409  0455  00B3               	movwf	(applicationControlRGB@NeedRedPulse+1)^(0+128)
  5410  0456  0D89               	rlf	9,f
  5411  0457  3B89               	subwfb	9,f
  5412  0458  0989               	comf	9,f
  5413  0459  00B4               	movwf	(applicationControlRGB@NeedRedPulse+2)^(0+128)
  5414  045A  00B5               	movwf	(applicationControlRGB@NeedRedPulse+3)^(0+128)
  5415                           
  5416                           ;applicationcontrolRGB.h: 74: ConvertIntToTimeInMicrosecGreen = (IntegerGreenColorIntens
      +                          ity/Convert255RangeintoHundred);
  5417  045B  085A               	movf	applicationControlRGB@Convert255RangeintoHundred^(0+128),w
  5418  045C  0020               	movlb	0	; select bank0
  5419  045D  00AE               	movwf	___ftdiv@f2
  5420  045E  0021               	movlb	1	; select bank1
  5421  045F  085B               	movf	(applicationControlRGB@Convert255RangeintoHundred+1)^(0+128),w
  5422  0460  0020               	movlb	0	; select bank0
  5423  0461  00AF               	movwf	___ftdiv@f2+1
  5424  0462  0021               	movlb	1	; select bank1
  5425  0463  085C               	movf	(applicationControlRGB@Convert255RangeintoHundred+2)^(0+128),w
  5426  0464  0020               	movlb	0	; select bank0
  5427  0465  00B0               	movwf	___ftdiv@f2+2
  5428  0466  0021               	movlb	1	; select bank1
  5429  0467  086C               	movf	(_IntegerGreenColorIntensity+1)^(0+128),w
  5430  0468  0020               	movlb	0	; select bank0
  5431  0469  00A9               	movwf	___lwtoft@c+1
  5432  046A  0021               	movlb	1	; select bank1
  5433  046B  086B               	movf	_IntegerGreenColorIntensity^(0+128),w
  5434  046C  0020               	movlb	0	; select bank0
  5435  046D  00A8               	movwf	___lwtoft@c
  5436  046E  3192  2231  3181   	fcall	___lwtoft
  5437  0471  0020               	movlb	0	; select bank0
  5438  0472  0828               	movf	?___lwtoft,w
  5439  0473  00B1               	movwf	___ftdiv@f1
  5440  0474  0829               	movf	?___lwtoft+1,w
  5441  0475  00B2               	movwf	___ftdiv@f1+1
  5442  0476  082A               	movf	?___lwtoft+2,w
  5443  0477  00B3               	movwf	___ftdiv@f1+2
  5444  0478  3188  2003  3181   	fcall	___ftdiv
  5445  047B  0020               	movlb	0	; select bank0
  5446  047C  082E               	movf	?___ftdiv,w
  5447  047D  0021               	movlb	1	; select bank1
  5448  047E  00E5               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128)
  5449  047F  0020               	movlb	0	; select bank0
  5450  0480  082F               	movf	?___ftdiv+1,w
  5451  0481  0021               	movlb	1	; select bank1
  5452  0482  00E6               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128)
  5453  0483  0020               	movlb	0	; select bank0
  5454  0484  0830               	movf	?___ftdiv+2,w
  5455  0485  0021               	movlb	1	; select bank1
  5456  0486  00E7               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128)
  5457                           
  5458                           ;applicationcontrolRGB.h: 75: ConvertIntToTimeInMicrosecGreen = (ConvertIntToTimeInMicro
      +                          secGreen/ConvertIntoTenMsRangeFactor);
  5459  0487  0861               	movf	(applicationControlRGB@ConvertIntoTenMsRangeFactor+1)^(0+128),w
  5460  0488  0020               	movlb	0	; select bank0
  5461  0489  00A9               	movwf	___awtoft@c+1
  5462  048A  0021               	movlb	1	; select bank1
  5463  048B  0860               	movf	applicationControlRGB@ConvertIntoTenMsRangeFactor^(0+128),w
  5464  048C  0020               	movlb	0	; select bank0
  5465  048D  00A8               	movwf	___awtoft@c
  5466  048E  3193  23B8  3181   	fcall	___awtoft
  5467  0491  0020               	movlb	0	; select bank0
  5468  0492  0828               	movf	?___awtoft,w
  5469  0493  00AE               	movwf	___ftdiv@f2
  5470  0494  0829               	movf	?___awtoft+1,w
  5471  0495  00AF               	movwf	___ftdiv@f2+1
  5472  0496  082A               	movf	?___awtoft+2,w
  5473  0497  00B0               	movwf	___ftdiv@f2+2
  5474  0498  0021               	movlb	1	; select bank1
  5475  0499  0865               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128),w
  5476  049A  0020               	movlb	0	; select bank0
  5477  049B  00B1               	movwf	___ftdiv@f1
  5478  049C  0021               	movlb	1	; select bank1
  5479  049D  0866               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128),w
  5480  049E  0020               	movlb	0	; select bank0
  5481  049F  00B2               	movwf	___ftdiv@f1+1
  5482  04A0  0021               	movlb	1	; select bank1
  5483  04A1  0867               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128),w
  5484  04A2  0020               	movlb	0	; select bank0
  5485  04A3  00B3               	movwf	___ftdiv@f1+2
  5486  04A4  3188  2003  3181   	fcall	___ftdiv
  5487  04A7  0020               	movlb	0	; select bank0
  5488  04A8  082E               	movf	?___ftdiv,w
  5489  04A9  0021               	movlb	1	; select bank1
  5490  04AA  00E5               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128)
  5491  04AB  0020               	movlb	0	; select bank0
  5492  04AC  082F               	movf	?___ftdiv+1,w
  5493  04AD  0021               	movlb	1	; select bank1
  5494  04AE  00E6               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128)
  5495  04AF  0020               	movlb	0	; select bank0
  5496  04B0  0830               	movf	?___ftdiv+2,w
  5497  04B1  0021               	movlb	1	; select bank1
  5498  04B2  00E7               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128)
  5499                           
  5500                           ;applicationcontrolRGB.h: 76: ConvertIntToTimeInMicrosecGreen = (ConvertIntToTimeInMicro
      +                          secGreen*1000);
  5501  04B3  3000               	movlw	0
  5502  04B4  0020               	movlb	0	; select bank0
  5503  04B5  00A8               	movwf	___ftmul@f1
  5504  04B6  307A               	movlw	122
  5505  04B7  00A9               	movwf	___ftmul@f1+1
  5506  04B8  3044               	movlw	68
  5507  04B9  00AA               	movwf	___ftmul@f1+2
  5508  04BA  0021               	movlb	1	; select bank1
  5509  04BB  0865               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128),w
  5510  04BC  0020               	movlb	0	; select bank0
  5511  04BD  00AB               	movwf	___ftmul@f2
  5512  04BE  0021               	movlb	1	; select bank1
  5513  04BF  0866               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128),w
  5514  04C0  0020               	movlb	0	; select bank0
  5515  04C1  00AC               	movwf	___ftmul@f2+1
  5516  04C2  0021               	movlb	1	; select bank1
  5517  04C3  0867               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128),w
  5518  04C4  0020               	movlb	0	; select bank0
  5519  04C5  00AD               	movwf	___ftmul@f2+2
  5520  04C6  3189  215F  3181   	fcall	___ftmul
  5521  04C9  0020               	movlb	0	; select bank0
  5522  04CA  0828               	movf	?___ftmul,w
  5523  04CB  0021               	movlb	1	; select bank1
  5524  04CC  00E5               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128)
  5525  04CD  0020               	movlb	0	; select bank0
  5526  04CE  0829               	movf	?___ftmul+1,w
  5527  04CF  0021               	movlb	1	; select bank1
  5528  04D0  00E6               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128)
  5529  04D1  0020               	movlb	0	; select bank0
  5530  04D2  082A               	movf	?___ftmul+2,w
  5531  04D3  0021               	movlb	1	; select bank1
  5532  04D4  00E7               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128)
  5533                           
  5534                           ;applicationcontrolRGB.h: 77: GreenPulse = (int)(ConvertIntToTimeInMicrosecGreen/clockPe
      +                          rCycle);
  5535  04D5  0865               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128),w
  5536  04D6  0020               	movlb	0	; select bank0
  5537  04D7  00B1               	movwf	___ftdiv@f1
  5538  04D8  0021               	movlb	1	; select bank1
  5539  04D9  0866               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128),w
  5540  04DA  0020               	movlb	0	; select bank0
  5541  04DB  00B2               	movwf	___ftdiv@f1+1
  5542  04DC  0021               	movlb	1	; select bank1
  5543  04DD  0867               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128),w
  5544  04DE  0020               	movlb	0	; select bank0
  5545  04DF  00B3               	movwf	___ftdiv@f1+2
  5546  04E0  0021               	movlb	1	; select bank1
  5547  04E1  085D               	movf	applicationControlRGB@clockPerCycle^(0+128),w
  5548  04E2  0020               	movlb	0	; select bank0
  5549  04E3  00AE               	movwf	___ftdiv@f2
  5550  04E4  0021               	movlb	1	; select bank1
  5551  04E5  085E               	movf	(applicationControlRGB@clockPerCycle+1)^(0+128),w
  5552  04E6  0020               	movlb	0	; select bank0
  5553  04E7  00AF               	movwf	___ftdiv@f2+1
  5554  04E8  0021               	movlb	1	; select bank1
  5555  04E9  085F               	movf	(applicationControlRGB@clockPerCycle+2)^(0+128),w
  5556  04EA  0020               	movlb	0	; select bank0
  5557  04EB  00B0               	movwf	___ftdiv@f2+2
  5558  04EC  3188  2003  3181   	fcall	___ftdiv
  5559  04EF  0020               	movlb	0	; select bank0
  5560  04F0  082E               	movf	?___ftdiv,w
  5561  04F1  00BE               	movwf	___fttol@f1
  5562  04F2  082F               	movf	?___ftdiv+1,w
  5563  04F3  00BF               	movwf	___fttol@f1+1
  5564  04F4  0830               	movf	?___ftdiv+2,w
  5565  04F5  00C0               	movwf	___fttol@f1+2
  5566  04F6  3187  276E  3181   	fcall	___fttol
  5567  04F9  0020               	movlb	0	; select bank0
  5568  04FA  083E               	movf	?___fttol,w
  5569  04FB  0021               	movlb	1	; select bank1
  5570  04FC  00AA               	movwf	applicationControlRGB@GreenPulse^(0+128)
  5571  04FD  0020               	movlb	0	; select bank0
  5572  04FE  083F               	movf	?___fttol+1,w
  5573  04FF  0021               	movlb	1	; select bank1
  5574  0500  00AB               	movwf	(applicationControlRGB@GreenPulse+1)^(0+128)
  5575  0501  0D89               	rlf	9,f
  5576  0502  3B89               	subwfb	9,f
  5577  0503  0989               	comf	9,f
  5578  0504  00AC               	movwf	(applicationControlRGB@GreenPulse+2)^(0+128)
  5579  0505  00AD               	movwf	(applicationControlRGB@GreenPulse+3)^(0+128)
  5580                           
  5581                           ;applicationcontrolRGB.h: 78: NeedGreenPulse = abs(CompleteClock - GreenPulse);
  5582  0506  092A               	comf	applicationControlRGB@GreenPulse^(0+128),w
  5583  0507  0020               	movlb	0	; select bank0
  5584  0508  00D3               	movwf	??_applicationControlRGB
  5585  0509  0021               	movlb	1	; select bank1
  5586  050A  092B               	comf	(applicationControlRGB@GreenPulse+1)^(0+128),w
  5587  050B  0020               	movlb	0	; select bank0
  5588  050C  00D4               	movwf	??_applicationControlRGB+1
  5589  050D  0AD3               	incf	??_applicationControlRGB,f
  5590  050E  1903               	skipnz
  5591  050F  0AD4               	incf	??_applicationControlRGB+1,f
  5592  0510  0021               	movlb	1	; select bank1
  5593  0511  0856               	movf	applicationControlRGB@CompleteClock^(0+128),w
  5594  0512  0020               	movlb	0	; select bank0
  5595  0513  0753               	addwf	??_applicationControlRGB,w
  5596  0514  00A0               	movwf	abs@a
  5597  0515  0021               	movlb	1	; select bank1
  5598  0516  0857               	movf	(applicationControlRGB@CompleteClock+1)^(0+128),w
  5599  0517  0020               	movlb	0	; select bank0
  5600  0518  3D54               	addwfc	??_applicationControlRGB+1,w
  5601  0519  00A1               	movwf	abs@a+1
  5602  051A  3191  21D9  3181   	fcall	_abs
  5603  051D  0020               	movlb	0	; select bank0
  5604  051E  0820               	movf	?_abs,w
  5605  051F  0021               	movlb	1	; select bank1
  5606  0520  00B6               	movwf	applicationControlRGB@NeedGreenPulse^(0+128)
  5607  0521  0020               	movlb	0	; select bank0
  5608  0522  0821               	movf	?_abs+1,w
  5609  0523  0021               	movlb	1	; select bank1
  5610  0524  00B7               	movwf	(applicationControlRGB@NeedGreenPulse+1)^(0+128)
  5611  0525  0D89               	rlf	9,f
  5612  0526  3B89               	subwfb	9,f
  5613  0527  0989               	comf	9,f
  5614  0528  00B8               	movwf	(applicationControlRGB@NeedGreenPulse+2)^(0+128)
  5615  0529  00B9               	movwf	(applicationControlRGB@NeedGreenPulse+3)^(0+128)
  5616                           
  5617                           ;applicationcontrolRGB.h: 82: ConvertIntToTimeInMicrosecBlue = (IntegerBlueColorIntensit
      +                          y/Convert255RangeintoHundred);
  5618  052A  085A               	movf	applicationControlRGB@Convert255RangeintoHundred^(0+128),w
  5619  052B  0020               	movlb	0	; select bank0
  5620  052C  00AE               	movwf	___ftdiv@f2
  5621  052D  0021               	movlb	1	; select bank1
  5622  052E  085B               	movf	(applicationControlRGB@Convert255RangeintoHundred+1)^(0+128),w
  5623  052F  0020               	movlb	0	; select bank0
  5624  0530  00AF               	movwf	___ftdiv@f2+1
  5625  0531  0021               	movlb	1	; select bank1
  5626  0532  085C               	movf	(applicationControlRGB@Convert255RangeintoHundred+2)^(0+128),w
  5627  0533  0020               	movlb	0	; select bank0
  5628  0534  00B0               	movwf	___ftdiv@f2+2
  5629  0535  0871               	movf	_IntegerBlueColorIntensity+1,w
  5630  0536  00A9               	movwf	___lwtoft@c+1
  5631  0537  0870               	movf	_IntegerBlueColorIntensity,w
  5632  0538  00A8               	movwf	___lwtoft@c
  5633  0539  3192  2231  3181   	fcall	___lwtoft
  5634  053C  0020               	movlb	0	; select bank0
  5635  053D  0828               	movf	?___lwtoft,w
  5636  053E  00B1               	movwf	___ftdiv@f1
  5637  053F  0829               	movf	?___lwtoft+1,w
  5638  0540  00B2               	movwf	___ftdiv@f1+1
  5639  0541  082A               	movf	?___lwtoft+2,w
  5640  0542  00B3               	movwf	___ftdiv@f1+2
  5641  0543  3188  2003  3181   	fcall	___ftdiv
  5642  0546  0020               	movlb	0	; select bank0
  5643  0547  082E               	movf	?___ftdiv,w
  5644  0548  0021               	movlb	1	; select bank1
  5645  0549  00E8               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128)
  5646  054A  0020               	movlb	0	; select bank0
  5647  054B  082F               	movf	?___ftdiv+1,w
  5648  054C  0021               	movlb	1	; select bank1
  5649  054D  00E9               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128)
  5650  054E  0020               	movlb	0	; select bank0
  5651  054F  0830               	movf	?___ftdiv+2,w
  5652  0550  0021               	movlb	1	; select bank1
  5653  0551  00EA               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128)
  5654                           
  5655                           ;applicationcontrolRGB.h: 83: ConvertIntToTimeInMicrosecBlue = (ConvertIntToTimeInMicros
      +                          ecBlue/ConvertIntoTenMsRangeFactor);
  5656  0552  0861               	movf	(applicationControlRGB@ConvertIntoTenMsRangeFactor+1)^(0+128),w
  5657  0553  0020               	movlb	0	; select bank0
  5658  0554  00A9               	movwf	___awtoft@c+1
  5659  0555  0021               	movlb	1	; select bank1
  5660  0556  0860               	movf	applicationControlRGB@ConvertIntoTenMsRangeFactor^(0+128),w
  5661  0557  0020               	movlb	0	; select bank0
  5662  0558  00A8               	movwf	___awtoft@c
  5663  0559  3193  23B8  3181   	fcall	___awtoft
  5664  055C  0020               	movlb	0	; select bank0
  5665  055D  0828               	movf	?___awtoft,w
  5666  055E  00AE               	movwf	___ftdiv@f2
  5667  055F  0829               	movf	?___awtoft+1,w
  5668  0560  00AF               	movwf	___ftdiv@f2+1
  5669  0561  082A               	movf	?___awtoft+2,w
  5670  0562  00B0               	movwf	___ftdiv@f2+2
  5671  0563  0021               	movlb	1	; select bank1
  5672  0564  0868               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128),w
  5673  0565  0020               	movlb	0	; select bank0
  5674  0566  00B1               	movwf	___ftdiv@f1
  5675  0567  0021               	movlb	1	; select bank1
  5676  0568  0869               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128),w
  5677  0569  0020               	movlb	0	; select bank0
  5678  056A  00B2               	movwf	___ftdiv@f1+1
  5679  056B  0021               	movlb	1	; select bank1
  5680  056C  086A               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128),w
  5681  056D  0020               	movlb	0	; select bank0
  5682  056E  00B3               	movwf	___ftdiv@f1+2
  5683  056F  3188  2003  3181   	fcall	___ftdiv
  5684  0572  0020               	movlb	0	; select bank0
  5685  0573  082E               	movf	?___ftdiv,w
  5686  0574  0021               	movlb	1	; select bank1
  5687  0575  00E8               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128)
  5688  0576  0020               	movlb	0	; select bank0
  5689  0577  082F               	movf	?___ftdiv+1,w
  5690  0578  0021               	movlb	1	; select bank1
  5691  0579  00E9               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128)
  5692  057A  0020               	movlb	0	; select bank0
  5693  057B  0830               	movf	?___ftdiv+2,w
  5694  057C  0021               	movlb	1	; select bank1
  5695  057D  00EA               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128)
  5696                           
  5697                           ;applicationcontrolRGB.h: 84: ConvertIntToTimeInMicrosecBlue = (ConvertIntToTimeInMicros
      +                          ecBlue*1000);
  5698  057E  3000               	movlw	0
  5699  057F  0020               	movlb	0	; select bank0
  5700  0580  00A8               	movwf	___ftmul@f1
  5701  0581  307A               	movlw	122
  5702  0582  00A9               	movwf	___ftmul@f1+1
  5703  0583  3044               	movlw	68
  5704  0584  00AA               	movwf	___ftmul@f1+2
  5705  0585  0021               	movlb	1	; select bank1
  5706  0586  0868               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128),w
  5707  0587  0020               	movlb	0	; select bank0
  5708  0588  00AB               	movwf	___ftmul@f2
  5709  0589  0021               	movlb	1	; select bank1
  5710  058A  0869               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128),w
  5711  058B  0020               	movlb	0	; select bank0
  5712  058C  00AC               	movwf	___ftmul@f2+1
  5713  058D  0021               	movlb	1	; select bank1
  5714  058E  086A               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128),w
  5715  058F  0020               	movlb	0	; select bank0
  5716  0590  00AD               	movwf	___ftmul@f2+2
  5717  0591  3189  215F  3181   	fcall	___ftmul
  5718  0594  0020               	movlb	0	; select bank0
  5719  0595  0828               	movf	?___ftmul,w
  5720  0596  0021               	movlb	1	; select bank1
  5721  0597  00E8               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128)
  5722  0598  0020               	movlb	0	; select bank0
  5723  0599  0829               	movf	?___ftmul+1,w
  5724  059A  0021               	movlb	1	; select bank1
  5725  059B  00E9               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128)
  5726  059C  0020               	movlb	0	; select bank0
  5727  059D  082A               	movf	?___ftmul+2,w
  5728  059E  0021               	movlb	1	; select bank1
  5729  059F  00EA               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128)
  5730                           
  5731                           ;applicationcontrolRGB.h: 85: BluePulse = (int)(ConvertIntToTimeInMicrosecBlue/clockPerC
      +                          ycle);
  5732  05A0  0868               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128),w
  5733  05A1  0020               	movlb	0	; select bank0
  5734  05A2  00B1               	movwf	___ftdiv@f1
  5735  05A3  0021               	movlb	1	; select bank1
  5736  05A4  0869               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128),w
  5737  05A5  0020               	movlb	0	; select bank0
  5738  05A6  00B2               	movwf	___ftdiv@f1+1
  5739  05A7  0021               	movlb	1	; select bank1
  5740  05A8  086A               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128),w
  5741  05A9  0020               	movlb	0	; select bank0
  5742  05AA  00B3               	movwf	___ftdiv@f1+2
  5743  05AB  0021               	movlb	1	; select bank1
  5744  05AC  085D               	movf	applicationControlRGB@clockPerCycle^(0+128),w
  5745  05AD  0020               	movlb	0	; select bank0
  5746  05AE  00AE               	movwf	___ftdiv@f2
  5747  05AF  0021               	movlb	1	; select bank1
  5748  05B0  085E               	movf	(applicationControlRGB@clockPerCycle+1)^(0+128),w
  5749  05B1  0020               	movlb	0	; select bank0
  5750  05B2  00AF               	movwf	___ftdiv@f2+1
  5751  05B3  0021               	movlb	1	; select bank1
  5752  05B4  085F               	movf	(applicationControlRGB@clockPerCycle+2)^(0+128),w
  5753  05B5  0020               	movlb	0	; select bank0
  5754  05B6  00B0               	movwf	___ftdiv@f2+2
  5755  05B7  3188  2003  3181   	fcall	___ftdiv
  5756  05BA  0020               	movlb	0	; select bank0
  5757  05BB  082E               	movf	?___ftdiv,w
  5758  05BC  00BE               	movwf	___fttol@f1
  5759  05BD  082F               	movf	?___ftdiv+1,w
  5760  05BE  00BF               	movwf	___fttol@f1+1
  5761  05BF  0830               	movf	?___ftdiv+2,w
  5762  05C0  00C0               	movwf	___fttol@f1+2
  5763  05C1  3187  276E  3181   	fcall	___fttol
  5764  05C4  0020               	movlb	0	; select bank0
  5765  05C5  083E               	movf	?___fttol,w
  5766  05C6  0021               	movlb	1	; select bank1
  5767  05C7  00AE               	movwf	applicationControlRGB@BluePulse^(0+128)
  5768  05C8  0020               	movlb	0	; select bank0
  5769  05C9  083F               	movf	?___fttol+1,w
  5770  05CA  0021               	movlb	1	; select bank1
  5771  05CB  00AF               	movwf	(applicationControlRGB@BluePulse+1)^(0+128)
  5772  05CC  0D89               	rlf	9,f
  5773  05CD  3B89               	subwfb	9,f
  5774  05CE  0989               	comf	9,f
  5775  05CF  00B0               	movwf	(applicationControlRGB@BluePulse+2)^(0+128)
  5776  05D0  00B1               	movwf	(applicationControlRGB@BluePulse+3)^(0+128)
  5777                           
  5778                           ;applicationcontrolRGB.h: 86: NeedBluePulse = abs(CompleteClock - BluePulse);
  5779  05D1  092E               	comf	applicationControlRGB@BluePulse^(0+128),w
  5780  05D2  0020               	movlb	0	; select bank0
  5781  05D3  00D3               	movwf	??_applicationControlRGB
  5782  05D4  0021               	movlb	1	; select bank1
  5783  05D5  092F               	comf	(applicationControlRGB@BluePulse+1)^(0+128),w
  5784  05D6  0020               	movlb	0	; select bank0
  5785  05D7  00D4               	movwf	??_applicationControlRGB+1
  5786  05D8  0AD3               	incf	??_applicationControlRGB,f
  5787  05D9  1903               	skipnz
  5788  05DA  0AD4               	incf	??_applicationControlRGB+1,f
  5789  05DB  0021               	movlb	1	; select bank1
  5790  05DC  0856               	movf	applicationControlRGB@CompleteClock^(0+128),w
  5791  05DD  0020               	movlb	0	; select bank0
  5792  05DE  0753               	addwf	??_applicationControlRGB,w
  5793  05DF  00A0               	movwf	abs@a
  5794  05E0  0021               	movlb	1	; select bank1
  5795  05E1  0857               	movf	(applicationControlRGB@CompleteClock+1)^(0+128),w
  5796  05E2  0020               	movlb	0	; select bank0
  5797  05E3  3D54               	addwfc	??_applicationControlRGB+1,w
  5798  05E4  00A1               	movwf	abs@a+1
  5799  05E5  3191  21D9  3181   	fcall	_abs
  5800  05E8  0020               	movlb	0	; select bank0
  5801  05E9  0820               	movf	?_abs,w
  5802  05EA  0021               	movlb	1	; select bank1
  5803  05EB  00BA               	movwf	applicationControlRGB@NeedBluePulse^(0+128)
  5804  05EC  0020               	movlb	0	; select bank0
  5805  05ED  0821               	movf	?_abs+1,w
  5806  05EE  0021               	movlb	1	; select bank1
  5807  05EF  00BB               	movwf	(applicationControlRGB@NeedBluePulse+1)^(0+128)
  5808  05F0  0D89               	rlf	9,f
  5809  05F1  3B89               	subwfb	9,f
  5810  05F2  0989               	comf	9,f
  5811  05F3  00BC               	movwf	(applicationControlRGB@NeedBluePulse+2)^(0+128)
  5812  05F4  00BD               	movwf	(applicationControlRGB@NeedBluePulse+3)^(0+128)
  5813                           
  5814                           ;applicationcontrolRGB.h: 90: sprintf(HexlevelBuffer,"%X",NeedRedPulse);
  5815  05F5  3069               	movlw	low (STR_10| (0+32768))
  5816  05F6  0020               	movlb	0	; select bank0
  5817  05F7  00A8               	movwf	sprintf@f
  5818  05F8  3098               	movlw	high (STR_10| (0+32768))
  5819  05F9  00A9               	movwf	sprintf@f+1
  5820  05FA  0021               	movlb	1	; select bank1
  5821  05FB  0835               	movf	(applicationControlRGB@NeedRedPulse+3)^(0+128),w
  5822  05FC  0020               	movlb	0	; select bank0
  5823  05FD  00AD               	movwf	?_sprintf+5
  5824  05FE  0021               	movlb	1	; select bank1
  5825  05FF  0834               	movf	(applicationControlRGB@NeedRedPulse+2)^(0+128),w
  5826  0600  0020               	movlb	0	; select bank0
  5827  0601  00AC               	movwf	?_sprintf+4
  5828  0602  0021               	movlb	1	; select bank1
  5829  0603  0833               	movf	(applicationControlRGB@NeedRedPulse+1)^(0+128),w
  5830  0604  0020               	movlb	0	; select bank0
  5831  0605  00AB               	movwf	?_sprintf+3
  5832  0606  0021               	movlb	1	; select bank1
  5833  0607  0832               	movf	applicationControlRGB@NeedRedPulse^(0+128),w
  5834  0608  0020               	movlb	0	; select bank0
  5835  0609  00AA               	movwf	?_sprintf+2
  5836  060A  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5837  060B  3188  20AC  3181   	fcall	_sprintf
  5838                           
  5839                           ;applicationcontrolRGB.h: 91: strncpy(strRedH,HexlevelBuffer,2);
  5840  060E  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5841  060F  0020               	movlb	0	; select bank0
  5842  0610  00D3               	movwf	??_applicationControlRGB
  5843  0611  0853               	movf	??_applicationControlRGB,w
  5844  0612  00A0               	movwf	strncpy@from
  5845  0613  3002               	movlw	2
  5846  0614  00A1               	movwf	strncpy@size
  5847  0615  3000               	movlw	0
  5848  0616  00A2               	movwf	strncpy@size+1
  5849  0617  30BF               	movlw	(low (applicationControlRGB@strRedH| 0))& (0+255)
  5850  0618  3194  2456  3181   	fcall	_strncpy
  5851                           
  5852                           ;applicationcontrolRGB.h: 92: strRedH[2]='\0';
  5853  061B  0021               	movlb	1	; select bank1
  5854  061C  01C1               	clrf	(applicationControlRGB@strRedH^(0+128)+2)
  5855                           
  5856                           ;applicationcontrolRGB.h: 93: strncpy(strRedL,HexlevelBuffer+2,2);
  5857  061D  30D3               	movlw	(low ((applicationControlRGB@HexlevelBuffer| 0+2)))& (0+255)
  5858  061E  0020               	movlb	0	; select bank0
  5859  061F  00D3               	movwf	??_applicationControlRGB
  5860  0620  0853               	movf	??_applicationControlRGB,w
  5861  0621  00A0               	movwf	strncpy@from
  5862  0622  3002               	movlw	2
  5863  0623  00A1               	movwf	strncpy@size
  5864  0624  3000               	movlw	0
  5865  0625  00A2               	movwf	strncpy@size+1
  5866  0626  30C2               	movlw	(low (applicationControlRGB@strRedL| 0))& (0+255)
  5867  0627  3194  2456  3181   	fcall	_strncpy
  5868                           
  5869                           ;applicationcontrolRGB.h: 94: strRedL[2]='\0';
  5870  062A  0021               	movlb	1	; select bank1
  5871  062B  01C4               	clrf	(applicationControlRGB@strRedL^(0+128)+2)
  5872                           
  5873                           ;applicationcontrolRGB.h: 95: memset(HexlevelBuffer,'0',sizeof(HexlevelBuffer));
  5874  062C  3030               	movlw	48
  5875  062D  0020               	movlb	0	; select bank0
  5876  062E  00A0               	movwf	memset@c
  5877  062F  3000               	movlw	0
  5878  0630  00A1               	movwf	memset@c+1
  5879  0631  3005               	movlw	5
  5880  0632  00A2               	movwf	memset@n
  5881  0633  3000               	movlw	0
  5882  0634  00A3               	movwf	memset@n+1
  5883  0635  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5884  0636  3192  228F  3181   	fcall	_memset
  5885                           
  5886                           ;applicationcontrolRGB.h: 97: sprintf(HexlevelBuffer,"%X",NeedGreenPulse);
  5887  0639  3069               	movlw	low (STR_10| (0+32768))
  5888  063A  0020               	movlb	0	; select bank0
  5889  063B  00A8               	movwf	sprintf@f
  5890  063C  3098               	movlw	high (STR_10| (0+32768))
  5891  063D  00A9               	movwf	sprintf@f+1
  5892  063E  0021               	movlb	1	; select bank1
  5893  063F  0839               	movf	(applicationControlRGB@NeedGreenPulse+3)^(0+128),w
  5894  0640  0020               	movlb	0	; select bank0
  5895  0641  00AD               	movwf	?_sprintf+5
  5896  0642  0021               	movlb	1	; select bank1
  5897  0643  0838               	movf	(applicationControlRGB@NeedGreenPulse+2)^(0+128),w
  5898  0644  0020               	movlb	0	; select bank0
  5899  0645  00AC               	movwf	?_sprintf+4
  5900  0646  0021               	movlb	1	; select bank1
  5901  0647  0837               	movf	(applicationControlRGB@NeedGreenPulse+1)^(0+128),w
  5902  0648  0020               	movlb	0	; select bank0
  5903  0649  00AB               	movwf	?_sprintf+3
  5904  064A  0021               	movlb	1	; select bank1
  5905  064B  0836               	movf	applicationControlRGB@NeedGreenPulse^(0+128),w
  5906  064C  0020               	movlb	0	; select bank0
  5907  064D  00AA               	movwf	?_sprintf+2
  5908  064E  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5909  064F  3188  20AC  3181   	fcall	_sprintf
  5910                           
  5911                           ;applicationcontrolRGB.h: 98: strncpy(strGreenH,HexlevelBuffer,2);
  5912  0652  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5913  0653  0020               	movlb	0	; select bank0
  5914  0654  00D3               	movwf	??_applicationControlRGB
  5915  0655  0853               	movf	??_applicationControlRGB,w
  5916  0656  00A0               	movwf	strncpy@from
  5917  0657  3002               	movlw	2
  5918  0658  00A1               	movwf	strncpy@size
  5919  0659  3000               	movlw	0
  5920  065A  00A2               	movwf	strncpy@size+1
  5921  065B  30C5               	movlw	(low (applicationControlRGB@strGreenH| 0))& (0+255)
  5922  065C  3194  2456  3181   	fcall	_strncpy
  5923                           
  5924                           ;applicationcontrolRGB.h: 99: strGreenH[2]='\0';
  5925  065F  0021               	movlb	1	; select bank1
  5926  0660  01C7               	clrf	(applicationControlRGB@strGreenH^(0+128)+2)
  5927                           
  5928                           ;applicationcontrolRGB.h: 100: strncpy(strGreenL,HexlevelBuffer+2,2);
  5929  0661  30D3               	movlw	(low ((applicationControlRGB@HexlevelBuffer| 0+2)))& (0+255)
  5930  0662  0020               	movlb	0	; select bank0
  5931  0663  00D3               	movwf	??_applicationControlRGB
  5932  0664  0853               	movf	??_applicationControlRGB,w
  5933  0665  00A0               	movwf	strncpy@from
  5934  0666  3002               	movlw	2
  5935  0667  00A1               	movwf	strncpy@size
  5936  0668  3000               	movlw	0
  5937  0669  00A2               	movwf	strncpy@size+1
  5938  066A  30C8               	movlw	(low (applicationControlRGB@strGreenL| 0))& (0+255)
  5939  066B  3194  2456  3181   	fcall	_strncpy
  5940                           
  5941                           ;applicationcontrolRGB.h: 101: strGreenL[2]='\0';
  5942  066E  0021               	movlb	1	; select bank1
  5943  066F  01CA               	clrf	(applicationControlRGB@strGreenL^(0+128)+2)
  5944                           
  5945                           ;applicationcontrolRGB.h: 102: memset(HexlevelBuffer,'0',sizeof(HexlevelBuffer));
  5946  0670  3030               	movlw	48
  5947  0671  0020               	movlb	0	; select bank0
  5948  0672  00A0               	movwf	memset@c
  5949  0673  3000               	movlw	0
  5950  0674  00A1               	movwf	memset@c+1
  5951  0675  3005               	movlw	5
  5952  0676  00A2               	movwf	memset@n
  5953  0677  3000               	movlw	0
  5954  0678  00A3               	movwf	memset@n+1
  5955  0679  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5956  067A  3192  228F  3181   	fcall	_memset
  5957                           
  5958                           ;applicationcontrolRGB.h: 105: sprintf(HexlevelBuffer,"%X",NeedBluePulse);
  5959  067D  3069               	movlw	low (STR_10| (0+32768))
  5960  067E  0020               	movlb	0	; select bank0
  5961  067F  00A8               	movwf	sprintf@f
  5962  0680  3098               	movlw	high (STR_10| (0+32768))
  5963  0681  00A9               	movwf	sprintf@f+1
  5964  0682  0021               	movlb	1	; select bank1
  5965  0683  083D               	movf	(applicationControlRGB@NeedBluePulse+3)^(0+128),w
  5966  0684  0020               	movlb	0	; select bank0
  5967  0685  00AD               	movwf	?_sprintf+5
  5968  0686  0021               	movlb	1	; select bank1
  5969  0687  083C               	movf	(applicationControlRGB@NeedBluePulse+2)^(0+128),w
  5970  0688  0020               	movlb	0	; select bank0
  5971  0689  00AC               	movwf	?_sprintf+4
  5972  068A  0021               	movlb	1	; select bank1
  5973  068B  083B               	movf	(applicationControlRGB@NeedBluePulse+1)^(0+128),w
  5974  068C  0020               	movlb	0	; select bank0
  5975  068D  00AB               	movwf	?_sprintf+3
  5976  068E  0021               	movlb	1	; select bank1
  5977  068F  083A               	movf	applicationControlRGB@NeedBluePulse^(0+128),w
  5978  0690  0020               	movlb	0	; select bank0
  5979  0691  00AA               	movwf	?_sprintf+2
  5980  0692  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5981  0693  3188  20AC  3181   	fcall	_sprintf
  5982                           
  5983                           ;applicationcontrolRGB.h: 106: strncpy(strBlueH,HexlevelBuffer,2);
  5984  0696  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5985  0697  0020               	movlb	0	; select bank0
  5986  0698  00D3               	movwf	??_applicationControlRGB
  5987  0699  0853               	movf	??_applicationControlRGB,w
  5988  069A  00A0               	movwf	strncpy@from
  5989  069B  3002               	movlw	2
  5990  069C  00A1               	movwf	strncpy@size
  5991  069D  3000               	movlw	0
  5992  069E  00A2               	movwf	strncpy@size+1
  5993  069F  30CB               	movlw	(low (applicationControlRGB@strBlueH| 0))& (0+255)
  5994  06A0  3194  2456  3181   	fcall	_strncpy
  5995                           
  5996                           ;applicationcontrolRGB.h: 107: strBlueH[2]='\0';
  5997  06A3  0021               	movlb	1	; select bank1
  5998  06A4  01CD               	clrf	(applicationControlRGB@strBlueH^(0+128)+2)
  5999                           
  6000                           ;applicationcontrolRGB.h: 108: strncpy(strBlueL,HexlevelBuffer+2,2);
  6001  06A5  30D3               	movlw	(low ((applicationControlRGB@HexlevelBuffer| 0+2)))& (0+255)
  6002  06A6  0020               	movlb	0	; select bank0
  6003  06A7  00D3               	movwf	??_applicationControlRGB
  6004  06A8  0853               	movf	??_applicationControlRGB,w
  6005  06A9  00A0               	movwf	strncpy@from
  6006  06AA  3002               	movlw	2
  6007  06AB  00A1               	movwf	strncpy@size
  6008  06AC  3000               	movlw	0
  6009  06AD  00A2               	movwf	strncpy@size+1
  6010  06AE  30CE               	movlw	(low (applicationControlRGB@strBlueL| 0))& (0+255)
  6011  06AF  3194  2456  3181   	fcall	_strncpy
  6012                           
  6013                           ;applicationcontrolRGB.h: 109: strBlueL[2]='\0';
  6014  06B2  0021               	movlb	1	; select bank1
  6015  06B3  01D0               	clrf	(applicationControlRGB@strBlueL^(0+128)+2)
  6016                           
  6017                           ;applicationcontrolRGB.h: 110: memset(HexlevelBuffer,'0',sizeof(HexlevelBuffer));
  6018  06B4  3030               	movlw	48
  6019  06B5  0020               	movlb	0	; select bank0
  6020  06B6  00A0               	movwf	memset@c
  6021  06B7  3000               	movlw	0
  6022  06B8  00A1               	movwf	memset@c+1
  6023  06B9  3005               	movlw	5
  6024  06BA  00A2               	movwf	memset@n
  6025  06BB  3000               	movlw	0
  6026  06BC  00A3               	movwf	memset@n+1
  6027  06BD  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  6028  06BE  3192  228F  3181   	fcall	_memset
  6029                           
  6030                           ;applicationcontrolRGB.h: 114: switch(IntegerSwitchNumber)
  6031  06C1  2F62               	goto	l5488
  6032  06C2                     l5432:	
  6033                           ;applicationcontrolRGB.h: 118: case 0:
  6034                           
  6035                           ;applicationcontrolRGB.h: 117: switch(IntergerSwitchStatus){
  6036                           
  6037                           ;applicationcontrolRGB.h: 115: {
  6038                           ;applicationcontrolRGB.h: 116: case 9 :{
  6039                           
  6040                           
  6041                           ;applicationcontrolRGB.h: 119: start_PWM_Generation_For_BlueLed = start_PWM_Generation_F
      +                          or_GreenLed = start_PWM_Generation_For_RedLed = 0;
  6042  06C2  0022               	movlb	2	; select bank2
  6043  06C3  01CC               	clrf	_start_PWM_Generation_For_RedLed^(0+256)
  6044  06C4  01CD               	clrf	(_start_PWM_Generation_For_RedLed+1)^(0+256)
  6045  06C5  01CA               	clrf	_start_PWM_Generation_For_GreenLed^(0+256)
  6046  06C6  01CB               	clrf	(_start_PWM_Generation_For_GreenLed+1)^(0+256)
  6047  06C7  01C8               	clrf	_start_PWM_Generation_For_BlueLed^(0+256)
  6048  06C8  01C9               	clrf	(_start_PWM_Generation_For_BlueLed+1)^(0+256)
  6049                           
  6050                           ;applicationcontrolRGB.h: 120: PORTDbits.RD4 = 0;
  6051  06C9  0020               	movlb	0	; select bank0
  6052  06CA  120F               	bcf	15,4	;volatile
  6053                           
  6054                           ;applicationcontrolRGB.h: 121: PORTDbits.RD3 = 0;
  6055  06CB  118F               	bcf	15,3	;volatile
  6056                           
  6057                           ;applicationcontrolRGB.h: 122: PORTDbits.RD2 = 0;
  6058  06CC  110F               	bcf	15,2	;volatile
  6059                           
  6060                           ;applicationcontrolRGB.h: 123: break;
  6061  06CD  0008               	return
  6062  06CE                     l5440:	
  6063                           ;applicationcontrolRGB.h: 124: case 1:
  6064                           
  6065                           
  6066                           ;applicationcontrolRGB.h: 125: if(IntergerRedColorIntensity == 255)
  6067  06CE  0021               	movlb	1	; select bank1
  6068  06CF  0A6D               	incf	_IntergerRedColorIntensity^(0+128),w
  6069  06D0  046E               	iorwf	(_IntergerRedColorIntensity+1)^(0+128),w
  6070  06D1  1D03               	btfss	3,2
  6071  06D2  2ED6               	goto	l5444
  6072                           
  6073                           ;applicationcontrolRGB.h: 126: PORTDbits.RD4=1;
  6074  06D3  0020               	movlb	0	; select bank0
  6075  06D4  160F               	bsf	15,4	;volatile
  6076  06D5  2EFB               	goto	l5454
  6077  06D6                     l5444:	
  6078                           
  6079                           ;applicationcontrolRGB.h: 127: else if(IntergerRedColorIntensity == 0)
  6080  06D6  0021               	movlb	1	; select bank1
  6081  06D7  086D               	movf	_IntergerRedColorIntensity^(0+128),w
  6082  06D8  046E               	iorwf	(_IntergerRedColorIntensity+1)^(0+128),w
  6083  06D9  1D03               	btfss	3,2
  6084  06DA  2EDE               	goto	l5448
  6085                           
  6086                           ;applicationcontrolRGB.h: 128: PORTDbits.RD4=0;
  6087  06DB  0020               	movlb	0	; select bank0
  6088  06DC  120F               	bcf	15,4	;volatile
  6089  06DD  2EFB               	goto	l5454
  6090  06DE                     l5448:	
  6091                           
  6092                           ;applicationcontrolRGB.h: 129: else
  6093                           ;applicationcontrolRGB.h: 130: {
  6094                           ;applicationcontrolRGB.h: 131: start_PWM_Generation_For_RedLed = 1;
  6095  06DE  3001               	movlw	1
  6096  06DF  0022               	movlb	2	; select bank2
  6097  06E0  00CC               	movwf	_start_PWM_Generation_For_RedLed^(0+256)
  6098  06E1  3000               	movlw	0
  6099  06E2  00CD               	movwf	(_start_PWM_Generation_For_RedLed^(0+256)+1)
  6100                           
  6101                           ;applicationcontrolRGB.h: 132: Timer1H = hexadecimalToDecimal(strRedH);
  6102  06E3  30BF               	movlw	(low (applicationControlRGB@strRedH| 0))& (0+255)
  6103  06E4  3197  277E  3181   	fcall	_hexadecimalToDecimal
  6104  06E7  0020               	movlb	0	; select bank0
  6105  06E8  0827               	movf	?_hexadecimalToDecimal+1,w
  6106  06E9  0022               	movlb	2	; select bank2
  6107  06EA  00C7               	movwf	(_Timer1H+1)^(0+256)
  6108  06EB  0020               	movlb	0	; select bank0
  6109  06EC  0826               	movf	?_hexadecimalToDecimal,w
  6110  06ED  0022               	movlb	2	; select bank2
  6111  06EE  00C6               	movwf	_Timer1H^(0+256)
  6112                           
  6113                           ;applicationcontrolRGB.h: 133: Timer1L = hexadecimalToDecimal(strRedL);
  6114  06EF  30C2               	movlw	(low (applicationControlRGB@strRedL| 0))& (0+255)
  6115  06F0  3197  277E  3181   	fcall	_hexadecimalToDecimal
  6116  06F3  0020               	movlb	0	; select bank0
  6117  06F4  0827               	movf	?_hexadecimalToDecimal+1,w
  6118  06F5  0022               	movlb	2	; select bank2
  6119  06F6  00C5               	movwf	(_Timer1L+1)^(0+256)
  6120  06F7  0020               	movlb	0	; select bank0
  6121  06F8  0826               	movf	?_hexadecimalToDecimal,w
  6122  06F9  0022               	movlb	2	; select bank2
  6123  06FA  00C4               	movwf	_Timer1L^(0+256)
  6124  06FB                     l5454:	
  6125                           
  6126                           ;applicationcontrolRGB.h: 135: }
  6127                           ;applicationcontrolRGB.h: 136: if(IntegerGreenColorIntensity == 255)
  6128  06FB  0021               	movlb	1	; select bank1
  6129  06FC  0A6B               	incf	_IntegerGreenColorIntensity^(0+128),w
  6130  06FD  046C               	iorwf	(_IntegerGreenColorIntensity+1)^(0+128),w
  6131  06FE  1D03               	btfss	3,2
  6132  06FF  2F03               	goto	l5458
  6133                           
  6134                           ;applicationcontrolRGB.h: 137: PORTDbits.RD3=1;
  6135  0700  0020               	movlb	0	; select bank0
  6136  0701  158F               	bsf	15,3	;volatile
  6137  0702  2F28               	goto	l5468
  6138  0703                     l5458:	
  6139                           
  6140                           ;applicationcontrolRGB.h: 138: else if(IntegerGreenColorIntensity == 0)
  6141  0703  0021               	movlb	1	; select bank1
  6142  0704  086B               	movf	_IntegerGreenColorIntensity^(0+128),w
  6143  0705  046C               	iorwf	(_IntegerGreenColorIntensity+1)^(0+128),w
  6144  0706  1D03               	btfss	3,2
  6145  0707  2F0B               	goto	l5462
  6146                           
  6147                           ;applicationcontrolRGB.h: 139: PORTDbits.RD3=0;
  6148  0708  0020               	movlb	0	; select bank0
  6149  0709  118F               	bcf	15,3	;volatile
  6150  070A  2F28               	goto	l5468
  6151  070B                     l5462:	
  6152                           
  6153                           ;applicationcontrolRGB.h: 140: else
  6154                           ;applicationcontrolRGB.h: 141: {
  6155                           ;applicationcontrolRGB.h: 142: start_PWM_Generation_For_GreenLed =1;
  6156  070B  3001               	movlw	1
  6157  070C  0022               	movlb	2	; select bank2
  6158  070D  00CA               	movwf	_start_PWM_Generation_For_GreenLed^(0+256)
  6159  070E  3000               	movlw	0
  6160  070F  00CB               	movwf	(_start_PWM_Generation_For_GreenLed^(0+256)+1)
  6161                           
  6162                           ;applicationcontrolRGB.h: 143: Timer3H = hexadecimalToDecimal(strGreenH);
  6163  0710  30C5               	movlw	(low (applicationControlRGB@strGreenH| 0))& (0+255)
  6164  0711  3197  277E  3181   	fcall	_hexadecimalToDecimal
  6165  0714  0020               	movlb	0	; select bank0
  6166  0715  0827               	movf	?_hexadecimalToDecimal+1,w
  6167  0716  0022               	movlb	2	; select bank2
  6168  0717  00C3               	movwf	(_Timer3H+1)^(0+256)
  6169  0718  0020               	movlb	0	; select bank0
  6170  0719  0826               	movf	?_hexadecimalToDecimal,w
  6171  071A  0022               	movlb	2	; select bank2
  6172  071B  00C2               	movwf	_Timer3H^(0+256)
  6173                           
  6174                           ;applicationcontrolRGB.h: 144: Timer3L = hexadecimalToDecimal(strGreenL);
  6175  071C  30C8               	movlw	(low (applicationControlRGB@strGreenL| 0))& (0+255)
  6176  071D  3197  277E  3181   	fcall	_hexadecimalToDecimal
  6177  0720  0020               	movlb	0	; select bank0
  6178  0721  0827               	movf	?_hexadecimalToDecimal+1,w
  6179  0722  0022               	movlb	2	; select bank2
  6180  0723  00C1               	movwf	(_Timer3L+1)^(0+256)
  6181  0724  0020               	movlb	0	; select bank0
  6182  0725  0826               	movf	?_hexadecimalToDecimal,w
  6183  0726  0022               	movlb	2	; select bank2
  6184  0727  00C0               	movwf	_Timer3L^(0+256)
  6185  0728                     l5468:	
  6186                           
  6187                           ;applicationcontrolRGB.h: 145: }
  6188                           ;applicationcontrolRGB.h: 146: if(IntegerBlueColorIntensity == 255)
  6189  0728  0A70               	incf	_IntegerBlueColorIntensity,w
  6190  0729  0471               	iorwf	_IntegerBlueColorIntensity+1,w
  6191  072A  1D03               	btfss	3,2
  6192  072B  2F2F               	goto	l5472
  6193                           
  6194                           ;applicationcontrolRGB.h: 147: PORTDbits.RD2=1;
  6195  072C  0020               	movlb	0	; select bank0
  6196  072D  150F               	bsf	15,2	;volatile
  6197  072E  0008               	return
  6198  072F                     l5472:	
  6199                           
  6200                           ;applicationcontrolRGB.h: 148: else if(IntegerBlueColorIntensity == 0)
  6201  072F  0870               	movf	_IntegerBlueColorIntensity,w
  6202  0730  0471               	iorwf	_IntegerBlueColorIntensity+1,w
  6203  0731  1D03               	btfss	3,2
  6204  0732  2F36               	goto	l5476
  6205                           
  6206                           ;applicationcontrolRGB.h: 149: PORTDbits.RD2=0;
  6207  0733  0020               	movlb	0	; select bank0
  6208  0734  110F               	bcf	15,2	;volatile
  6209  0735  0008               	return
  6210  0736                     l5476:	
  6211                           
  6212                           ;applicationcontrolRGB.h: 150: else{
  6213                           ;applicationcontrolRGB.h: 151: start_PWM_Generation_For_BlueLed =1;
  6214  0736  3001               	movlw	1
  6215  0737  0022               	movlb	2	; select bank2
  6216  0738  00C8               	movwf	_start_PWM_Generation_For_BlueLed^(0+256)
  6217  0739  3000               	movlw	0
  6218  073A  00C9               	movwf	(_start_PWM_Generation_For_BlueLed^(0+256)+1)
  6219                           
  6220                           ;applicationcontrolRGB.h: 152: Timer5H = hexadecimalToDecimal(strBlueH);
  6221  073B  30CB               	movlw	(low (applicationControlRGB@strBlueH| 0))& (0+255)
  6222  073C  3197  277E  3181   	fcall	_hexadecimalToDecimal
  6223  073F  0020               	movlb	0	; select bank0
  6224  0740  0827               	movf	?_hexadecimalToDecimal+1,w
  6225  0741  0022               	movlb	2	; select bank2
  6226  0742  00BF               	movwf	(_Timer5H+1)^(0+256)
  6227  0743  0020               	movlb	0	; select bank0
  6228  0744  0826               	movf	?_hexadecimalToDecimal,w
  6229  0745  0022               	movlb	2	; select bank2
  6230  0746  00BE               	movwf	_Timer5H^(0+256)
  6231                           
  6232                           ;applicationcontrolRGB.h: 153: Timer5L = hexadecimalToDecimal(strBlueL);
  6233  0747  30CE               	movlw	(low (applicationControlRGB@strBlueL| 0))& (0+255)
  6234  0748  3197  277E         	fcall	_hexadecimalToDecimal
  6235  074A  0020               	movlb	0	; select bank0
  6236  074B  0827               	movf	?_hexadecimalToDecimal+1,w
  6237  074C  0022               	movlb	2	; select bank2
  6238  074D  00BD               	movwf	(_Timer5L+1)^(0+256)
  6239  074E  0020               	movlb	0	; select bank0
  6240  074F  0826               	movf	?_hexadecimalToDecimal,w
  6241  0750  0022               	movlb	2	; select bank2
  6242  0751  00BC               	movwf	_Timer5L^(0+256)
  6243                           
  6244                           ;applicationcontrolRGB.h: 158: }
  6245                           
  6246                           ;applicationcontrolRGB.h: 157: break;
  6247                           
  6248                           ;applicationcontrolRGB.h: 156: default:
  6249                           
  6250                           ;applicationcontrolRGB.h: 154: }
  6251                           ;applicationcontrolRGB.h: 155: break;
  6252  0752  0008               	return
  6253  0753                     l5484:	
  6254                           
  6255                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6256                           ; Switch size 1, requested type "space"
  6257                           ; Number of cases is 1, Range of values is 0 to 0
  6258                           ; switch strategies available:
  6259                           ; Name         Instructions Cycles
  6260                           ; simple_byte            4     3 (average)
  6261                           ; direct_byte            8     6 (fixed)
  6262                           ; jumptable            260     6 (fixed)
  6263                           ;	Chosen strategy is simple_byte
  6264  0753  0022               	movlb	2	; select bank2
  6265  0754  0835               	movf	(_IntergerSwitchStatus+1)^(0+256),w
  6266  0755  3A00               	xorlw	0	; case 0
  6267  0756  1903               	skipnz
  6268  0757  2F59               	goto	l6316
  6269  0758  2F6D               	goto	l416
  6270  0759                     l6316:	
  6271                           
  6272                           ; Switch size 1, requested type "space"
  6273                           ; Number of cases is 2, Range of values is 0 to 1
  6274                           ; switch strategies available:
  6275                           ; Name         Instructions Cycles
  6276                           ; simple_byte            7     4 (average)
  6277                           ; direct_byte           10     6 (fixed)
  6278                           ; jumptable            260     6 (fixed)
  6279                           ;	Chosen strategy is simple_byte
  6280  0759  0834               	movf	_IntergerSwitchStatus^(0+256),w
  6281  075A  3A00               	xorlw	0	; case 0
  6282  075B  1903               	skipnz
  6283  075C  2EC2               	goto	l5432
  6284  075D  3A01               	xorlw	1	; case 1
  6285  075E  1903               	skipnz
  6286  075F  2ECE               	goto	l5440
  6287  0760  2F6D               	goto	l416
  6288                           
  6289                           ;applicationcontrolRGB.h: 162: }
  6290                           ;applicationcontrolRGB.h: 169: }
  6291                           
  6292                           ;applicationcontrolRGB.h: 161: break;
  6293                           
  6294                           ;applicationcontrolRGB.h: 160: default:
  6295                           
  6296                           ;applicationcontrolRGB.h: 159: break;
  6297  0761  0008               	return
  6298  0762                     l5488:	
  6299                           
  6300                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6301                           ; Switch size 1, requested type "space"
  6302                           ; Number of cases is 1, Range of values is 0 to 0
  6303                           ; switch strategies available:
  6304                           ; Name         Instructions Cycles
  6305                           ; simple_byte            4     3 (average)
  6306                           ; direct_byte            8     6 (fixed)
  6307                           ; jumptable            260     6 (fixed)
  6308                           ;	Chosen strategy is simple_byte
  6309  0762  0022               	movlb	2	; select bank2
  6310  0763  0837               	movf	(_IntegerSwitchNumber+1)^(0+256),w
  6311  0764  3A00               	xorlw	0	; case 0
  6312  0765  1903               	skipnz
  6313  0766  2F68               	goto	l6318
  6314  0767  2F6D               	goto	l416
  6315  0768                     l6318:	
  6316                           
  6317                           ; Switch size 1, requested type "space"
  6318                           ; Number of cases is 1, Range of values is 9 to 9
  6319                           ; switch strategies available:
  6320                           ; Name         Instructions Cycles
  6321                           ; simple_byte            4     3 (average)
  6322                           ; direct_byte           11     9 (fixed)
  6323                           ; jumptable            263     9 (fixed)
  6324                           ;	Chosen strategy is simple_byte
  6325  0768  0836               	movf	_IntegerSwitchNumber^(0+256),w
  6326  0769  3A09               	xorlw	9	; case 9
  6327  076A  1903               	skipnz
  6328  076B  2F53               	goto	l5484
  6329  076C  2F6D               	goto	l416
  6330  076D                     l416:	
  6331  076D  0008               	return
  6332  076E                     __end_of_applicationControlRGB:	
  6333                           
  6334                           	psect	text9
  6335  1456                     __ptext9:	
  6336 ;; *************** function _strncpy *****************
  6337 ;; Defined at:
  6338 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strncpy.c"
  6339 ;; Parameters:    Size  Location     Type
  6340 ;;  to              1    wreg     PTR unsigned char 
  6341 ;;		 -> applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationControlRGB@strGreenL(3), applic
      +ationControlRGB@strGreenH(3), 
  6342 ;;		 -> applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), 
  6343 ;;  from            1    0[BANK0 ] PTR const unsigned char 
  6344 ;;		 -> applicationControlRGB@HexlevelBuffer(5), 
  6345 ;;  size            2    1[BANK0 ] unsigned int 
  6346 ;; Auto vars:     Size  Location     Type
  6347 ;;  to              1    5[BANK0 ] PTR unsigned char 
  6348 ;;		 -> applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationControlRGB@strGreenL(3), applic
      +ationControlRGB@strGreenH(3), 
  6349 ;;		 -> applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), 
  6350 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  6351 ;;		 -> applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationControlRGB@strGreenL(3), applic
      +ationControlRGB@strGreenH(3), 
  6352 ;;		 -> applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), 
  6353 ;; Return value:  Size  Location     Type
  6354 ;;                  1    wreg      PTR unsigned char 
  6355 ;; Registers used:
  6356 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6357 ;; Tracked objects:
  6358 ;;		On entry : 0/0
  6359 ;;		On exit  : 0/0
  6360 ;;		Unchanged: 0/0
  6361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6362 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0
  6363 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  6364 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  6365 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  6366 ;;Total ram usage:        6 bytes
  6367 ;; Hardware stack levels used:    1
  6368 ;; Hardware stack levels required when called:    2
  6369 ;; This function calls:
  6370 ;;		Nothing
  6371 ;; This function is called by:
  6372 ;;		_applicationControlRGB
  6373 ;; This function uses a non-reentrant model
  6374 ;;
  6375                           
  6376                           
  6377                           ;psect for function _strncpy
  6378  1456                     _strncpy:	
  6379                           
  6380                           ;incstack = 0
  6381                           ; Regs used in _strncpy: [wreg-fsr1h+status,2+status,0]
  6382                           ;strncpy@to stored from wreg
  6383  1456  0020               	movlb	0	; select bank0
  6384  1457  00A5               	movwf	strncpy@to
  6385  1458  0825               	movf	strncpy@to,w
  6386  1459  00A3               	movwf	??_strncpy
  6387  145A  0823               	movf	??_strncpy,w
  6388  145B  00A4               	movwf	strncpy@cp
  6389  145C                     l4940:	
  6390  145C  0821               	movf	strncpy@size,w
  6391  145D  0422               	iorwf	strncpy@size+1,w
  6392  145E  1903               	btfsc	3,2
  6393  145F  2C7A               	goto	l4946
  6394  1460  3001               	movlw	1
  6395  1461  02A1               	subwf	strncpy@size,f
  6396  1462  3000               	movlw	0
  6397  1463  3BA2               	subwfb	strncpy@size+1,f
  6398  1464  0824               	movf	strncpy@cp,w
  6399  1465  0086               	movwf	6
  6400  1466  0187               	clrf	7
  6401  1467  0AA4               	incf	strncpy@cp,f
  6402  1468  0820               	movf	strncpy@from,w
  6403  1469  0084               	movwf	4
  6404  146A  0185               	clrf	5
  6405  146B  0AA0               	incf	strncpy@from,f
  6406  146C  0800               	movf	0,w
  6407  146D  3FC0               	movwi [0]fsr1
  6408  146E  0889               	movf	9,f
  6409  146F  1903               	btfsc	3,2
  6410  1470  2C7A               	goto	l4946
  6411  1471  2C5C               	goto	l4940
  6412  1472                     l4942:	
  6413  1472  0824               	movf	strncpy@cp,w
  6414  1473  0086               	movwf	6
  6415  1474  0187               	clrf	7
  6416  1475  0181               	clrf	1
  6417  1476  3001               	movlw	1
  6418  1477  00A3               	movwf	??_strncpy
  6419  1478  0823               	movf	??_strncpy,w
  6420  1479  07A4               	addwf	strncpy@cp,f
  6421  147A                     l4946:	
  6422  147A  3001               	movlw	1
  6423  147B  02A1               	subwf	strncpy@size,f
  6424  147C  3000               	movlw	0
  6425  147D  3BA2               	subwfb	strncpy@size+1,f
  6426  147E  0A21               	incf	strncpy@size,w
  6427  147F  1D03               	skipz
  6428  1480  2C72               	goto	l4942
  6429  1481  0A22               	incf	strncpy@size+1,w
  6430  1482  1903               	btfsc	3,2
  6431  1483  0008               	return
  6432  1484  2C72               	goto	l4942
  6433  1485                     __end_of_strncpy:	
  6434                           ;	Return value of _strncpy is never used
  6435                           
  6436                           
  6437                           	psect	text10
  6438  12C6                     __ptext10:	
  6439 ;; *************** function _strcpy *****************
  6440 ;; Defined at:
  6441 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  6442 ;; Parameters:    Size  Location     Type
  6443 ;;  to              1    wreg     PTR unsigned char 
  6444 ;;		 -> sendFinalBufferToGAteway(46), 
  6445 ;;  from            1    0[BANK0 ] PTR const unsigned char 
  6446 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  6447 ;; Auto vars:     Size  Location     Type
  6448 ;;  to              1    2[BANK0 ] PTR unsigned char 
  6449 ;;		 -> sendFinalBufferToGAteway(46), 
  6450 ;;  cp              1    3[BANK0 ] PTR unsigned char 
  6451 ;;		 -> sendFinalBufferToGAteway(46), 
  6452 ;; Return value:  Size  Location     Type
  6453 ;;                  1    wreg      PTR unsigned char 
  6454 ;; Registers used:
  6455 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6456 ;; Tracked objects:
  6457 ;;		On entry : 0/0
  6458 ;;		On exit  : 0/0
  6459 ;;		Unchanged: 0/0
  6460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6461 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0
  6462 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  6463 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  6464 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  6465 ;;Total ram usage:        4 bytes
  6466 ;; Hardware stack levels used:    1
  6467 ;; Hardware stack levels required when called:    2
  6468 ;; This function calls:
  6469 ;;		Nothing
  6470 ;; This function is called by:
  6471 ;;		_applicationControlRGB
  6472 ;; This function uses a non-reentrant model
  6473 ;;
  6474                           
  6475                           
  6476                           ;psect for function _strcpy
  6477  12C6                     _strcpy:	
  6478                           
  6479                           ;incstack = 0
  6480                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0]
  6481                           ;strcpy@to stored from wreg
  6482  12C6  0020               	movlb	0	; select bank0
  6483  12C7  00A2               	movwf	strcpy@to
  6484  12C8  0822               	movf	strcpy@to,w
  6485  12C9  00A1               	movwf	??_strcpy
  6486  12CA  0821               	movf	??_strcpy,w
  6487  12CB  00A3               	movwf	strcpy@cp
  6488  12CC                     l4854:	
  6489  12CC  0823               	movf	strcpy@cp,w
  6490  12CD  0086               	movwf	6
  6491  12CE  3002               	movlw	2	; select bank4/5
  6492  12CF  0087               	movwf	7
  6493  12D0  0820               	movf	strcpy@from,w
  6494  12D1  0084               	movwf	4
  6495  12D2  3002               	movlw	2	; select bank4/5
  6496  12D3  0085               	movwf	5
  6497  12D4  0800               	movf	0,w
  6498  12D5  3FC0               	movwi [0]fsr1
  6499  12D6  0889               	movf	9,f
  6500  12D7  1903               	btfsc	3,2
  6501  12D8  0008               	return
  6502  12D9  3001               	movlw	1
  6503  12DA  00A1               	movwf	??_strcpy
  6504  12DB  0821               	movf	??_strcpy,w
  6505  12DC  07A3               	addwf	strcpy@cp,f
  6506  12DD  3001               	movlw	1
  6507  12DE  00A1               	movwf	??_strcpy
  6508  12DF  0821               	movf	??_strcpy,w
  6509  12E0  07A0               	addwf	strcpy@from,f
  6510  12E1  2ACC               	goto	l4854
  6511  12E2                     __end_of_strcpy:	
  6512                           ;	Return value of _strcpy is never used
  6513                           
  6514                           
  6515                           	psect	text11
  6516  13DA                     __ptext11:	
  6517 ;; *************** function _strcat *****************
  6518 ;; Defined at:
  6519 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcat.c"
  6520 ;; Parameters:    Size  Location     Type
  6521 ;;  to              1    wreg     PTR unsigned char 
  6522 ;;		 -> sendFinalBufferToGAteway(46), 
  6523 ;;  from            2    0[BANK0 ] PTR const unsigned char 
  6524 ;;		 -> ChildLockbuffer(2), switchstatusbuffer(2), switchNumberBuffer(3), copymainReceivedDataBuffer(32), 
  6525 ;;		 -> STR_9(2), STR_8(2), STR_7(2), STR_6(2), 
  6526 ;;		 -> STR_5(2), STR_4(2), STR_3(7), STR_2(2), 
  6527 ;;		 -> STR_1(2), NULL(0), 
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;  to              1    4[BANK0 ] PTR unsigned char 
  6530 ;;		 -> sendFinalBufferToGAteway(46), 
  6531 ;;  cp              1    3[BANK0 ] PTR unsigned char 
  6532 ;;		 -> sendFinalBufferToGAteway(46), 
  6533 ;; Return value:  Size  Location     Type
  6534 ;;                  1    wreg      PTR unsigned char 
  6535 ;; Registers used:
  6536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6537 ;; Tracked objects:
  6538 ;;		On entry : 0/0
  6539 ;;		On exit  : 0/0
  6540 ;;		Unchanged: 0/0
  6541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6542 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  6543 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  6544 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  6545 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0
  6546 ;;Total ram usage:        5 bytes
  6547 ;; Hardware stack levels used:    1
  6548 ;; Hardware stack levels required when called:    2
  6549 ;; This function calls:
  6550 ;;		Nothing
  6551 ;; This function is called by:
  6552 ;;		_applicationControlRGB
  6553 ;; This function uses a non-reentrant model
  6554 ;;
  6555                           
  6556                           
  6557                           ;psect for function _strcat
  6558  13DA                     _strcat:	
  6559                           
  6560                           ;incstack = 0
  6561                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  6562                           ;strcat@to stored from wreg
  6563  13DA  0020               	movlb	0	; select bank0
  6564  13DB  00A4               	movwf	strcat@to
  6565  13DC  0824               	movf	strcat@to,w
  6566  13DD  00A2               	movwf	??_strcat
  6567  13DE  0822               	movf	??_strcat,w
  6568  13DF  00A3               	movwf	strcat@cp
  6569  13E0                     l4860:	
  6570  13E0  0823               	movf	strcat@cp,w
  6571  13E1  0086               	movwf	6
  6572  13E2  3002               	movlw	2	; select bank4/5
  6573  13E3  0087               	movwf	7
  6574  13E4  0801               	movf	1,w
  6575  13E5  1903               	btfsc	3,2
  6576  13E6  2BF4               	goto	l4866
  6577  13E7  3001               	movlw	1
  6578  13E8  00A2               	movwf	??_strcat
  6579  13E9  0822               	movf	??_strcat,w
  6580  13EA  07A3               	addwf	strcat@cp,f
  6581  13EB  2BE0               	goto	l4860
  6582  13EC                     l4862:	
  6583  13EC  3001               	movlw	1
  6584  13ED  00A2               	movwf	??_strcat
  6585  13EE  0822               	movf	??_strcat,w
  6586  13EF  07A3               	addwf	strcat@cp,f
  6587  13F0  3001               	movlw	1
  6588  13F1  07A0               	addwf	strcat@from,f
  6589  13F2  3000               	movlw	0
  6590  13F3  3DA1               	addwfc	strcat@from+1,f
  6591  13F4                     l4866:	
  6592  13F4  0823               	movf	strcat@cp,w
  6593  13F5  0086               	movwf	6
  6594  13F6  3002               	movlw	2	; select bank4/5
  6595  13F7  0087               	movwf	7
  6596  13F8  0820               	movf	strcat@from,w
  6597  13F9  0084               	movwf	4
  6598  13FA  0821               	movf	strcat@from+1,w
  6599  13FB  0085               	movwf	5
  6600  13FC  0800               	movf	0,w	;code access
  6601  13FD  3FC0               	movwi [0]fsr1
  6602  13FE  0889               	movf	9,f
  6603  13FF  1903               	btfsc	3,2
  6604  1400  0008               	return
  6605  1401  2BEC               	goto	l4862
  6606  1402                     __end_of_strcat:	
  6607                           ;	Return value of _strcat is never used
  6608                           
  6609                           
  6610                           	psect	text12
  6611  08AC                     __ptext12:	
  6612 ;; *************** function _sprintf *****************
  6613 ;; Defined at:
  6614 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;  sp              1    wreg     PTR unsigned char 
  6617 ;;		 -> applicationControlRGB@HexlevelBuffer(5), 
  6618 ;;  f               2    8[BANK0 ] PTR const unsigned char 
  6619 ;;		 -> STR_12(3), STR_11(3), STR_10(3), 
  6620 ;; Auto vars:     Size  Location     Type
  6621 ;;  sp              1   24[BANK0 ] PTR unsigned char 
  6622 ;;		 -> applicationControlRGB@HexlevelBuffer(5), 
  6623 ;;  idx             1   19[BANK0 ] unsigned char 
  6624 ;;  tmpval          4    0        struct .
  6625 ;;  val             2   21[BANK0 ] unsigned int 
  6626 ;;  cp              2    0        PTR const unsigned char 
  6627 ;;  len             2    0        unsigned int 
  6628 ;;  c               1   25[BANK0 ] char 
  6629 ;;  prec            1   23[BANK0 ] char 
  6630 ;;  ap              1   20[BANK0 ] PTR void [1]
  6631 ;;		 -> ?_sprintf(2), 
  6632 ;;  flag            1   18[BANK0 ] unsigned char 
  6633 ;; Return value:  Size  Location     Type
  6634 ;;                  2    8[BANK0 ] int 
  6635 ;; Registers used:
  6636 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6637 ;; Tracked objects:
  6638 ;;		On entry : 0/0
  6639 ;;		On exit  : 0/0
  6640 ;;		Unchanged: 0/0
  6641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6642 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  6643 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0
  6644 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0
  6645 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0
  6646 ;;Total ram usage:       18 bytes
  6647 ;; Hardware stack levels used:    1
  6648 ;; Hardware stack levels required when called:    3
  6649 ;; This function calls:
  6650 ;;		___lwdiv
  6651 ;; This function is called by:
  6652 ;;		_applicationControlRGB
  6653 ;; This function uses a non-reentrant model
  6654 ;;
  6655                           
  6656                           
  6657                           ;psect for function _sprintf
  6658  08AC                     _sprintf:	
  6659                           
  6660                           ;incstack = 0
  6661                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6662                           ;sprintf@sp stored from wreg
  6663  08AC  0020               	movlb	0	; select bank0
  6664  08AD  00B8               	movwf	sprintf@sp
  6665                           
  6666                           ;doprnt.c: 494: va_list ap;
  6667                           ;doprnt.c: 499: signed char c;
  6668                           ;doprnt.c: 506: signed char prec;
  6669                           ;doprnt.c: 508: unsigned char flag;
  6670                           ;doprnt.c: 523: union {
  6671                           ;doprnt.c: 524: unsigned long vd;
  6672                           ;doprnt.c: 525: double integ;
  6673                           ;doprnt.c: 526: } tmpval;
  6674                           ;doprnt.c: 528: unsigned int val;
  6675                           ;doprnt.c: 529: unsigned len;
  6676                           ;doprnt.c: 530: const char * cp;
  6677                           ;doprnt.c: 533: *ap = __va_start();
  6678  08AE  302A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  6679  08AF  00AE               	movwf	??_sprintf
  6680  08B0  082E               	movf	??_sprintf,w
  6681  08B1  00B4               	movwf	sprintf@ap
  6682  08B2                     l4926:	
  6683                           ;doprnt.c: 536: while(c = *f++) {
  6684                           
  6685  08B2  0829               	movf	sprintf@f+1,w
  6686  08B3  00AF               	movwf	??_sprintf+1
  6687  08B4  0828               	movf	sprintf@f,w
  6688  08B5  00AE               	movwf	??_sprintf
  6689  08B6  0AA8               	incf	sprintf@f,f
  6690  08B7  1903               	skipnz
  6691  08B8  0AA9               	incf	sprintf@f+1,f
  6692  08B9  082E               	movf	??_sprintf,w
  6693  08BA  0084               	movwf	4
  6694  08BB  082F               	movf	??_sprintf+1,w
  6695  08BC  0085               	movwf	5
  6696  08BD  0800               	movf	0,w	;code access
  6697  08BE  00B0               	movwf	??_sprintf+2
  6698  08BF  0830               	movf	??_sprintf+2,w
  6699  08C0  00B9               	movwf	sprintf@c
  6700  08C1  0839               	movf	sprintf@c,w
  6701  08C2  1903               	btfsc	3,2
  6702  08C3  295A               	goto	l4928
  6703                           
  6704                           ;doprnt.c: 538: if(c != '%')
  6705  08C4  3025               	movlw	37
  6706  08C5  0639               	xorwf	sprintf@c,w
  6707  08C6  1903               	btfsc	3,2
  6708  08C7  28D4               	goto	l4892
  6709                           
  6710                           ;doprnt.c: 540: {
  6711                           ;doprnt.c: 541: ((*sp++ = (c)));
  6712  08C8  0839               	movf	sprintf@c,w
  6713  08C9  00AE               	movwf	??_sprintf
  6714  08CA  0838               	movf	sprintf@sp,w
  6715  08CB  0086               	movwf	6
  6716  08CC  0187               	clrf	7
  6717  08CD  082E               	movf	??_sprintf,w
  6718  08CE  0081               	movwf	1
  6719  08CF  3001               	movlw	1
  6720  08D0  00AE               	movwf	??_sprintf
  6721  08D1  082E               	movf	??_sprintf,w
  6722  08D2  07B8               	addwf	sprintf@sp,f
  6723                           
  6724                           ;doprnt.c: 542: continue;
  6725  08D3  28B2               	goto	l4926
  6726  08D4                     l4892:	
  6727                           
  6728                           ;doprnt.c: 543: }
  6729                           ;doprnt.c: 548: flag = 0;
  6730  08D4  01B2               	clrf	sprintf@flag
  6731                           
  6732                           ;doprnt.c: 822: }
  6733                           
  6734                           ;doprnt.c: 813: continue;
  6735                           
  6736                           ;doprnt.c: 802: default:
  6737                           
  6738                           ;doprnt.c: 718: case 'x':
  6739                           ;doprnt.c: 723: break;
  6740                           
  6741                           ;doprnt.c: 712: case 'X':
  6742                           
  6743                           ;doprnt.c: 638: goto alldone;
  6744                           
  6745                           ;doprnt.c: 637: case 0:
  6746                           
  6747                           ;doprnt.c: 635: switch(c = *f++) {
  6748  08D5  0829               	movf	sprintf@f+1,w
  6749  08D6  00AF               	movwf	??_sprintf+1
  6750  08D7  0828               	movf	sprintf@f,w
  6751  08D8  00AE               	movwf	??_sprintf
  6752  08D9  0AA8               	incf	sprintf@f,f
  6753  08DA  1903               	skipnz
  6754  08DB  0AA9               	incf	sprintf@f+1,f
  6755  08DC  082E               	movf	??_sprintf,w
  6756  08DD  0084               	movwf	4
  6757  08DE  082F               	movf	??_sprintf+1,w
  6758  08DF  0085               	movwf	5
  6759  08E0  0800               	movf	0,w	;code access
  6760  08E1  00B9               	movwf	sprintf@c
  6761                           
  6762                           ; Switch size 1, requested type "space"
  6763                           ; Number of cases is 3, Range of values is 0 to 120
  6764                           ; switch strategies available:
  6765                           ; Name         Instructions Cycles
  6766                           ; simple_byte           10     6 (average)
  6767                           ; direct_byte          248     6 (fixed)
  6768                           ; jumptable            260     6 (fixed)
  6769                           ;	Chosen strategy is simple_byte
  6770  08E2  3A00               	xorlw	0	; case 0
  6771  08E3  1903               	skipnz
  6772  08E4  295A               	goto	l4928
  6773  08E5  3A58               	xorlw	88	; case 88
  6774  08E6  1903               	skipnz
  6775  08E7  28EC               	goto	l4898
  6776  08E8  3A20               	xorlw	32	; case 120
  6777  08E9  1903               	skipnz
  6778  08EA  28EC               	goto	l4898
  6779  08EB  28B2               	goto	l4926
  6780  08EC                     l4898:	
  6781                           
  6782                           ;doprnt.c: 1273: {
  6783                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6784  08EC  0834               	movf	sprintf@ap,w
  6785  08ED  0086               	movwf	6
  6786  08EE  0187               	clrf	7
  6787  08EF  3F40               	moviw [0]fsr1
  6788  08F0  00B5               	movwf	sprintf@val
  6789  08F1  3F41               	moviw [1]fsr1
  6790  08F2  00B6               	movwf	sprintf@val+1
  6791  08F3  3002               	movlw	2
  6792  08F4  00AE               	movwf	??_sprintf
  6793  08F5  082E               	movf	??_sprintf,w
  6794  08F6  07B4               	addwf	sprintf@ap,f
  6795                           
  6796                           ;doprnt.c: 1287: }
  6797                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6798  08F7  01B9               	clrf	sprintf@c
  6799  08F8  0AB9               	incf	sprintf@c,f
  6800  08F9  3004               	movlw	4
  6801  08FA  0639               	xorwf	sprintf@c,w
  6802  08FB  1903               	btfsc	3,2
  6803  08FC  291C               	goto	l4914
  6804  08FD                     l4908:	
  6805                           
  6806                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6807  08FD  0839               	movf	sprintf@c,w
  6808  08FE  00AE               	movwf	??_sprintf
  6809  08FF  01AF               	clrf	??_sprintf+1
  6810  0900  35AE               	lslf	??_sprintf,f
  6811  0901  0DAF               	rlf	??_sprintf+1,f
  6812  0902  3000               	movlw	low (_hexpowers| (0+32768))
  6813  0903  072E               	addwf	??_sprintf,w
  6814  0904  0084               	movwf	4
  6815  0905  3098               	movlw	high (_hexpowers| (0+32768))
  6816  0906  3D2F               	addwfc	??_sprintf+1,w
  6817  0907  0085               	movwf	5
  6818  0908  3F00               	moviw [0]fsr0
  6819  0909  00B0               	movwf	??_sprintf+2
  6820  090A  3F01               	moviw [1]fsr0
  6821  090B  00B1               	movwf	??_sprintf+3
  6822  090C  0831               	movf	??_sprintf+3,w
  6823  090D  0236               	subwf	sprintf@val+1,w
  6824  090E  1D03               	skipz
  6825  090F  2912               	goto	u5085
  6826  0910  0830               	movf	??_sprintf+2,w
  6827  0911  0235               	subwf	sprintf@val,w
  6828  0912                     u5085:	
  6829  0912  1C03               	btfss	3,0
  6830  0913  291C               	goto	l4914
  6831                           
  6832                           ;doprnt.c: 1318: break;
  6833  0914  3001               	movlw	1
  6834  0915  00AE               	movwf	??_sprintf
  6835  0916  082E               	movf	??_sprintf,w
  6836  0917  07B9               	addwf	sprintf@c,f
  6837  0918  3004               	movlw	4
  6838  0919  0639               	xorwf	sprintf@c,w
  6839  091A  1D03               	btfss	3,2
  6840  091B  28FD               	goto	l4908
  6841  091C                     l4914:	
  6842                           
  6843                           ;doprnt.c: 1422: {
  6844                           ;doprnt.c: 1469: }
  6845                           ;doprnt.c: 1472: prec = c;
  6846  091C  0839               	movf	sprintf@c,w
  6847  091D  00AE               	movwf	??_sprintf
  6848  091E  082E               	movf	??_sprintf,w
  6849  091F  00B7               	movwf	sprintf@prec
  6850  0920                     l4924:	
  6851                           ;doprnt.c: 1474: while(prec--) {
  6852                           
  6853  0920  30FF               	movlw	255
  6854  0921  00AE               	movwf	??_sprintf
  6855  0922  082E               	movf	??_sprintf,w
  6856  0923  07B7               	addwf	sprintf@prec,f
  6857  0924  0A37               	incf	sprintf@prec,w
  6858  0925  1903               	btfsc	3,2
  6859  0926  28B2               	goto	l4926
  6860                           
  6861                           ;doprnt.c: 1478: {
  6862                           ;doprnt.c: 1499: {
  6863                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6864  0927  0837               	movf	sprintf@prec,w
  6865  0928  00AE               	movwf	??_sprintf
  6866  0929  01AF               	clrf	??_sprintf+1
  6867  092A  35AE               	lslf	??_sprintf,f
  6868  092B  0DAF               	rlf	??_sprintf+1,f
  6869  092C  3000               	movlw	low (_hexpowers| (0+32768))
  6870  092D  072E               	addwf	??_sprintf,w
  6871  092E  0084               	movwf	4
  6872  092F  3098               	movlw	high (_hexpowers| (0+32768))
  6873  0930  3D2F               	addwfc	??_sprintf+1,w
  6874  0931  0085               	movwf	5
  6875  0932  3F00               	moviw [0]fsr0
  6876  0933  00A0               	movwf	___lwdiv@divisor
  6877  0934  3F01               	moviw [1]fsr0
  6878  0935  00A1               	movwf	___lwdiv@divisor+1
  6879  0936  0836               	movf	sprintf@val+1,w
  6880  0937  00A3               	movwf	___lwdiv@dividend+1
  6881  0938  0835               	movf	sprintf@val,w
  6882  0939  00A2               	movwf	___lwdiv@dividend
  6883  093A  3195  25DE  3188   	fcall	___lwdiv
  6884  093D  0020               	movlb	0	; select bank0
  6885  093E  0820               	movf	?___lwdiv,w
  6886  093F  390F               	andlw	15
  6887  0940  00B0               	movwf	??_sprintf+2
  6888  0941  0830               	movf	??_sprintf+2,w
  6889  0942  00B3               	movwf	sprintf@idx
  6890                           
  6891                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  6892  0943  0833               	movf	sprintf@idx,w
  6893  0944  3E3E               	addlw	low (STR_21| (0+32768))
  6894  0945  0084               	movwf	4
  6895  0946  3098               	movlw	high (STR_21| (0+32768))
  6896  0947  1803               	skipnc
  6897  0948  3E01               	addlw	1
  6898  0949  0085               	movwf	5
  6899  094A  0800               	movf	0,w	;code access
  6900  094B  00AE               	movwf	??_sprintf
  6901  094C  082E               	movf	??_sprintf,w
  6902  094D  00B9               	movwf	sprintf@c
  6903                           
  6904                           ;doprnt.c: 1508: }
  6905                           ;doprnt.c: 1523: }
  6906                           ;doprnt.c: 1524: ((*sp++ = (c)));
  6907  094E  0839               	movf	sprintf@c,w
  6908  094F  00AE               	movwf	??_sprintf
  6909  0950  0838               	movf	sprintf@sp,w
  6910  0951  0086               	movwf	6
  6911  0952  0187               	clrf	7
  6912  0953  082E               	movf	??_sprintf,w
  6913  0954  0081               	movwf	1
  6914  0955  3001               	movlw	1
  6915  0956  00AE               	movwf	??_sprintf
  6916  0957  082E               	movf	??_sprintf,w
  6917  0958  07B8               	addwf	sprintf@sp,f
  6918  0959  2920               	goto	l4924
  6919  095A                     l4928:	
  6920                           ;doprnt.c: 1525: }
  6921                           ;doprnt.c: 1533: }
  6922                           ;doprnt.c: 1535: alldone:
  6923                           
  6924                           
  6925                           ;doprnt.c: 1538: *sp = 0;
  6926  095A  0838               	movf	sprintf@sp,w
  6927  095B  0086               	movwf	6
  6928  095C  0187               	clrf	7
  6929  095D  0181               	clrf	1
  6930  095E  0008               	return
  6931  095F                     __end_of_sprintf:	
  6932                           ;doprnt.c: 1540: return 0;
  6933                           ;	Return value of _sprintf is never used
  6934                           
  6935                           
  6936                           	psect	text13
  6937  15DE                     __ptext13:	
  6938 ;; *************** function ___lwdiv *****************
  6939 ;; Defined at:
  6940 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  6941 ;; Parameters:    Size  Location     Type
  6942 ;;  divisor         2    0[BANK0 ] unsigned int 
  6943 ;;  dividend        2    2[BANK0 ] unsigned int 
  6944 ;; Auto vars:     Size  Location     Type
  6945 ;;  quotient        2    6[BANK0 ] unsigned int 
  6946 ;;  counter         1    5[BANK0 ] unsigned char 
  6947 ;; Return value:  Size  Location     Type
  6948 ;;                  2    0[BANK0 ] unsigned int 
  6949 ;; Registers used:
  6950 ;;		wreg, status,2, status,0
  6951 ;; Tracked objects:
  6952 ;;		On entry : 0/0
  6953 ;;		On exit  : 0/0
  6954 ;;		Unchanged: 0/0
  6955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6956 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  6957 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  6958 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  6959 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0
  6960 ;;Total ram usage:        8 bytes
  6961 ;; Hardware stack levels used:    1
  6962 ;; Hardware stack levels required when called:    2
  6963 ;; This function calls:
  6964 ;;		Nothing
  6965 ;; This function is called by:
  6966 ;;		_sprintf
  6967 ;; This function uses a non-reentrant model
  6968 ;;
  6969                           
  6970                           
  6971                           ;psect for function ___lwdiv
  6972  15DE                     ___lwdiv:	
  6973                           
  6974                           ;incstack = 0
  6975                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6976  15DE  0020               	movlb	0	; select bank0
  6977  15DF  01A6               	clrf	___lwdiv@quotient
  6978  15E0  01A7               	clrf	___lwdiv@quotient+1
  6979  15E1  0820               	movf	___lwdiv@divisor,w
  6980  15E2  0421               	iorwf	___lwdiv@divisor+1,w
  6981  15E3  1903               	btfsc	3,2
  6982  15E4  2E0E               	goto	l4800
  6983  15E5  01A5               	clrf	___lwdiv@counter
  6984  15E6  0AA5               	incf	___lwdiv@counter,f
  6985  15E7                     l4788:	
  6986  15E7  1BA1               	btfsc	___lwdiv@divisor+1,7
  6987  15E8  2DF3               	goto	l4790
  6988  15E9  3001               	movlw	1
  6989  15EA                     u4865:	
  6990  15EA  35A0               	lslf	___lwdiv@divisor,f
  6991  15EB  0DA1               	rlf	___lwdiv@divisor+1,f
  6992  15EC  0B89               	decfsz	9,f
  6993  15ED  2DEA               	goto	u4865
  6994  15EE  3001               	movlw	1
  6995  15EF  00A4               	movwf	??___lwdiv
  6996  15F0  0824               	movf	??___lwdiv,w
  6997  15F1  07A5               	addwf	___lwdiv@counter,f
  6998  15F2  2DE7               	goto	l4788
  6999  15F3                     l4790:	
  7000  15F3  3001               	movlw	1
  7001  15F4                     u4885:	
  7002  15F4  35A6               	lslf	___lwdiv@quotient,f
  7003  15F5  0DA7               	rlf	___lwdiv@quotient+1,f
  7004  15F6  0B89               	decfsz	9,f
  7005  15F7  2DF4               	goto	u4885
  7006  15F8  0821               	movf	___lwdiv@divisor+1,w
  7007  15F9  0223               	subwf	___lwdiv@dividend+1,w
  7008  15FA  1D03               	skipz
  7009  15FB  2DFE               	goto	u4895
  7010  15FC  0820               	movf	___lwdiv@divisor,w
  7011  15FD  0222               	subwf	___lwdiv@dividend,w
  7012  15FE                     u4895:	
  7013  15FE  1C03               	skipc
  7014  15FF  2E05               	goto	l4796
  7015  1600  0820               	movf	___lwdiv@divisor,w
  7016  1601  02A2               	subwf	___lwdiv@dividend,f
  7017  1602  0821               	movf	___lwdiv@divisor+1,w
  7018  1603  3BA3               	subwfb	___lwdiv@dividend+1,f
  7019  1604  1426               	bsf	___lwdiv@quotient,0
  7020  1605                     l4796:	
  7021  1605  3001               	movlw	1
  7022  1606                     u4905:	
  7023  1606  36A1               	lsrf	___lwdiv@divisor+1,f
  7024  1607  0CA0               	rrf	___lwdiv@divisor,f
  7025  1608  0B89               	decfsz	9,f
  7026  1609  2E06               	goto	u4905
  7027  160A  3001               	movlw	1
  7028  160B  02A5               	subwf	___lwdiv@counter,f
  7029  160C  1D03               	btfss	3,2
  7030  160D  2DF3               	goto	l4790
  7031  160E                     l4800:	
  7032  160E  0827               	movf	___lwdiv@quotient+1,w
  7033  160F  00A1               	movwf	?___lwdiv+1
  7034  1610  0826               	movf	___lwdiv@quotient,w
  7035  1611  00A0               	movwf	?___lwdiv
  7036  1612  0008               	return
  7037  1613                     __end_of___lwdiv:	
  7038                           
  7039                           	psect	text14
  7040  1359                     __ptext14:	
  7041 ;; *************** function _sendAcknowledgmentRGB *****************
  7042 ;; Defined at:
  7043 ;;		line 1283 in file "main.c"
  7044 ;; Parameters:    Size  Location     Type
  7045 ;;  currentState    2    0[BANK0 ] PTR unsigned char 
  7046 ;;		 -> STR_19(27), sendFinalBufferToGAteway(46), 
  7047 ;; Auto vars:     Size  Location     Type
  7048 ;;  Tx_count        2    3[BANK0 ] int 
  7049 ;; Return value:  Size  Location     Type
  7050 ;;                  1    wreg      void 
  7051 ;; Registers used:
  7052 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  7053 ;; Tracked objects:
  7054 ;;		On entry : 0/0
  7055 ;;		On exit  : 0/0
  7056 ;;		Unchanged: 0/0
  7057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7058 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  7059 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  7060 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  7061 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0
  7062 ;;Total ram usage:        5 bytes
  7063 ;; Hardware stack levels used:    1
  7064 ;; Hardware stack levels required when called:    2
  7065 ;; This function calls:
  7066 ;;		Nothing
  7067 ;; This function is called by:
  7068 ;;		_applicationControlRGB
  7069 ;;		_main
  7070 ;; This function uses a non-reentrant model
  7071 ;;
  7072                           
  7073                           
  7074                           ;psect for function _sendAcknowledgmentRGB
  7075  1359                     _sendAcknowledgmentRGB:	
  7076                           
  7077                           ;main.c: 1284: int Tx_count=0;
  7078                           
  7079                           ;incstack = 0
  7080                           ; Regs used in _sendAcknowledgmentRGB: [wreg-fsr0h+status,2+status,0+pclath]
  7081  1359  0020               	movlb	0	; select bank0
  7082  135A  01A3               	clrf	sendAcknowledgmentRGB@Tx_count
  7083  135B  01A4               	clrf	sendAcknowledgmentRGB@Tx_count+1
  7084  135C                     l4876:	
  7085                           ;main.c: 1285: while(*currentStateBufferRGB != (0))
  7086                           
  7087  135C  0820               	movf	sendAcknowledgmentRGB@currentStateBufferRGB,w
  7088  135D  0084               	movwf	4
  7089  135E  0821               	movf	sendAcknowledgmentRGB@currentStateBufferRGB+1,w
  7090  135F  0085               	movwf	5
  7091  1360  0012               	moviw fsr0++
  7092  1361  1903               	btfsc	3,2
  7093  1362  0008               	return
  7094  1363                     l618:	
  7095                           ;main.c: 1286: {
  7096                           ;main.c: 1287: while (!TX1STAbits.TRMT);
  7097                           
  7098  1363  0023               	movlb	3	; select bank3
  7099  1364  1C9E               	btfss	30,1	;volatile
  7100  1365  2B63               	goto	l618
  7101                           
  7102                           ;main.c: 1288: TX1REG = *currentStateBufferRGB;
  7103  1366  0020               	movlb	0	; select bank0
  7104  1367  0820               	movf	sendAcknowledgmentRGB@currentStateBufferRGB,w
  7105  1368  0084               	movwf	4
  7106  1369  0821               	movf	sendAcknowledgmentRGB@currentStateBufferRGB+1,w
  7107  136A  0085               	movwf	5
  7108  136B  0800               	movf	0,w	;code access
  7109  136C  0023               	movlb	3	; select bank3
  7110  136D  009A               	movwf	26	;volatile
  7111                           
  7112                           ;main.c: 1289: *currentStateBufferRGB++;
  7113  136E  3001               	movlw	1
  7114  136F  0020               	movlb	0	; select bank0
  7115  1370  07A0               	addwf	sendAcknowledgmentRGB@currentStateBufferRGB,f
  7116  1371  3000               	movlw	0
  7117  1372  3DA1               	addwfc	sendAcknowledgmentRGB@currentStateBufferRGB+1,f
  7118                           
  7119                           ;main.c: 1290: Tx_count++;
  7120  1373  3001               	movlw	1
  7121  1374  07A3               	addwf	sendAcknowledgmentRGB@Tx_count,f
  7122  1375  3000               	movlw	0
  7123  1376  3DA4               	addwfc	sendAcknowledgmentRGB@Tx_count+1,f
  7124  1377  2B5C               	goto	l4876
  7125  1378                     __end_of_sendAcknowledgmentRGB:	
  7126                           
  7127                           	psect	text15
  7128  128F                     __ptext15:	
  7129 ;; *************** function _memset *****************
  7130 ;; Defined at:
  7131 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  7132 ;; Parameters:    Size  Location     Type
  7133 ;;  p1              1    wreg     PTR void 
  7134 ;;		 -> applicationControlRGB@HexlevelBuffer(5), 
  7135 ;;  c               2    0[BANK0 ] int 
  7136 ;;  n               2    2[BANK0 ] unsigned int 
  7137 ;; Auto vars:     Size  Location     Type
  7138 ;;  p1              1    6[BANK0 ] PTR void 
  7139 ;;		 -> applicationControlRGB@HexlevelBuffer(5), 
  7140 ;;  p               1    5[BANK0 ] PTR unsigned char 
  7141 ;;		 -> applicationControlRGB@HexlevelBuffer(5), 
  7142 ;; Return value:  Size  Location     Type
  7143 ;;                  1    wreg      PTR void 
  7144 ;; Registers used:
  7145 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7146 ;; Tracked objects:
  7147 ;;		On entry : 0/0
  7148 ;;		On exit  : 0/0
  7149 ;;		Unchanged: 0/0
  7150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7151 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  7152 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  7153 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  7154 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0
  7155 ;;Total ram usage:        7 bytes
  7156 ;; Hardware stack levels used:    1
  7157 ;; Hardware stack levels required when called:    2
  7158 ;; This function calls:
  7159 ;;		Nothing
  7160 ;; This function is called by:
  7161 ;;		_applicationControlRGB
  7162 ;; This function uses a non-reentrant model
  7163 ;;
  7164                           
  7165                           
  7166                           ;psect for function _memset
  7167  128F                     _memset:	
  7168                           
  7169                           ;incstack = 0
  7170                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7171                           ;memset@p1 stored from wreg
  7172  128F  0020               	movlb	0	; select bank0
  7173  1290  00A6               	movwf	memset@p1
  7174  1291  0826               	movf	memset@p1,w
  7175  1292  00A4               	movwf	??_memset
  7176  1293  0824               	movf	??_memset,w
  7177  1294  00A5               	movwf	memset@p
  7178  1295                     l4954:	
  7179  1295  3001               	movlw	1
  7180  1296  02A2               	subwf	memset@n,f
  7181  1297  3000               	movlw	0
  7182  1298  3BA3               	subwfb	memset@n+1,f
  7183  1299  0A22               	incf	memset@n,w
  7184  129A  1903               	btfsc	3,2
  7185  129B  0A23               	incf	memset@n+1,w
  7186  129C  1903               	btfsc	3,2
  7187  129D  0008               	return
  7188  129E  0820               	movf	memset@c,w
  7189  129F  00A4               	movwf	??_memset
  7190  12A0  0825               	movf	memset@p,w
  7191  12A1  0086               	movwf	6
  7192  12A2  0187               	clrf	7
  7193  12A3  0824               	movf	??_memset,w
  7194  12A4  0081               	movwf	1
  7195  12A5  3001               	movlw	1
  7196  12A6  00A4               	movwf	??_memset
  7197  12A7  0824               	movf	??_memset,w
  7198  12A8  07A5               	addwf	memset@p,f
  7199  12A9  2A95               	goto	l4954
  7200  12AA                     __end_of_memset:	
  7201                           ;	Return value of _memset is never used
  7202                           
  7203                           
  7204                           	psect	text16
  7205  177E                     __ptext16:	
  7206 ;; *************** function _hexadecimalToDecimal *****************
  7207 ;; Defined at:
  7208 ;;		line 1235 in file "main.c"
  7209 ;; Parameters:    Size  Location     Type
  7210 ;;  hexVal          1    wreg     PTR unsigned char 
  7211 ;;		 -> applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationControlRGB@strGreenL(3), applic
      +ationControlRGB@strGreenH(3), 
  7212 ;;		 -> applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), 
  7213 ;; Auto vars:     Size  Location     Type
  7214 ;;  hexVal          1   18[BANK0 ] PTR unsigned char 
  7215 ;;		 -> applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationControlRGB@strGreenL(3), applic
      +ationControlRGB@strGreenH(3), 
  7216 ;;		 -> applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), 
  7217 ;;  i               2   16[BANK0 ] int 
  7218 ;;  base            2   14[BANK0 ] int 
  7219 ;;  dec_val         2   12[BANK0 ] int 
  7220 ;;  len             2   10[BANK0 ] int 
  7221 ;; Return value:  Size  Location     Type
  7222 ;;                  2    6[BANK0 ] int 
  7223 ;; Registers used:
  7224 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7230 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  7231 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0
  7232 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  7233 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0
  7234 ;;Total ram usage:       13 bytes
  7235 ;; Hardware stack levels used:    1
  7236 ;; Hardware stack levels required when called:    3
  7237 ;; This function calls:
  7238 ;;		___wmul
  7239 ;;		_strlen
  7240 ;; This function is called by:
  7241 ;;		_applicationControlRGB
  7242 ;; This function uses a non-reentrant model
  7243 ;;
  7244                           
  7245                           
  7246                           ;psect for function _hexadecimalToDecimal
  7247  177E                     _hexadecimalToDecimal:	
  7248                           
  7249                           ;incstack = 0
  7250                           ; Regs used in _hexadecimalToDecimal: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7251                           ;hexadecimalToDecimal@hexVal stored from wreg
  7252  177E  0020               	movlb	0	; select bank0
  7253  177F  00B2               	movwf	hexadecimalToDecimal@hexVal
  7254                           
  7255                           ;main.c: 1237: int len = strlen(hexVal);
  7256  1780  0832               	movf	hexadecimalToDecimal@hexVal,w
  7257  1781  00A0               	movwf	strlen@s
  7258  1782  3000               	movlw	0
  7259  1783  00A1               	movwf	strlen@s+1
  7260  1784  3193  233A  3197   	fcall	_strlen
  7261  1787  0020               	movlb	0	; select bank0
  7262  1788  0821               	movf	?_strlen+1,w
  7263  1789  00AB               	movwf	hexadecimalToDecimal@len+1
  7264  178A  0820               	movf	?_strlen,w
  7265  178B  00AA               	movwf	hexadecimalToDecimal@len
  7266                           
  7267                           ;main.c: 1240: int base = 1;
  7268  178C  3001               	movlw	1
  7269  178D  00AE               	movwf	hexadecimalToDecimal@base
  7270  178E  3000               	movlw	0
  7271  178F  00AF               	movwf	hexadecimalToDecimal@base+1
  7272                           
  7273                           ;main.c: 1242: int dec_val = 0;
  7274  1790  01AC               	clrf	hexadecimalToDecimal@dec_val
  7275  1791  01AD               	clrf	hexadecimalToDecimal@dec_val+1
  7276                           
  7277                           ;main.c: 1245: for (int i=len-1; i>=0; i--)
  7278  1792  082A               	movf	hexadecimalToDecimal@len,w
  7279  1793  3EFF               	addlw	255
  7280  1794  00B0               	movwf	hexadecimalToDecimal@i
  7281  1795  30FF               	movlw	255
  7282  1796  3D2B               	addwfc	hexadecimalToDecimal@len+1,w
  7283  1797  00B1               	movwf	hexadecimalToDecimal@i+1
  7284  1798  1BB1               	btfsc	hexadecimalToDecimal@i+1,7
  7285  1799  2FFB               	goto	l4988
  7286  179A                     l4968:	
  7287                           
  7288                           ;main.c: 1246: {
  7289                           ;main.c: 1250: if (hexVal[i]>='0' && hexVal[i]<='9')
  7290  179A  0830               	movf	hexadecimalToDecimal@i,w
  7291  179B  0732               	addwf	hexadecimalToDecimal@hexVal,w
  7292  179C  00A8               	movwf	??_hexadecimalToDecimal
  7293  179D  0828               	movf	??_hexadecimalToDecimal,w
  7294  179E  0086               	movwf	6
  7295  179F  0187               	clrf	7
  7296  17A0  3030               	movlw	48
  7297  17A1  0201               	subwf	1,w
  7298  17A2  1C03               	skipc
  7299  17A3  2FB7               	goto	l4976
  7300  17A4  0830               	movf	hexadecimalToDecimal@i,w
  7301  17A5  0732               	addwf	hexadecimalToDecimal@hexVal,w
  7302  17A6  00A8               	movwf	??_hexadecimalToDecimal
  7303  17A7  0828               	movf	??_hexadecimalToDecimal,w
  7304  17A8  0086               	movwf	6
  7305  17A9  0187               	clrf	7
  7306  17AA  303A               	movlw	58
  7307  17AB  0201               	subwf	1,w
  7308  17AC  1803               	skipnc
  7309  17AD  2FB7               	goto	l4976
  7310                           
  7311                           ;main.c: 1251: {
  7312                           ;main.c: 1252: dec_val += (hexVal[i] - 48)*base;
  7313  17AE  0830               	movf	hexadecimalToDecimal@i,w
  7314  17AF  0732               	addwf	hexadecimalToDecimal@hexVal,w
  7315  17B0  00A8               	movwf	??_hexadecimalToDecimal
  7316  17B1  0828               	movf	??_hexadecimalToDecimal,w
  7317  17B2  0086               	movwf	6
  7318  17B3  0187               	clrf	7
  7319  17B4  0801               	movf	1,w
  7320  17B5  3ED0               	addlw	208
  7321  17B6  2FD3               	goto	L2
  7322  17B7                     l4976:	
  7323                           ;main.c: 1256: }
  7324                           
  7325                           ;main.c: 1255: base = base * 16;
  7326                           
  7327                           
  7328                           ;main.c: 1261: else if (hexVal[i]>='A' && hexVal[i]<='F')
  7329  17B7  0830               	movf	hexadecimalToDecimal@i,w
  7330  17B8  0732               	addwf	hexadecimalToDecimal@hexVal,w
  7331  17B9  00A8               	movwf	??_hexadecimalToDecimal
  7332  17BA  0828               	movf	??_hexadecimalToDecimal,w
  7333  17BB  0086               	movwf	6
  7334  17BC  0187               	clrf	7
  7335  17BD  3041               	movlw	65
  7336  17BE  0201               	subwf	1,w
  7337  17BF  1C03               	skipc
  7338  17C0  2FF5               	goto	l4984
  7339  17C1  0830               	movf	hexadecimalToDecimal@i,w
  7340  17C2  0732               	addwf	hexadecimalToDecimal@hexVal,w
  7341  17C3  00A8               	movwf	??_hexadecimalToDecimal
  7342  17C4  0828               	movf	??_hexadecimalToDecimal,w
  7343  17C5  0086               	movwf	6
  7344  17C6  0187               	clrf	7
  7345  17C7  3047               	movlw	71
  7346  17C8  0201               	subwf	1,w
  7347  17C9  1803               	skipnc
  7348  17CA  2FF5               	goto	l4984
  7349                           
  7350                           ;main.c: 1262: {
  7351                           ;main.c: 1263: dec_val += (hexVal[i] - 55)*base;
  7352  17CB  0830               	movf	hexadecimalToDecimal@i,w
  7353  17CC  0732               	addwf	hexadecimalToDecimal@hexVal,w
  7354  17CD  00A8               	movwf	??_hexadecimalToDecimal
  7355  17CE  0828               	movf	??_hexadecimalToDecimal,w
  7356  17CF  0086               	movwf	6
  7357  17D0  0187               	clrf	7
  7358  17D1  0801               	movf	1,w
  7359  17D2  3EC9               	addlw	201
  7360  17D3                     L2:	
  7361  17D3  00A0               	movwf	___wmul@multiplier
  7362  17D4  30FF               	movlw	255
  7363  17D5  1803               	skipnc
  7364  17D6  3000               	movlw	0
  7365  17D7  00A1               	movwf	___wmul@multiplier+1
  7366  17D8  082F               	movf	hexadecimalToDecimal@base+1,w
  7367  17D9  00A3               	movwf	___wmul@multiplicand+1
  7368  17DA  082E               	movf	hexadecimalToDecimal@base,w
  7369  17DB  00A2               	movwf	___wmul@multiplicand
  7370  17DC  3192  22AA  3197   	fcall	___wmul
  7371  17DF  0020               	movlb	0	; select bank0
  7372  17E0  0820               	movf	?___wmul,w
  7373  17E1  07AC               	addwf	hexadecimalToDecimal@dec_val,f
  7374  17E2  0821               	movf	?___wmul+1,w
  7375  17E3  3DAD               	addwfc	hexadecimalToDecimal@dec_val+1,f
  7376                           
  7377                           ;main.c: 1266: base = base*16;
  7378  17E4  082F               	movf	hexadecimalToDecimal@base+1,w
  7379  17E5  00A9               	movwf	??_hexadecimalToDecimal+1
  7380  17E6  082E               	movf	hexadecimalToDecimal@base,w
  7381  17E7  00A8               	movwf	??_hexadecimalToDecimal
  7382  17E8  0EA8               	swapf	??_hexadecimalToDecimal,f
  7383  17E9  0EA9               	swapf	??_hexadecimalToDecimal+1,f
  7384  17EA  30F0               	movlw	240
  7385  17EB  05A9               	andwf	??_hexadecimalToDecimal+1,f
  7386  17EC  0828               	movf	??_hexadecimalToDecimal,w
  7387  17ED  390F               	andlw	15
  7388  17EE  04A9               	iorwf	??_hexadecimalToDecimal+1,f
  7389  17EF  30F0               	movlw	240
  7390  17F0  05A8               	andwf	??_hexadecimalToDecimal,f
  7391  17F1  0828               	movf	??_hexadecimalToDecimal,w
  7392  17F2  00AE               	movwf	hexadecimalToDecimal@base
  7393  17F3  0829               	movf	??_hexadecimalToDecimal+1,w
  7394  17F4  00AF               	movwf	hexadecimalToDecimal@base+1
  7395  17F5                     l4984:	
  7396  17F5  30FF               	movlw	255
  7397  17F6  07B0               	addwf	hexadecimalToDecimal@i,f
  7398  17F7  30FF               	movlw	255
  7399  17F8  3DB1               	addwfc	hexadecimalToDecimal@i+1,f
  7400  17F9  1FB1               	btfss	hexadecimalToDecimal@i+1,7
  7401  17FA  2F9A               	goto	l4968
  7402  17FB                     l4988:	
  7403                           
  7404                           ;main.c: 1267: }
  7405                           ;main.c: 1268: }
  7406                           ;main.c: 1270: return dec_val;
  7407  17FB  082D               	movf	hexadecimalToDecimal@dec_val+1,w
  7408  17FC  00A7               	movwf	?_hexadecimalToDecimal+1
  7409  17FD  082C               	movf	hexadecimalToDecimal@dec_val,w
  7410  17FE  00A6               	movwf	?_hexadecimalToDecimal
  7411  17FF  0008               	return
  7412  1800                     __end_of_hexadecimalToDecimal:	
  7413                           
  7414                           	psect	text17
  7415  133A                     __ptext17:	
  7416 ;; *************** function _strlen *****************
  7417 ;; Defined at:
  7418 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  7419 ;; Parameters:    Size  Location     Type
  7420 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  7421 ;;		 -> copymainReceivedDataBuffer(32), applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicatio
      +nControlRGB@strGreenL(3), 
  7422 ;;		 -> applicationControlRGB@strGreenH(3), applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), applicat
      +ionControlRGB@HexlevelBuffer(5), 
  7423 ;;		 -> NULL(0), 
  7424 ;; Auto vars:     Size  Location     Type
  7425 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  7426 ;;		 -> copymainReceivedDataBuffer(32), applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicatio
      +nControlRGB@strGreenL(3), 
  7427 ;;		 -> applicationControlRGB@strGreenH(3), applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), applicat
      +ionControlRGB@HexlevelBuffer(5), 
  7428 ;;		 -> NULL(0), 
  7429 ;; Return value:  Size  Location     Type
  7430 ;;                  2    0[BANK0 ] unsigned int 
  7431 ;; Registers used:
  7432 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7433 ;; Tracked objects:
  7434 ;;		On entry : 0/0
  7435 ;;		On exit  : 0/0
  7436 ;;		Unchanged: 0/0
  7437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7438 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  7439 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  7440 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  7441 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  7442 ;;Total ram usage:        6 bytes
  7443 ;; Hardware stack levels used:    1
  7444 ;; Hardware stack levels required when called:    2
  7445 ;; This function calls:
  7446 ;;		Nothing
  7447 ;; This function is called by:
  7448 ;;		_applicationControlRGB
  7449 ;;		_main
  7450 ;;		_hexadecimalToDecimal
  7451 ;; This function uses a non-reentrant model
  7452 ;;
  7453                           
  7454                           
  7455                           ;psect for function _strlen
  7456  133A                     _strlen:	
  7457                           
  7458                           ;incstack = 0
  7459                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  7460  133A  0020               	movlb	0	; select bank0
  7461  133B  0821               	movf	strlen@s+1,w
  7462  133C  00A5               	movwf	strlen@cp+1
  7463  133D  0820               	movf	strlen@s,w
  7464  133E  00A4               	movwf	strlen@cp
  7465  133F                     l4714:	
  7466  133F  0824               	movf	strlen@cp,w
  7467  1340  0086               	movwf	6
  7468  1341  0825               	movf	strlen@cp+1,w
  7469  1342  0087               	movwf	7
  7470  1343  0801               	movf	1,w
  7471  1344  1903               	btfsc	3,2
  7472  1345  2B4B               	goto	l4716
  7473  1346  3001               	movlw	1
  7474  1347  07A4               	addwf	strlen@cp,f
  7475  1348  3000               	movlw	0
  7476  1349  3DA5               	addwfc	strlen@cp+1,f
  7477  134A  2B3F               	goto	l4714
  7478  134B                     l4716:	
  7479  134B  0920               	comf	strlen@s,w
  7480  134C  00A2               	movwf	??_strlen
  7481  134D  0921               	comf	strlen@s+1,w
  7482  134E  00A3               	movwf	??_strlen+1
  7483  134F  0AA2               	incf	??_strlen,f
  7484  1350  1903               	skipnz
  7485  1351  0AA3               	incf	??_strlen+1,f
  7486  1352  0824               	movf	strlen@cp,w
  7487  1353  0722               	addwf	??_strlen,w
  7488  1354  00A0               	movwf	?_strlen
  7489  1355  0825               	movf	strlen@cp+1,w
  7490  1356  3D23               	addwfc	??_strlen+1,w
  7491  1357  00A1               	movwf	?_strlen+1
  7492  1358  0008               	return
  7493  1359                     __end_of_strlen:	
  7494                           
  7495                           	psect	text18
  7496  11D9                     __ptext18:	
  7497 ;; *************** function _abs *****************
  7498 ;; Defined at:
  7499 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  7500 ;; Parameters:    Size  Location     Type
  7501 ;;  a               2    0[BANK0 ] int 
  7502 ;; Auto vars:     Size  Location     Type
  7503 ;;		None
  7504 ;; Return value:  Size  Location     Type
  7505 ;;                  2    0[BANK0 ] int 
  7506 ;; Registers used:
  7507 ;;		wreg, status,2, status,0
  7508 ;; Tracked objects:
  7509 ;;		On entry : 0/0
  7510 ;;		On exit  : 0/0
  7511 ;;		Unchanged: 0/0
  7512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7513 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  7514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  7515 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  7516 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  7517 ;;Total ram usage:        4 bytes
  7518 ;; Hardware stack levels used:    1
  7519 ;; Hardware stack levels required when called:    2
  7520 ;; This function calls:
  7521 ;;		Nothing
  7522 ;; This function is called by:
  7523 ;;		_applicationControlRGB
  7524 ;; This function uses a non-reentrant model
  7525 ;;
  7526                           
  7527                           
  7528                           ;psect for function _abs
  7529  11D9                     _abs:	
  7530                           
  7531                           ;incstack = 0
  7532                           ; Regs used in _abs: [wreg+status,2+status,0]
  7533  11D9  0020               	movlb	0	; select bank0
  7534  11DA  1FA1               	btfss	abs@a+1,7
  7535  11DB  0008               	return
  7536  11DC  0920               	comf	abs@a,w
  7537  11DD  00A2               	movwf	??_abs
  7538  11DE  0921               	comf	abs@a+1,w
  7539  11DF  00A3               	movwf	??_abs+1
  7540  11E0  0AA2               	incf	??_abs,f
  7541  11E1  1903               	skipnz
  7542  11E2  0AA3               	incf	??_abs+1,f
  7543  11E3  0822               	movf	??_abs,w
  7544  11E4  00A0               	movwf	?_abs
  7545  11E5  0823               	movf	??_abs+1,w
  7546  11E6  00A1               	movwf	?_abs+1
  7547  11E7  0008               	return
  7548  11E8                     __end_of_abs:	
  7549                           
  7550                           	psect	text19
  7551  1231                     __ptext19:	
  7552 ;; *************** function ___lwtoft *****************
  7553 ;; Defined at:
  7554 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  7555 ;; Parameters:    Size  Location     Type
  7556 ;;  c               2    8[BANK0 ] unsigned int 
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;		None
  7559 ;; Return value:  Size  Location     Type
  7560 ;;                  3    8[BANK0 ] float 
  7561 ;; Registers used:
  7562 ;;		wreg, status,2, status,0, pclath, cstack
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7568 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0
  7569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  7570 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  7571 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  7572 ;;Total ram usage:        4 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:    3
  7575 ;; This function calls:
  7576 ;;		___ftpack
  7577 ;; This function is called by:
  7578 ;;		_applicationControlRGB
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           
  7583                           ;psect for function ___lwtoft
  7584  1231                     ___lwtoft:	
  7585                           
  7586                           ;incstack = 0
  7587                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  7588  1231  0020               	movlb	0	; select bank0
  7589  1232  0828               	movf	___lwtoft@c,w
  7590  1233  00A0               	movwf	___ftpack@arg
  7591  1234  0829               	movf	___lwtoft@c+1,w
  7592  1235  00A1               	movwf	___ftpack@arg+1
  7593  1236  01A2               	clrf	___ftpack@arg+2
  7594  1237  308E               	movlw	142
  7595  1238  00AB               	movwf	??___lwtoft
  7596  1239  082B               	movf	??___lwtoft,w
  7597  123A  00A3               	movwf	___ftpack@exp
  7598  123B  01A4               	clrf	___ftpack@sign
  7599  123C  3196  26A8         	fcall	___ftpack
  7600  123E  0020               	movlb	0	; select bank0
  7601  123F  0820               	movf	?___ftpack,w
  7602  1240  00A8               	movwf	?___lwtoft
  7603  1241  0821               	movf	?___ftpack+1,w
  7604  1242  00A9               	movwf	?___lwtoft+1
  7605  1243  0822               	movf	?___ftpack+2,w
  7606  1244  00AA               	movwf	?___lwtoft+2
  7607  1245  0008               	return
  7608  1246                     __end_of___lwtoft:	
  7609                           
  7610                           	psect	text20
  7611  076E                     __ptext20:	
  7612 ;; *************** function ___fttol *****************
  7613 ;; Defined at:
  7614 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  7615 ;; Parameters:    Size  Location     Type
  7616 ;;  f1              3   30[BANK0 ] float 
  7617 ;; Auto vars:     Size  Location     Type
  7618 ;;  lval            4   39[BANK0 ] unsigned long 
  7619 ;;  exp1            1   43[BANK0 ] unsigned char 
  7620 ;;  sign1           1   38[BANK0 ] unsigned char 
  7621 ;; Return value:  Size  Location     Type
  7622 ;;                  4   30[BANK0 ] long 
  7623 ;; Registers used:
  7624 ;;		wreg, status,2, status,0
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7630 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  7631 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0
  7632 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0
  7633 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0
  7634 ;;Total ram usage:       14 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    2
  7637 ;; This function calls:
  7638 ;;		Nothing
  7639 ;; This function is called by:
  7640 ;;		_applicationControlRGB
  7641 ;; This function uses a non-reentrant model
  7642 ;;
  7643                           
  7644                           
  7645                           ;psect for function ___fttol
  7646  076E                     ___fttol:	
  7647                           
  7648                           ;incstack = 0
  7649                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7650  076E  0020               	movlb	0	; select bank0
  7651  076F  083E               	movf	___fttol@f1,w
  7652  0770  00C2               	movwf	??___fttol
  7653  0771  083F               	movf	___fttol@f1+1,w
  7654  0772  00C3               	movwf	??___fttol+1
  7655  0773  0840               	movf	___fttol@f1+2,w
  7656  0774  00C4               	movwf	??___fttol+2
  7657  0775  1003               	clrc
  7658  0776  0D43               	rlf	??___fttol+1,w
  7659  0777  0D44               	rlf	??___fttol+2,w
  7660  0778  00C5               	movwf	??___fttol+3
  7661  0779  0845               	movf	??___fttol+3,w
  7662  077A  00CB               	movwf	___fttol@exp1
  7663  077B  084B               	movf	___fttol@exp1,w
  7664  077C  1D03               	btfss	3,2
  7665  077D  2F87               	goto	l5218
  7666  077E  3000               	movlw	0
  7667  077F  00C1               	movwf	?___fttol+3
  7668  0780  3000               	movlw	0
  7669  0781  00C0               	movwf	?___fttol+2
  7670  0782  3000               	movlw	0
  7671  0783  00BF               	movwf	?___fttol+1
  7672  0784  3000               	movlw	0
  7673  0785  00BE               	movwf	?___fttol
  7674  0786  0008               	return
  7675  0787                     l5218:	
  7676  0787  083E               	movf	___fttol@f1,w
  7677  0788  00C2               	movwf	??___fttol
  7678  0789  083F               	movf	___fttol@f1+1,w
  7679  078A  00C3               	movwf	??___fttol+1
  7680  078B  0840               	movf	___fttol@f1+2,w
  7681  078C  00C4               	movwf	??___fttol+2
  7682  078D  3017               	movlw	23
  7683  078E                     u5465:	
  7684  078E  36C4               	lsrf	??___fttol+2,f
  7685  078F  0CC3               	rrf	??___fttol+1,f
  7686  0790  0CC2               	rrf	??___fttol,f
  7687  0791  0B89               	decfsz	9,f
  7688  0792  2F8E               	goto	u5465
  7689  0793  0842               	movf	??___fttol,w
  7690  0794  00C5               	movwf	??___fttol+3
  7691  0795  0845               	movf	??___fttol+3,w
  7692  0796  00C6               	movwf	___fttol@sign1
  7693  0797  17BF               	bsf	___fttol@f1+1,7
  7694  0798  30FF               	movlw	255
  7695  0799  05BE               	andwf	___fttol@f1,f
  7696  079A  30FF               	movlw	255
  7697  079B  05BF               	andwf	___fttol@f1+1,f
  7698  079C  3000               	movlw	0
  7699  079D  05C0               	andwf	___fttol@f1+2,f
  7700  079E  083E               	movf	___fttol@f1,w
  7701  079F  00C7               	movwf	___fttol@lval
  7702  07A0  083F               	movf	___fttol@f1+1,w
  7703  07A1  00C8               	movwf	___fttol@lval+1
  7704  07A2  0840               	movf	___fttol@f1+2,w
  7705  07A3  00C9               	movwf	___fttol@lval+2
  7706  07A4  01CA               	clrf	___fttol@lval+3
  7707  07A5  308E               	movlw	142
  7708  07A6  02CB               	subwf	___fttol@exp1,f
  7709  07A7  1FCB               	btfss	___fttol@exp1,7
  7710  07A8  2FC5               	goto	l5238
  7711  07A9  084B               	movf	___fttol@exp1,w
  7712  07AA  3A80               	xorlw	128
  7713  07AB  3E8F               	addlw	143
  7714  07AC  1803               	skipnc
  7715  07AD  2FB7               	goto	l5236
  7716  07AE  3000               	movlw	0
  7717  07AF  00C1               	movwf	?___fttol+3
  7718  07B0  3000               	movlw	0
  7719  07B1  00C0               	movwf	?___fttol+2
  7720  07B2  3000               	movlw	0
  7721  07B3  00BF               	movwf	?___fttol+1
  7722  07B4  3000               	movlw	0
  7723  07B5  00BE               	movwf	?___fttol
  7724  07B6  0008               	return
  7725  07B7                     l5236:	
  7726  07B7  3001               	movlw	1
  7727  07B8                     u5495:	
  7728  07B8  36CA               	lsrf	___fttol@lval+3,f
  7729  07B9  0CC9               	rrf	___fttol@lval+2,f
  7730  07BA  0CC8               	rrf	___fttol@lval+1,f
  7731  07BB  0CC7               	rrf	___fttol@lval,f
  7732  07BC  0B89               	decfsz	9,f
  7733  07BD  2FB8               	goto	u5495
  7734  07BE  3001               	movlw	1
  7735  07BF  00C2               	movwf	??___fttol
  7736  07C0  0842               	movf	??___fttol,w
  7737  07C1  07CB               	addwf	___fttol@exp1,f
  7738  07C2  1903               	btfsc	3,2
  7739  07C3  2FDE               	goto	l5246
  7740  07C4  2FB7               	goto	l5236
  7741  07C5                     l5238:	
  7742  07C5  3018               	movlw	24
  7743  07C6  024B               	subwf	___fttol@exp1,w
  7744  07C7  1C03               	skipc
  7745  07C8  2FDB               	goto	l952
  7746  07C9  3000               	movlw	0
  7747  07CA  00C1               	movwf	?___fttol+3
  7748  07CB  3000               	movlw	0
  7749  07CC  00C0               	movwf	?___fttol+2
  7750  07CD  3000               	movlw	0
  7751  07CE  00BF               	movwf	?___fttol+1
  7752  07CF  3000               	movlw	0
  7753  07D0  00BE               	movwf	?___fttol
  7754  07D1  0008               	return
  7755  07D2                     l5244:	
  7756  07D2  3001               	movlw	1
  7757  07D3                     u5525:	
  7758  07D3  35C7               	lslf	___fttol@lval,f
  7759  07D4  0DC8               	rlf	___fttol@lval+1,f
  7760  07D5  0DC9               	rlf	___fttol@lval+2,f
  7761  07D6  0DCA               	rlf	___fttol@lval+3,f
  7762  07D7  0B89               	decfsz	9,f
  7763  07D8  2FD3               	goto	u5525
  7764  07D9  3001               	movlw	1
  7765  07DA  02CB               	subwf	___fttol@exp1,f
  7766  07DB                     l952:	
  7767  07DB  084B               	movf	___fttol@exp1,w
  7768  07DC  1D03               	btfss	3,2
  7769  07DD  2FD2               	goto	l5244
  7770  07DE                     l5246:	
  7771  07DE  0846               	movf	___fttol@sign1,w
  7772  07DF  1903               	btfsc	3,2
  7773  07E0  2FEC               	goto	l5250
  7774  07E1  09C7               	comf	___fttol@lval,f
  7775  07E2  09C8               	comf	___fttol@lval+1,f
  7776  07E3  09C9               	comf	___fttol@lval+2,f
  7777  07E4  09CA               	comf	___fttol@lval+3,f
  7778  07E5  0AC7               	incf	___fttol@lval,f
  7779  07E6  1903               	skipnz
  7780  07E7  0AC8               	incf	___fttol@lval+1,f
  7781  07E8  1903               	skipnz
  7782  07E9  0AC9               	incf	___fttol@lval+2,f
  7783  07EA  1903               	skipnz
  7784  07EB  0ACA               	incf	___fttol@lval+3,f
  7785  07EC                     l5250:	
  7786  07EC  084A               	movf	___fttol@lval+3,w
  7787  07ED  00C1               	movwf	?___fttol+3
  7788  07EE  0849               	movf	___fttol@lval+2,w
  7789  07EF  00C0               	movwf	?___fttol+2
  7790  07F0  0848               	movf	___fttol@lval+1,w
  7791  07F1  00BF               	movwf	?___fttol+1
  7792  07F2  0847               	movf	___fttol@lval,w
  7793  07F3  00BE               	movwf	?___fttol
  7794  07F4  0008               	return
  7795  07F5                     __end_of___fttol:	
  7796                           
  7797                           	psect	text21
  7798  095F                     __ptext21:	
  7799 ;; *************** function ___ftmul *****************
  7800 ;; Defined at:
  7801 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  7802 ;; Parameters:    Size  Location     Type
  7803 ;;  f1              3    8[BANK0 ] float 
  7804 ;;  f2              3   11[BANK0 ] float 
  7805 ;; Auto vars:     Size  Location     Type
  7806 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  7807 ;;  sign            1   23[BANK0 ] unsigned char 
  7808 ;;  cntr            1   22[BANK0 ] unsigned char 
  7809 ;;  exp             1   18[BANK0 ] unsigned char 
  7810 ;; Return value:  Size  Location     Type
  7811 ;;                  3    8[BANK0 ] float 
  7812 ;; Registers used:
  7813 ;;		wreg, status,2, status,0, pclath, cstack
  7814 ;; Tracked objects:
  7815 ;;		On entry : 0/0
  7816 ;;		On exit  : 0/0
  7817 ;;		Unchanged: 0/0
  7818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7819 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  7820 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0
  7821 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0
  7822 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0
  7823 ;;Total ram usage:       16 bytes
  7824 ;; Hardware stack levels used:    1
  7825 ;; Hardware stack levels required when called:    3
  7826 ;; This function calls:
  7827 ;;		___ftpack
  7828 ;; This function is called by:
  7829 ;;		_applicationControlRGB
  7830 ;; This function uses a non-reentrant model
  7831 ;;
  7832                           
  7833                           
  7834                           ;psect for function ___ftmul
  7835  095F                     ___ftmul:	
  7836                           
  7837                           ;incstack = 0
  7838                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7839  095F  0020               	movlb	0	; select bank0
  7840  0960  0828               	movf	___ftmul@f1,w
  7841  0961  00AE               	movwf	??___ftmul
  7842  0962  0829               	movf	___ftmul@f1+1,w
  7843  0963  00AF               	movwf	??___ftmul+1
  7844  0964  082A               	movf	___ftmul@f1+2,w
  7845  0965  00B0               	movwf	??___ftmul+2
  7846  0966  1003               	clrc
  7847  0967  0D2F               	rlf	??___ftmul+1,w
  7848  0968  0D30               	rlf	??___ftmul+2,w
  7849  0969  00B1               	movwf	??___ftmul+3
  7850  096A  0831               	movf	??___ftmul+3,w
  7851  096B  00B2               	movwf	___ftmul@exp
  7852  096C  0832               	movf	___ftmul@exp,w
  7853  096D  1D03               	btfss	3,2
  7854  096E  2976               	goto	l5168
  7855  096F  3000               	movlw	0
  7856  0970  00A8               	movwf	?___ftmul
  7857  0971  3000               	movlw	0
  7858  0972  00A9               	movwf	?___ftmul+1
  7859  0973  3000               	movlw	0
  7860  0974  00AA               	movwf	?___ftmul+2
  7861  0975  0008               	return
  7862  0976                     l5168:	
  7863  0976  082B               	movf	___ftmul@f2,w
  7864  0977  00AE               	movwf	??___ftmul
  7865  0978  082C               	movf	___ftmul@f2+1,w
  7866  0979  00AF               	movwf	??___ftmul+1
  7867  097A  082D               	movf	___ftmul@f2+2,w
  7868  097B  00B0               	movwf	??___ftmul+2
  7869  097C  1003               	clrc
  7870  097D  0D2F               	rlf	??___ftmul+1,w
  7871  097E  0D30               	rlf	??___ftmul+2,w
  7872  097F  00B1               	movwf	??___ftmul+3
  7873  0980  0831               	movf	??___ftmul+3,w
  7874  0981  00B7               	movwf	___ftmul@sign
  7875  0982  0837               	movf	___ftmul@sign,w
  7876  0983  1D03               	btfss	3,2
  7877  0984  298C               	goto	l5174
  7878  0985  3000               	movlw	0
  7879  0986  00A8               	movwf	?___ftmul
  7880  0987  3000               	movlw	0
  7881  0988  00A9               	movwf	?___ftmul+1
  7882  0989  3000               	movlw	0
  7883  098A  00AA               	movwf	?___ftmul+2
  7884  098B  0008               	return
  7885  098C                     l5174:	
  7886  098C  0837               	movf	___ftmul@sign,w
  7887  098D  3E7B               	addlw	123
  7888  098E  00AE               	movwf	??___ftmul
  7889  098F  082E               	movf	??___ftmul,w
  7890  0990  07B2               	addwf	___ftmul@exp,f
  7891  0991  0828               	movf	___ftmul@f1,w
  7892  0992  00AE               	movwf	??___ftmul
  7893  0993  0829               	movf	___ftmul@f1+1,w
  7894  0994  00AF               	movwf	??___ftmul+1
  7895  0995  082A               	movf	___ftmul@f1+2,w
  7896  0996  00B0               	movwf	??___ftmul+2
  7897  0997  3010               	movlw	16
  7898  0998                     u5355:	
  7899  0998  36B0               	lsrf	??___ftmul+2,f
  7900  0999  0CAF               	rrf	??___ftmul+1,f
  7901  099A  0CAE               	rrf	??___ftmul,f
  7902  099B  0B89               	decfsz	9,f
  7903  099C  2998               	goto	u5355
  7904  099D  082E               	movf	??___ftmul,w
  7905  099E  00B1               	movwf	??___ftmul+3
  7906  099F  0831               	movf	??___ftmul+3,w
  7907  09A0  00B7               	movwf	___ftmul@sign
  7908  09A1  082B               	movf	___ftmul@f2,w
  7909  09A2  00AE               	movwf	??___ftmul
  7910  09A3  082C               	movf	___ftmul@f2+1,w
  7911  09A4  00AF               	movwf	??___ftmul+1
  7912  09A5  082D               	movf	___ftmul@f2+2,w
  7913  09A6  00B0               	movwf	??___ftmul+2
  7914  09A7  3010               	movlw	16
  7915  09A8                     u5365:	
  7916  09A8  36B0               	lsrf	??___ftmul+2,f
  7917  09A9  0CAF               	rrf	??___ftmul+1,f
  7918  09AA  0CAE               	rrf	??___ftmul,f
  7919  09AB  0B89               	decfsz	9,f
  7920  09AC  29A8               	goto	u5365
  7921  09AD  082E               	movf	??___ftmul,w
  7922  09AE  00B1               	movwf	??___ftmul+3
  7923  09AF  0831               	movf	??___ftmul+3,w
  7924  09B0  06B7               	xorwf	___ftmul@sign,f
  7925  09B1  3080               	movlw	128
  7926  09B2  00AE               	movwf	??___ftmul
  7927  09B3  082E               	movf	??___ftmul,w
  7928  09B4  05B7               	andwf	___ftmul@sign,f
  7929  09B5  17A9               	bsf	___ftmul@f1+1,7
  7930  09B6  17AC               	bsf	___ftmul@f2+1,7
  7931  09B7  30FF               	movlw	255
  7932  09B8  05AB               	andwf	___ftmul@f2,f
  7933  09B9  30FF               	movlw	255
  7934  09BA  05AC               	andwf	___ftmul@f2+1,f
  7935  09BB  3000               	movlw	0
  7936  09BC  05AD               	andwf	___ftmul@f2+2,f
  7937  09BD  3000               	movlw	0
  7938  09BE  00B3               	movwf	___ftmul@f3_as_product
  7939  09BF  3000               	movlw	0
  7940  09C0  00B4               	movwf	___ftmul@f3_as_product+1
  7941  09C1  3000               	movlw	0
  7942  09C2  00B5               	movwf	___ftmul@f3_as_product+2
  7943  09C3  3007               	movlw	7
  7944  09C4  00AE               	movwf	??___ftmul
  7945  09C5  082E               	movf	??___ftmul,w
  7946  09C6  00B6               	movwf	___ftmul@cntr
  7947  09C7                     l5186:	
  7948  09C7  1C28               	btfss	___ftmul@f1,0
  7949  09C8  29CF               	goto	l5190
  7950  09C9  082B               	movf	___ftmul@f2,w
  7951  09CA  07B3               	addwf	___ftmul@f3_as_product,f
  7952  09CB  082C               	movf	___ftmul@f2+1,w
  7953  09CC  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  7954  09CD  082D               	movf	___ftmul@f2+2,w
  7955  09CE  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  7956  09CF                     l5190:	
  7957  09CF  3001               	movlw	1
  7958  09D0                     u5385:	
  7959  09D0  36AA               	lsrf	___ftmul@f1+2,f
  7960  09D1  0CA9               	rrf	___ftmul@f1+1,f
  7961  09D2  0CA8               	rrf	___ftmul@f1,f
  7962  09D3  0B89               	decfsz	9,f
  7963  09D4  29D0               	goto	u5385
  7964  09D5  3001               	movlw	1
  7965  09D6                     u5395:	
  7966  09D6  35AB               	lslf	___ftmul@f2,f
  7967  09D7  0DAC               	rlf	___ftmul@f2+1,f
  7968  09D8  0DAD               	rlf	___ftmul@f2+2,f
  7969  09D9  0B89               	decfsz	9,f
  7970  09DA  29D6               	goto	u5395
  7971  09DB  3001               	movlw	1
  7972  09DC  02B6               	subwf	___ftmul@cntr,f
  7973  09DD  1D03               	btfss	3,2
  7974  09DE  29C7               	goto	l5186
  7975  09DF  3009               	movlw	9
  7976  09E0  00AE               	movwf	??___ftmul
  7977  09E1  082E               	movf	??___ftmul,w
  7978  09E2  00B6               	movwf	___ftmul@cntr
  7979  09E3                     l5198:	
  7980  09E3  1C28               	btfss	___ftmul@f1,0
  7981  09E4  29EB               	goto	l5202
  7982  09E5  082B               	movf	___ftmul@f2,w
  7983  09E6  07B3               	addwf	___ftmul@f3_as_product,f
  7984  09E7  082C               	movf	___ftmul@f2+1,w
  7985  09E8  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  7986  09E9  082D               	movf	___ftmul@f2+2,w
  7987  09EA  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  7988  09EB                     l5202:	
  7989  09EB  3001               	movlw	1
  7990  09EC                     u5425:	
  7991  09EC  36AA               	lsrf	___ftmul@f1+2,f
  7992  09ED  0CA9               	rrf	___ftmul@f1+1,f
  7993  09EE  0CA8               	rrf	___ftmul@f1,f
  7994  09EF  0B89               	decfsz	9,f
  7995  09F0  29EC               	goto	u5425
  7996  09F1  3001               	movlw	1
  7997  09F2                     u5435:	
  7998  09F2  36B5               	lsrf	___ftmul@f3_as_product+2,f
  7999  09F3  0CB4               	rrf	___ftmul@f3_as_product+1,f
  8000  09F4  0CB3               	rrf	___ftmul@f3_as_product,f
  8001  09F5  0B89               	decfsz	9,f
  8002  09F6  29F2               	goto	u5435
  8003  09F7  3001               	movlw	1
  8004  09F8  02B6               	subwf	___ftmul@cntr,f
  8005  09F9  1D03               	btfss	3,2
  8006  09FA  29E3               	goto	l5198
  8007  09FB  0833               	movf	___ftmul@f3_as_product,w
  8008  09FC  00A0               	movwf	___ftpack@arg
  8009  09FD  0834               	movf	___ftmul@f3_as_product+1,w
  8010  09FE  00A1               	movwf	___ftpack@arg+1
  8011  09FF  0835               	movf	___ftmul@f3_as_product+2,w
  8012  0A00  00A2               	movwf	___ftpack@arg+2
  8013  0A01  0832               	movf	___ftmul@exp,w
  8014  0A02  00AE               	movwf	??___ftmul
  8015  0A03  082E               	movf	??___ftmul,w
  8016  0A04  00A3               	movwf	___ftpack@exp
  8017  0A05  0837               	movf	___ftmul@sign,w
  8018  0A06  00AF               	movwf	??___ftmul+1
  8019  0A07  082F               	movf	??___ftmul+1,w
  8020  0A08  00A4               	movwf	___ftpack@sign
  8021  0A09  3196  26A8         	fcall	___ftpack
  8022  0A0B  0020               	movlb	0	; select bank0
  8023  0A0C  0820               	movf	?___ftpack,w
  8024  0A0D  00A8               	movwf	?___ftmul
  8025  0A0E  0821               	movf	?___ftpack+1,w
  8026  0A0F  00A9               	movwf	?___ftmul+1
  8027  0A10  0822               	movf	?___ftpack+2,w
  8028  0A11  00AA               	movwf	?___ftmul+2
  8029  0A12  0008               	return
  8030  0A13                     __end_of___ftmul:	
  8031                           
  8032                           	psect	text22
  8033  0803                     __ptext22:	
  8034 ;; *************** function ___ftdiv *****************
  8035 ;; Defined at:
  8036 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  8037 ;; Parameters:    Size  Location     Type
  8038 ;;  f2              3   14[BANK0 ] float 
  8039 ;;  f1              3   17[BANK0 ] float 
  8040 ;; Auto vars:     Size  Location     Type
  8041 ;;  f3              3   25[BANK0 ] float 
  8042 ;;  sign            1   29[BANK0 ] unsigned char 
  8043 ;;  exp             1   28[BANK0 ] unsigned char 
  8044 ;;  cntr            1   24[BANK0 ] unsigned char 
  8045 ;; Return value:  Size  Location     Type
  8046 ;;                  3   14[BANK0 ] float 
  8047 ;; Registers used:
  8048 ;;		wreg, status,2, status,0, pclath, cstack
  8049 ;; Tracked objects:
  8050 ;;		On entry : 0/0
  8051 ;;		On exit  : 0/0
  8052 ;;		Unchanged: 0/0
  8053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8054 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  8055 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0
  8056 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0
  8057 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0
  8058 ;;Total ram usage:       16 bytes
  8059 ;; Hardware stack levels used:    1
  8060 ;; Hardware stack levels required when called:    3
  8061 ;; This function calls:
  8062 ;;		___ftpack
  8063 ;; This function is called by:
  8064 ;;		_applicationControlRGB
  8065 ;; This function uses a non-reentrant model
  8066 ;;
  8067                           
  8068                           
  8069                           ;psect for function ___ftdiv
  8070  0803                     ___ftdiv:	
  8071                           
  8072                           ;incstack = 0
  8073                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  8074  0803  0020               	movlb	0	; select bank0
  8075  0804  0831               	movf	___ftdiv@f1,w
  8076  0805  00B4               	movwf	??___ftdiv
  8077  0806  0832               	movf	___ftdiv@f1+1,w
  8078  0807  00B5               	movwf	??___ftdiv+1
  8079  0808  0833               	movf	___ftdiv@f1+2,w
  8080  0809  00B6               	movwf	??___ftdiv+2
  8081  080A  1003               	clrc
  8082  080B  0D35               	rlf	??___ftdiv+1,w
  8083  080C  0D36               	rlf	??___ftdiv+2,w
  8084  080D  00B7               	movwf	??___ftdiv+3
  8085  080E  0837               	movf	??___ftdiv+3,w
  8086  080F  00BC               	movwf	___ftdiv@exp
  8087  0810  083C               	movf	___ftdiv@exp,w
  8088  0811  1D03               	btfss	3,2
  8089  0812  281A               	goto	l5126
  8090  0813  3000               	movlw	0
  8091  0814  00AE               	movwf	?___ftdiv
  8092  0815  3000               	movlw	0
  8093  0816  00AF               	movwf	?___ftdiv+1
  8094  0817  3000               	movlw	0
  8095  0818  00B0               	movwf	?___ftdiv+2
  8096  0819  0008               	return
  8097  081A                     l5126:	
  8098  081A  082E               	movf	___ftdiv@f2,w
  8099  081B  00B4               	movwf	??___ftdiv
  8100  081C  082F               	movf	___ftdiv@f2+1,w
  8101  081D  00B5               	movwf	??___ftdiv+1
  8102  081E  0830               	movf	___ftdiv@f2+2,w
  8103  081F  00B6               	movwf	??___ftdiv+2
  8104  0820  1003               	clrc
  8105  0821  0D35               	rlf	??___ftdiv+1,w
  8106  0822  0D36               	rlf	??___ftdiv+2,w
  8107  0823  00B7               	movwf	??___ftdiv+3
  8108  0824  0837               	movf	??___ftdiv+3,w
  8109  0825  00BD               	movwf	___ftdiv@sign
  8110  0826  083D               	movf	___ftdiv@sign,w
  8111  0827  1D03               	btfss	3,2
  8112  0828  2830               	goto	l5132
  8113  0829  3000               	movlw	0
  8114  082A  00AE               	movwf	?___ftdiv
  8115  082B  3000               	movlw	0
  8116  082C  00AF               	movwf	?___ftdiv+1
  8117  082D  3000               	movlw	0
  8118  082E  00B0               	movwf	?___ftdiv+2
  8119  082F  0008               	return
  8120  0830                     l5132:	
  8121  0830  3000               	movlw	0
  8122  0831  00B9               	movwf	___ftdiv@f3
  8123  0832  3000               	movlw	0
  8124  0833  00BA               	movwf	___ftdiv@f3+1
  8125  0834  3000               	movlw	0
  8126  0835  00BB               	movwf	___ftdiv@f3+2
  8127  0836  3089               	movlw	137
  8128  0837  073D               	addwf	___ftdiv@sign,w
  8129  0838  00B4               	movwf	??___ftdiv
  8130  0839  0834               	movf	??___ftdiv,w
  8131  083A  02BC               	subwf	___ftdiv@exp,f
  8132  083B  0831               	movf	___ftdiv@f1,w
  8133  083C  00B4               	movwf	??___ftdiv
  8134  083D  0832               	movf	___ftdiv@f1+1,w
  8135  083E  00B5               	movwf	??___ftdiv+1
  8136  083F  0833               	movf	___ftdiv@f1+2,w
  8137  0840  00B6               	movwf	??___ftdiv+2
  8138  0841  3010               	movlw	16
  8139  0842                     u5275:	
  8140  0842  36B6               	lsrf	??___ftdiv+2,f
  8141  0843  0CB5               	rrf	??___ftdiv+1,f
  8142  0844  0CB4               	rrf	??___ftdiv,f
  8143  0845  0B89               	decfsz	9,f
  8144  0846  2842               	goto	u5275
  8145  0847  0834               	movf	??___ftdiv,w
  8146  0848  00B7               	movwf	??___ftdiv+3
  8147  0849  0837               	movf	??___ftdiv+3,w
  8148  084A  00BD               	movwf	___ftdiv@sign
  8149  084B  082E               	movf	___ftdiv@f2,w
  8150  084C  00B4               	movwf	??___ftdiv
  8151  084D  082F               	movf	___ftdiv@f2+1,w
  8152  084E  00B5               	movwf	??___ftdiv+1
  8153  084F  0830               	movf	___ftdiv@f2+2,w
  8154  0850  00B6               	movwf	??___ftdiv+2
  8155  0851  3010               	movlw	16
  8156  0852                     u5285:	
  8157  0852  36B6               	lsrf	??___ftdiv+2,f
  8158  0853  0CB5               	rrf	??___ftdiv+1,f
  8159  0854  0CB4               	rrf	??___ftdiv,f
  8160  0855  0B89               	decfsz	9,f
  8161  0856  2852               	goto	u5285
  8162  0857  0834               	movf	??___ftdiv,w
  8163  0858  00B7               	movwf	??___ftdiv+3
  8164  0859  0837               	movf	??___ftdiv+3,w
  8165  085A  06BD               	xorwf	___ftdiv@sign,f
  8166  085B  3080               	movlw	128
  8167  085C  00B4               	movwf	??___ftdiv
  8168  085D  0834               	movf	??___ftdiv,w
  8169  085E  05BD               	andwf	___ftdiv@sign,f
  8170  085F  17B2               	bsf	___ftdiv@f1+1,7
  8171  0860  30FF               	movlw	255
  8172  0861  05B1               	andwf	___ftdiv@f1,f
  8173  0862  30FF               	movlw	255
  8174  0863  05B2               	andwf	___ftdiv@f1+1,f
  8175  0864  3000               	movlw	0
  8176  0865  05B3               	andwf	___ftdiv@f1+2,f
  8177  0866  17AF               	bsf	___ftdiv@f2+1,7
  8178  0867  30FF               	movlw	255
  8179  0868  05AE               	andwf	___ftdiv@f2,f
  8180  0869  30FF               	movlw	255
  8181  086A  05AF               	andwf	___ftdiv@f2+1,f
  8182  086B  3000               	movlw	0
  8183  086C  05B0               	andwf	___ftdiv@f2+2,f
  8184  086D  3018               	movlw	24
  8185  086E  00B4               	movwf	??___ftdiv
  8186  086F  0834               	movf	??___ftdiv,w
  8187  0870  00B8               	movwf	___ftdiv@cntr
  8188  0871                     l5146:	
  8189  0871  3001               	movlw	1
  8190  0872                     u5295:	
  8191  0872  35B9               	lslf	___ftdiv@f3,f
  8192  0873  0DBA               	rlf	___ftdiv@f3+1,f
  8193  0874  0DBB               	rlf	___ftdiv@f3+2,f
  8194  0875  0B89               	decfsz	9,f
  8195  0876  2872               	goto	u5295
  8196  0877  0830               	movf	___ftdiv@f2+2,w
  8197  0878  0233               	subwf	___ftdiv@f1+2,w
  8198  0879  1D03               	skipz
  8199  087A  2881               	goto	u5305
  8200  087B  082F               	movf	___ftdiv@f2+1,w
  8201  087C  0232               	subwf	___ftdiv@f1+1,w
  8202  087D  1D03               	skipz
  8203  087E  2881               	goto	u5305
  8204  087F  082E               	movf	___ftdiv@f2,w
  8205  0880  0231               	subwf	___ftdiv@f1,w
  8206  0881                     u5305:	
  8207  0881  1C03               	skipc
  8208  0882  288A               	goto	l5154
  8209  0883  082E               	movf	___ftdiv@f2,w
  8210  0884  02B1               	subwf	___ftdiv@f1,f
  8211  0885  082F               	movf	___ftdiv@f2+1,w
  8212  0886  3BB2               	subwfb	___ftdiv@f1+1,f
  8213  0887  0830               	movf	___ftdiv@f2+2,w
  8214  0888  3BB3               	subwfb	___ftdiv@f1+2,f
  8215  0889  1439               	bsf	___ftdiv@f3,0
  8216  088A                     l5154:	
  8217  088A  3001               	movlw	1
  8218  088B                     u5315:	
  8219  088B  35B1               	lslf	___ftdiv@f1,f
  8220  088C  0DB2               	rlf	___ftdiv@f1+1,f
  8221  088D  0DB3               	rlf	___ftdiv@f1+2,f
  8222  088E  0B89               	decfsz	9,f
  8223  088F  288B               	goto	u5315
  8224  0890  3001               	movlw	1
  8225  0891  02B8               	subwf	___ftdiv@cntr,f
  8226  0892  1D03               	btfss	3,2
  8227  0893  2871               	goto	l5146
  8228  0894  0839               	movf	___ftdiv@f3,w
  8229  0895  00A0               	movwf	___ftpack@arg
  8230  0896  083A               	movf	___ftdiv@f3+1,w
  8231  0897  00A1               	movwf	___ftpack@arg+1
  8232  0898  083B               	movf	___ftdiv@f3+2,w
  8233  0899  00A2               	movwf	___ftpack@arg+2
  8234  089A  083C               	movf	___ftdiv@exp,w
  8235  089B  00B4               	movwf	??___ftdiv
  8236  089C  0834               	movf	??___ftdiv,w
  8237  089D  00A3               	movwf	___ftpack@exp
  8238  089E  083D               	movf	___ftdiv@sign,w
  8239  089F  00B5               	movwf	??___ftdiv+1
  8240  08A0  0835               	movf	??___ftdiv+1,w
  8241  08A1  00A4               	movwf	___ftpack@sign
  8242  08A2  3196  26A8         	fcall	___ftpack
  8243  08A4  0020               	movlb	0	; select bank0
  8244  08A5  0820               	movf	?___ftpack,w
  8245  08A6  00AE               	movwf	?___ftdiv
  8246  08A7  0821               	movf	?___ftpack+1,w
  8247  08A8  00AF               	movwf	?___ftdiv+1
  8248  08A9  0822               	movf	?___ftpack+2,w
  8249  08AA  00B0               	movwf	?___ftdiv+2
  8250  08AB  0008               	return
  8251  08AC                     __end_of___ftdiv:	
  8252                           
  8253                           	psect	text23
  8254  13B8                     __ptext23:	
  8255 ;; *************** function ___awtoft *****************
  8256 ;; Defined at:
  8257 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  8258 ;; Parameters:    Size  Location     Type
  8259 ;;  c               2    8[BANK0 ] int 
  8260 ;; Auto vars:     Size  Location     Type
  8261 ;;  sign            1   13[BANK0 ] unsigned char 
  8262 ;; Return value:  Size  Location     Type
  8263 ;;                  3    8[BANK0 ] float 
  8264 ;; Registers used:
  8265 ;;		wreg, status,2, status,0, pclath, cstack
  8266 ;; Tracked objects:
  8267 ;;		On entry : 0/0
  8268 ;;		On exit  : 0/0
  8269 ;;		Unchanged: 0/0
  8270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8271 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0
  8272 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0
  8273 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  8274 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  8275 ;;Total ram usage:        6 bytes
  8276 ;; Hardware stack levels used:    1
  8277 ;; Hardware stack levels required when called:    3
  8278 ;; This function calls:
  8279 ;;		___ftpack
  8280 ;; This function is called by:
  8281 ;;		_applicationControlRGB
  8282 ;; This function uses a non-reentrant model
  8283 ;;
  8284                           
  8285                           
  8286                           ;psect for function ___awtoft
  8287  13B8                     ___awtoft:	
  8288                           
  8289                           ;incstack = 0
  8290                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8291  13B8  0020               	movlb	0	; select bank0
  8292  13B9  01AD               	clrf	___awtoft@sign
  8293  13BA  1FA9               	btfss	___awtoft@c+1,7
  8294  13BB  2BC3               	goto	l5116
  8295  13BC  09A8               	comf	___awtoft@c,f
  8296  13BD  09A9               	comf	___awtoft@c+1,f
  8297  13BE  0AA8               	incf	___awtoft@c,f
  8298  13BF  1903               	skipnz
  8299  13C0  0AA9               	incf	___awtoft@c+1,f
  8300  13C1  01AD               	clrf	___awtoft@sign
  8301  13C2  0AAD               	incf	___awtoft@sign,f
  8302  13C3                     l5116:	
  8303  13C3  0828               	movf	___awtoft@c,w
  8304  13C4  00A0               	movwf	___ftpack@arg
  8305  13C5  0829               	movf	___awtoft@c+1,w
  8306  13C6  00A1               	movwf	___ftpack@arg+1
  8307  13C7  01A2               	clrf	___ftpack@arg+2
  8308  13C8  308E               	movlw	142
  8309  13C9  00AB               	movwf	??___awtoft
  8310  13CA  082B               	movf	??___awtoft,w
  8311  13CB  00A3               	movwf	___ftpack@exp
  8312  13CC  082D               	movf	___awtoft@sign,w
  8313  13CD  00AC               	movwf	??___awtoft+1
  8314  13CE  082C               	movf	??___awtoft+1,w
  8315  13CF  00A4               	movwf	___ftpack@sign
  8316  13D0  3196  26A8         	fcall	___ftpack
  8317  13D2  0020               	movlb	0	; select bank0
  8318  13D3  0820               	movf	?___ftpack,w
  8319  13D4  00A8               	movwf	?___awtoft
  8320  13D5  0821               	movf	?___ftpack+1,w
  8321  13D6  00A9               	movwf	?___awtoft+1
  8322  13D7  0822               	movf	?___ftpack+2,w
  8323  13D8  00AA               	movwf	?___awtoft+2
  8324  13D9  0008               	return
  8325  13DA                     __end_of___awtoft:	
  8326                           
  8327                           	psect	text24
  8328  16A8                     __ptext24:	
  8329 ;; *************** function ___ftpack *****************
  8330 ;; Defined at:
  8331 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  8332 ;; Parameters:    Size  Location     Type
  8333 ;;  arg             3    0[BANK0 ] unsigned um
  8334 ;;  exp             1    3[BANK0 ] unsigned char 
  8335 ;;  sign            1    4[BANK0 ] unsigned char 
  8336 ;; Auto vars:     Size  Location     Type
  8337 ;;		None
  8338 ;; Return value:  Size  Location     Type
  8339 ;;                  3    0[BANK0 ] float 
  8340 ;; Registers used:
  8341 ;;		wreg, status,2, status,0
  8342 ;; Tracked objects:
  8343 ;;		On entry : 0/0
  8344 ;;		On exit  : 0/0
  8345 ;;		Unchanged: 0/0
  8346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8347 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0
  8348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  8349 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0
  8350 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0
  8351 ;;Total ram usage:        8 bytes
  8352 ;; Hardware stack levels used:    1
  8353 ;; Hardware stack levels required when called:    2
  8354 ;; This function calls:
  8355 ;;		Nothing
  8356 ;; This function is called by:
  8357 ;;		___awtoft
  8358 ;;		___ftdiv
  8359 ;;		___ftmul
  8360 ;;		___lwtoft
  8361 ;; This function uses a non-reentrant model
  8362 ;;
  8363                           
  8364                           
  8365                           ;psect for function ___ftpack
  8366  16A8                     ___ftpack:	
  8367                           
  8368                           ;incstack = 0
  8369                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  8370  16A8  0020               	movlb	0	; select bank0
  8371  16A9  0823               	movf	___ftpack@exp,w
  8372  16AA  1903               	btfsc	3,2
  8373  16AB  2EB1               	goto	l4738
  8374  16AC  0822               	movf	___ftpack@arg+2,w
  8375  16AD  0421               	iorwf	___ftpack@arg+1,w
  8376  16AE  0420               	iorwf	___ftpack@arg,w
  8377  16AF  1D03               	skipz
  8378  16B0  2EC2               	goto	l4744
  8379  16B1                     l4738:	
  8380  16B1  3000               	movlw	0
  8381  16B2  00A0               	movwf	?___ftpack
  8382  16B3  3000               	movlw	0
  8383  16B4  00A1               	movwf	?___ftpack+1
  8384  16B5  3000               	movlw	0
  8385  16B6  00A2               	movwf	?___ftpack+2
  8386  16B7  0008               	return
  8387  16B8                     l4742:	
  8388  16B8  3001               	movlw	1
  8389  16B9  00A5               	movwf	??___ftpack
  8390  16BA  0825               	movf	??___ftpack,w
  8391  16BB  07A3               	addwf	___ftpack@exp,f
  8392  16BC  3001               	movlw	1
  8393  16BD                     u4735:	
  8394  16BD  36A2               	lsrf	___ftpack@arg+2,f
  8395  16BE  0CA1               	rrf	___ftpack@arg+1,f
  8396  16BF  0CA0               	rrf	___ftpack@arg,f
  8397  16C0  0B89               	decfsz	9,f
  8398  16C1  2EBD               	goto	u4735
  8399  16C2                     l4744:	
  8400  16C2  30FE               	movlw	254
  8401  16C3  0522               	andwf	___ftpack@arg+2,w
  8402  16C4  1903               	btfsc	3,2
  8403  16C5  2EDB               	goto	l861
  8404  16C6  2EB8               	goto	l4742
  8405  16C7                     l4746:	
  8406  16C7  3001               	movlw	1
  8407  16C8  00A5               	movwf	??___ftpack
  8408  16C9  0825               	movf	??___ftpack,w
  8409  16CA  07A3               	addwf	___ftpack@exp,f
  8410  16CB  3001               	movlw	1
  8411  16CC  07A0               	addwf	___ftpack@arg,f
  8412  16CD  3000               	movlw	0
  8413  16CE  1803               	skipnc
  8414  16CF  3001               	movlw	1
  8415  16D0  07A1               	addwf	___ftpack@arg+1,f
  8416  16D1  3000               	movlw	0
  8417  16D2  1803               	skipnc
  8418  16D3  3001               	movlw	1
  8419  16D4  07A2               	addwf	___ftpack@arg+2,f
  8420  16D5  3001               	movlw	1
  8421  16D6                     u4755:	
  8422  16D6  36A2               	lsrf	___ftpack@arg+2,f
  8423  16D7  0CA1               	rrf	___ftpack@arg+1,f
  8424  16D8  0CA0               	rrf	___ftpack@arg,f
  8425  16D9  0B89               	decfsz	9,f
  8426  16DA  2ED6               	goto	u4755
  8427  16DB                     l861:	
  8428  16DB  30FF               	movlw	255
  8429  16DC  0522               	andwf	___ftpack@arg+2,w
  8430  16DD  1903               	btfsc	3,2
  8431  16DE  2EE8               	goto	l4754
  8432  16DF  2EC7               	goto	l4746
  8433  16E0                     l4752:	
  8434  16E0  3001               	movlw	1
  8435  16E1  02A3               	subwf	___ftpack@exp,f
  8436  16E2  3001               	movlw	1
  8437  16E3                     u4775:	
  8438  16E3  35A0               	lslf	___ftpack@arg,f
  8439  16E4  0DA1               	rlf	___ftpack@arg+1,f
  8440  16E5  0DA2               	rlf	___ftpack@arg+2,f
  8441  16E6  0B89               	decfsz	9,f
  8442  16E7  2EE3               	goto	u4775
  8443  16E8                     l4754:	
  8444  16E8  1BA1               	btfsc	___ftpack@arg+1,7
  8445  16E9  2EEE               	goto	l868
  8446  16EA  3002               	movlw	2
  8447  16EB  0223               	subwf	___ftpack@exp,w
  8448  16EC  1803               	skipnc
  8449  16ED  2EE0               	goto	l4752
  8450  16EE                     l868:	
  8451  16EE  1823               	btfsc	___ftpack@exp,0
  8452  16EF  2EF6               	goto	l869
  8453  16F0  30FF               	movlw	255
  8454  16F1  05A0               	andwf	___ftpack@arg,f
  8455  16F2  307F               	movlw	127
  8456  16F3  05A1               	andwf	___ftpack@arg+1,f
  8457  16F4  30FF               	movlw	255
  8458  16F5  05A2               	andwf	___ftpack@arg+2,f
  8459  16F6                     l869:	
  8460  16F6  1003               	clrc
  8461  16F7  0CA3               	rrf	___ftpack@exp,f
  8462  16F8  0823               	movf	___ftpack@exp,w
  8463  16F9  00A5               	movwf	??___ftpack
  8464  16FA  01A6               	clrf	??___ftpack+1
  8465  16FB  01A7               	clrf	??___ftpack+2
  8466  16FC  3010               	movlw	16
  8467  16FD                     u4815:	
  8468  16FD  35A5               	lslf	??___ftpack,f
  8469  16FE  0DA6               	rlf	??___ftpack+1,f
  8470  16FF  0DA7               	rlf	??___ftpack+2,f
  8471  1700  0B89               	decfsz	9,f
  8472  1701  2EFD               	goto	u4815
  8473  1702  0825               	movf	??___ftpack,w
  8474  1703  04A0               	iorwf	___ftpack@arg,f
  8475  1704  0826               	movf	??___ftpack+1,w
  8476  1705  04A1               	iorwf	___ftpack@arg+1,f
  8477  1706  0827               	movf	??___ftpack+2,w
  8478  1707  04A2               	iorwf	___ftpack@arg+2,f
  8479  1708  0824               	movf	___ftpack@sign,w
  8480  1709  1903               	btfsc	3,2
  8481  170A  0008               	return
  8482  170B  17A2               	bsf	___ftpack@arg+2,7
  8483  170C  0008               	return
  8484  170D                     __end_of___ftpack:	
  8485                           
  8486                           	psect	text25
  8487  0A13                     __ptext25:	
  8488 ;; *************** function _applianceControl *****************
  8489 ;; Defined at:
  8490 ;;		line 25 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\include\AutomationNew.h"
  8491 ;; Parameters:    Size  Location     Type
  8492 ;;  charSwitchMS    1    wreg     unsigned char 
  8493 ;;  charSwitchLS    1   13[BANK0 ] unsigned char 
  8494 ;;  charSwitchST    1   14[BANK0 ] unsigned char 
  8495 ;;  chDimmerSpee    1   15[BANK0 ] unsigned char 
  8496 ;;  chDimmerSpee    1   16[BANK0 ] unsigned char 
  8497 ;;  charParental    1   17[BANK0 ] unsigned char 
  8498 ;;  charFinalFra    1   18[BANK0 ] unsigned char 
  8499 ;; Auto vars:     Size  Location     Type
  8500 ;;  charSwitchMS    1   23[BANK0 ] unsigned char 
  8501 ;;  integerSwitc    2   32[BANK0 ] int 
  8502 ;;  currentState    2   30[BANK0 ] int 
  8503 ;;  integerSwitc    2   28[BANK0 ] int 
  8504 ;;  dimmerSpeedS    2   26[BANK0 ] unsigned char [2]
  8505 ;;  switchNumber    2   24[BANK0 ] unsigned char [2]
  8506 ;;  integerSpeed    2   21[BANK0 ] int 
  8507 ;; Return value:  Size  Location     Type
  8508 ;;                  1    wreg      void 
  8509 ;; Registers used:
  8510 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8511 ;; Tracked objects:
  8512 ;;		On entry : 0/0
  8513 ;;		On exit  : 0/0
  8514 ;;		Unchanged: 0/0
  8515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8516 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  8517 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0
  8518 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  8519 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0
  8520 ;;Total ram usage:       21 bytes
  8521 ;; Hardware stack levels used:    1
  8522 ;; Hardware stack levels required when called:    4
  8523 ;; This function calls:
  8524 ;;		_atoi
  8525 ;;		_sendAcknowledgment
  8526 ;; This function is called by:
  8527 ;;		_main
  8528 ;; This function uses a non-reentrant model
  8529 ;;
  8530                           
  8531                           
  8532                           ;psect for function _applianceControl
  8533  0A13                     _applianceControl:	
  8534                           
  8535                           ;incstack = 0
  8536                           ; Regs used in _applianceControl: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8537                           ;applianceControl@charSwitchMSB stored from wreg
  8538  0A13  0020               	movlb	0	; select bank0
  8539  0A14  00B7               	movwf	applianceControl@charSwitchMSB
  8540                           
  8541                           ;AutomationNew.h: 29: int integerSwitchNumber = 0;
  8542  0A15  01BC               	clrf	applianceControl@integerSwitchNumber
  8543  0A16  01BD               	clrf	applianceControl@integerSwitchNumber+1
  8544                           
  8545                           ;AutomationNew.h: 30: int integerSwitchState = 0;
  8546  0A17  01C0               	clrf	applianceControl@integerSwitchState
  8547  0A18  01C1               	clrf	applianceControl@integerSwitchState+1
  8548                           
  8549                           ;AutomationNew.h: 31: int integerSpeed = 0;
  8550  0A19  01B5               	clrf	applianceControl@integerSpeed
  8551  0A1A  01B6               	clrf	applianceControl@integerSpeed+1
  8552                           
  8553                           ;AutomationNew.h: 32: int currentStateBufferPositions=0;
  8554  0A1B  01BE               	clrf	applianceControl@currentStateBufferPositions
  8555  0A1C  01BF               	clrf	applianceControl@currentStateBufferPositions+1
  8556                           
  8557                           ;AutomationNew.h: 35: char switchNumberStringBuffer[2]="#";
  8558  0A1D  0022               	movlb	2	; select bank2
  8559  0A1E  0867               	movf	(applianceControl@F4004+1)^(0+256),w
  8560  0A1F  0020               	movlb	0	; select bank0
  8561  0A20  00B9               	movwf	applianceControl@switchNumberStringBuffer+1
  8562  0A21  0022               	movlb	2	; select bank2
  8563  0A22  0866               	movf	applianceControl@F4004^(0+256),w
  8564  0A23  0020               	movlb	0	; select bank0
  8565  0A24  00B8               	movwf	applianceControl@switchNumberStringBuffer
  8566                           
  8567                           ;AutomationNew.h: 36: char dimmerSpeedStringBuffer[2]="#";
  8568  0A25  0022               	movlb	2	; select bank2
  8569  0A26  0865               	movf	(applianceControl@F4006+1)^(0+256),w
  8570  0A27  0020               	movlb	0	; select bank0
  8571  0A28  00BB               	movwf	applianceControl@dimmerSpeedStringBuffer+1
  8572  0A29  0022               	movlb	2	; select bank2
  8573  0A2A  0864               	movf	applianceControl@F4006^(0+256),w
  8574  0A2B  0020               	movlb	0	; select bank0
  8575  0A2C  00BA               	movwf	applianceControl@dimmerSpeedStringBuffer
  8576                           
  8577                           ;AutomationNew.h: 38: switchNumberStringBuffer[0]=charSwitchMSB;
  8578  0A2D  0837               	movf	applianceControl@charSwitchMSB,w
  8579  0A2E  00B3               	movwf	??_applianceControl
  8580  0A2F  0833               	movf	??_applianceControl,w
  8581  0A30  00B8               	movwf	applianceControl@switchNumberStringBuffer
  8582                           
  8583                           ;AutomationNew.h: 39: switchNumberStringBuffer[1]=charSwitchLSB;
  8584  0A31  082D               	movf	applianceControl@charSwitchLSB,w
  8585  0A32  00B3               	movwf	??_applianceControl
  8586  0A33  0833               	movf	??_applianceControl,w
  8587  0A34  00B9               	movwf	applianceControl@switchNumberStringBuffer+1
  8588                           
  8589                           ;AutomationNew.h: 40: integerSwitchNumber = atoi(switchNumberStringBuffer);
  8590  0A35  3038               	movlw	low applianceControl@switchNumberStringBuffer
  8591  0A36  00A6               	movwf	atoi@s
  8592  0A37  3000               	movlw	high applianceControl@switchNumberStringBuffer
  8593  0A38  00A7               	movwf	atoi@s+1
  8594  0A39  3197  270D  318A   	fcall	_atoi
  8595  0A3C  0020               	movlb	0	; select bank0
  8596  0A3D  0827               	movf	?_atoi+1,w
  8597  0A3E  00BD               	movwf	applianceControl@integerSwitchNumber+1
  8598  0A3F  0826               	movf	?_atoi,w
  8599  0A40  00BC               	movwf	applianceControl@integerSwitchNumber
  8600                           
  8601                           ;AutomationNew.h: 44: integerSwitchState = charSwitchSTATE-'0';
  8602  0A41  082E               	movf	applianceControl@charSwitchSTATE,w
  8603  0A42  3ED0               	addlw	208
  8604  0A43  00C0               	movwf	applianceControl@integerSwitchState
  8605  0A44  30FF               	movlw	255
  8606  0A45  1803               	skipnc
  8607  0A46  3000               	movlw	0
  8608  0A47  00C1               	movwf	applianceControl@integerSwitchState+1
  8609                           
  8610                           ;AutomationNew.h: 47: dimmerSpeedStringBuffer[0]=chDimmerSpeedMSB;
  8611  0A48  082F               	movf	applianceControl@chDimmerSpeedMSB,w
  8612  0A49  00B3               	movwf	??_applianceControl
  8613  0A4A  0833               	movf	??_applianceControl,w
  8614  0A4B  00BA               	movwf	applianceControl@dimmerSpeedStringBuffer
  8615                           
  8616                           ;AutomationNew.h: 48: dimmerSpeedStringBuffer[1]=chDimmerSpeedLSB;
  8617  0A4C  0830               	movf	applianceControl@chDimmerSpeedLSB,w
  8618  0A4D  00B3               	movwf	??_applianceControl
  8619  0A4E  0833               	movf	??_applianceControl,w
  8620  0A4F  00BB               	movwf	applianceControl@dimmerSpeedStringBuffer+1
  8621                           
  8622                           ;AutomationNew.h: 49: integerSpeed = atoi(dimmerSpeedStringBuffer);
  8623  0A50  303A               	movlw	low applianceControl@dimmerSpeedStringBuffer
  8624  0A51  00A6               	movwf	atoi@s
  8625  0A52  3000               	movlw	high applianceControl@dimmerSpeedStringBuffer
  8626  0A53  00A7               	movwf	atoi@s+1
  8627  0A54  3197  270D  318A   	fcall	_atoi
  8628  0A57  0020               	movlb	0	; select bank0
  8629  0A58  0827               	movf	?_atoi+1,w
  8630  0A59  00B6               	movwf	applianceControl@integerSpeed+1
  8631  0A5A  0826               	movf	?_atoi,w
  8632  0A5B  00B5               	movwf	applianceControl@integerSpeed
  8633                           
  8634                           ;AutomationNew.h: 53: parentalLockBuffer[integerSwitchNumber] = charParentalControl;
  8635  0A5C  0831               	movf	applianceControl@charParentalControl,w
  8636  0A5D  00B3               	movwf	??_applianceControl
  8637  0A5E  083C               	movf	applianceControl@integerSwitchNumber,w
  8638  0A5F  3EC0               	addlw	(low (_parentalLockBuffer| (0+512)))& (0+255)
  8639  0A60  0086               	movwf	6
  8640  0A61  3002               	movlw	2	; select bank5/6
  8641  0A62  0087               	movwf	7
  8642  0A63  0833               	movf	??_applianceControl,w
  8643  0A64  0081               	movwf	1
  8644                           
  8645                           ;AutomationNew.h: 54: copy_parentalLockBuffer[integerSwitchNumber]=parentalLockBuffer[in
      +                          tegerSwitchNumber];
  8646  0A65  083C               	movf	applianceControl@integerSwitchNumber,w
  8647  0A66  3EC0               	addlw	(low (_parentalLockBuffer| (0+512)))& (0+255)
  8648  0A67  0086               	movwf	6
  8649  0A68  3002               	movlw	2	; select bank5/6
  8650  0A69  0087               	movwf	7
  8651  0A6A  0801               	movf	1,w
  8652  0A6B  00B3               	movwf	??_applianceControl
  8653  0A6C  083C               	movf	applianceControl@integerSwitchNumber,w
  8654  0A6D  3EB8               	addlw	(low (_copy_parentalLockBuffer| (0+256)))& (0+255)
  8655  0A6E  0086               	movwf	6
  8656  0A6F  3001               	movlw	1	; select bank3/4
  8657  0A70  0087               	movwf	7
  8658  0A71  0833               	movf	??_applianceControl,w
  8659  0A72  0081               	movwf	1
  8660                           
  8661                           ;AutomationNew.h: 57: currentStateBufferPositions = ((1+4*(integerSwitchNumber))-5);
  8662  0A73  083D               	movf	applianceControl@integerSwitchNumber+1,w
  8663  0A74  00B4               	movwf	??_applianceControl+1
  8664  0A75  083C               	movf	applianceControl@integerSwitchNumber,w
  8665  0A76  00B3               	movwf	??_applianceControl
  8666  0A77  35B3               	lslf	??_applianceControl,f
  8667  0A78  0DB4               	rlf	??_applianceControl+1,f
  8668  0A79  35B3               	lslf	??_applianceControl,f
  8669  0A7A  0DB4               	rlf	??_applianceControl+1,f
  8670  0A7B  0833               	movf	??_applianceControl,w
  8671  0A7C  3EFC               	addlw	252
  8672  0A7D  00BE               	movwf	applianceControl@currentStateBufferPositions
  8673  0A7E  30FF               	movlw	255
  8674  0A7F  3D34               	addwfc	??_applianceControl+1,w
  8675  0A80  00BF               	movwf	applianceControl@currentStateBufferPositions+1
  8676                           
  8677                           ;AutomationNew.h: 58: currentStateBuffer[currentStateBufferPositions++] = 'G';
  8678  0A81  3047               	movlw	71
  8679  0A82  00B3               	movwf	??_applianceControl
  8680  0A83  083E               	movf	applianceControl@currentStateBufferPositions,w
  8681  0A84  3EA0               	addlw	(low (_currentStateBuffer| (0+768)))& (0+255)
  8682  0A85  0086               	movwf	6
  8683  0A86  3003               	movlw	3	; select bank7/8
  8684  0A87  0087               	movwf	7
  8685  0A88  0833               	movf	??_applianceControl,w
  8686  0A89  0081               	movwf	1
  8687  0A8A  3001               	movlw	1
  8688  0A8B  07BE               	addwf	applianceControl@currentStateBufferPositions,f
  8689  0A8C  3000               	movlw	0
  8690  0A8D  3DBF               	addwfc	applianceControl@currentStateBufferPositions+1,f
  8691                           
  8692                           ;AutomationNew.h: 59: currentStateBuffer[currentStateBufferPositions++] = charSwitchSTAT
      +                          E;
  8693  0A8E  082E               	movf	applianceControl@charSwitchSTATE,w
  8694  0A8F  00B3               	movwf	??_applianceControl
  8695  0A90  083E               	movf	applianceControl@currentStateBufferPositions,w
  8696  0A91  3EA0               	addlw	(low (_currentStateBuffer| (0+768)))& (0+255)
  8697  0A92  0086               	movwf	6
  8698  0A93  3003               	movlw	3	; select bank7/8
  8699  0A94  0087               	movwf	7
  8700  0A95  0833               	movf	??_applianceControl,w
  8701  0A96  0081               	movwf	1
  8702  0A97  3001               	movlw	1
  8703  0A98  07BE               	addwf	applianceControl@currentStateBufferPositions,f
  8704  0A99  3000               	movlw	0
  8705  0A9A  3DBF               	addwfc	applianceControl@currentStateBufferPositions+1,f
  8706                           
  8707                           ;AutomationNew.h: 60: currentStateBuffer[currentStateBufferPositions++] = charSwitchMSB;
  8708  0A9B  0837               	movf	applianceControl@charSwitchMSB,w
  8709  0A9C  00B3               	movwf	??_applianceControl
  8710  0A9D  083E               	movf	applianceControl@currentStateBufferPositions,w
  8711  0A9E  3EA0               	addlw	(low (_currentStateBuffer| (0+768)))& (0+255)
  8712  0A9F  0086               	movwf	6
  8713  0AA0  3003               	movlw	3	; select bank7/8
  8714  0AA1  0087               	movwf	7
  8715  0AA2  0833               	movf	??_applianceControl,w
  8716  0AA3  0081               	movwf	1
  8717  0AA4  3001               	movlw	1
  8718  0AA5  07BE               	addwf	applianceControl@currentStateBufferPositions,f
  8719  0AA6  3000               	movlw	0
  8720  0AA7  3DBF               	addwfc	applianceControl@currentStateBufferPositions+1,f
  8721                           
  8722                           ;AutomationNew.h: 61: currentStateBuffer[currentStateBufferPositions] = charSwitchLSB;
  8723  0AA8  082D               	movf	applianceControl@charSwitchLSB,w
  8724  0AA9  00B3               	movwf	??_applianceControl
  8725  0AAA  083E               	movf	applianceControl@currentStateBufferPositions,w
  8726  0AAB  3EA0               	addlw	(low (_currentStateBuffer| (0+768)))& (0+255)
  8727  0AAC  0086               	movwf	6
  8728  0AAD  3003               	movlw	3	; select bank7/8
  8729  0AAE  0087               	movwf	7
  8730  0AAF  0833               	movf	??_applianceControl,w
  8731  0AB0  0081               	movwf	1
  8732                           
  8733                           ;AutomationNew.h: 63: currentStateBufferPositions-=3;
  8734  0AB1  30FD               	movlw	253
  8735  0AB2  07BE               	addwf	applianceControl@currentStateBufferPositions,f
  8736  0AB3  30FF               	movlw	255
  8737  0AB4  3DBF               	addwfc	applianceControl@currentStateBufferPositions+1,f
  8738                           
  8739                           ;AutomationNew.h: 64: if(charFinalFrameState == '1')
  8740  0AB5  3031               	movlw	49
  8741  0AB6  0632               	xorwf	applianceControl@charFinalFrameState,w
  8742  0AB7  1D03               	btfss	3,2
  8743  0AB8  2AFE               	goto	l5562
  8744                           
  8745                           ;AutomationNew.h: 65: {
  8746                           ;AutomationNew.h: 66: sendAcknowledgment(currentStateBuffer+currentStateBufferPositions)
      +                          ;
  8747  0AB9  083E               	movf	applianceControl@currentStateBufferPositions,w
  8748  0ABA  3EA0               	addlw	(low (_currentStateBuffer| (0+768)))& (0+255)
  8749  0ABB  00A0               	movwf	sendAcknowledgment@currentStateBuffer
  8750  0ABC  3003               	movlw	3
  8751  0ABD  00A1               	movwf	sendAcknowledgment@currentStateBuffer+1
  8752  0ABE  3192  22E2  318A   	fcall	_sendAcknowledgment
  8753                           
  8754                           ;AutomationNew.h: 67: }
  8755                           ;AutomationNew.h: 69: switch(integerSwitchNumber){
  8756  0AC1  2AFE               	goto	l5562
  8757  0AC2                     l5544:	
  8758                           ;AutomationNew.h: 70: case 1:
  8759                           
  8760                           
  8761                           ;AutomationNew.h: 71: {
  8762                           ;AutomationNew.h: 72: PORTEbits.RE0 = integerSwitchState;
  8763  0AC2  0020               	movlb	0	; select bank0
  8764  0AC3  0C40               	rrf	applianceControl@integerSwitchState,w
  8765  0AC4  1C03               	skipc
  8766  0AC5  1010               	bcf	16,0	;volatile
  8767  0AC6  1803               	skipnc
  8768  0AC7  1410               	bsf	16,0	;volatile
  8769                           
  8770                           ;AutomationNew.h: 73: }break;
  8771  0AC8  0008               	return
  8772  0AC9                     l5546:	
  8773                           ;AutomationNew.h: 75: case 2:
  8774                           
  8775                           
  8776                           ;AutomationNew.h: 76: {
  8777                           ;AutomationNew.h: 77: PORTEbits.RE1 = integerSwitchState;
  8778  0AC9  0C40               	rrf	applianceControl@integerSwitchState,w
  8779  0ACA  1C03               	skipc
  8780  0ACB  1090               	bcf	16,1	;volatile
  8781  0ACC  1803               	skipnc
  8782  0ACD  1490               	bsf	16,1	;volatile
  8783                           
  8784                           ;AutomationNew.h: 79: } break;
  8785  0ACE  0008               	return
  8786  0ACF                     l5548:	
  8787                           ;AutomationNew.h: 80: case 3:
  8788                           
  8789                           
  8790                           ;AutomationNew.h: 81: {
  8791                           ;AutomationNew.h: 82: PORTGbits.RG0 = integerSwitchState;
  8792  0ACF  0C40               	rrf	applianceControl@integerSwitchState,w
  8793  0AD0  0025               	movlb	5	; select bank5
  8794  0AD1  1C03               	skipc
  8795  0AD2  100D               	bcf	13,0	;volatile
  8796  0AD3  1803               	skipnc
  8797  0AD4  140D               	bsf	13,0	;volatile
  8798                           
  8799                           ;AutomationNew.h: 84: } break;
  8800  0AD5  0008               	return
  8801  0AD6                     l5550:	
  8802                           ;AutomationNew.h: 86: case 4:
  8803                           
  8804                           
  8805                           ;AutomationNew.h: 87: {
  8806                           ;AutomationNew.h: 88: PORTGbits.RG3 = integerSwitchState;
  8807  0AD6  0020               	movlb	0	; select bank0
  8808  0AD7  0C40               	rrf	applianceControl@integerSwitchState,w
  8809  0AD8  0025               	movlb	5	; select bank5
  8810  0AD9  1C03               	skipc
  8811  0ADA  118D               	bcf	13,3	;volatile
  8812  0ADB  1803               	skipnc
  8813  0ADC  158D               	bsf	13,3	;volatile
  8814                           
  8815                           ;AutomationNew.h: 89: }break;
  8816  0ADD  0008               	return
  8817  0ADE                     l5552:	
  8818                           ;AutomationNew.h: 90: case 5:
  8819                           
  8820                           
  8821                           ;AutomationNew.h: 91: {
  8822                           ;AutomationNew.h: 92: PORTGbits.RG4 = integerSwitchState;
  8823  0ADE  0020               	movlb	0	; select bank0
  8824  0ADF  0C40               	rrf	applianceControl@integerSwitchState,w
  8825  0AE0  0025               	movlb	5	; select bank5
  8826  0AE1  1C03               	skipc
  8827  0AE2  120D               	bcf	13,4	;volatile
  8828  0AE3  1803               	skipnc
  8829  0AE4  160D               	bsf	13,4	;volatile
  8830                           
  8831                           ;AutomationNew.h: 93: }break;
  8832  0AE5  0008               	return
  8833  0AE6                     l5554:	
  8834                           ;AutomationNew.h: 94: case 6:
  8835                           
  8836                           
  8837                           ;AutomationNew.h: 95: {
  8838                           ;AutomationNew.h: 96: PORTFbits.RF6 = integerSwitchState;
  8839  0AE6  0020               	movlb	0	; select bank0
  8840  0AE7  0C40               	rrf	applianceControl@integerSwitchState,w
  8841  0AE8  0025               	movlb	5	; select bank5
  8842  0AE9  1C03               	skipc
  8843  0AEA  130C               	bcf	12,6	;volatile
  8844  0AEB  1803               	skipnc
  8845  0AEC  170C               	bsf	12,6	;volatile
  8846                           
  8847                           ;AutomationNew.h: 97: }break;
  8848  0AED  0008               	return
  8849  0AEE                     l5556:	
  8850                           ;AutomationNew.h: 99: case 7:
  8851                           
  8852                           
  8853                           ;AutomationNew.h: 100: {
  8854                           ;AutomationNew.h: 101: PORTFbits.RF5 = integerSwitchState;
  8855  0AEE  0020               	movlb	0	; select bank0
  8856  0AEF  0C40               	rrf	applianceControl@integerSwitchState,w
  8857  0AF0  0025               	movlb	5	; select bank5
  8858  0AF1  1C03               	skipc
  8859  0AF2  128C               	bcf	12,5	;volatile
  8860  0AF3  1803               	skipnc
  8861  0AF4  168C               	bsf	12,5	;volatile
  8862                           
  8863                           ;AutomationNew.h: 102: }break;
  8864  0AF5  0008               	return
  8865  0AF6                     l5558:	
  8866                           ;AutomationNew.h: 104: case 8:
  8867                           
  8868                           
  8869                           ;AutomationNew.h: 105: {
  8870                           ;AutomationNew.h: 106: PORTFbits.RF4 = integerSwitchState;
  8871  0AF6  0020               	movlb	0	; select bank0
  8872  0AF7  0C40               	rrf	applianceControl@integerSwitchState,w
  8873  0AF8  0025               	movlb	5	; select bank5
  8874  0AF9  1C03               	skipc
  8875  0AFA  120C               	bcf	12,4	;volatile
  8876  0AFB  1803               	skipnc
  8877  0AFC  160C               	bsf	12,4	;volatile
  8878                           
  8879                           ;AutomationNew.h: 124: }
  8880                           
  8881                           ;AutomationNew.h: 123: break;
  8882                           
  8883                           ;AutomationNew.h: 122: default:
  8884                           
  8885                           ;AutomationNew.h: 107: }break;
  8886  0AFD  0008               	return
  8887  0AFE                     l5562:	
  8888                           
  8889                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8890                           ; Switch size 1, requested type "space"
  8891                           ; Number of cases is 1, Range of values is 0 to 0
  8892                           ; switch strategies available:
  8893                           ; Name         Instructions Cycles
  8894                           ; simple_byte            4     3 (average)
  8895                           ; direct_byte            8     6 (fixed)
  8896                           ; jumptable            260     6 (fixed)
  8897                           ;	Chosen strategy is simple_byte
  8898  0AFE  0020               	movlb	0	; select bank0
  8899  0AFF  083D               	movf	applianceControl@integerSwitchNumber+1,w
  8900  0B00  3A00               	xorlw	0	; case 0
  8901  0B01  1903               	skipnz
  8902  0B02  2B04               	goto	l6320
  8903  0B03  2B11               	goto	l435
  8904  0B04                     l6320:	
  8905                           
  8906                           ; Switch size 1, requested type "space"
  8907                           ; Number of cases is 8, Range of values is 1 to 8
  8908                           ; switch strategies available:
  8909                           ; Name         Instructions Cycles
  8910                           ; direct_byte           25     9 (fixed)
  8911                           ; simple_byte           25    13 (average)
  8912                           ; jumptable            263     9 (fixed)
  8913                           ;	Chosen strategy is direct_byte
  8914  0B04  083C               	movf	applianceControl@integerSwitchNumber,w
  8915  0B05  3EFF               	addlw	-1
  8916  0B06  1C03               	skipc
  8917  0B07  0008               	return
  8918  0B08  0084               	movwf	4
  8919  0B09  3008               	movlw	8
  8920  0B0A  0204               	subwf	4,w
  8921  0B0B  1803               	skipnc
  8922  0B0C  0008               	return
  8923  0B0D  3190               	movlp	high S6322
  8924  0B0E  3504               	lslf	4,w
  8925  0B0F  3E10               	addlw	low S6322
  8926  0B10  0082               	movwf	2
  8927  0B11                     l435:	
  8928  0B11  0008               	return
  8929  0B12                     __end_of_applianceControl:	
  8930                           
  8931                           	psect	swtext2
  8932  1010                     __pswtext2:	
  8933  1010                     S6322:	
  8934  1010  318A  2AC2         	ljmp	l5544
  8935  1012  318A  2AC9         	ljmp	l5546
  8936  1014  318A  2ACF         	ljmp	l5548
  8937  1016  318A  2AD6         	ljmp	l5550
  8938  1018  318A  2ADE         	ljmp	l5552
  8939  101A  318A  2AE6         	ljmp	l5554
  8940  101C  318A  2AEE         	ljmp	l5556
  8941  101E  318A  2AF6         	ljmp	l5558
  8942                           
  8943                           	psect	text26
  8944  12E2                     __ptext26:	
  8945 ;; *************** function _sendAcknowledgment *****************
  8946 ;; Defined at:
  8947 ;;		line 128 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\include\AutomationNew.h"
  8948 ;; Parameters:    Size  Location     Type
  8949 ;;  currentState    2    0[BANK0 ] PTR unsigned char 
  8950 ;;		 -> STR_20(27), currentStateBuffer(74), 
  8951 ;; Auto vars:     Size  Location     Type
  8952 ;;  Tx_count        2    2[BANK0 ] int 
  8953 ;; Return value:  Size  Location     Type
  8954 ;;                  1    wreg      void 
  8955 ;; Registers used:
  8956 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  8957 ;; Tracked objects:
  8958 ;;		On entry : 0/0
  8959 ;;		On exit  : 0/0
  8960 ;;		Unchanged: 0/0
  8961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8962 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  8963 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  8964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  8965 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  8966 ;;Total ram usage:        4 bytes
  8967 ;; Hardware stack levels used:    1
  8968 ;; Hardware stack levels required when called:    2
  8969 ;; This function calls:
  8970 ;;		Nothing
  8971 ;; This function is called by:
  8972 ;;		_applianceControl
  8973 ;;		_main
  8974 ;; This function uses a non-reentrant model
  8975 ;;
  8976                           
  8977                           
  8978                           ;psect for function _sendAcknowledgment
  8979  12E2                     _sendAcknowledgment:	
  8980                           
  8981                           ;AutomationNew.h: 129: int Tx_count=0;
  8982                           
  8983                           ;incstack = 0
  8984                           ; Regs used in _sendAcknowledgment: [wreg-fsr0h+status,2+status,0+pclath]
  8985  12E2  0020               	movlb	0	; select bank0
  8986  12E3  01A2               	clrf	sendAcknowledgment@Tx_count
  8987  12E4  01A3               	clrf	sendAcknowledgment@Tx_count+1
  8988  12E5                     l5000:	
  8989                           ;AutomationNew.h: 130: while(Tx_count!=4)
  8990                           
  8991  12E5  3004               	movlw	4
  8992  12E6  0622               	xorwf	sendAcknowledgment@Tx_count,w
  8993  12E7  0423               	iorwf	sendAcknowledgment@Tx_count+1,w
  8994  12E8  1903               	btfsc	3,2
  8995  12E9  0008               	return
  8996  12EA                     l440:	
  8997                           ;AutomationNew.h: 131: {
  8998                           ;AutomationNew.h: 132: while (!TX1STAbits.TRMT);
  8999                           
  9000  12EA  0023               	movlb	3	; select bank3
  9001  12EB  1C9E               	btfss	30,1	;volatile
  9002  12EC  2AEA               	goto	l440
  9003                           
  9004                           ;AutomationNew.h: 133: TX1REG = *currentStateBuffer;
  9005  12ED  0020               	movlb	0	; select bank0
  9006  12EE  0820               	movf	sendAcknowledgment@currentStateBuffer,w
  9007  12EF  0084               	movwf	4
  9008  12F0  0821               	movf	sendAcknowledgment@currentStateBuffer+1,w
  9009  12F1  0085               	movwf	5
  9010  12F2  0800               	movf	0,w	;code access
  9011  12F3  0023               	movlb	3	; select bank3
  9012  12F4  009A               	movwf	26	;volatile
  9013                           
  9014                           ;AutomationNew.h: 134: *currentStateBuffer++;
  9015  12F5  3001               	movlw	1
  9016  12F6  0020               	movlb	0	; select bank0
  9017  12F7  07A0               	addwf	sendAcknowledgment@currentStateBuffer,f
  9018  12F8  3000               	movlw	0
  9019  12F9  3DA1               	addwfc	sendAcknowledgment@currentStateBuffer+1,f
  9020                           
  9021                           ;AutomationNew.h: 135: Tx_count++;
  9022  12FA  3001               	movlw	1
  9023  12FB  07A2               	addwf	sendAcknowledgment@Tx_count,f
  9024  12FC  3000               	movlw	0
  9025  12FD  3DA3               	addwfc	sendAcknowledgment@Tx_count+1,f
  9026  12FE  2AE5               	goto	l5000
  9027  12FF                     __end_of_sendAcknowledgment:	
  9028                           
  9029                           	psect	text27
  9030  170D                     __ptext27:	
  9031 ;; *************** function _atoi *****************
  9032 ;; Defined at:
  9033 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  9034 ;; Parameters:    Size  Location     Type
  9035 ;;  s               2    6[BANK0 ] PTR const unsigned char 
  9036 ;;		 -> ChildLockbuffer(2), switchstatusbuffer(2), switchNumberBuffer(3), copymainReceivedDataBuffer(32), 
  9037 ;;		 -> applianceControl@dimmerSpeedStringBuffer(2), applianceControl@switchNumberStringBuffer(2), NULL(0), 
  9038 ;; Auto vars:     Size  Location     Type
  9039 ;;  a               2   11[BANK0 ] int 
  9040 ;;  sign            1   10[BANK0 ] unsigned char 
  9041 ;; Return value:  Size  Location     Type
  9042 ;;                  2    6[BANK0 ] int 
  9043 ;; Registers used:
  9044 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9045 ;; Tracked objects:
  9046 ;;		On entry : 0/0
  9047 ;;		On exit  : 0/0
  9048 ;;		Unchanged: 0/0
  9049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9050 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  9051 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  9052 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  9053 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0
  9054 ;;Total ram usage:        7 bytes
  9055 ;; Hardware stack levels used:    1
  9056 ;; Hardware stack levels required when called:    3
  9057 ;; This function calls:
  9058 ;;		___wmul
  9059 ;;		_isdigit
  9060 ;; This function is called by:
  9061 ;;		_applicationControlRGB
  9062 ;;		_applianceControl
  9063 ;; This function uses a non-reentrant model
  9064 ;;
  9065                           
  9066                           
  9067                           ;psect for function _atoi
  9068  170D                     _atoi:	
  9069  170D                     l4818:	
  9070                           ;incstack = 0
  9071                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9072                           
  9073  170D  0020               	movlb	0	; select bank0
  9074  170E  0826               	movf	atoi@s,w
  9075  170F  0086               	movwf	6
  9076  1710  0827               	movf	atoi@s+1,w
  9077  1711  0087               	movwf	7
  9078  1712  3020               	movlw	32
  9079  1713  0601               	xorwf	1,w
  9080  1714  1D03               	btfss	3,2
  9081  1715  2F1C               	goto	l4820
  9082  1716                     l4816:	
  9083  1716  3001               	movlw	1
  9084  1717  0020               	movlb	0	; select bank0
  9085  1718  07A6               	addwf	atoi@s,f
  9086  1719  3000               	movlw	0
  9087  171A  3DA7               	addwfc	atoi@s+1,f
  9088  171B  2F0D               	goto	l4818
  9089  171C                     l4820:	
  9090  171C  0826               	movf	atoi@s,w
  9091  171D  0086               	movwf	6
  9092  171E  0827               	movf	atoi@s+1,w
  9093  171F  0087               	movwf	7
  9094  1720  3009               	movlw	9
  9095  1721  0601               	xorwf	1,w
  9096  1722  1903               	btfsc	3,2
  9097  1723  2F16               	goto	l4816
  9098  1724  01AB               	clrf	atoi@a
  9099  1725  01AC               	clrf	atoi@a+1
  9100  1726  01AA               	clrf	atoi@sign
  9101  1727  0826               	movf	atoi@s,w
  9102  1728  0086               	movwf	6
  9103  1729  0827               	movf	atoi@s+1,w
  9104  172A  0087               	movwf	7
  9105  172B  302D               	movlw	45
  9106  172C  0601               	xorwf	1,w
  9107  172D  1D03               	btfss	3,2
  9108  172E  2F34               	goto	l4830
  9109  172F  3001               	movlw	1
  9110  1730  00A8               	movwf	??_atoi
  9111  1731  0828               	movf	??_atoi,w
  9112  1732  07AA               	addwf	atoi@sign,f
  9113  1733  2F3C               	goto	l4836
  9114  1734                     l4830:	
  9115  1734  0826               	movf	atoi@s,w
  9116  1735  0086               	movwf	6
  9117  1736  0827               	movf	atoi@s+1,w
  9118  1737  0087               	movwf	7
  9119  1738  302B               	movlw	43
  9120  1739  0601               	xorwf	1,w
  9121  173A  1D03               	btfss	3,2
  9122  173B  2F40               	goto	l4838
  9123  173C                     l4836:	
  9124  173C  3001               	movlw	1
  9125  173D  07A6               	addwf	atoi@s,f
  9126  173E  3000               	movlw	0
  9127  173F  3DA7               	addwfc	atoi@s+1,f
  9128  1740                     l4838:	
  9129  1740  0826               	movf	atoi@s,w
  9130  1741  0086               	movwf	6
  9131  1742  0827               	movf	atoi@s+1,w
  9132  1743  0087               	movwf	7
  9133  1744  0801               	movf	1,w
  9134  1745  3191  21CA  3197   	fcall	_isdigit
  9135  1748  1C03               	btfss	3,0
  9136  1749  2F69               	goto	l4840
  9137  174A  0020               	movlb	0	; select bank0
  9138  174B  082C               	movf	atoi@a+1,w
  9139  174C  00A1               	movwf	___wmul@multiplier+1
  9140  174D  082B               	movf	atoi@a,w
  9141  174E  00A0               	movwf	___wmul@multiplier
  9142  174F  300A               	movlw	10
  9143  1750  00A2               	movwf	___wmul@multiplicand
  9144  1751  3000               	movlw	0
  9145  1752  00A3               	movwf	___wmul@multiplicand+1
  9146  1753  3192  22AA  3197   	fcall	___wmul
  9147  1756  0020               	movlb	0	; select bank0
  9148  1757  0826               	movf	atoi@s,w
  9149  1758  0086               	movwf	6
  9150  1759  0827               	movf	atoi@s+1,w
  9151  175A  0087               	movwf	7
  9152  175B  0801               	movf	1,w
  9153  175C  0720               	addwf	?___wmul,w
  9154  175D  00A8               	movwf	??_atoi
  9155  175E  0821               	movf	?___wmul+1,w
  9156  175F  1803               	skipnc
  9157  1760  0A21               	incf	?___wmul+1,w
  9158  1761  00A9               	movwf	??_atoi+1
  9159  1762  0828               	movf	??_atoi,w
  9160  1763  3ED0               	addlw	208
  9161  1764  00AB               	movwf	atoi@a
  9162  1765  30FF               	movlw	255
  9163  1766  3D29               	addwfc	??_atoi+1,w
  9164  1767  00AC               	movwf	atoi@a+1
  9165  1768  2F3C               	goto	l4836
  9166  1769                     l4840:	
  9167  1769  0020               	movlb	0	; select bank0
  9168  176A  082A               	movf	atoi@sign,w
  9169  176B  1903               	btfsc	3,2
  9170  176C  2F79               	goto	l4846
  9171  176D  092B               	comf	atoi@a,w
  9172  176E  00A8               	movwf	??_atoi
  9173  176F  092C               	comf	atoi@a+1,w
  9174  1770  00A9               	movwf	??_atoi+1
  9175  1771  0AA8               	incf	??_atoi,f
  9176  1772  1903               	skipnz
  9177  1773  0AA9               	incf	??_atoi+1,f
  9178  1774  0828               	movf	??_atoi,w
  9179  1775  00A6               	movwf	?_atoi
  9180  1776  0829               	movf	??_atoi+1,w
  9181  1777  00A7               	movwf	?_atoi+1
  9182  1778  0008               	return
  9183  1779                     l4846:	
  9184  1779  082C               	movf	atoi@a+1,w
  9185  177A  00A7               	movwf	?_atoi+1
  9186  177B  082B               	movf	atoi@a,w
  9187  177C  00A6               	movwf	?_atoi
  9188  177D  0008               	return
  9189  177E                     __end_of_atoi:	
  9190                           
  9191                           	psect	text28
  9192  11CA                     __ptext28:	
  9193 ;; *************** function _isdigit *****************
  9194 ;; Defined at:
  9195 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  9196 ;; Parameters:    Size  Location     Type
  9197 ;;  c               1    wreg     unsigned char 
  9198 ;; Auto vars:     Size  Location     Type
  9199 ;;  c               1    1[BANK0 ] unsigned char 
  9200 ;; Return value:  Size  Location     Type
  9201 ;;		None               void
  9202 ;; Registers used:
  9203 ;;		wreg, status,2, status,0
  9204 ;; Tracked objects:
  9205 ;;		On entry : 0/0
  9206 ;;		On exit  : 0/0
  9207 ;;		Unchanged: 0/0
  9208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9210 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  9211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9212 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0
  9213 ;;Total ram usage:        2 bytes
  9214 ;; Hardware stack levels used:    1
  9215 ;; Hardware stack levels required when called:    2
  9216 ;; This function calls:
  9217 ;;		Nothing
  9218 ;; This function is called by:
  9219 ;;		_atoi
  9220 ;; This function uses a non-reentrant model
  9221 ;;
  9222                           
  9223                           
  9224                           ;psect for function _isdigit
  9225  11CA                     _isdigit:	
  9226                           
  9227                           ;incstack = 0
  9228                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  9229                           ;isdigit@c stored from wreg
  9230  11CA  0020               	movlb	0	; select bank0
  9231  11CB  00A1               	movwf	isdigit@c
  9232  11CC  01A0               	clrf	_isdigit$1388
  9233  11CD  303A               	movlw	58
  9234  11CE  0221               	subwf	isdigit@c,w
  9235  11CF  1803               	skipnc
  9236  11D0  29D7               	goto	l4774
  9237  11D1  3030               	movlw	48
  9238  11D2  0221               	subwf	isdigit@c,w
  9239  11D3  1C03               	skipc
  9240  11D4  29D7               	goto	l4774
  9241  11D5  01A0               	clrf	_isdigit$1388
  9242  11D6  0AA0               	incf	_isdigit$1388,f
  9243  11D7                     l4774:	
  9244  11D7  0C20               	rrf	_isdigit$1388,w
  9245  11D8  0008               	return
  9246  11D9                     __end_of_isdigit:	
  9247                           
  9248                           	psect	text29
  9249  12AA                     __ptext29:	
  9250 ;; *************** function ___wmul *****************
  9251 ;; Defined at:
  9252 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  9253 ;; Parameters:    Size  Location     Type
  9254 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9255 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9256 ;; Auto vars:     Size  Location     Type
  9257 ;;  product         2    4[BANK0 ] unsigned int 
  9258 ;; Return value:  Size  Location     Type
  9259 ;;                  2    0[BANK0 ] unsigned int 
  9260 ;; Registers used:
  9261 ;;		wreg, status,2, status,0
  9262 ;; Tracked objects:
  9263 ;;		On entry : 0/0
  9264 ;;		On exit  : 0/0
  9265 ;;		Unchanged: 0/0
  9266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9267 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  9268 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  9269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9270 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  9271 ;;Total ram usage:        6 bytes
  9272 ;; Hardware stack levels used:    1
  9273 ;; Hardware stack levels required when called:    2
  9274 ;; This function calls:
  9275 ;;		Nothing
  9276 ;; This function is called by:
  9277 ;;		_hexadecimalToDecimal
  9278 ;;		_atoi
  9279 ;; This function uses a non-reentrant model
  9280 ;;
  9281                           
  9282                           
  9283                           ;psect for function ___wmul
  9284  12AA                     ___wmul:	
  9285                           
  9286                           ;incstack = 0
  9287                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9288  12AA  0020               	movlb	0	; select bank0
  9289  12AB  01A4               	clrf	___wmul@product
  9290  12AC  01A5               	clrf	___wmul@product+1
  9291  12AD                     l4722:	
  9292  12AD  1C20               	btfss	___wmul@multiplier,0
  9293  12AE  2AB3               	goto	l681
  9294  12AF  0822               	movf	___wmul@multiplicand,w
  9295  12B0  07A4               	addwf	___wmul@product,f
  9296  12B1  0823               	movf	___wmul@multiplicand+1,w
  9297  12B2  3DA5               	addwfc	___wmul@product+1,f
  9298  12B3                     l681:	
  9299  12B3  3001               	movlw	1
  9300  12B4                     u4685:	
  9301  12B4  35A2               	lslf	___wmul@multiplicand,f
  9302  12B5  0DA3               	rlf	___wmul@multiplicand+1,f
  9303  12B6  0B89               	decfsz	9,f
  9304  12B7  2AB4               	goto	u4685
  9305  12B8  3001               	movlw	1
  9306  12B9                     u4695:	
  9307  12B9  36A1               	lsrf	___wmul@multiplier+1,f
  9308  12BA  0CA0               	rrf	___wmul@multiplier,f
  9309  12BB  0B89               	decfsz	9,f
  9310  12BC  2AB9               	goto	u4695
  9311  12BD  0820               	movf	___wmul@multiplier,w
  9312  12BE  0421               	iorwf	___wmul@multiplier+1,w
  9313  12BF  1D03               	btfss	3,2
  9314  12C0  2AAD               	goto	l4722
  9315  12C1  0825               	movf	___wmul@product+1,w
  9316  12C2  00A1               	movwf	?___wmul+1
  9317  12C3  0824               	movf	___wmul@product,w
  9318  12C4  00A0               	movwf	?___wmul
  9319  12C5  0008               	return
  9320  12C6                     __end_of___wmul:	
  9321                           
  9322                           	psect	text30
  9323  131C                     __ptext30:	
  9324 ;; *************** function _allPeripheralInit *****************
  9325 ;; Defined at:
  9326 ;;		line 940 in file "main.c"
  9327 ;; Parameters:    Size  Location     Type
  9328 ;;		None
  9329 ;; Auto vars:     Size  Location     Type
  9330 ;;		None
  9331 ;; Return value:  Size  Location     Type
  9332 ;;                  1    wreg      void 
  9333 ;; Registers used:
  9334 ;;		wreg, status,2, status,0, pclath, cstack
  9335 ;; Tracked objects:
  9336 ;;		On entry : 0/0
  9337 ;;		On exit  : 0/0
  9338 ;;		Unchanged: 0/0
  9339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9344 ;;Total ram usage:        0 bytes
  9345 ;; Hardware stack levels used:    1
  9346 ;; Hardware stack levels required when called:    3
  9347 ;; This function calls:
  9348 ;;		_CCP7_Initialize
  9349 ;;		_CCP8_Initialize
  9350 ;;		_CCP9_Initialize
  9351 ;;		_EUSART_Initialize
  9352 ;;		_TMR1_Initialize
  9353 ;;		_TMR2_Initialize
  9354 ;;		_TMR3_Initialize
  9355 ;;		_TMR4_Initialize
  9356 ;;		_TMR5_Initialize
  9357 ;;		_TMR6_Initialize
  9358 ;; This function is called by:
  9359 ;;		_main
  9360 ;; This function uses a non-reentrant model
  9361 ;;
  9362                           
  9363                           
  9364                           ;psect for function _allPeripheralInit
  9365  131C                     _allPeripheralInit:	
  9366                           
  9367                           ;main.c: 941: EUSART_Initialize();
  9368                           
  9369                           ;incstack = 0
  9370                           ; Regs used in _allPeripheralInit: [wreg+status,2+status,0+pclath+cstack]
  9371  131C  3192  2246  3193   	fcall	_EUSART_Initialize
  9372                           
  9373                           ;main.c: 942: TMR1_Initialize();
  9374  131F  3191  21A8  3193   	fcall	_TMR1_Initialize
  9375                           
  9376                           ;main.c: 943: TMR2_Initialize();
  9377  1322  3191  2194  3193   	fcall	_TMR2_Initialize
  9378                           
  9379                           ;main.c: 944: TMR3_Initialize();
  9380  1325  3191  21BE  3193   	fcall	_TMR3_Initialize
  9381                           
  9382                           ;main.c: 945: TMR4_Initialize();
  9383  1328  3191  21B3  3193   	fcall	_TMR4_Initialize
  9384                           
  9385                           ;main.c: 946: TMR5_Initialize();
  9386  132B  3191  219E  3193   	fcall	_TMR5_Initialize
  9387                           
  9388                           ;main.c: 947: TMR6_Initialize();
  9389  132E  3191  216D  3193   	fcall	_TMR6_Initialize
  9390                           
  9391                           ;main.c: 949: CCP9_Initialize();
  9392  1331  3191  218A  3193   	fcall	_CCP9_Initialize
  9393                           
  9394                           ;main.c: 950: CCP8_Initialize();
  9395  1334  3191  2180  3193   	fcall	_CCP8_Initialize
  9396                           
  9397                           ;main.c: 951: CCP7_Initialize();
  9398  1337  3191  2176         	fcall	_CCP7_Initialize
  9399  1339  0008               	return
  9400  133A                     __end_of_allPeripheralInit:	
  9401                           
  9402                           	psect	text31
  9403  116D                     __ptext31:	
  9404 ;; *************** function _TMR6_Initialize *****************
  9405 ;; Defined at:
  9406 ;;		line 1129 in file "main.c"
  9407 ;; Parameters:    Size  Location     Type
  9408 ;;		None
  9409 ;; Auto vars:     Size  Location     Type
  9410 ;;		None
  9411 ;; Return value:  Size  Location     Type
  9412 ;;                  1    wreg      void 
  9413 ;; Registers used:
  9414 ;;		wreg, status,2
  9415 ;; Tracked objects:
  9416 ;;		On entry : 0/0
  9417 ;;		On exit  : 0/0
  9418 ;;		Unchanged: 0/0
  9419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9424 ;;Total ram usage:        0 bytes
  9425 ;; Hardware stack levels used:    1
  9426 ;; Hardware stack levels required when called:    2
  9427 ;; This function calls:
  9428 ;;		Nothing
  9429 ;; This function is called by:
  9430 ;;		_allPeripheralInit
  9431 ;; This function uses a non-reentrant model
  9432 ;;
  9433                           
  9434                           
  9435                           ;psect for function _TMR6_Initialize
  9436  116D                     _TMR6_Initialize:	
  9437                           
  9438                           ;main.c: 1134: T6CON = 0x08;
  9439                           
  9440                           ;incstack = 0
  9441                           ; Regs used in _TMR6_Initialize: [wreg+status,2]
  9442  116D  3008               	movlw	8
  9443  116E  0028               	movlb	8	; select bank8
  9444  116F  009E               	movwf	30	;volatile
  9445                           
  9446                           ;main.c: 1140: TMR6 = 0x00;
  9447  1170  019C               	clrf	28	;volatile
  9448                           
  9449                           ;main.c: 1143: PIR3bits.TMR6IF = 0;
  9450  1171  0020               	movlb	0	; select bank0
  9451  1172  1193               	bcf	19,3	;volatile
  9452                           
  9453                           ;main.c: 1146: PIE3bits.TMR6IE = 1;
  9454  1173  0021               	movlb	1	; select bank1
  9455  1174  1593               	bsf	19,3	;volatile
  9456  1175  0008               	return
  9457  1176                     __end_of_TMR6_Initialize:	
  9458                           
  9459                           	psect	text32
  9460  119E                     __ptext32:	
  9461 ;; *************** function _TMR5_Initialize *****************
  9462 ;; Defined at:
  9463 ;;		line 1057 in file "main.c"
  9464 ;; Parameters:    Size  Location     Type
  9465 ;;		None
  9466 ;; Auto vars:     Size  Location     Type
  9467 ;;		None
  9468 ;; Return value:  Size  Location     Type
  9469 ;;                  1    wreg      void 
  9470 ;; Registers used:
  9471 ;;		status,2
  9472 ;; Tracked objects:
  9473 ;;		On entry : 0/0
  9474 ;;		On exit  : 0/0
  9475 ;;		Unchanged: 0/0
  9476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9481 ;;Total ram usage:        0 bytes
  9482 ;; Hardware stack levels used:    1
  9483 ;; Hardware stack levels required when called:    2
  9484 ;; This function calls:
  9485 ;;		Nothing
  9486 ;; This function is called by:
  9487 ;;		_allPeripheralInit
  9488 ;; This function uses a non-reentrant model
  9489 ;;
  9490                           
  9491                           
  9492                           ;psect for function _TMR5_Initialize
  9493  119E                     _TMR5_Initialize:	
  9494                           
  9495                           ;main.c: 1062: T5CON = 0x00;
  9496                           
  9497                           ;incstack = 0
  9498                           ; Regs used in _TMR5_Initialize: [status,2]
  9499  119E  0028               	movlb	8	; select bank8
  9500  119F  019A               	clrf	26	;volatile
  9501                           
  9502                           ;main.c: 1065: T5GCON = 0x00;
  9503  11A0  019B               	clrf	27	;volatile
  9504                           
  9505                           ;main.c: 1068: TMR5H = 0x00;
  9506  11A1  0199               	clrf	25	;volatile
  9507                           
  9508                           ;main.c: 1071: TMR5L = 0x00;
  9509  11A2  0198               	clrf	24	;volatile
  9510                           
  9511                           ;main.c: 1074: PIR3bits.TMR5IF = 0;
  9512  11A3  0020               	movlb	0	; select bank0
  9513  11A4  1113               	bcf	19,2	;volatile
  9514                           
  9515                           ;main.c: 1077: PIE3bits.TMR5IE = 1;
  9516  11A5  0021               	movlb	1	; select bank1
  9517  11A6  1513               	bsf	19,2	;volatile
  9518  11A7  0008               	return
  9519  11A8                     __end_of_TMR5_Initialize:	
  9520                           
  9521                           	psect	text33
  9522  11B3                     __ptext33:	
  9523 ;; *************** function _TMR4_Initialize *****************
  9524 ;; Defined at:
  9525 ;;		line 1105 in file "main.c"
  9526 ;; Parameters:    Size  Location     Type
  9527 ;;		None
  9528 ;; Auto vars:     Size  Location     Type
  9529 ;;		None
  9530 ;; Return value:  Size  Location     Type
  9531 ;;                  1    wreg      void 
  9532 ;; Registers used:
  9533 ;;		wreg, status,2
  9534 ;; Tracked objects:
  9535 ;;		On entry : 0/0
  9536 ;;		On exit  : 0/0
  9537 ;;		Unchanged: 0/0
  9538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9543 ;;Total ram usage:        0 bytes
  9544 ;; Hardware stack levels used:    1
  9545 ;; Hardware stack levels required when called:    2
  9546 ;; This function calls:
  9547 ;;		Nothing
  9548 ;; This function is called by:
  9549 ;;		_allPeripheralInit
  9550 ;; This function uses a non-reentrant model
  9551 ;;
  9552                           
  9553                           
  9554                           ;psect for function _TMR4_Initialize
  9555  11B3                     _TMR4_Initialize:	
  9556                           
  9557                           ;main.c: 1110: T4CON = 0x08;
  9558                           
  9559                           ;incstack = 0
  9560                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
  9561  11B3  3008               	movlw	8
  9562  11B4  0028               	movlb	8	; select bank8
  9563  11B5  0097               	movwf	23	;volatile
  9564                           
  9565                           ;main.c: 1116: TMR4 = 0x00;
  9566  11B6  0195               	clrf	21	;volatile
  9567                           
  9568                           ;main.c: 1119: PIR3bits.TMR4IF = 0;
  9569  11B7  0020               	movlb	0	; select bank0
  9570  11B8  1093               	bcf	19,1	;volatile
  9571                           
  9572                           ;main.c: 1122: PIE3bits.TMR4IE = 1;
  9573  11B9  0021               	movlb	1	; select bank1
  9574  11BA  1493               	bsf	19,1	;volatile
  9575                           
  9576                           ;main.c: 1123: GIE = 1;
  9577  11BB  178B               	bsf	11,7	;volatile
  9578                           
  9579                           ;main.c: 1126: PEIE = 1;
  9580  11BC  170B               	bsf	11,6	;volatile
  9581  11BD  0008               	return
  9582  11BE                     __end_of_TMR4_Initialize:	
  9583                           
  9584                           	psect	text34
  9585  11BE                     __ptext34:	
  9586 ;; *************** function _TMR3_Initialize *****************
  9587 ;; Defined at:
  9588 ;;		line 1027 in file "main.c"
  9589 ;; Parameters:    Size  Location     Type
  9590 ;;		None
  9591 ;; Auto vars:     Size  Location     Type
  9592 ;;		None
  9593 ;; Return value:  Size  Location     Type
  9594 ;;                  1    wreg      void 
  9595 ;; Registers used:
  9596 ;;		status,2
  9597 ;; Tracked objects:
  9598 ;;		On entry : 0/0
  9599 ;;		On exit  : 0/0
  9600 ;;		Unchanged: 0/0
  9601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9606 ;;Total ram usage:        0 bytes
  9607 ;; Hardware stack levels used:    1
  9608 ;; Hardware stack levels required when called:    2
  9609 ;; This function calls:
  9610 ;;		Nothing
  9611 ;; This function is called by:
  9612 ;;		_allPeripheralInit
  9613 ;; This function uses a non-reentrant model
  9614 ;;
  9615                           
  9616                           
  9617                           ;psect for function _TMR3_Initialize
  9618  11BE                     _TMR3_Initialize:	
  9619                           
  9620                           ;main.c: 1030: T3CON = 0x00;
  9621                           
  9622                           ;incstack = 0
  9623                           ; Regs used in _TMR3_Initialize: [status,2]
  9624  11BE  0028               	movlb	8	; select bank8
  9625  11BF  0193               	clrf	19	;volatile
  9626                           
  9627                           ;main.c: 1033: T3GCON = 0x00;
  9628  11C0  0194               	clrf	20	;volatile
  9629                           
  9630                           ;main.c: 1036: TMR3H = 0x00;
  9631  11C1  0192               	clrf	18	;volatile
  9632                           
  9633                           ;main.c: 1039: TMR3L = 0x00;
  9634  11C2  0191               	clrf	17	;volatile
  9635                           
  9636                           ;main.c: 1042: PIR3bits.TMR3IF = 0;
  9637  11C3  0020               	movlb	0	; select bank0
  9638  11C4  1013               	bcf	19,0	;volatile
  9639                           
  9640                           ;main.c: 1045: PIE3bits.TMR3IE = 1;
  9641  11C5  0021               	movlb	1	; select bank1
  9642  11C6  1413               	bsf	19,0	;volatile
  9643                           
  9644                           ;main.c: 1051: GIE = 1;
  9645  11C7  178B               	bsf	11,7	;volatile
  9646                           
  9647                           ;main.c: 1054: PEIE = 1;
  9648  11C8  170B               	bsf	11,6	;volatile
  9649  11C9  0008               	return
  9650  11CA                     __end_of_TMR3_Initialize:	
  9651                           
  9652                           	psect	text35
  9653  1194                     __ptext35:	
  9654 ;; *************** function _TMR2_Initialize *****************
  9655 ;; Defined at:
  9656 ;;		line 1080 in file "main.c"
  9657 ;; Parameters:    Size  Location     Type
  9658 ;;		None
  9659 ;; Auto vars:     Size  Location     Type
  9660 ;;		None
  9661 ;; Return value:  Size  Location     Type
  9662 ;;                  1    wreg      void 
  9663 ;; Registers used:
  9664 ;;		wreg, status,2
  9665 ;; Tracked objects:
  9666 ;;		On entry : 0/0
  9667 ;;		On exit  : 0/0
  9668 ;;		Unchanged: 0/0
  9669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9674 ;;Total ram usage:        0 bytes
  9675 ;; Hardware stack levels used:    1
  9676 ;; Hardware stack levels required when called:    2
  9677 ;; This function calls:
  9678 ;;		Nothing
  9679 ;; This function is called by:
  9680 ;;		_allPeripheralInit
  9681 ;; This function uses a non-reentrant model
  9682 ;;
  9683                           
  9684                           
  9685                           ;psect for function _TMR2_Initialize
  9686  1194                     _TMR2_Initialize:	
  9687                           
  9688                           ;main.c: 1085: T2CON = 0x08;
  9689                           
  9690                           ;incstack = 0
  9691                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  9692  1194  3008               	movlw	8
  9693  1195  0020               	movlb	0	; select bank0
  9694  1196  009C               	movwf	28	;volatile
  9695                           
  9696                           ;main.c: 1091: TMR2 = 0x00;
  9697  1197  019A               	clrf	26	;volatile
  9698                           
  9699                           ;main.c: 1094: PIR1bits.TMR2IF = 0;
  9700  1198  1091               	bcf	17,1	;volatile
  9701                           
  9702                           ;main.c: 1097: PIE1bits.TMR2IE = 1;
  9703  1199  0021               	movlb	1	; select bank1
  9704  119A  1491               	bsf	17,1	;volatile
  9705                           
  9706                           ;main.c: 1098: GIE = 1;
  9707  119B  178B               	bsf	11,7	;volatile
  9708                           
  9709                           ;main.c: 1101: PEIE = 1;
  9710  119C  170B               	bsf	11,6	;volatile
  9711  119D  0008               	return
  9712  119E                     __end_of_TMR2_Initialize:	
  9713                           
  9714                           	psect	text36
  9715  11A8                     __ptext36:	
  9716 ;; *************** function _TMR1_Initialize *****************
  9717 ;; Defined at:
  9718 ;;		line 996 in file "main.c"
  9719 ;; Parameters:    Size  Location     Type
  9720 ;;		None
  9721 ;; Auto vars:     Size  Location     Type
  9722 ;;		None
  9723 ;; Return value:  Size  Location     Type
  9724 ;;                  1    wreg      void 
  9725 ;; Registers used:
  9726 ;;		status,2
  9727 ;; Tracked objects:
  9728 ;;		On entry : 0/0
  9729 ;;		On exit  : 0/0
  9730 ;;		Unchanged: 0/0
  9731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9736 ;;Total ram usage:        0 bytes
  9737 ;; Hardware stack levels used:    1
  9738 ;; Hardware stack levels required when called:    2
  9739 ;; This function calls:
  9740 ;;		Nothing
  9741 ;; This function is called by:
  9742 ;;		_allPeripheralInit
  9743 ;; This function uses a non-reentrant model
  9744 ;;
  9745                           
  9746                           
  9747                           ;psect for function _TMR1_Initialize
  9748  11A8                     _TMR1_Initialize:	
  9749                           
  9750                           ;main.c: 999: T1CON = 0x00;
  9751                           
  9752                           ;incstack = 0
  9753                           ; Regs used in _TMR1_Initialize: [status,2]
  9754  11A8  0020               	movlb	0	; select bank0
  9755  11A9  0198               	clrf	24	;volatile
  9756                           
  9757                           ;main.c: 1002: T1GCON = 0x00;
  9758  11AA  0199               	clrf	25	;volatile
  9759                           
  9760                           ;main.c: 1005: TMR1H = 0x00;
  9761  11AB  0197               	clrf	23	;volatile
  9762                           
  9763                           ;main.c: 1008: TMR1L = 0x00;
  9764  11AC  0196               	clrf	22	;volatile
  9765                           
  9766                           ;main.c: 1011: PIR1bits.TMR1IF = 0;
  9767  11AD  1011               	bcf	17,0	;volatile
  9768                           
  9769                           ;main.c: 1014: PIE1bits.TMR1IE = 1;
  9770  11AE  0021               	movlb	1	; select bank1
  9771  11AF  1411               	bsf	17,0	;volatile
  9772                           
  9773                           ;main.c: 1020: GIE = 1;
  9774  11B0  178B               	bsf	11,7	;volatile
  9775                           
  9776                           ;main.c: 1023: PEIE = 1;
  9777  11B1  170B               	bsf	11,6	;volatile
  9778  11B2  0008               	return
  9779  11B3                     __end_of_TMR1_Initialize:	
  9780                           
  9781                           	psect	text37
  9782  1246                     __ptext37:	
  9783 ;; *************** function _EUSART_Initialize *****************
  9784 ;; Defined at:
  9785 ;;		line 958 in file "main.c"
  9786 ;; Parameters:    Size  Location     Type
  9787 ;;		None
  9788 ;; Auto vars:     Size  Location     Type
  9789 ;;		None
  9790 ;; Return value:  Size  Location     Type
  9791 ;;                  1    wreg      void 
  9792 ;; Registers used:
  9793 ;;		wreg
  9794 ;; Tracked objects:
  9795 ;;		On entry : 0/0
  9796 ;;		On exit  : 0/0
  9797 ;;		Unchanged: 0/0
  9798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9803 ;;Total ram usage:        0 bytes
  9804 ;; Hardware stack levels used:    1
  9805 ;; Hardware stack levels required when called:    2
  9806 ;; This function calls:
  9807 ;;		Nothing
  9808 ;; This function is called by:
  9809 ;;		_allPeripheralInit
  9810 ;; This function uses a non-reentrant model
  9811 ;;
  9812                           
  9813                           
  9814                           ;psect for function _EUSART_Initialize
  9815  1246                     _EUSART_Initialize:	
  9816                           
  9817                           ;main.c: 959: PIE1bits.RC1IE = 0;
  9818                           
  9819                           ;incstack = 0
  9820                           ; Regs used in _EUSART_Initialize: [wreg]
  9821  1246  0021               	movlb	1	; select bank1
  9822  1247  1291               	bcf	17,5	;volatile
  9823                           
  9824                           ;main.c: 960: PIE1bits.TX1IE = 0;
  9825  1248  1211               	bcf	17,4	;volatile
  9826                           
  9827                           ;main.c: 965: BAUD1CON = 0x0A;
  9828  1249  300A               	movlw	10
  9829  124A  0023               	movlb	3	; select bank3
  9830  124B  009F               	movwf	31	;volatile
  9831                           
  9832                           ;main.c: 968: RC1STA = 0x90;
  9833  124C  3090               	movlw	144
  9834  124D  009D               	movwf	29	;volatile
  9835                           
  9836                           ;main.c: 971: TX1STA = 0x24;
  9837  124E  3024               	movlw	36
  9838  124F  009E               	movwf	30	;volatile
  9839                           
  9840                           ;main.c: 976: SP1BRGL = 0xA0;
  9841  1250  30A0               	movlw	160
  9842  1251  009B               	movwf	27	;volatile
  9843                           
  9844                           ;main.c: 978: SP1BRGH = 0x01;
  9845  1252  3001               	movlw	1
  9846  1253  009C               	movwf	28	;volatile
  9847                           
  9848                           ;main.c: 981: GIE = 1;
  9849  1254  178B               	bsf	11,7	;volatile
  9850                           
  9851                           ;main.c: 984: PEIE = 1;
  9852  1255  170B               	bsf	11,6	;volatile
  9853                           
  9854                           ;main.c: 987: PIE1bits.RC1IE = 1;
  9855  1256  0021               	movlb	1	; select bank1
  9856  1257  1691               	bsf	17,5	;volatile
  9857                           
  9858                           ;main.c: 990: TX1STAbits.TXEN = 1;
  9859  1258  0023               	movlb	3	; select bank3
  9860  1259  169E               	bsf	30,5	;volatile
  9861                           
  9862                           ;main.c: 993: RC1STAbits.SPEN = 1;
  9863  125A  179D               	bsf	29,7	;volatile
  9864  125B  0008               	return
  9865  125C                     __end_of_EUSART_Initialize:	
  9866                           
  9867                           	psect	text38
  9868  118A                     __ptext38:	
  9869 ;; *************** function _CCP9_Initialize *****************
  9870 ;; Defined at:
  9871 ;;		line 1149 in file "main.c"
  9872 ;; Parameters:    Size  Location     Type
  9873 ;;		None
  9874 ;; Auto vars:     Size  Location     Type
  9875 ;;		None
  9876 ;; Return value:  Size  Location     Type
  9877 ;;                  1    wreg      void 
  9878 ;; Registers used:
  9879 ;;		wreg, status,2
  9880 ;; Tracked objects:
  9881 ;;		On entry : 0/0
  9882 ;;		On exit  : 0/0
  9883 ;;		Unchanged: 0/0
  9884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9889 ;;Total ram usage:        0 bytes
  9890 ;; Hardware stack levels used:    1
  9891 ;; Hardware stack levels required when called:    2
  9892 ;; This function calls:
  9893 ;;		Nothing
  9894 ;; This function is called by:
  9895 ;;		_allPeripheralInit
  9896 ;; This function uses a non-reentrant model
  9897 ;;
  9898                           
  9899                           
  9900                           ;psect for function _CCP9_Initialize
  9901  118A                     _CCP9_Initialize:	
  9902                           
  9903                           ;main.c: 1153: CCP9CON = 0x84;
  9904                           
  9905                           ;incstack = 0
  9906                           ; Regs used in _CCP9_Initialize: [wreg+status,2]
  9907  118A  3084               	movlw	132
  9908  118B  002C               	movlb	12	; select bank12
  9909  118C  009C               	movwf	28	;volatile
  9910                           
  9911                           ;main.c: 1156: CCPR9H = 0x00;
  9912  118D  019B               	clrf	27	;volatile
  9913                           
  9914                           ;main.c: 1159: CCPR9L = 0x00;
  9915  118E  019A               	clrf	26	;volatile
  9916                           
  9917                           ;main.c: 1165: PIR4bits.CCP9IF = 0;
  9918  118F  0020               	movlb	0	; select bank0
  9919  1190  1314               	bcf	20,6	;volatile
  9920                           
  9921                           ;main.c: 1168: PIE4bits.CCP9IE = 1;
  9922  1191  0021               	movlb	1	; select bank1
  9923  1192  1714               	bsf	20,6	;volatile
  9924  1193  0008               	return
  9925  1194                     __end_of_CCP9_Initialize:	
  9926                           
  9927                           	psect	text39
  9928  1180                     __ptext39:	
  9929 ;; *************** function _CCP8_Initialize *****************
  9930 ;; Defined at:
  9931 ;;		line 1192 in file "main.c"
  9932 ;; Parameters:    Size  Location     Type
  9933 ;;		None
  9934 ;; Auto vars:     Size  Location     Type
  9935 ;;		None
  9936 ;; Return value:  Size  Location     Type
  9937 ;;                  1    wreg      void 
  9938 ;; Registers used:
  9939 ;;		wreg, status,2
  9940 ;; Tracked objects:
  9941 ;;		On entry : 0/0
  9942 ;;		On exit  : 0/0
  9943 ;;		Unchanged: 0/0
  9944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9949 ;;Total ram usage:        0 bytes
  9950 ;; Hardware stack levels used:    1
  9951 ;; Hardware stack levels required when called:    2
  9952 ;; This function calls:
  9953 ;;		Nothing
  9954 ;; This function is called by:
  9955 ;;		_allPeripheralInit
  9956 ;; This function uses a non-reentrant model
  9957 ;;
  9958                           
  9959                           
  9960                           ;psect for function _CCP8_Initialize
  9961  1180                     _CCP8_Initialize:	
  9962                           
  9963                           ;main.c: 1196: CCP9CON = 0x84;
  9964                           
  9965                           ;incstack = 0
  9966                           ; Regs used in _CCP8_Initialize: [wreg+status,2]
  9967  1180  3084               	movlw	132
  9968  1181  002C               	movlb	12	; select bank12
  9969  1182  009C               	movwf	28	;volatile
  9970                           
  9971                           ;main.c: 1199: CCPR8H = 0x00;
  9972  1183  0198               	clrf	24	;volatile
  9973                           
  9974                           ;main.c: 1202: CCPR8L = 0x00;
  9975  1184  0197               	clrf	23	;volatile
  9976                           
  9977                           ;main.c: 1208: PIR4bits.CCP8IF = 0;
  9978  1185  0020               	movlb	0	; select bank0
  9979  1186  1194               	bcf	20,3	;volatile
  9980                           
  9981                           ;main.c: 1211: PIE4bits.CCP8IE = 1;
  9982  1187  0021               	movlb	1	; select bank1
  9983  1188  1594               	bsf	20,3	;volatile
  9984  1189  0008               	return
  9985  118A                     __end_of_CCP8_Initialize:	
  9986                           
  9987                           	psect	text40
  9988  1176                     __ptext40:	
  9989 ;; *************** function _CCP7_Initialize *****************
  9990 ;; Defined at:
  9991 ;;		line 1171 in file "main.c"
  9992 ;; Parameters:    Size  Location     Type
  9993 ;;		None
  9994 ;; Auto vars:     Size  Location     Type
  9995 ;;		None
  9996 ;; Return value:  Size  Location     Type
  9997 ;;                  1    wreg      void 
  9998 ;; Registers used:
  9999 ;;		wreg, status,2
 10000 ;; Tracked objects:
 10001 ;;		On entry : 0/0
 10002 ;;		On exit  : 0/0
 10003 ;;		Unchanged: 0/0
 10004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 10008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 10009 ;;Total ram usage:        0 bytes
 10010 ;; Hardware stack levels used:    1
 10011 ;; Hardware stack levels required when called:    2
 10012 ;; This function calls:
 10013 ;;		Nothing
 10014 ;; This function is called by:
 10015 ;;		_allPeripheralInit
 10016 ;; This function uses a non-reentrant model
 10017 ;;
 10018                           
 10019                           
 10020                           ;psect for function _CCP7_Initialize
 10021  1176                     _CCP7_Initialize:	
 10022                           
 10023                           ;main.c: 1175: CCP7CON = 0x84;
 10024                           
 10025                           ;incstack = 0
 10026                           ; Regs used in _CCP7_Initialize: [wreg+status,2]
 10027  1176  3084               	movlw	132
 10028  1177  002C               	movlb	12	; select bank12
 10029  1178  0096               	movwf	22	;volatile
 10030                           
 10031                           ;main.c: 1178: CCPR7H = 0x00;
 10032  1179  0195               	clrf	21	;volatile
 10033                           
 10034                           ;main.c: 1181: CCPR7L = 0x00;
 10035  117A  0194               	clrf	20	;volatile
 10036                           
 10037                           ;main.c: 1187: PIR4bits.CCP7IF = 0;
 10038  117B  0020               	movlb	0	; select bank0
 10039  117C  1114               	bcf	20,2	;volatile
 10040                           
 10041                           ;main.c: 1190: PIE4bits.CCP7IE = 1;
 10042  117D  0021               	movlb	1	; select bank1
 10043  117E  1514               	bsf	20,2	;volatile
 10044  117F  0008               	return
 10045  1180                     __end_of_CCP7_Initialize:	
 10046                           
 10047                           	psect	text41
 10048  11F9                     __ptext41:	
 10049 ;; *************** function _TransmissionIndicationLedBlinking *****************
 10050 ;; Defined at:
 10051 ;;		line 1272 in file "main.c"
 10052 ;; Parameters:    Size  Location     Type
 10053 ;;		None
 10054 ;; Auto vars:     Size  Location     Type
 10055 ;;		None
 10056 ;; Return value:  Size  Location     Type
 10057 ;;                  1    wreg      void 
 10058 ;; Registers used:
 10059 ;;		wreg
 10060 ;; Tracked objects:
 10061 ;;		On entry : 0/0
 10062 ;;		On exit  : 0/0
 10063 ;;		Unchanged: 0/0
 10064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10067 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
 10068 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0
 10069 ;;Total ram usage:        2 bytes
 10070 ;; Hardware stack levels used:    1
 10071 ;; Hardware stack levels required when called:    2
 10072 ;; This function calls:
 10073 ;;		Nothing
 10074 ;; This function is called by:
 10075 ;;		_main
 10076 ;; This function uses a non-reentrant model
 10077 ;;
 10078                           
 10079                           
 10080                           ;psect for function _TransmissionIndicationLedBlinking
 10081  11F9                     _TransmissionIndicationLedBlinking:	
 10082                           
 10083                           ;main.c: 1273: PORTFbits.RF0 = 0;
 10084                           
 10085                           ;incstack = 0
 10086                           ; Regs used in _TransmissionIndicationLedBlinking: [wreg]
 10087  11F9  0025               	movlb	5	; select bank5
 10088  11FA  100C               	bcf	12,0	;volatile
 10089                           
 10090                           ;main.c: 1274: _delay((unsigned long)((100)*(16000000/4000.0)));
 10091  11FB  3003               	movlw	3
 10092  11FC  0020               	movlb	0	; select bank0
 10093  11FD  00A1               	movwf	??_TransmissionIndicationLedBlinking+1
 10094  11FE  3008               	movlw	8
 10095  11FF  00A0               	movwf	??_TransmissionIndicationLedBlinking
 10096  1200  3077               	movlw	119
 10097  1201                     u6677:	
 10098  1201  0B89               	decfsz	9,f
 10099  1202  2A01               	goto	u6677
 10100  1203  0BA0               	decfsz	??_TransmissionIndicationLedBlinking,f
 10101  1204  2A01               	goto	u6677
 10102  1205  0BA1               	decfsz	??_TransmissionIndicationLedBlinking+1,f
 10103  1206  2A01               	goto	u6677
 10104                           
 10105                           ;main.c: 1275: PORTFbits.RF0 = 1;
 10106  1207  0025               	movlb	5	; select bank5
 10107  1208  140C               	bsf	12,0	;volatile
 10108  1209  0008               	return
 10109  120A                     __end_of_TransmissionIndicationLedBlinking:	
 10110                           
 10111                           	psect	text42
 10112  15AB                     __ptext42:	
 10113 ;; *************** function _SwitchOnStatustToGatway *****************
 10114 ;; Defined at:
 10115 ;;		line 1300 in file "main.c"
 10116 ;; Parameters:    Size  Location     Type
 10117 ;;  SwitchOnNumb    2    0[BANK0 ] const int 
 10118 ;; Auto vars:     Size  Location     Type
 10119 ;;		None
 10120 ;; Return value:  Size  Location     Type
 10121 ;;                  1    wreg      void 
 10122 ;; Registers used:
 10123 ;;		wreg, status,2, status,0
 10124 ;; Tracked objects:
 10125 ;;		On entry : 0/0
 10126 ;;		On exit  : 0/0
 10127 ;;		Unchanged: 0/0
 10128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10129 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
 10130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10131 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
 10132 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0
 10133 ;;Total ram usage:        3 bytes
 10134 ;; Hardware stack levels used:    1
 10135 ;; Hardware stack levels required when called:    2
 10136 ;; This function calls:
 10137 ;;		Nothing
 10138 ;; This function is called by:
 10139 ;;		_main
 10140 ;; This function uses a non-reentrant model
 10141 ;;
 10142                           
 10143                           
 10144                           ;psect for function _SwitchOnStatustToGatway
 10145  15AB                     _SwitchOnStatustToGatway:	
 10146                           
 10147                           ;main.c: 1302: TX1REG = 'R';_delay((unsigned long)((1)*(16000000/4000.0)));
 10148                           
 10149                           ;incstack = 0
 10150                           ; Regs used in _SwitchOnStatustToGatway: [wreg+status,2+status,0]
 10151  15AB  3052               	movlw	82
 10152  15AC  0023               	movlb	3	; select bank3
 10153  15AD  009A               	movwf	26	;volatile
 10154  15AE  3006               	movlw	6
 10155  15AF  0020               	movlb	0	; select bank0
 10156  15B0  00A2               	movwf	??_SwitchOnStatustToGatway
 10157  15B1  3030               	movlw	48
 10158  15B2                     u6687:	
 10159  15B2  0B89               	decfsz	9,f
 10160  15B3  2DB2               	goto	u6687
 10161  15B4  0BA2               	decfsz	??_SwitchOnStatustToGatway,f
 10162  15B5  2DB2               	goto	u6687
 10163  15B6  0000               	nop
 10164                           
 10165                           ;main.c: 1303: TX1REG = '1';_delay((unsigned long)((1)*(16000000/4000.0)));
 10166  15B7  3031               	movlw	49
 10167  15B8  0023               	movlb	3	; select bank3
 10168  15B9  009A               	movwf	26	;volatile
 10169  15BA  3006               	movlw	6
 10170  15BB  0020               	movlb	0	; select bank0
 10171  15BC  00A2               	movwf	??_SwitchOnStatustToGatway
 10172  15BD  3030               	movlw	48
 10173  15BE                     u6697:	
 10174  15BE  0B89               	decfsz	9,f
 10175  15BF  2DBE               	goto	u6697
 10176  15C0  0BA2               	decfsz	??_SwitchOnStatustToGatway,f
 10177  15C1  2DBE               	goto	u6697
 10178  15C2  0000               	nop
 10179                           
 10180                           ;main.c: 1304: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
 10181  15C3  3030               	movlw	48
 10182  15C4  0023               	movlb	3	; select bank3
 10183  15C5  009A               	movwf	26	;volatile
 10184  15C6  3006               	movlw	6
 10185  15C7  0020               	movlb	0	; select bank0
 10186  15C8  00A2               	movwf	??_SwitchOnStatustToGatway
 10187  15C9  3030               	movlw	48
 10188  15CA                     u6707:	
 10189  15CA  0B89               	decfsz	9,f
 10190  15CB  2DCA               	goto	u6707
 10191  15CC  0BA2               	decfsz	??_SwitchOnStatustToGatway,f
 10192  15CD  2DCA               	goto	u6707
 10193  15CE  0000               	nop
 10194                           
 10195                           ;main.c: 1305: TX1REG = SwitchOnNumber+'0';_delay((unsigned long)((1)*(16000000/4000.0))
      +                          );
 10196  15CF  0020               	movlb	0	; select bank0
 10197  15D0  0820               	movf	SwitchOnStatustToGatway@SwitchOnNumber,w
 10198  15D1  3E30               	addlw	48
 10199  15D2  0023               	movlb	3	; select bank3
 10200  15D3  009A               	movwf	26	;volatile
 10201  15D4  3006               	movlw	6
 10202  15D5  0020               	movlb	0	; select bank0
 10203  15D6  00A2               	movwf	??_SwitchOnStatustToGatway
 10204  15D7  3030               	movlw	48
 10205  15D8                     u6717:	
 10206  15D8  0B89               	decfsz	9,f
 10207  15D9  2DD8               	goto	u6717
 10208  15DA  0BA2               	decfsz	??_SwitchOnStatustToGatway,f
 10209  15DB  2DD8               	goto	u6717
 10210  15DC  0000               	nop
 10211  15DD  0008               	return
 10212  15DE                     __end_of_SwitchOnStatustToGatway:	
 10213                           
 10214                           	psect	text43
 10215  1578                     __ptext43:	
 10216 ;; *************** function _SwitchOffStatustToGatway *****************
 10217 ;; Defined at:
 10218 ;;		line 1293 in file "main.c"
 10219 ;; Parameters:    Size  Location     Type
 10220 ;;  SwitchOffNum    2    0[BANK0 ] const int 
 10221 ;; Auto vars:     Size  Location     Type
 10222 ;;		None
 10223 ;; Return value:  Size  Location     Type
 10224 ;;                  1    wreg      void 
 10225 ;; Registers used:
 10226 ;;		wreg, status,2, status,0
 10227 ;; Tracked objects:
 10228 ;;		On entry : 0/0
 10229 ;;		On exit  : 0/0
 10230 ;;		Unchanged: 0/0
 10231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10232 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
 10233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10234 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
 10235 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0
 10236 ;;Total ram usage:        3 bytes
 10237 ;; Hardware stack levels used:    1
 10238 ;; Hardware stack levels required when called:    2
 10239 ;; This function calls:
 10240 ;;		Nothing
 10241 ;; This function is called by:
 10242 ;;		_main
 10243 ;; This function uses a non-reentrant model
 10244 ;;
 10245                           
 10246                           
 10247                           ;psect for function _SwitchOffStatustToGatway
 10248  1578                     _SwitchOffStatustToGatway:	
 10249                           
 10250                           ;main.c: 1295: TX1REG = 'R';_delay((unsigned long)((1)*(16000000/4000.0)));
 10251                           
 10252                           ;incstack = 0
 10253                           ; Regs used in _SwitchOffStatustToGatway: [wreg+status,2+status,0]
 10254  1578  3052               	movlw	82
 10255  1579  0023               	movlb	3	; select bank3
 10256  157A  009A               	movwf	26	;volatile
 10257  157B  3006               	movlw	6
 10258  157C  0020               	movlb	0	; select bank0
 10259  157D  00A2               	movwf	??_SwitchOffStatustToGatway
 10260  157E  3030               	movlw	48
 10261  157F                     u6727:	
 10262  157F  0B89               	decfsz	9,f
 10263  1580  2D7F               	goto	u6727
 10264  1581  0BA2               	decfsz	??_SwitchOffStatustToGatway,f
 10265  1582  2D7F               	goto	u6727
 10266  1583  0000               	nop
 10267                           
 10268                           ;main.c: 1296: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
 10269  1584  3030               	movlw	48
 10270  1585  0023               	movlb	3	; select bank3
 10271  1586  009A               	movwf	26	;volatile
 10272  1587  3006               	movlw	6
 10273  1588  0020               	movlb	0	; select bank0
 10274  1589  00A2               	movwf	??_SwitchOffStatustToGatway
 10275  158A  3030               	movlw	48
 10276  158B                     u6737:	
 10277  158B  0B89               	decfsz	9,f
 10278  158C  2D8B               	goto	u6737
 10279  158D  0BA2               	decfsz	??_SwitchOffStatustToGatway,f
 10280  158E  2D8B               	goto	u6737
 10281  158F  0000               	nop
 10282                           
 10283                           ;main.c: 1297: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
 10284  1590  3030               	movlw	48
 10285  1591  0023               	movlb	3	; select bank3
 10286  1592  009A               	movwf	26	;volatile
 10287  1593  3006               	movlw	6
 10288  1594  0020               	movlb	0	; select bank0
 10289  1595  00A2               	movwf	??_SwitchOffStatustToGatway
 10290  1596  3030               	movlw	48
 10291  1597                     u6747:	
 10292  1597  0B89               	decfsz	9,f
 10293  1598  2D97               	goto	u6747
 10294  1599  0BA2               	decfsz	??_SwitchOffStatustToGatway,f
 10295  159A  2D97               	goto	u6747
 10296  159B  0000               	nop
 10297                           
 10298                           ;main.c: 1298: TX1REG = SwitchOffNumber+'0';_delay((unsigned long)((1)*(16000000/4000.0)
      +                          ));
 10299  159C  0020               	movlb	0	; select bank0
 10300  159D  0820               	movf	SwitchOffStatustToGatway@SwitchOffNumber,w
 10301  159E  3E30               	addlw	48
 10302  159F  0023               	movlb	3	; select bank3
 10303  15A0  009A               	movwf	26	;volatile
 10304  15A1  3006               	movlw	6
 10305  15A2  0020               	movlb	0	; select bank0
 10306  15A3  00A2               	movwf	??_SwitchOffStatustToGatway
 10307  15A4  3030               	movlw	48
 10308  15A5                     u6757:	
 10309  15A5  0B89               	decfsz	9,f
 10310  15A6  2DA5               	goto	u6757
 10311  15A7  0BA2               	decfsz	??_SwitchOffStatustToGatway,f
 10312  15A8  2DA5               	goto	u6757
 10313  15A9  0000               	nop
 10314  15AA  0008               	return
 10315  15AB                     __end_of_SwitchOffStatustToGatway:	
 10316                           
 10317                           	psect	text44
 10318  11E8                     __ptext44:	
 10319 ;; *************** function _ReceivingIndicationLedBlinking *****************
 10320 ;; Defined at:
 10321 ;;		line 1277 in file "main.c"
 10322 ;; Parameters:    Size  Location     Type
 10323 ;;		None
 10324 ;; Auto vars:     Size  Location     Type
 10325 ;;		None
 10326 ;; Return value:  Size  Location     Type
 10327 ;;                  1    wreg      void 
 10328 ;; Registers used:
 10329 ;;		wreg
 10330 ;; Tracked objects:
 10331 ;;		On entry : 0/0
 10332 ;;		On exit  : 0/0
 10333 ;;		Unchanged: 0/0
 10334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10337 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
 10338 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0
 10339 ;;Total ram usage:        2 bytes
 10340 ;; Hardware stack levels used:    1
 10341 ;; Hardware stack levels required when called:    2
 10342 ;; This function calls:
 10343 ;;		Nothing
 10344 ;; This function is called by:
 10345 ;;		_main
 10346 ;; This function uses a non-reentrant model
 10347 ;;
 10348                           
 10349                           
 10350                           ;psect for function _ReceivingIndicationLedBlinking
 10351  11E8                     _ReceivingIndicationLedBlinking:	
 10352                           
 10353                           ;main.c: 1278: PORTFbits.RF1 = 0;
 10354                           
 10355                           ;incstack = 0
 10356                           ; Regs used in _ReceivingIndicationLedBlinking: [wreg]
 10357  11E8  0025               	movlb	5	; select bank5
 10358  11E9  108C               	bcf	12,1	;volatile
 10359                           
 10360                           ;main.c: 1279: _delay((unsigned long)((100)*(16000000/4000.0)));
 10361  11EA  3003               	movlw	3
 10362  11EB  0020               	movlb	0	; select bank0
 10363  11EC  00A1               	movwf	??_ReceivingIndicationLedBlinking+1
 10364  11ED  3008               	movlw	8
 10365  11EE  00A0               	movwf	??_ReceivingIndicationLedBlinking
 10366  11EF  3077               	movlw	119
 10367  11F0                     u6767:	
 10368  11F0  0B89               	decfsz	9,f
 10369  11F1  29F0               	goto	u6767
 10370  11F2  0BA0               	decfsz	??_ReceivingIndicationLedBlinking,f
 10371  11F3  29F0               	goto	u6767
 10372  11F4  0BA1               	decfsz	??_ReceivingIndicationLedBlinking+1,f
 10373  11F5  29F0               	goto	u6767
 10374                           
 10375                           ;main.c: 1280: PORTFbits.RF1 = 1;
 10376  11F6  0025               	movlb	5	; select bank5
 10377  11F7  148C               	bsf	12,1	;volatile
 10378  11F8  0008               	return
 10379  11F9                     __end_of_ReceivingIndicationLedBlinking:	
 10380                           
 10381                           	psect	text45
 10382  1402                     __ptext45:	
 10383 ;; *************** function _GPIO_pin_Initialize *****************
 10384 ;; Defined at:
 10385 ;;		line 890 in file "main.c"
 10386 ;; Parameters:    Size  Location     Type
 10387 ;;		None
 10388 ;; Auto vars:     Size  Location     Type
 10389 ;;		None
 10390 ;; Return value:  Size  Location     Type
 10391 ;;                  1    wreg      void 
 10392 ;; Registers used:
 10393 ;;		status,2, status,0, pclath, cstack
 10394 ;; Tracked objects:
 10395 ;;		On entry : 0/0
 10396 ;;		On exit  : 0/0
 10397 ;;		Unchanged: 0/0
 10398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 10402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 10403 ;;Total ram usage:        0 bytes
 10404 ;; Hardware stack levels used:    1
 10405 ;; Hardware stack levels required when called:    3
 10406 ;; This function calls:
 10407 ;;		_clearAllPorts
 10408 ;;		_pinINIT_extra
 10409 ;; This function is called by:
 10410 ;;		_main
 10411 ;; This function uses a non-reentrant model
 10412 ;;
 10413                           
 10414                           
 10415                           ;psect for function _GPIO_pin_Initialize
 10416  1402                     _GPIO_pin_Initialize:	
 10417                           
 10418                           ;main.c: 891: clearAllPorts();
 10419                           
 10420                           ;incstack = 0
 10421                           ; Regs used in _GPIO_pin_Initialize: [status,2+status,0+pclath+cstack]
 10422  1402  3192  220A  3194   	fcall	_clearAllPorts
 10423                           
 10424                           ;main.c: 892: pinINIT_extra();
 10425  1405  3192  221C  3194   	fcall	_pinINIT_extra
 10426                           
 10427                           ;main.c: 893: TRISDbits.TRISD6 = 1;
 10428  1408  0021               	movlb	1	; select bank1
 10429  1409  170F               	bsf	15,6	;volatile
 10430                           
 10431                           ;main.c: 894: TRISDbits.TRISD7 = 1;
 10432  140A  178F               	bsf	15,7	;volatile
 10433                           
 10434                           ;main.c: 895: TRISBbits.TRISB0 = 1;
 10435  140B  140D               	bsf	13,0	;volatile
 10436                           
 10437                           ;main.c: 896: TRISBbits.TRISB1 = 1;
 10438  140C  148D               	bsf	13,1	;volatile
 10439                           
 10440                           ;main.c: 897: TRISBbits.TRISB2 = 1;
 10441  140D  150D               	bsf	13,2	;volatile
 10442                           
 10443                           ;main.c: 898: TRISBbits.TRISB3 = 1;
 10444  140E  158D               	bsf	13,3	;volatile
 10445                           
 10446                           ;main.c: 899: TRISBbits.TRISB4 = 1;
 10447  140F  160D               	bsf	13,4	;volatile
 10448                           
 10449                           ;main.c: 900: TRISBbits.TRISB5 = 1;
 10450  1410  168D               	bsf	13,5	;volatile
 10451                           
 10452                           ;main.c: 901: TRISDbits.TRISD5 = 1;
 10453  1411  168F               	bsf	15,5	;volatile
 10454                           
 10455                           ;main.c: 905: TRISEbits.TRISE0 = 0;
 10456  1412  1010               	bcf	16,0	;volatile
 10457                           
 10458                           ;main.c: 906: TRISEbits.TRISE1 = 0;
 10459  1413  1090               	bcf	16,1	;volatile
 10460                           
 10461                           ;main.c: 907: TRISGbits.TRISG0 = 0;
 10462  1414  0026               	movlb	6	; select bank6
 10463  1415  100D               	bcf	13,0	;volatile
 10464                           
 10465                           ;main.c: 908: TRISGbits.TRISG3 = 0;
 10466  1416  118D               	bcf	13,3	;volatile
 10467                           
 10468                           ;main.c: 909: TRISGbits.TRISG4 = 0;
 10469  1417  120D               	bcf	13,4	;volatile
 10470                           
 10471                           ;main.c: 910: TRISFbits.TRISF6 = 0;
 10472  1418  130C               	bcf	12,6	;volatile
 10473                           
 10474                           ;main.c: 911: TRISFbits.TRISF5 = 0;
 10475  1419  128C               	bcf	12,5	;volatile
 10476                           
 10477                           ;main.c: 912: TRISFbits.TRISF4 = 0;
 10478  141A  120C               	bcf	12,4	;volatile
 10479                           
 10480                           ;main.c: 917: TRISEbits.TRISE3 = 1;
 10481  141B  0021               	movlb	1	; select bank1
 10482  141C  1590               	bsf	16,3	;volatile
 10483                           
 10484                           ;main.c: 918: TRISEbits.TRISE5 = 1;
 10485  141D  1690               	bsf	16,5	;volatile
 10486                           
 10487                           ;main.c: 919: TRISEbits.TRISE4 = 1;
 10488  141E  1610               	bsf	16,4	;volatile
 10489                           
 10490                           ;main.c: 920: TRISFbits.TRISF0 = 0;
 10491  141F  0026               	movlb	6	; select bank6
 10492  1420  100C               	bcf	12,0	;volatile
 10493                           
 10494                           ;main.c: 921: TRISFbits.TRISF1 = 0;
 10495  1421  108C               	bcf	12,1	;volatile
 10496                           
 10497                           ;main.c: 922: TRISFbits.TRISF2 = 0;
 10498  1422  110C               	bcf	12,2	;volatile
 10499                           
 10500                           ;main.c: 925: TRISDbits.TRISD4 = 0;
 10501  1423  0021               	movlb	1	; select bank1
 10502  1424  120F               	bcf	15,4	;volatile
 10503                           
 10504                           ;main.c: 926: TRISDbits.TRISD3 = 0;
 10505  1425  118F               	bcf	15,3	;volatile
 10506                           
 10507                           ;main.c: 927: TRISDbits.TRISD2 = 0;
 10508  1426  110F               	bcf	15,2	;volatile
 10509                           
 10510                           ;main.c: 931: TRISCbits.TRISC6 = 0;
 10511  1427  130E               	bcf	14,6	;volatile
 10512                           
 10513                           ;main.c: 932: TRISCbits.TRISC7 = 1;
 10514  1428  178E               	bsf	14,7	;volatile
 10515                           
 10516                           ;main.c: 934: clearAllPorts();
 10517  1429  3192  220A         	fcall	_clearAllPorts
 10518  142B  0008               	return
 10519  142C                     __end_of_GPIO_pin_Initialize:	
 10520                           
 10521                           	psect	text46
 10522  121C                     __ptext46:	
 10523 ;; *************** function _pinINIT_extra *****************
 10524 ;; Defined at:
 10525 ;;		line 1336 in file "main.c"
 10526 ;; Parameters:    Size  Location     Type
 10527 ;;		None
 10528 ;; Auto vars:     Size  Location     Type
 10529 ;;		None
 10530 ;; Return value:  Size  Location     Type
 10531 ;;                  1    wreg      void 
 10532 ;; Registers used:
 10533 ;;		status,2
 10534 ;; Tracked objects:
 10535 ;;		On entry : 0/0
 10536 ;;		On exit  : 0/0
 10537 ;;		Unchanged: 0/0
 10538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 10542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 10543 ;;Total ram usage:        0 bytes
 10544 ;; Hardware stack levels used:    1
 10545 ;; Hardware stack levels required when called:    2
 10546 ;; This function calls:
 10547 ;;		Nothing
 10548 ;; This function is called by:
 10549 ;;		_GPIO_pin_Initialize
 10550 ;; This function uses a non-reentrant model
 10551 ;;
 10552                           
 10553                           
 10554                           ;psect for function _pinINIT_extra
 10555  121C                     _pinINIT_extra:	
 10556                           
 10557                           ;main.c: 1337: ANSELG=0x00; WPUG = 0;
 10558                           
 10559                           ;incstack = 0
 10560                           ; Regs used in _pinINIT_extra: [status,2]
 10561  121C  0028               	movlb	8	; select bank8
 10562  121D  018D               	clrf	13	;volatile
 10563  121E  0029               	movlb	9	; select bank9
 10564  121F  018D               	clrf	13	;volatile
 10565                           
 10566                           ;main.c: 1339: ANSELF=0x00;
 10567  1220  0028               	movlb	8	; select bank8
 10568  1221  018C               	clrf	12	;volatile
 10569                           
 10570                           ;main.c: 1341: ANSELE=0x00; WPUE=0x00;
 10571  1222  0023               	movlb	3	; select bank3
 10572  1223  0190               	clrf	16	;volatile
 10573  1224  0024               	movlb	4	; select bank4
 10574  1225  0190               	clrf	16	;volatile
 10575                           
 10576                           ;main.c: 1343: ANSELD=0x00; WPUD=0x00;
 10577  1226  0023               	movlb	3	; select bank3
 10578  1227  018F               	clrf	15	;volatile
 10579  1228  0024               	movlb	4	; select bank4
 10580  1229  018F               	clrf	15	;volatile
 10581                           
 10582                           ;main.c: 1345: ANSELB=0x00; WPUB=0x00;
 10583  122A  0023               	movlb	3	; select bank3
 10584  122B  018D               	clrf	13	;volatile
 10585  122C  0024               	movlb	4	; select bank4
 10586  122D  018D               	clrf	13	;volatile
 10587                           
 10588                           ;main.c: 1347: ANSELA=0x00;
 10589  122E  0023               	movlb	3	; select bank3
 10590  122F  018C               	clrf	12	;volatile
 10591  1230  0008               	return
 10592  1231                     __end_of_pinINIT_extra:	
 10593                           
 10594                           	psect	text47
 10595  120A                     __ptext47:	
 10596 ;; *************** function _clearAllPorts *****************
 10597 ;; Defined at:
 10598 ;;		line 1353 in file "main.c"
 10599 ;; Parameters:    Size  Location     Type
 10600 ;;		None
 10601 ;; Auto vars:     Size  Location     Type
 10602 ;;		None
 10603 ;; Return value:  Size  Location     Type
 10604 ;;                  1    wreg      void 
 10605 ;; Registers used:
 10606 ;;		None
 10607 ;; Tracked objects:
 10608 ;;		On entry : 0/0
 10609 ;;		On exit  : 0/0
 10610 ;;		Unchanged: 0/0
 10611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 10615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 10616 ;;Total ram usage:        0 bytes
 10617 ;; Hardware stack levels used:    1
 10618 ;; Hardware stack levels required when called:    2
 10619 ;; This function calls:
 10620 ;;		Nothing
 10621 ;; This function is called by:
 10622 ;;		_GPIO_pin_Initialize
 10623 ;; This function uses a non-reentrant model
 10624 ;;
 10625                           
 10626                           
 10627                           ;psect for function _clearAllPorts
 10628  120A                     _clearAllPorts:	
 10629                           
 10630                           ;main.c: 1357: PORTEbits.RE0=0;
 10631                           
 10632                           ;incstack = 0
 10633                           ; Regs used in _clearAllPorts: []
 10634  120A  0020               	movlb	0	; select bank0
 10635  120B  1010               	bcf	16,0	;volatile
 10636                           
 10637                           ;main.c: 1358: PORTEbits.RE1=0;
 10638  120C  1090               	bcf	16,1	;volatile
 10639                           
 10640                           ;main.c: 1359: PORTGbits.RG0=0;
 10641  120D  0025               	movlb	5	; select bank5
 10642  120E  100D               	bcf	13,0	;volatile
 10643                           
 10644                           ;main.c: 1360: PORTGbits.RG3=0;
 10645  120F  118D               	bcf	13,3	;volatile
 10646                           
 10647                           ;main.c: 1361: PORTGbits.RG4=0;
 10648  1210  120D               	bcf	13,4	;volatile
 10649                           
 10650                           ;main.c: 1362: PORTFbits.RF6=0;
 10651  1211  130C               	bcf	12,6	;volatile
 10652                           
 10653                           ;main.c: 1363: PORTFbits.RF5=0;
 10654  1212  128C               	bcf	12,5	;volatile
 10655                           
 10656                           ;main.c: 1364: PORTFbits.RF4=0;
 10657  1213  120C               	bcf	12,4	;volatile
 10658                           
 10659                           ;main.c: 1365: PORTFbits.RF0 = 1;
 10660  1214  140C               	bsf	12,0	;volatile
 10661                           
 10662                           ;main.c: 1366: PORTFbits.RF1 = 1;
 10663  1215  148C               	bsf	12,1	;volatile
 10664                           
 10665                           ;main.c: 1367: PORTFbits.RF2 = 1;
 10666  1216  150C               	bsf	12,2	;volatile
 10667                           
 10668                           ;main.c: 1369: PORTDbits.RD4=0;
 10669  1217  0020               	movlb	0	; select bank0
 10670  1218  120F               	bcf	15,4	;volatile
 10671                           
 10672                           ;main.c: 1370: PORTDbits.RD3=0;
 10673  1219  118F               	bcf	15,3	;volatile
 10674                           
 10675                           ;main.c: 1371: PORTDbits.RD2=0;
 10676  121A  110F               	bcf	15,2	;volatile
 10677  121B  0008               	return
 10678  121C                     __end_of_clearAllPorts:	
 10679                           
 10680                           	psect	intentry
 10681  0004                     __pintentry:	
 10682 ;; *************** function _isr *****************
 10683 ;; Defined at:
 10684 ;;		line 324 in file "main.c"
 10685 ;; Parameters:    Size  Location     Type
 10686 ;;		None
 10687 ;; Auto vars:     Size  Location     Type
 10688 ;;		None
 10689 ;; Return value:  Size  Location     Type
 10690 ;;                  1    wreg      void 
 10691 ;; Registers used:
 10692 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10693 ;; Tracked objects:
 10694 ;;		On entry : 0/0
 10695 ;;		On exit  : 0/0
 10696 ;;		Unchanged: 0/0
 10697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10700 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0
 10701 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0
 10702 ;;Total ram usage:        2 bytes
 10703 ;; Hardware stack levels used:    1
 10704 ;; Hardware stack levels required when called:    1
 10705 ;; This function calls:
 10706 ;;		_errorsISR
 10707 ;; This function is called by:
 10708 ;;		Interrupt level 1
 10709 ;; This function uses a non-reentrant model
 10710 ;;
 10711                           
 10712  0004                     _isr:	
 10713                           
 10714                           ;incstack = 0
 10715  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10716                           
 10717                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10718  0005  3180               	pagesel	$
 10719  0006  0020               	movlb	0	; select bank0
 10720  0007  087F               	movf	127,w
 10721  0008  00FB               	movwf	??_isr+1
 10722                           
 10723                           ;main.c: 327: if(RC1IF){
 10724  0009  1E91               	btfss	17,5	;volatile
 10725  000A  285B               	goto	i1l4012
 10726                           
 10727                           ;main.c: 328: if(RC1STAbits.OERR){
 10728  000B  0023               	movlb	3	; select bank3
 10729  000C  1C9D               	btfss	29,1	;volatile
 10730  000D  2817               	goto	i1l3990
 10731                           
 10732                           ;main.c: 329: RC1STAbits.CREN = 0;
 10733  000E  121D               	bcf	29,4	;volatile
 10734                           
 10735                           ;main.c: 330: RC1STAbits.CREN = 1;
 10736  000F  161D               	bsf	29,4	;volatile
 10737                           
 10738                           ;main.c: 331: errorsISR("EROV");
 10739  0010  305B               	movlw	low (STR_13| (0+32768))
 10740  0011  00F6               	movwf	errorsISR@errNum
 10741  0012  3098               	movlw	high (STR_13| (0+32768))
 10742  0013  00F7               	movwf	errorsISR@errNum+1
 10743  0014  3192  225C  3180   	fcall	_errorsISR
 10744  0017                     i1l3990:	
 10745                           
 10746                           ;main.c: 332: }
 10747                           ;main.c: 333: mainReceivedDataBuffer[mainReceivedDataPosition]=RC1REG;
 10748  0017  0023               	movlb	3	; select bank3
 10749  0018  0819               	movf	25,w	;volatile
 10750  0019  00FA               	movwf	??_isr
 10751  001A  0872               	movf	_mainReceivedDataPosition,w
 10752  001B  3EA0               	addlw	(low (_mainReceivedDataBuffer| (0+512)))& (0+255)
 10753  001C  0086               	movwf	6
 10754  001D  3002               	movlw	2	; select bank5/6
 10755  001E  0087               	movwf	7
 10756  001F  087A               	movf	??_isr,w
 10757  0020  0081               	movwf	1
 10758                           
 10759                           ;main.c: 334: copymainReceivedDataBuffer[mainReceivedDataPosition] = mainReceivedDataBuf
      +                          fer[mainReceivedDataPosition];
 10760  0021  0872               	movf	_mainReceivedDataPosition,w
 10761  0022  3EA0               	addlw	(low (_mainReceivedDataBuffer| (0+512)))& (0+255)
 10762  0023  0086               	movwf	6
 10763  0024  3002               	movlw	2	; select bank5/6
 10764  0025  0087               	movwf	7
 10765  0026  0801               	movf	1,w
 10766  0027  00FA               	movwf	??_isr
 10767  0028  0872               	movf	_mainReceivedDataPosition,w
 10768  0029  3E4E               	addlw	(low (_copymainReceivedDataBuffer| (0+512)))& (0+255)
 10769  002A  0086               	movwf	6
 10770  002B  3002               	movlw	2	; select bank4/5
 10771  002C  0087               	movwf	7
 10772  002D  087A               	movf	??_isr,w
 10773  002E  0081               	movwf	1
 10774                           
 10775                           ;main.c: 339: if(copymainReceivedDataBuffer[mainReceivedDataPosition] == '|'){
 10776  002F  0872               	movf	_mainReceivedDataPosition,w
 10777  0030  3E4E               	addlw	(low (_copymainReceivedDataBuffer| (0+512)))& (0+255)
 10778  0031  0086               	movwf	6
 10779  0032  3002               	movlw	2	; select bank4/5
 10780  0033  0087               	movwf	7
 10781  0034  307C               	movlw	124
 10782  0035  0601               	xorwf	1,w
 10783  0036  1D03               	btfss	3,2
 10784  0037  2842               	goto	i1l4002
 10785                           
 10786                           ;main.c: 340: mainDataReceived=1;
 10787  0038  3001               	movlw	1
 10788  0039  0022               	movlb	2	; select bank2
 10789  003A  00D2               	movwf	_mainDataReceived^(0+256)
 10790  003B  3000               	movlw	0
 10791  003C  00D3               	movwf	(_mainDataReceived^(0+256)+1)
 10792                           
 10793                           ;main.c: 341: mainReceivedDataPosition=0;
 10794  003D  01F2               	clrf	_mainReceivedDataPosition
 10795  003E  01F3               	clrf	_mainReceivedDataPosition+1
 10796                           
 10797                           ;main.c: 342: RC1IF=0;
 10798  003F  0020               	movlb	0	; select bank0
 10799  0040  1291               	bcf	17,5	;volatile
 10800                           
 10801                           ;main.c: 343: }
 10802  0041  285B               	goto	i1l4012
 10803  0042                     i1l4002:	
 10804                           
 10805                           ;main.c: 344: else if((copymainReceivedDataBuffer[0]=='R') && copymainReceivedDataBuffer
      +                          [0] != (0)){
 10806  0042  3052               	movlw	82
 10807  0043  0024               	movlb	4	; select bank4
 10808  0044  064E               	xorwf	_copymainReceivedDataBuffer^(0+512),w
 10809  0045  1D03               	btfss	3,2
 10810  0046  284F               	goto	i1l453
 10811  0047  084E               	movf	_copymainReceivedDataBuffer^(0+512),w
 10812  0048  1903               	btfsc	3,2
 10813  0049  284F               	goto	i1l453
 10814                           
 10815                           ;main.c: 345: mainReceivedDataPosition++;
 10816  004A  3001               	movlw	1
 10817  004B  07F2               	addwf	_mainReceivedDataPosition,f
 10818  004C  3000               	movlw	0
 10819  004D  3DF3               	addwfc	_mainReceivedDataPosition+1,f
 10820                           
 10821                           ;main.c: 347: }
 10822  004E  285B               	goto	i1l4012
 10823  004F                     i1l453:	
 10824                           
 10825                           ;main.c: 350: else{
 10826                           ;main.c: 352: RC1STAbits.CREN = 0;
 10827  004F  0023               	movlb	3	; select bank3
 10828  0050  121D               	bcf	29,4	;volatile
 10829                           
 10830                           ;main.c: 353: RC1STAbits.CREN = 1;
 10831  0051  161D               	bsf	29,4	;volatile
 10832                           
 10833                           ;main.c: 354: mainReceivedDataPosition=0;
 10834  0052  01F2               	clrf	_mainReceivedDataPosition
 10835  0053  01F3               	clrf	_mainReceivedDataPosition+1
 10836                           
 10837                           ;main.c: 355: errorsISR("ERRX");
 10838  0054  3060               	movlw	low (STR_14| (0+32768))
 10839  0055  00F6               	movwf	errorsISR@errNum
 10840  0056  3098               	movlw	high (STR_14| (0+32768))
 10841  0057  00F7               	movwf	errorsISR@errNum+1
 10842  0058  3192  225C  3180   	fcall	_errorsISR
 10843  005B                     i1l4012:	
 10844                           
 10845                           ;main.c: 356: }
 10846                           ;main.c: 357: }
 10847                           ;main.c: 362: if(PIE1bits.TMR2IE==1 && PIR1bits.TMR2IF==1)
 10848  005B  0021               	movlb	1	; select bank1
 10849  005C  1C91               	btfss	17,1	;volatile
 10850  005D  2864               	goto	i1l455
 10851  005E  0020               	movlb	0	; select bank0
 10852  005F  1C91               	btfss	17,1	;volatile
 10853  0060  2864               	goto	i1l455
 10854                           
 10855                           ;main.c: 363: {
 10856                           ;main.c: 366: PIR1bits.TMR2IF=0;
 10857  0061  1091               	bcf	17,1	;volatile
 10858                           
 10859                           ;main.c: 367: PORTDbits.RD4 = 0;
 10860  0062  120F               	bcf	15,4	;volatile
 10861                           
 10862                           ;main.c: 368: T2CONbits.TMR2ON=0;
 10863  0063  111C               	bcf	28,2	;volatile
 10864  0064                     i1l455:	
 10865                           
 10866                           ;main.c: 369: }
 10867                           ;main.c: 372: if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF==1)
 10868  0064  0021               	movlb	1	; select bank1
 10869  0065  1C11               	btfss	17,0	;volatile
 10870  0066  2870               	goto	i1l4028
 10871  0067  0020               	movlb	0	; select bank0
 10872  0068  1C11               	btfss	17,0	;volatile
 10873  0069  2870               	goto	i1l4028
 10874                           
 10875                           ;main.c: 373: {
 10876                           ;main.c: 374: PIR1bits.TMR1IF=0;
 10877  006A  1011               	bcf	17,0	;volatile
 10878                           
 10879                           ;main.c: 375: PORTDbits.RD4 = 1;
 10880  006B  160F               	bsf	15,4	;volatile
 10881                           
 10882                           ;main.c: 376: PR2=0x9F;
 10883  006C  309F               	movlw	159
 10884  006D  009B               	movwf	27	;volatile
 10885                           
 10886                           ;main.c: 377: T2CONbits.TMR2ON = 1;
 10887  006E  151C               	bsf	28,2	;volatile
 10888                           
 10889                           ;main.c: 378: T1CONbits.TMR1ON = 0;
 10890  006F  1018               	bcf	24,0	;volatile
 10891  0070                     i1l4028:	
 10892                           
 10893                           ;main.c: 380: }
 10894                           ;main.c: 384: if(PIE3bits.TMR4IE==1 && PIR3bits.TMR4IF==1)
 10895  0070  0021               	movlb	1	; select bank1
 10896  0071  1C93               	btfss	19,1	;volatile
 10897  0072  287A               	goto	i1l457
 10898  0073  0020               	movlb	0	; select bank0
 10899  0074  1C93               	btfss	19,1	;volatile
 10900  0075  287A               	goto	i1l457
 10901                           
 10902                           ;main.c: 385: {
 10903                           ;main.c: 386: PIR3bits.TMR4IF=0;
 10904  0076  1093               	bcf	19,1	;volatile
 10905                           
 10906                           ;main.c: 387: PORTDbits.RD3 = 0;
 10907  0077  118F               	bcf	15,3	;volatile
 10908                           
 10909                           ;main.c: 388: T4CONbits.TMR4ON=0;
 10910  0078  0028               	movlb	8	; select bank8
 10911  0079  1117               	bcf	23,2	;volatile
 10912  007A                     i1l457:	
 10913                           
 10914                           ;main.c: 390: }
 10915                           ;main.c: 392: if(PIE3bits.TMR3IE == 1 && PIR3bits.TMR3IF==1)
 10916  007A  0021               	movlb	1	; select bank1
 10917  007B  1C13               	btfss	19,0	;volatile
 10918  007C  2887               	goto	i1l4044
 10919  007D  0020               	movlb	0	; select bank0
 10920  007E  1C13               	btfss	19,0	;volatile
 10921  007F  2887               	goto	i1l4044
 10922                           
 10923                           ;main.c: 393: {
 10924                           ;main.c: 394: PIR3bits.TMR3IF=0;
 10925  0080  1013               	bcf	19,0	;volatile
 10926                           
 10927                           ;main.c: 395: PORTDbits.RD3 = 1;
 10928  0081  158F               	bsf	15,3	;volatile
 10929                           
 10930                           ;main.c: 396: PR4=0x9F;
 10931  0082  309F               	movlw	159
 10932  0083  0028               	movlb	8	; select bank8
 10933  0084  0096               	movwf	22	;volatile
 10934                           
 10935                           ;main.c: 397: T4CONbits.TMR4ON = 1;
 10936  0085  1517               	bsf	23,2	;volatile
 10937                           
 10938                           ;main.c: 398: T3CONbits.TMR3ON = 0;
 10939  0086  1013               	bcf	19,0	;volatile
 10940  0087                     i1l4044:	
 10941                           
 10942                           ;main.c: 399: }
 10943                           ;main.c: 402: if(PIE3bits.TMR6IE == 1 && PIR3bits.TMR6IF == 1)
 10944  0087  0021               	movlb	1	; select bank1
 10945  0088  1D93               	btfss	19,3	;volatile
 10946  0089  2891               	goto	i1l459
 10947  008A  0020               	movlb	0	; select bank0
 10948  008B  1D93               	btfss	19,3	;volatile
 10949  008C  2891               	goto	i1l459
 10950                           
 10951                           ;main.c: 403: {
 10952                           ;main.c: 404: PIR3bits.TMR6IF=0;
 10953  008D  1193               	bcf	19,3	;volatile
 10954                           
 10955                           ;main.c: 405: PORTDbits.RD2 = 0;
 10956  008E  110F               	bcf	15,2	;volatile
 10957                           
 10958                           ;main.c: 406: T6CONbits.TMR6ON=0;
 10959  008F  0028               	movlb	8	; select bank8
 10960  0090  111E               	bcf	30,2	;volatile
 10961  0091                     i1l459:	
 10962                           
 10963                           ;main.c: 407: }
 10964                           ;main.c: 409: if(PIE3bits.TMR5IE == 1 && PIR3bits.TMR5IF==1)
 10965  0091  0021               	movlb	1	; select bank1
 10966  0092  1D13               	btfss	19,2	;volatile
 10967  0093  289E               	goto	i1l4060
 10968  0094  0020               	movlb	0	; select bank0
 10969  0095  1D13               	btfss	19,2	;volatile
 10970  0096  289E               	goto	i1l4060
 10971                           
 10972                           ;main.c: 410: {
 10973                           ;main.c: 411: PIR3bits.TMR5IF=0;
 10974  0097  1113               	bcf	19,2	;volatile
 10975                           
 10976                           ;main.c: 412: PORTDbits.RD2 = 1;
 10977  0098  150F               	bsf	15,2	;volatile
 10978                           
 10979                           ;main.c: 413: PR6=0x9F;
 10980  0099  309F               	movlw	159
 10981  009A  0028               	movlb	8	; select bank8
 10982  009B  009D               	movwf	29	;volatile
 10983                           
 10984                           ;main.c: 414: T6CONbits.TMR6ON=1;
 10985  009C  151E               	bsf	30,2	;volatile
 10986                           
 10987                           ;main.c: 415: T5CONbits.TMR5ON=0;
 10988  009D  101A               	bcf	26,0	;volatile
 10989  009E                     i1l4060:	
 10990                           
 10991                           ;main.c: 416: }
 10992                           ;main.c: 422: if(PIR4bits.CCP8IF==1 || PIR4bits.CCP7IF == 1 || PIR4bits.CCP9IF==1){
 10993  009E  0020               	movlb	0	; select bank0
 10994  009F  1D94               	btfss	20,3	;volatile
 10995  00A0  1914               	btfsc	20,2	;volatile
 10996  00A1  28A4               	goto	i1l463
 10997  00A2  1F14               	btfss	20,6	;volatile
 10998  00A3  28EA               	goto	i1l473
 10999  00A4                     i1l463:	
 11000                           
 11001                           ;main.c: 426: if(CCP9IF){
 11002  00A4  1B14               	btfsc	20,6	;volatile
 11003                           
 11004                           ;main.c: 427: if(CCP9IF == 1){
 11005  00A5  1F14               	btfss	20,6	;volatile
 11006  00A6  28BA               	goto	i1l4082
 11007                           
 11008                           ;main.c: 428: CCP9IF=0;
 11009  00A7  1314               	bcf	20,6	;volatile
 11010                           
 11011                           ;main.c: 429: if(start_PWM_Generation_For_RedLed == 1){
 11012  00A8  0022               	movlb	2	; select bank2
 11013  00A9  034C               	decf	_start_PWM_Generation_For_RedLed^(0+256),w
 11014  00AA  044D               	iorwf	(_start_PWM_Generation_For_RedLed+1)^(0+256),w
 11015  00AB  1D03               	btfss	3,2
 11016  00AC  28BA               	goto	i1l4082
 11017                           
 11018                           ;main.c: 430: TMR1H = Timer1H;
 11019  00AD  0846               	movf	_Timer1H^(0+256),w
 11020  00AE  0020               	movlb	0	; select bank0
 11021  00AF  0097               	movwf	23	;volatile
 11022                           
 11023                           ;main.c: 431: TMR1L = Timer1L;
 11024  00B0  0022               	movlb	2	; select bank2
 11025  00B1  0844               	movf	_Timer1L^(0+256),w
 11026  00B2  0020               	movlb	0	; select bank0
 11027  00B3  0096               	movwf	22	;volatile
 11028                           
 11029                           ;main.c: 432: T1CONbits.TMR1ON = 1;
 11030  00B4  1418               	bsf	24,0	;volatile
 11031                           
 11032                           ;main.c: 433: PORTDbits.RD4=1;
 11033  00B5  160F               	bsf	15,4	;volatile
 11034                           
 11035                           ;main.c: 434: PIE1bits.TMR1IE = 1;
 11036  00B6  0021               	movlb	1	; select bank1
 11037  00B7  1411               	bsf	17,0	;volatile
 11038                           
 11039                           ;main.c: 435: PIR1bits.TMR1IF=0;
 11040  00B8  0020               	movlb	0	; select bank0
 11041  00B9  1011               	bcf	17,0	;volatile
 11042  00BA                     i1l4082:	
 11043                           
 11044                           ;main.c: 436: }
 11045                           ;main.c: 437: }
 11046                           ;main.c: 438: }
 11047                           ;main.c: 440: if(CCP8IF){
 11048  00BA  0020               	movlb	0	; select bank0
 11049  00BB  1994               	btfsc	20,3	;volatile
 11050                           
 11051                           ;main.c: 441: if(CCP8IF == 1){
 11052  00BC  1D94               	btfss	20,3	;volatile
 11053  00BD  28D2               	goto	i1l4100
 11054                           
 11055                           ;main.c: 442: CCP8IF=0;
 11056  00BE  1194               	bcf	20,3	;volatile
 11057                           
 11058                           ;main.c: 443: if(start_PWM_Generation_For_GreenLed == 1){
 11059  00BF  0022               	movlb	2	; select bank2
 11060  00C0  034A               	decf	_start_PWM_Generation_For_GreenLed^(0+256),w
 11061  00C1  044B               	iorwf	(_start_PWM_Generation_For_GreenLed+1)^(0+256),w
 11062  00C2  1D03               	btfss	3,2
 11063  00C3  28D2               	goto	i1l4100
 11064                           
 11065                           ;main.c: 444: TMR3H = Timer3H;
 11066  00C4  0842               	movf	_Timer3H^(0+256),w
 11067  00C5  0028               	movlb	8	; select bank8
 11068  00C6  0092               	movwf	18	;volatile
 11069                           
 11070                           ;main.c: 445: TMR3L = Timer3L;
 11071  00C7  0022               	movlb	2	; select bank2
 11072  00C8  0840               	movf	_Timer3L^(0+256),w
 11073  00C9  0028               	movlb	8	; select bank8
 11074  00CA  0091               	movwf	17	;volatile
 11075                           
 11076                           ;main.c: 446: T3CONbits.TMR3ON = 1;
 11077  00CB  1413               	bsf	19,0	;volatile
 11078                           
 11079                           ;main.c: 447: PORTDbits.RD3=1;
 11080  00CC  0020               	movlb	0	; select bank0
 11081  00CD  158F               	bsf	15,3	;volatile
 11082                           
 11083                           ;main.c: 448: PIE3bits.TMR3IE = 1;
 11084  00CE  0021               	movlb	1	; select bank1
 11085  00CF  1413               	bsf	19,0	;volatile
 11086                           
 11087                           ;main.c: 449: PIR3bits.TMR3IF = 0;
 11088  00D0  0020               	movlb	0	; select bank0
 11089  00D1  1013               	bcf	19,0	;volatile
 11090  00D2                     i1l4100:	
 11091                           
 11092                           ;main.c: 451: }
 11093                           ;main.c: 452: }
 11094                           ;main.c: 453: }
 11095                           ;main.c: 455: if(CCP7IF){
 11096  00D2  0020               	movlb	0	; select bank0
 11097  00D3  1914               	btfsc	20,2	;volatile
 11098                           
 11099                           ;main.c: 456: if(CCP7IF == 1){
 11100  00D4  1D14               	btfss	20,2	;volatile
 11101  00D5  28EA               	goto	i1l473
 11102                           
 11103                           ;main.c: 457: CCP7IF=0;
 11104  00D6  1114               	bcf	20,2	;volatile
 11105                           
 11106                           ;main.c: 458: if(start_PWM_Generation_For_BlueLed == 1){
 11107  00D7  0022               	movlb	2	; select bank2
 11108  00D8  0348               	decf	_start_PWM_Generation_For_BlueLed^(0+256),w
 11109  00D9  0449               	iorwf	(_start_PWM_Generation_For_BlueLed+1)^(0+256),w
 11110  00DA  1D03               	btfss	3,2
 11111  00DB  28EA               	goto	i1l473
 11112                           
 11113                           ;main.c: 459: TMR5H = Timer5H;
 11114  00DC  083E               	movf	_Timer5H^(0+256),w
 11115  00DD  0028               	movlb	8	; select bank8
 11116  00DE  0099               	movwf	25	;volatile
 11117                           
 11118                           ;main.c: 460: TMR5L = Timer5L;
 11119  00DF  0022               	movlb	2	; select bank2
 11120  00E0  083C               	movf	_Timer5L^(0+256),w
 11121  00E1  0028               	movlb	8	; select bank8
 11122  00E2  0098               	movwf	24	;volatile
 11123                           
 11124                           ;main.c: 461: T5CONbits.TMR5ON = 1;
 11125  00E3  141A               	bsf	26,0	;volatile
 11126                           
 11127                           ;main.c: 462: PORTDbits.RD2=1;
 11128  00E4  0020               	movlb	0	; select bank0
 11129  00E5  150F               	bsf	15,2	;volatile
 11130                           
 11131                           ;main.c: 463: PIE3bits.TMR5IE = 1;
 11132  00E6  0021               	movlb	1	; select bank1
 11133  00E7  1513               	bsf	19,2	;volatile
 11134                           
 11135                           ;main.c: 464: PIR3bits.TMR5IF=0;
 11136  00E8  0020               	movlb	0	; select bank0
 11137  00E9  1113               	bcf	19,2	;volatile
 11138  00EA                     i1l473:	
 11139  00EA  087B               	movf	??_isr+1,w
 11140  00EB  0020               	movlb	0	; select bank0
 11141  00EC  00FF               	movwf	127
 11142  00ED  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11143  00EE  0009               	retfie
 11144  00EF                     __end_of_isr:	
 11145                           
 11146                           	psect	text49
 11147  125C                     __ptext49:	
 11148 ;; *************** function _errorsISR *****************
 11149 ;; Defined at:
 11150 ;;		line 1214 in file "main.c"
 11151 ;; Parameters:    Size  Location     Type
 11152 ;;  errNum          2    0[COMMON] PTR const unsigned char 
 11153 ;;		 -> STR_14(5), STR_13(5), 
 11154 ;; Auto vars:     Size  Location     Type
 11155 ;;  Tx_count        2    2[COMMON] int 
 11156 ;; Return value:  Size  Location     Type
 11157 ;;                  1    wreg      void 
 11158 ;; Registers used:
 11159 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11160 ;; Tracked objects:
 11161 ;;		On entry : 0/0
 11162 ;;		On exit  : 0/0
 11163 ;;		Unchanged: 0/0
 11164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 11165 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0
 11166 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0
 11167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 11168 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0
 11169 ;;Total ram usage:        4 bytes
 11170 ;; Hardware stack levels used:    1
 11171 ;; This function calls:
 11172 ;;		Nothing
 11173 ;; This function is called by:
 11174 ;;		_isr
 11175 ;; This function uses a non-reentrant model
 11176 ;;
 11177                           
 11178                           
 11179                           ;psect for function _errorsISR
 11180  125C                     _errorsISR:	
 11181                           
 11182                           ;main.c: 1215: int Tx_count=0;
 11183                           
 11184                           ;incstack = 0
 11185                           ; Regs used in _errorsISR: [wreg-fsr0h+status,2+status,0+pclath]
 11186  125C  01F8               	clrf	errorsISR@Tx_count
 11187  125D  01F9               	clrf	errorsISR@Tx_count+1
 11188  125E                     i1l3824:	
 11189                           ;main.c: 1216: while(Tx_count!=4)
 11190                           
 11191  125E  3004               	movlw	4
 11192  125F  0678               	xorwf	errorsISR@Tx_count,w
 11193  1260  0479               	iorwf	errorsISR@Tx_count+1,w
 11194  1261  1903               	btfsc	3,2
 11195  1262  0008               	return
 11196  1263                     i1l586:	
 11197                           ;main.c: 1217: {
 11198                           ;main.c: 1218: while (!TX1STAbits.TRMT);
 11199                           
 11200  1263  0023               	movlb	3	; select bank3
 11201  1264  1C9E               	btfss	30,1	;volatile
 11202  1265  2A63               	goto	i1l586
 11203                           
 11204                           ;main.c: 1219: TX1REG = *errNum;
 11205  1266  0876               	movf	errorsISR@errNum,w
 11206  1267  0084               	movwf	4
 11207  1268  0877               	movf	errorsISR@errNum+1,w
 11208  1269  0085               	movwf	5
 11209  126A  0800               	movf	0,w	;code access
 11210  126B  009A               	movwf	26	;volatile
 11211                           
 11212                           ;main.c: 1220: *errNum++;
 11213  126C  3001               	movlw	1
 11214  126D  07F6               	addwf	errorsISR@errNum,f
 11215  126E  3000               	movlw	0
 11216  126F  3DF7               	addwfc	errorsISR@errNum+1,f
 11217                           
 11218                           ;main.c: 1221: Tx_count++;
 11219  1270  3001               	movlw	1
 11220  1271  07F8               	addwf	errorsISR@Tx_count,f
 11221  1272  3000               	movlw	0
 11222  1273  3DF9               	addwfc	errorsISR@Tx_count+1,f
 11223  1274  2A5E               	goto	i1l3824
 11224  1275                     __end_of_errorsISR:	
 11225  007E                     btemp	set	126	;btemp
 11226  007E                     int$flags	set	126
 11227  007E                     wtemp0	set	126


Data Sizes:
    Strings     102
    Constant    8
    Data        247
    BSS         166
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     60      72
    BANK1            80     75      80
    BANK2            80      0      79
    BANK3            80      0      77
    BANK4            80      0      78
    BANK5            80     10      60
    BANK6            80      0      32
    BANK7            80      0      74
    BANK8            80      0       0
    BANK9            32      0       0

Pointer List with Targets:

    StopBitString	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    FinalframebitString	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_17(CODE[2]), STR_15(CODE[2]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_17(CODE[2]), STR_15(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 2
		 -> STR_17(CODE[2]), STR_15(CODE[2]), NULL(NULL[0]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_17(CODE[2]), STR_15(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_17(CODE[2]), STR_15(CODE[2]), 

    strtok@sp	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    strncpy@from	PTR const unsigned char  size(1) Largest target is 5
		 -> applicationControlRGB@HexlevelBuffer(BANK1[5]), 

    strncpy@to	PTR unsigned char  size(1) Largest target is 3
		 -> applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), applicationControlRGB@strGreenH(BANK1[3]), 
		 -> applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 3
		 -> applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), applicationControlRGB@strGreenH(BANK1[3]), 
		 -> applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), 
		 -> applicationControlRGB@strGreenH(BANK1[3]), applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), applicationControlRGB@HexlevelBuffer(BANK1[5]), 
		 -> NULL(NULL[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), 
		 -> applicationControlRGB@strGreenH(BANK1[3]), applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), applicationControlRGB@HexlevelBuffer(BANK1[5]), 
		 -> NULL(NULL[0]), 

    strcpy@from	PTR const unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_16(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 32
		 -> ChildLockbuffer(BANK2[2]), switchstatusbuffer(BANK2[2]), switchNumberBuffer(BANK3[3]), copymainReceivedDataBuffer(BANK4[32]), 
		 -> STR_9(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), 
		 -> STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[7]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), NULL(NULL[0]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    memset@p1	PTR void  size(1) Largest target is 5
		 -> applicationControlRGB@HexlevelBuffer(BANK1[5]), 

    memset@p	PTR unsigned char  size(1) Largest target is 5
		 -> applicationControlRGB@HexlevelBuffer(BANK1[5]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 32
		 -> ChildLockbuffer(BANK2[2]), switchstatusbuffer(BANK2[2]), switchNumberBuffer(BANK3[3]), copymainReceivedDataBuffer(BANK4[32]), 
		 -> applianceControl@dimmerSpeedStringBuffer(BANK0[2]), applianceControl@switchNumberStringBuffer(BANK0[2]), NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 5
		 -> applicationControlRGB@HexlevelBuffer(BANK1[5]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sendAcknowledgmentRGB@currentStateBufferRGB	PTR unsigned char  size(2) Largest target is 46
		 -> STR_19(CODE[27]), sendFinalBufferToGAteway(BANK4[46]), 

    hexadecimalToDecimal@hexVal	PTR unsigned char  size(1) Largest target is 3
		 -> applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), applicationControlRGB@strGreenH(BANK1[3]), 
		 -> applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), 

    errorsMain@errNum	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_18(CODE[5]), 

    errorsISR@errNum	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_14(CODE[5]), STR_13(CODE[5]), 

    AllColorIntensityString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    ChildLockString	PTR unsigned char  size(1) Largest target is 2
		 -> ChildLockbuffer(BANK2[2]), NULL(NULL[0]), 

    BlueColorIntensityString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    GreenColorIntensityString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    RedColorIntensityString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    SwitchStatusString	PTR unsigned char  size(1) Largest target is 2
		 -> switchstatusbuffer(BANK2[2]), NULL(NULL[0]), 

    AcknowledgementString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    SwitchNumberString	PTR unsigned char  size(1) Largest target is 3
		 -> switchNumberBuffer(BANK3[3]), NULL(NULL[0]), 

    ModuleNameString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    sp__strtok	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    token	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    ConvertmaindataReceiveIntoString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    sendAcknowledgment@currentStateBuffer	PTR unsigned char  size(2) Largest target is 74
		 -> STR_20(CODE[27]), currentStateBuffer(BANK7[74]), 

    sp__memset	PTR void  size(1) Largest target is 5
		 -> applicationControlRGB@HexlevelBuffer(BANK1[5]), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 3
		 -> applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), applicationControlRGB@strGreenH(BANK1[3]), 
		 -> applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    applicationControlRGB@ModuleNamestr	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    applicationControlRGB@ChildLockstr	PTR unsigned char  size(1) Largest target is 2
		 -> ChildLockbuffer(BANK2[2]), NULL(NULL[0]), 

    applicationControlRGB@Allcolorstr	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    applicationControlRGB@GreenColorIntensitystr	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    applicationControlRGB@BlueColorIntensitystr	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    applicationControlRGB@RedColorIntensitystr	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    applicationControlRGB@SwitchStatusstr	PTR unsigned char  size(1) Largest target is 2
		 -> switchstatusbuffer(BANK2[2]), NULL(NULL[0]), 

    applicationControlRGB@SwitchNumberstr	PTR unsigned char  size(1) Largest target is 3
		 -> switchNumberBuffer(BANK3[3]), NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_errorsISR

Critical Paths under _main in BANK0

    _main->_applicationControlRGB
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _applicationControlRGB->___fttol
    _sprintf->___lwdiv
    _hexadecimalToDecimal->___wmul
    _hexadecimalToDecimal->_strlen
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftmul->___ftpack
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _applianceControl->_atoi
    _atoi->___wmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_applicationControlRGB

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   35980
                                             53 BANK0      7     7      0
                                              0 BANK5     10    10      0
                _GPIO_pin_Initialize
     _ReceivingIndicationLedBlinking
           _SwitchOffStatustToGatway
            _SwitchOnStatustToGatway
  _TransmissionIndicationLedBlinking
                  _allPeripheralInit
                   _applianceControl
              _applicationControlRGB
             _copyReceivedDataBuffer
                         _errorsMain
                 _sendAcknowledgment
              _sendAcknowledgmentRGB
                             _strcmp
                             _strlen
                             _strtok
 ---------------------------------------------------------------------------------
 (1) _strtok                                               6     4      2    1855
                                             14 BANK0      6     4      2
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (2) _strspn                                               7     5      2     675
                                              7 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strcspn                                              7     5      2     675
                                              7 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strchr                                               7     3      4     432
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               5     3      2     243
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _errorsMain                                           4     2      2     148
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _copyReceivedDataBuffer                               3     3      0     164
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _applicationControlRGB                               84    77      7   27056
                                             44 BANK0      9     2      7
                                              0 BANK1     75    75      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _abs
                               _atoi
               _hexadecimalToDecimal
                             _memset
              _sendAcknowledgmentRGB
                            _sprintf
                             _strcat
                             _strcpy
                             _strlen
                            _strncpy
 ---------------------------------------------------------------------------------
 (2) _strncpy                                              6     3      3    1324
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               4     3      1     219
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     3      2    1903
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             26    20      6    1322
                                              8 BANK0     18    12      6
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     395
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _sendAcknowledgmentRGB                                5     3      2     225
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _memset                                               7     3      4     698
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _hexadecimalToDecimal                                13    11      2    1826
                                              6 BANK0     13    11      2
                             ___wmul
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               6     4      2     352
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     324
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2726
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     602
                                             30 BANK0     14    10      4
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3414
                                              8 BANK0     16    10      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    4270
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2828
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2464
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _applianceControl                                    21    15      6    3398
                                             13 BANK0     21    15      6
                               _atoi
                 _sendAcknowledgment
 ---------------------------------------------------------------------------------
 (1) _sendAcknowledgment                                   4     2      2     225
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2    1623
                                              6 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     598
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _allPeripheralInit                                    0     0      0       0
                    _CCP7_Initialize
                    _CCP8_Initialize
                    _CCP9_Initialize
                  _EUSART_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR3_Initialize
                    _TMR4_Initialize
                    _TMR5_Initialize
                    _TMR6_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP9_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP8_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP7_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TransmissionIndicationLedBlinking                    2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SwitchOnStatustToGatway                              3     1      2     647
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _SwitchOffStatustToGatway                             3     1      2     647
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReceivingIndicationLedBlinking                       2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPIO_pin_Initialize                                  0     0      0       0
                      _clearAllPorts
                      _pinINIT_extra
 ---------------------------------------------------------------------------------
 (2) _pinINIT_extra                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clearAllPorts                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0     175
                                              4 COMMON     2     2      0
                          _errorsISR
 ---------------------------------------------------------------------------------
 (5) _errorsISR                                            4     2      2     175
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GPIO_pin_Initialize
     _clearAllPorts
     _pinINIT_extra
   _ReceivingIndicationLedBlinking
   _SwitchOffStatustToGatway
   _SwitchOnStatustToGatway
   _TransmissionIndicationLedBlinking
   _allPeripheralInit
     _CCP7_Initialize
     _CCP8_Initialize
     _CCP9_Initialize
     _EUSART_Initialize
     _TMR1_Initialize
     _TMR2_Initialize
     _TMR3_Initialize
     _TMR4_Initialize
     _TMR5_Initialize
     _TMR6_Initialize
   _applianceControl
     _atoi
       ___wmul
       _isdigit
     _sendAcknowledgment
   _applicationControlRGB
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___lwtoft
       ___ftpack
     _abs
     _atoi
       ___wmul
       _isdigit
     _hexadecimalToDecimal
       ___wmul
       _strlen
     _memset
     _sendAcknowledgmentRGB
     _sprintf
       ___lwdiv
     _strcat
     _strcpy
     _strlen
     _strncpy
   _copyReceivedDataBuffer
   _errorsMain
   _sendAcknowledgment
   _sendAcknowledgmentRGB
   _strcmp
   _strlen
   _strtok
     _strcspn
       _strchr
     _strspn
       _strchr

 _isr (ROOT)
   _errorsISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     234       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3C      48       6       90.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     4B      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4F      10       98.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      4D      12       96.3%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      4E      14       97.5%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      A      3C      16       75.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      20      18       40.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      4A      20       92.5%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            20      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               20      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
DATA                 0      0     234      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Apr 11 18:59:03 2019

                          _IntegerGreenColorIntensity 00EB                            __size_of_allPeripheralInit 001E  
                                                   pc 0002                                           __CFG_CP$OFF 0000  
                                                  _M1 0130                                                    _M2 012E  
                                                  _M3 012C                                                    _M4 012A  
                                                  _M5 0128                                                    _M6 0126  
                                                  _M7 0124                                                    _M8 0122  
                                                  _M9 0120                               hexadecimalToDecimal@len 002A  
                                 ___wmul@multiplicand 0022                          applianceControl@integerSpeed 0035  
                                                 l440 12EA                                                   l416 076D  
                                                 l506 0D59                                                   l435 0B11  
                                                 l618 1363                                                   l681 12B3  
                                                 l595 1307                                                   l861 16DB  
                                                 l952 07DB                                                   l868 16EE  
                                                 l869 16F6                                                   _GIE 005F  
                                                 _PR2 001B                                                   _PR4 0416  
                                                 _PR6 041D                 _ConvertIntegertoStringBlueColorBuffer 01E6  
                            hexadecimalToDecimal@base 002E                                      _ModuleNameBuffer 01CF  
                                                 _abs 11D9                             __size_of_applianceControl 00FF  
                                                 _isr 0004                                       _TMR2_Initialize 1194  
                                        __CFG_BORV$LO 0000                                                   wreg 0009  
                                        __CFG_FOSC$HS 0000                                      _ModuleNameString 0064  
                                                S6322 1010                                                  S6314 1000  
                                        __CFG_LVP$OFF 0000                                          ___ftdiv@cntr 0038  
                                        ___ftdiv@sign 003D                                                  ?_abs 0020  
                                                l1141 1275                                                  l5000 12E5  
                                                l6000 0E69                                                  l5202 09EB  
                                                l5116 13C3                                                  l5132 0830  
                                                l6012 0E88                                                  l5126 081A  
                                                l6112 0F6B                                                  l6032 0EB3  
                                                l6016 0E8D                                                  l5154 088A  
                                                l5146 0871                                                  l5250 07EC  
                                                l5218 0787                                                  l5244 07D2  
                                                l5236 07B7                                                  l5260 14E9  
                                                l6140 0FB0                                                  l6124 0F8A  
                                                l6108 0F66                                                  l6060 0EF6  
                                                l6044 0ED2                                                  l6028 0EAC  
                                                l5190 09CF                                                  l5174 098C  
                                                l5246 07DE                                                  l5238 07C5  
                                                l5262 14F1                                                  l6320 0B04  
                                                l5168 0976                                                  l4800 160E  
                                                l5440 06CE                                                  l5432 06C2  
                                                l5272 14B9                                                  l6160 0FD3  
                                                l6144 0FB5                                                  l6128 0F91  
                                                l6080 0F21                                                  l6064 0EFD  
                                                l6048 0ED7                                                  l6312 0CEE  
                                                l4722 12AD                                                  l5186 09C7  
                                                l4714 133F                                                  l5274 14C1  
                                                l5266 150F                                                  l4820 171C  
                                                l4716 134B                                                  l6316 0759  
                                                l5444 06D6                                                  l6180 0FF9  
                                                l6164 0FDB                                                  l6092 0F40  
                                                l6076 0F1C                                                  l4830 1734  
                                                l5550 0AD6                                                  l4742 16B8  
                                                l5198 09E3                                                  l6318 0768  
                                                l5462 070B                                                  l5454 06FB  
                                                l5278 14DF                                                  l4840 1769  
                                                l4816 1716                                                  l5552 0ADE  
                                                l5544 0AC2                                                  l4752 16E0  
                                                l4744 16C2                                                  l5472 072F  
                                                l5448 06DE                                                  l6096 0F47  
                                                l5800 0BDB                                                  l4818 170D  
                                                l5554 0AE6                                                  l5546 0AC9  
                                                l5562 0AFE                                                  l4754 16E8  
                                                l4746 16C7                                                  l4738 16B1  
                                                l4914 091C                                                  l5458 0703  
                                                l5810 0C07                                                  l4836 173C  
                                                l5556 0AEE                                                  l5548 0ACF  
                                                l4924 0920                                                  l4908 08FD  
                                                l4860 13E0                                                  l4940 145C  
                                                l5476 0736                                                  l5468 0728  
                                                l5484 0753                                                  l5708 1302  
                                                l5660 1666                                                  l5900 0D80  
                                                l5812 0C0E                                                  l4774 11D7  
                                                l4846 1779                                                  l4838 1740  
                                                l5558 0AF6                                                  l4790 15F3  
                                                l4926 08B2                                                  l4862 13EC  
                                                l4854 12CC                                                  l4942 1472  
                                                l4928 095A                                                  l5488 0762  
                                                l5920 0DAD                                                  l5904 0D88  
                                                l5840 0C91                                                  l5832 0C63  
                                                l5808 0C01                                                  l5752 0B37  
                                                l4954 1295                                                  l4866 13F4  
                                                l4946 147A                                                  l5690 142F  
                                                l5682 16A5                                                  l5674 1682  
                                                l5666 166B                                                  l5826 0C46  
                                                l5818 0C20                                                  l5770 0B7F  
                                                l4876 135C                                                  l4796 1605  
                                                l4788 15E7                                                  l4892 08D4  
                                                l5692 1437                                                  l5684 16A6  
                                                l5932 0DCC                                                  l5916 0DA7  
                                                l5836 0C7A                                                  l5828 0C4C  
                                                ?_isr 0076                                                  l5854 0CCB  
                                                l5846 0CA3                                                  l5862 0CE8  
                                                l5790 0BB6                                                  l4984 17F5  
                                                l4976 17B7                                                  l4968 179A  
                                                l5696 1450                                                  l5952 0DF9  
                                                l5936 0DD4                                                  l5880 0D3B  
                                                l5856 0CD1                                                  l5864 0CFB  
                                                l4898 08EC                                                  l5794 0BC9  
                                                l5866 0CFF                                                  l4988 17FB  
                                                l5980 0E3E                                                  l5964 0E18  
                                                l5948 0DF3                                                  l5868 0D20  
                                                l5886 0D5C                                                  l5984 0E43  
                                                l5968 0E1F                                                  l5996 0E62  
                                                STR_1 186C                                                  STR_2 186C  
                                                STR_3 184F                                                  STR_4 186C  
                                                STR_5 186C                                                  STR_6 186C  
                                                STR_7 186C                                                  STR_8 186C  
                                                STR_9 186C                                                  u5305 0881  
                                                u5315 088B                                                  _PEIE 005E  
                                                u5085 0912                                                  u5425 09EC  
                                                u5275 0842                                                  u5435 09F2  
                                                u5355 0998                                                  u5285 0852  
                                                u5365 09A8                                                  u5525 07D3  
                                                u4815 16FD                                                  u4735 16BD  
                                                u5295 0872                                                  u5385 09D0  
                                                u5465 078E                                                  u4905 1606  
                                                u4755 16D6                                                  u5395 09D6  
                                                u4685 12B4                                                  u4695 12B9  
                                                u4775 16E3                                                  u5495 07B8  
                                                u4865 15EA                                                  u5665 1526  
                                                u5905 0CC9                                                  u6707 15CA  
                                                u6717 15D8                                                  u4885 15F4  
                                                u5925 0D39                                                  u6727 157F  
                                                u4895 15FE                                                  u5935 0D57  
                                                u5855 0BD9                                                  u6737 158B  
                                                u5865 0BFF                                                  u6747 1597  
                                                u5875 0C1E                                                  u6667 0B18  
                                                u6757 15A5                                                  u6677 1201  
                                                u5885 0C44                                                  u6767 11F0  
                                                u6687 15B2                                                  u5895 0CA1  
                                                u6697 15BE                                                  _TMR2 001A  
                                                _TMR4 0415                                                  _TMR6 041C  
                                                _WPUB 020D                                                  _WPUD 020F  
                                                _WPUE 0210                                                  _WPUG 048D  
                                        __CFG_WRT$OFF 0000                                                  abs@a 0020  
                                                _atoi 170D                                                  _main 0B12  
                                        ___ftpack@arg 0020                                          ___ftpack@exp 0023  
                  applicationControlRGB@CompleteClock 00D6                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                                                  btemp 007E  
                             _copy_parentalLockBuffer 01B8                                                  start 00EF  
                                       __CFG_IESO$OFF 0000                                       _TMR3_Initialize 11BE  
                              __size_of_pinINIT_extra 0015                    applicationControlRGB@NeedBluePulse 00BA  
                                        ___ftmul@cntr 0036                                          ___ftmul@sign 0037  
                      applicationControlRGB@remainder 00A0                                          ___fttol@exp1 004B  
                                               ??_abs 0022                                          ___fttol@lval 0047  
                                               ??_isr 007A                   applianceControl@charParentalControl 0031  
                                               ?_atoi 0026                                                 ?_main 0076  
                                               STR_10 1869                                                 STR_11 1869  
                                               STR_12 1869                                                 STR_20 1808  
                                               STR_13 185B                                                 STR_21 183E  
                                               STR_14 1860                                                 STR_15 186C  
                                               STR_16 1865                                                 STR_17 186C  
                                       __CFG_WDTE$OFF 0000                                                 STR_18 1856  
                                               STR_19 1823                                       __end_of___ftdiv 08AC  
                                     __end_of___ftmul 0A13                                                 _T1CON 0018  
                                     __end_of___fttol 07F5                                                 _T2CON 001C  
                                               _T3CON 0413                                                 _RC1IF 008D  
                                               _T4CON 0417                               _AllColorIntensityString 005E  
                                               _T5CON 041A                                                 _T6CON 041E  
                                     __end_of___lwdiv 1613                                                 i1l453 004F  
                                               i1l463 00A4                                                 i1l455 0064  
                                               i1l473 00EA                                                 i1l457 007A  
                                               i1l459 0091                                                 i1l586 1263  
                                               _TMR1H 0017                                                 _TMR3H 0412  
                                               _TMR1L 0016                                                 _TMR3L 0411  
                                               _TMR5H 0419                                                 _TMR5L 0418  
                              ??_hexadecimalToDecimal 0028                                       _TMR4_Initialize 11B3  
                                     _charSwitchState 0168                        applicationControlRGB@strGreenH 00C5  
                      applicationControlRGB@strGreenL 00C8                                        __CFG_FCMEN$OFF 0000  
                                       ___awtoft@sign 002D                                       _CCP7_Initialize 1176  
                                     __end_of_isdigit 11D9                                         ___ftpack@sign 0024  
                                               atoi@a 002B                                                 atoi@s 0026  
                                               _token 0065      applicationControlRGB@ConvertIntoTenMsRangeFactor 00E0  
                                               main@j 02D4                                                 main@k 02D6  
                             __end_of_TMR1_Initialize 11B3                                        __CFG_BOREN$OFF 0000  
                _ConvertIntegertoStringRedColorBuffer 013A                        __size_of_applicationControlRGB 0602  
                       _RedColorIntensityStringLength 01E2                         __end_of_applicationControlRGB 076E  
                                               status 0003                                                 wtemp0 007E  
                                     __end_of_sprintf 095F   applicationControlRGB@ConvertIntToTimeInMicrosecBlue 00E8  
                                     __end_of_strcspn 14E4                                       __end_of_strncpy 1485  
                               __end_of_clearAllPorts 121C                                   _GPIO_pin_Initialize 1402  
                                     _TMR5_Initialize 119E                                        __CFG_MCLRE$OFF 0000  
                                     __initialization 00F1                               ?_copyReceivedDataBuffer 0076  
                                        __end_of_atoi 177E                                          __end_of_main 1000  
                                     _CCP8_Initialize 1180                                            _ErrorNames 01CA  
                             __end_of_TMR2_Initialize 119E                                        __CFG_LPBOR$OFF 0000  
                               _GreenLedSwitchCounter 01D6                                                ??_atoi 0028  
                                              ??_main 0055                                         ___fttol@sign1 0046  
                            _BlueColorIntensityBuffer 0154                                  ?_GPIO_pin_Initialize 0076  
           __end_of_TransmissionIndicationLedBlinking 120A            __size_of_TransmissionIndicationLedBlinking 0011  
                 ??_TransmissionIndicationLedBlinking 0020                    ?_TransmissionIndicationLedBlinking 0076  
                   _TransmissionIndicationLedBlinking 11F9                                    _switchstatusbuffer 0162  
                       applicationControlRGB@RedPulse 00A6                                         _pinINIT_extra 121C  
                                     _TMR6_Initialize 116D                              _BlueColorIntensityString 005F  
                                     _CCP9_Initialize 118A                                                _CCP7IF 00A2  
                                              _CCP8IF 00A3                                                _CCP9IF 00A6  
                                              _CCPR7H 0615                                                _CCPR8H 0618  
                                              _CCPR9H 061B                                                _CCPR7L 0614  
                                              _CCPR8L 0617                                                _CCPR9L 061A  
                                    __end_of___awtoft 13DA                                                _ANSELA 018C  
                                              _ANSELB 018D                                                _ANSELD 018F  
                                              _ANSELE 0190                                                _ANSELF 040C  
                                    __end_of___ftpack 170D                                                _ANSELG 040D  
                                              _T1GCON 0019                                                _T3GCON 0414  
                                              _T5GCON 041B                                                _RC1REG 0199  
                                 _RedLedSwitchCounter 01D8                                                _RC1STA 019D  
                                              i1l4002 0042                                                i1l4100 00D2  
                                              i1l4012 005B                                                i1l4060 009E  
                                              i1l4044 0087                                                i1l4028 0070  
                                              i1l4082 00BA                               __end_of_TMR3_Initialize 11CA  
                                              i1l3824 125E                                                i1l3990 0017  
                                    __end_of___lwtoft 1246                                                _TX1REG 019A  
                                              _TX1STA 019E                                        __CFG_PWRTE$OFF 0000  
                      __end_of_copyReceivedDataBuffer 1546                           __size_of_sendAcknowledgment 001D  
                      __size_of_sendAcknowledgmentRGB 001F                                   _FinalFramebitBuffer 00EF  
                       __end_of_sendAcknowledgmentRGB 1378                                                ___wmul 12AA  
                                           ??___ftdiv 0034                                             ??___ftmul 002E  
                                           ??___fttol 0042                                             ??___lwdiv 0024  
                                              _memset 128F                               __end_of_TMR4_Initialize 11BE  
          sendAcknowledgmentRGB@currentStateBufferRGB 0020                                                _strcat 13DA  
                                              _strchr 1275                                                _strcmp 142C  
                                              _strcpy 12C6                                                _strlen 133A  
                             __end_of_CCP7_Initialize 1180                                                _strtok 165D  
                                              _strspn 14E4                                 ??_GPIO_pin_Initialize 0020  
                               ___ftmul@f3_as_product 0033                              _mainReceivedDataPosition 0072  
                                    _applianceControl 0A13                                             ??_isdigit 0020  
                                      ?_pinINIT_extra 0076                                             ??_sprintf 002E  
                                           ??_strcspn 0029                            ??_SwitchOffStatustToGatway 0022  
                                           ??_strncpy 0023  applicationControlRGB@ConvertIntToTimeInMicrosecGreen 00E5  
                                    ?_TMR1_Initialize 0076                               __end_of_TMR5_Initialize 11A8  
                             __end_of__initialization 0168                         applicationControlRGB@strBlueH 00CB  
                       applicationControlRGB@strBlueL 00CE                               __end_of_CCP8_Initialize 118A  
                                          ___ftdiv@f1 0031                                            ___ftdiv@f2 002E  
                                          ___ftdiv@f3 0039                                            ___awtoft@c 0028  
                                          ___ftmul@f1 0028                                            ___ftmul@f2 002B  
                                          ___fttol@f1 003E                                        __pcstackCOMMON 0076  
                    __size_of_SwitchOnStatustToGatway 0033                                          __pidataBANK0 0003  
                                        __pidataBANK2 07F5                                          __pidataBANK3 1485  
                                        __pidataBANK4 1398                                          __pidataBANK5 1546  
                                        __pidataBANK6 1378                                          __pidataBANK7 1613  
                                    ?_TMR2_Initialize 0076                               __end_of_TMR6_Initialize 1176  
           applicationControlRGB@RedColorIntensitystr 004E                      applicationControlRGB@Allcolorstr 0052  
                                          ___lwtoft@c 0028                               __end_of_CCP9_Initialize 1194  
                       sendAcknowledgmentRGB@Tx_count 0023                                            __pbssBANK0 005C  
                                          __pbssBANK1 00EB                                            __pbssBANK2 0120  
                                          __pbssBANK3 01CF                                            __pbssBANK4 0220  
                                    ?_TMR3_Initialize 0076                                       __CFG_VCAPEN$OFF 0000  
                                  __size_of_errorsISR 0019                          applicationControlRGB@strRedH 00BF  
                        applicationControlRGB@strRedL 00C2                        _BlueColorIntensityStringLength 01DC  
                                          __pmaintext 0B12                                   _IntegerSwitchNumber 0136  
                                             ?___wmul 0020                                            __pintentry 0004  
                          sendAcknowledgment@Tx_count 0022                                               _CCP7CON 0616  
                                             _CCP9CON 061C                                               ?_memset 0020  
                                    ?_TMR4_Initialize 0076                                             ?___awtoft 0028  
                                           ?___ftpack 0020                                       ??_pinINIT_extra 0020  
                                             ?_strcat 0020                                               ?_strchr 0020  
                                             ?_strcmp 0020                                               ?_strcpy 0020  
                                             ?_strlen 0020                                             ?___lwtoft 0028  
                                             ?_strtok 002E                                               ?_strspn 0027  
                                    ?_CCP7_Initialize 0076                      _start_PWM_Generation_For_BlueLed 0148  
                                             _SP1BRGH 019C                                               _SP1BRGL 019B  
                                    ?_TMR5_Initialize 0076                       _GreenColorIntensityStringLength 01E0  
                     _start_PWM_Generation_For_RedLed 014C           applianceControl@currentStateBufferPositions 003E  
                                    ?_CCP8_Initialize 0076                      applianceControl@chDimmerSpeedLSB 0030  
                    applianceControl@chDimmerSpeedMSB 002F                                               _Timer1H 0146  
                                             _Timer1L 0144                                               _Timer3H 0142  
                                             _Timer3L 0140                                               _Timer5H 013E  
                                             _Timer5L 013C                       applicationControlRGB@GreenPulse 00AA  
                                             ___ftdiv 0803                                       __size_of___wmul 001C  
                                             ___ftmul 095F                                               ___fttol 076E  
                            _sendFinalBufferToGAteway 0220                                               ___lwdiv 15DE  
                                     __CFG_STVREN$OFF 0000                            _copymainReceivedDataBuffer 024E  
                                          ??___awtoft 002B                                            ??___ftpack 0025  
                                     __size_of_memset 001B                                      ?_TMR6_Initialize 0076  
                                          _errorsMain 12FF                                               __ptext1 165D  
                                             __ptext2 14E4                                               __ptext3 14B4  
                                             __ptext4 1275                                               __ptext5 142C  
                                             __ptext6 12FF                                               __ptext7 1514  
                                             __ptext8 016C                                               __ptext9 1456  
                                          ??___lwtoft 002B                                       __size_of_strcat 0028  
                                     __size_of_strchr 001A                                       __size_of_strcmp 002A  
                                     __size_of_strcpy 001C                                       __size_of_strlen 001F  
                                   __end_of_hexpowers 1808                                             _T1CONbits 0018  
                                    ?_CCP9_Initialize 0076                                       __size_of_strtok 004B  
                                     __size_of_strspn 0030                                             _T2CONbits 001C  
                                        __size_of_abs 000F                                               _isdigit 11CA  
                                        __size_of_isr 00EB                                             _T3CONbits 0413  
                                   __end_of_errorsISR 1275                                             _T4CONbits 0417  
                                           _T5CONbits 041A                                             _T6CONbits 041E  
                             _RedColorIntensityBuffer 0158                         __size_of_hexadecimalToDecimal 0082  
                sendAcknowledgment@currentStateBuffer 0020                      __end_of_SwitchOffStatustToGatway 15AB  
                           _IntergerRedColorIntensity 00ED                                               main@man 02DA  
                                             _sprintf 08AC                                               clrloop0 1162  
                                             _strcspn 14B4                                               _strncpy 1456  
                                end_of_initialization 0168                               _RedColorIntensityString 0061  
                                             init_ram 1167                              applicationControlRGB@end 00A4  
                                             memset@c 0020                                               memset@n 0022  
                                             memset@p 0025                                               initloop 1168  
                               _applicationControlRGB 016C                                     _EUSART_Initialize 1246  
                            __end_of_applianceControl 0B12                    applianceControl@integerSwitchState 0040  
                             _SwitchOnStatustToGatway 15AB                  applicationControlRGB@SwitchNumberstr 004C  
                                  ?_EUSART_Initialize 0076            applicationControlRGB@BlueColorIntensitystr 0050  
                                             strcmp@r 0023                                               strlen@s 0020  
                                 ??_EUSART_Initialize 0020                                               strspn@i 002B  
                applicationControlRGB@SwitchStatusstr 004D                                             _PORTBbits 000D  
                                           _PORTDbits 000F                                             _PORTEbits 0010  
                                           _PORTFbits 028C                                             _PORTGbits 028D  
              __end_of_ReceivingIndicationLedBlinking 11F9               __size_of_ReceivingIndicationLedBlinking 0011  
                      _ReceivingIndicationLedBlinking 11E8                                __size_of_clearAllPorts 0012  
                                           _TRISBbits 008D                                             _TRISCbits 008E  
                                           _TRISDbits 008F                                             _TRISEbits 0090  
                                           _TRISFbits 030C                                             _TRISGbits 030D  
                                   _levelofRedLed_LSB 016B                                     _levelofRedLed_MSB 016C  
                                          main@k_1110 02D8                                  _IntergerSwitchStatus 0134  
             SwitchOffStatustToGatway@SwitchOffNumber 0020                             __end_of_EUSART_Initialize 125C  
                                         ___ftdiv@exp 003C                     applicationControlRGB@ChildLockstr 0051  
            applianceControl@switchNumberStringBuffer 0038                            __end_of_sendAcknowledgment 12FF  
                                         ___ftmul@exp 0032                           __end_of_GPIO_pin_Initialize 142C  
                                      __end_of___wmul 12C6                                _mainReceivedDataBuffer 02A0  
                               _sendAcknowledgmentRGB 1359                _ConvertIntegertoStringGreenColorBuffer 01E8  
                                 _FinalframebitString 015E                                           ?_errorsMain 0020  
                                       _charchildLock 0067                                        __end_of_memset 12AA  
                                 _Finalframebitbuffer 01DA                                        __end_of_strcat 1402  
                                      __end_of_strchr 128F                                        __end_of_strcmp 1456  
                                      __end_of_strcpy 12E2                                        __end_of_strlen 1359  
  applicationControlRGB@ConvertIntToTimeInMicrosecRed 00E2                                        __end_of_strtok 16A8  
                                      __end_of_strspn 1514                                   start_initialization 00F1  
                                  _SwitchNumberBuffer 015A                                           __end_of_abs 11E8  
                               applianceControl@F4004 0166                                 applianceControl@F4006 0164  
                                         __end_of_isr 00EF                                    _SwitchNumberString 0063  
                          applicationControlRGB@start 00A2                                ?_applicationControlRGB 004C  
                           ??_SwitchOnStatustToGatway 0022                    applicationControlRGB@ModuleNamestr 00BE  
                               _AcknowledgementString 015F                             _GreenColorIntensityBuffer 0156  
                                       _clearAllPorts 120A                              __size_of_TMR1_Initialize 000B  
             copyReceivedDataBuffer@dataBufferCounter 0021                                              ??___wmul 0024  
                   __size_of_SwitchOffStatustToGatway 0033                             _GreenColorIntensityString 0060  
                           ?_SwitchOffStatustToGatway 0020                                           __pdataBANK0 0067  
                                         __pdataBANK2 0164                                           __pdataBANK3 01A0  
                                         __pdataBANK4 024E                                           __pdataBANK5 02A0  
                                         __pdataBANK6 0320                                           __pdataBANK7 03A0  
                                            ??_memset 0024           applicationControlRGB@GreenColorIntensitystr 004F  
                                            ??_strcat 0022                                              ??_strchr 0024  
                                            ??_strcmp 0022                                              ??_strcpy 0021  
                                            ??_strlen 0022                                              ??_strtok 0030  
                                            ??_strspn 0029                                     __size_of___awtoft 0022  
                                   __size_of___ftpack 0065                                      _mainDataReceived 0152  
                                         __pbssCOMMON 0070                                             ___latbits 0002  
                                   __size_of___lwtoft 0015                                         __pcstackBANK0 0020  
                                       __pcstackBANK1 00A0                                         __pcstackBANK5 02D2  
                            __size_of_TMR2_Initialize 000A                                     errorsISR@Tx_count 0078  
                                _mainReceivedDataFlag 0150                                          _isdigit$1388 0020  
                            ??_copyReceivedDataBuffer 0020                            __size_of_EUSART_Initialize 0016  
                                         sprintf@flag 0032                                           sprintf@prec 0037  
                                  errorsMain@Tx_count 0022                                   __size_of_errorsMain 001D  
                                      ?_clearAllPorts 0076                                      ___lwdiv@dividend 0022  
                                     errorsISR@errNum 0076                              __size_of_TMR3_Initialize 000C  
                                    errorsMain@errNum 0020                                              ?___ftdiv 002E  
                                            ?___ftmul 0028                                              ?___fttol 003E  
                              ?_sendAcknowledgmentRGB 0020                                              ?___lwdiv 0020  
                                     _ChildLockBuffer 0074                       __end_of_SwitchOnStatustToGatway 15DE  
                                           __pswtext1 1000                                             __pswtext2 1010  
                                    _IntegerChildLock 0132                                       _ChildLockString 005D  
                                            _BAUD1CON 019F                                 __end_of_pinINIT_extra 1231  
                                            ?_isdigit 0076                                       _ChildLockbuffer 0160  
                       _AllColorIntensityStringLength 01DE                              __size_of_TMR4_Initialize 000B  
                                           _hexpowers 1800                   applianceControl@charFinalFrameState 0032  
                                    ___lwdiv@quotient 0026                             _tempRGBReceivedDataBuffer 0320  
                                            ?_sprintf 0028                                             _errorsISR 125C  
                                            ?_strcspn 0027                                              ?_strncpy 0020  
                            __size_of_CCP7_Initialize 000A               applianceControl@dimmerSpeedStringBuffer 003A  
                                      ___wmul@product 0024                                             clear_ram0 1161  
                                         strncpy@from 0020                                              _PIE1bits 0091  
                                         strncpy@size 0021                                              _PIE3bits 0093  
                                            _PIE4bits 0094                     _start_PWM_Generation_For_GreenLed 014A  
                                  _SwitchStatusBuffer 0075                                     ?_applianceControl 002D  
                         hexadecimalToDecimal@dec_val 002C                                              _PIR1bits 0011  
                        __end_of_hexadecimalToDecimal 1800                                              _PIR3bits 0013  
                                            _PIR4bits 0014                              __size_of_TMR5_Initialize 000A  
                                  ??_applianceControl 0033                                    _SwitchStatusString 0062  
                            __size_of_CCP8_Initialize 000A                                     ??_TMR1_Initialize 0020  
                               hexadecimalToDecimal@i 0030                                     ___wmul@multiplier 0020  
                   applicationControlRGB@NeedRedPulse 00B2                 SwitchOnStatustToGatway@SwitchOnNumber 0020  
                 applicationControlRGB@NeedGreenPulse 00B6                         applianceControl@charSwitchLSB 002D  
                       applianceControl@charSwitchMSB 0037                              __size_of_TMR6_Initialize 0009  
                                          ?_errorsISR 0076                              __size_of_CCP9_Initialize 000A  
                     __size_of_copyReceivedDataBuffer 0032                                     ??_TMR2_Initialize 0020  
                                     ??_clearAllPorts 0020                      ??_ReceivingIndicationLedBlinking 0020  
                     ?_ReceivingIndicationLedBlinking 0076                           _mainDataReceiveStringLength 01E4  
                                    __size_of___ftdiv 00A9                                      __size_of___ftmul 00B4  
                                    __size_of___fttol 0087                                     _allPeripheralInit 131C  
                                    __size_of___lwdiv 0035                                              ___awtoft 13B8  
                                            ___ftpack 16A8                                          ??_errorsMain 0022  
                                  _sendAcknowledgment 12E2                                     ??_TMR3_Initialize 0020  
                                            ___lwtoft 1231                                    ?_allPeripheralInit 0076  
                                          sprintf@idx 0033                                            sprintf@val 0035  
                                          strcat@from 0020                                      __size_of_isdigit 000F  
                                     ___lwdiv@divisor 0020                                   ?_sendAcknowledgment 0020  
                                     ___lwdiv@counter 0025                                              __ptext10 12C6  
                                            __ptext11 13DA                                              __ptext20 076E  
                                            __ptext12 08AC                                              __ptext21 095F  
                                            __ptext13 15DE                                              __ptext30 131C  
                                            __ptext22 0803                                              __ptext14 1359  
                                            __ptext31 116D                                              __ptext23 13B8  
                                            __ptext15 128F                                              __ptext40 1176  
                                            __ptext32 119E                                              __ptext24 16A8  
                                            __ptext16 177E                                              __ptext41 11F9  
                                            __ptext33 11B3                                              __ptext25 0A13  
                                            __ptext17 133A                                              __ptext42 15AB  
                                            __ptext34 11BE                                              __ptext26 12E2  
                                            __ptext18 11D9                                              __ptext43 1578  
                                            __ptext35 1194                                              __ptext27 170D  
                                            __ptext19 1231                                              __ptext44 11E8  
                                            __ptext36 11A8                                              __ptext28 11CA  
                                            __ptext45 1402                                              __ptext37 1246  
                                            __ptext29 12AA                                              __ptext46 121C  
                                            __ptext38 118A                                              __ptext47 120A  
                                            __ptext39 1180                                              __ptext49 125C  
                                 ??_allPeripheralInit 0020                       applianceControl@charSwitchSTATE 002E  
     applicationControlRGB@Convert255RangeintoHundred 00DA                               ??_applicationControlRGB 0053  
                                    __size_of_sprintf 00B3                                      __size_of_strcspn 0030  
                                    __size_of_strncpy 002F                                            strcpy@from 0020  
                               main@dataBufferCounter 02D2                                           _partCounter 0138  
                                   ??_TMR4_Initialize 0020                                         __size_of_atoi 0071  
                                       __size_of_main 04EE                                    __end_of_errorsMain 131C  
                                   ??_CCP7_Initialize 0020                                    _currentStateBuffer 03A0  
                                          _RC1STAbits 019D                                  ??_sendAcknowledgment 0022  
                          hexadecimalToDecimal@hexVal 0032                             _IntegerBlueColorIntensity 0070  
                           __end_of_allPeripheralInit 133A                                              int$flags 007E  
                                            atoi@sign 002A                              _IntegerAllColorIntensity 01D2  
                              _copyReceivedDataBuffer 1514                        applicationControlRGB@BluePulse 00AE  
                                   ??_TMR5_Initialize 0020                                _tempReceivedDataBuffer 01A0  
                        __size_of_GPIO_pin_Initialize 002A                                     ??_CCP8_Initialize 0020  
                                  _levelofBlueLed_LSB 016D                                    _levelofBlueLed_MSB 016E  
                                  _switchNumberBuffer 01EA                                        __pstringtext10 186C  
                                      __pstringtext11 0000                                              isdigit@c 0021  
                                _hexadecimalToDecimal 177E                                              memset@p1 0026  
                                         ??_errorsISR 0078                                  _mainDatacopyPosition 014E  
                                            intlevel1 0000                                             sprintf@ap 0034  
                                           sprintf@sp 0038                                             strchr@chr 0022  
                                           strchr@ptr 0020                                     ??_TMR6_Initialize 0020  
                                   __CFG_CLKOUTEN$OFF 0000                   applianceControl@integerSwitchNumber 003C  
                                           strcspn@s1 002D                                             strcspn@s2 0027  
                                   ??_CCP9_Initialize 0020                                             strncpy@cp 0024  
                             ??_sendAcknowledgmentRGB 0022                                             strncpy@to 0025  
                                  _parentalLockBuffer 02C0                                    _StopBitStringbufer 015C  
                                       __pstringtext1 1800                                         __pstringtext2 1823  
                                       __pstringtext3 183E                                         __pstringtext4 184F  
                                       __pstringtext5 1856                                         __pstringtext6 185B  
                                       __pstringtext7 1860                                         __pstringtext8 1865  
                                       __pstringtext9 1869                                              sprintf@c 0039  
                                            sprintf@f 0028                                              strcat@cp 0023  
                                            strcat@to 0024                                              strcmp@s1 0024  
                                            strcmp@s2 0020                                              strcpy@cp 0023  
                                            strlen@cp 0024                                              strcpy@to 0022  
                                            strcspn@i 002B                                         _StopBitString 015D  
                               ?_hexadecimalToDecimal 0026                                              strtok@s1 0033  
                                            strtok@s2 002E                                              strspn@s1 002D  
                                            strspn@s2 0027                                              strtok@sp 005C  
                                          _TX1STAbits 019E                                  _BlueLedSwitchCounter 01D4  
                            ?_SwitchOnStatustToGatway 0020                      _ConvertmaindataReceiveIntoString 0066  
                                 _levelofGreenLed_LSB 0169                                   _levelofGreenLed_MSB 016A  
                  applicationControlRGB@clockPerCycle 00DD                   applicationControlRGB@HexlevelBuffer 00D1  
                                     _TMR1_Initialize 11A8                              _SwitchOffStatustToGatway 1578  
